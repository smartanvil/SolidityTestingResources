Class {
	#name : #SRTF244176246168F24e3187f7288EdbCA29267739b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF244176246168F24e3187f7288EdbCA29267739b >> base64 [
	^ 'LyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KRklMRSBIRUFERVIKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmZpbGU6ICAgICAgIEhhdnZlbi5zb2wKdmVyc2lvbjogICAgMS4wCmF1dGhvcnM6ICAgIEFudG9uIEp1cmlzZXZpYwogICAgICAgICAgICBEb21pbmljIFJvbWFub3dza2kKICAgICAgICAgICAgTWlrZSBTcGFpbgoKZGF0ZTogICAgICAgMjAxOC0wMi0wNQpjaGVja2VkOiAgICBNaWtlIFNwYWluCmFwcHJvdmVkOiAgIFNhbXVlbCBCcm9va3MKCnJlcG86ICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9IYXZ2ZW4vaGF2dmVuCmNvbW1pdDogICAgIDM0ZTY2MDA5Yjk4YWExODk3NjIyNmMxMzkyNzA5NzBkMTA1MDQ1ZTMKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpwcmFnbWEgc29saWRpdHkgXjAuNC4yMTsKCi8qCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkNPTlRSQUNUIERFU0NSSVBUSU9OCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpBIGNvbnRyYWN0IHdpdGggYSBsaW1pdGVkIHNldHVwIHBlcmlvZC4gQW55IGZ1bmN0aW9uIG1vZGlmaWVkCndpdGggdGhlIHNldHVwIG1vZGlmaWVyIHdpbGwgY2Vhc2UgdG8gd29yayBhZnRlciB0aGUKY29uY2x1c2lvbiBvZiB0aGUgY29uZmlndXJhYmxlLWxlbmd0aCBwb3N0LWNvbnN0cnVjdGlvbiBzZXR1cCBwZXJpb2QuCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoqLwoKY29udHJhY3QgTGltaXRlZFNldHVwIHsKCiAgICB1aW50IGNvbnN0cnVjdGlvblRpbWU7CiAgICB1aW50IHNldHVwRHVyYXRpb247CgogICAgZnVuY3Rpb24gTGltaXRlZFNldHVwKHVpbnQgX3NldHVwRHVyYXRpb24pCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgY29uc3RydWN0aW9uVGltZSA9IG5vdzsKICAgICAgICBzZXR1cER1cmF0aW9uID0gX3NldHVwRHVyYXRpb247CiAgICB9CgogICAgbW9kaWZpZXIgc2V0dXBGdW5jdGlvbgogICAgewogICAgICAgIHJlcXVpcmUobm93IDwgY29uc3RydWN0aW9uVGltZSArIHNldHVwRHVyYXRpb24pOwogICAgICAgIF87CiAgICB9Cn0KLyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ09OVFJBQ1QgREVTQ1JJUFRJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkFuIE93bmVkIGNvbnRyYWN0LCB0byBiZSBpbmhlcml0ZWQgYnkgb3RoZXIgY29udHJhY3RzLgpSZXF1aXJlcyBpdHMgb3duZXIgdG8gYmUgZXhwbGljaXRseSBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yLgpQcm92aWRlcyBhbiBvbmx5T3duZXIgYWNjZXNzIG1vZGlmaWVyLgoKVG8gY2hhbmdlIG93bmVyLCB0aGUgY3VycmVudCBvd25lciBtdXN0IG5vbWluYXRlIHRoZSBuZXh0IG93bmVyLAp3aG8gdGhlbiBoYXMgdG8gYWNjZXB0IHRoZSBub21pbmF0aW9uLiBUaGUgbm9taW5hdGlvbiBjYW4gYmUKY2FuY2VsbGVkIGJlZm9yZSBpdCBpcyBhY2NlcHRlZCBieSB0aGUgbmV3IG93bmVyIGJ5IGhhdmluZyB0aGUKcHJldmlvdXMgb3duZXIgY2hhbmdlIHRoZSBub21pbmF0aW9uIChzZXR0aW5nIGl0IHRvIDApLgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKi8KCmNvbnRyYWN0IE93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgbm9taW5hdGVkT3duZXI7CgogICAgZnVuY3Rpb24gT3duZWQoYWRkcmVzcyBfb3duZXIpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgb3duZXIgPSBfb3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gbm9taW5hdGVPd25lcihhZGRyZXNzIF9vd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIG5vbWluYXRlZE93bmVyID0gX293bmVyOwogICAgICAgIGVtaXQgT3duZXJOb21pbmF0ZWQoX293bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5vbWluYXRlZE93bmVyKTsKICAgICAgICBlbWl0IE93bmVyQ2hhbmdlZChvd25lciwgbm9taW5hdGVkT3duZXIpOwogICAgICAgIG93bmVyID0gbm9taW5hdGVkT3duZXI7CiAgICAgICAgbm9taW5hdGVkT3duZXIgPSBhZGRyZXNzKDApOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBldmVudCBPd25lck5vbWluYXRlZChhZGRyZXNzIG5ld093bmVyKTsKICAgIGV2ZW50IE93bmVyQ2hhbmdlZChhZGRyZXNzIG9sZE93bmVyLCBhZGRyZXNzIG5ld093bmVyKTsKfQoKLyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ09OVFJBQ1QgREVTQ1JJUFRJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkEgcHJveHkgY29udHJhY3QgdGhhdCwgaWYgaXQgZG9lcyBub3QgcmVjb2duaXNlIHRoZSBmdW5jdGlvbgpiZWluZyBjYWxsZWQgb24gaXQsIHBhc3NlcyBhbGwgdmFsdWUgYW5kIGNhbGwgZGF0YSB0byBhbgp1bmRlcmx5aW5nIHRhcmdldCBjb250cmFjdC4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBQcm94eSBpcyBPd25lZCB7CiAgICBQcm94eWFibGUgdGFyZ2V0OwoKICAgIGZ1bmN0aW9uIFByb3h5KFByb3h5YWJsZSBfdGFyZ2V0LCBhZGRyZXNzIF9vd25lcikKICAgICAgICBPd25lZChfb3duZXIpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgdGFyZ2V0ID0gX3RhcmdldDsKICAgICAgICBlbWl0IFRhcmdldENoYW5nZWQoX3RhcmdldCk7CiAgICB9CgogICAgZnVuY3Rpb24gX3NldFRhcmdldChhZGRyZXNzIF90YXJnZXQpIAogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHRhcmdldCA9IFByb3h5YWJsZShfdGFyZ2V0KTsKICAgICAgICBlbWl0IFRhcmdldENoYW5nZWQoX3RhcmdldCk7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgewogICAgICAgIHRhcmdldC5zZXRNZXNzYWdlU2VuZGVyKG1zZy5zZW5kZXIpOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy8gQ29weSBjYWxsIGRhdGEgaW50byBmcmVlIG1lbW9yeSByZWdpb24uCiAgICAgICAgICAgIGxldCBmcmVlX3B0ciA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBjYWxsZGF0YWNvcHkoZnJlZV9wdHIsIDAsIGNhbGxkYXRhc2l6ZSkKCiAgICAgICAgICAgIC8vIEZvcndhcmQgYWxsIGdhcywgZXRoZXIsIGFuZCBkYXRhIHRvIHRoZSB0YXJnZXQgY29udHJhY3QuCiAgICAgICAgICAgIGxldCByZXN1bHQgOj0gY2FsbChnYXMsIHNsb2FkKHRhcmdldF9zbG90KSwgY2FsbHZhbHVlLCBmcmVlX3B0ciwgY2FsbGRhdGFzaXplLCAwLCAwKQogICAgICAgICAgICByZXR1cm5kYXRhY29weShmcmVlX3B0ciwgMCwgcmV0dXJuZGF0YXNpemUpCgogICAgICAgICAgICAvLyBSZXZlcnQgaWYgdGhlIGNhbGwgZmFpbGVkLCBvdGhlcndpc2UgcmV0dXJuIHRoZSByZXN1bHQuCiAgICAgICAgICAgIGlmIGlzemVybyhyZXN1bHQpIHsgcmV2ZXJ0KGZyZWVfcHRyLCBjYWxsZGF0YXNpemUpIH0KICAgICAgICAgICAgcmV0dXJuKGZyZWVfcHRyLCByZXR1cm5kYXRhc2l6ZSkKICAgICAgICB9IAogICAgfQoKICAgIGV2ZW50IFRhcmdldENoYW5nZWQoYWRkcmVzcyB0YXJnZXRBZGRyZXNzKTsKfQoKLyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ09OVFJBQ1QgREVTQ1JJUFRJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KClRoaXMgY29udHJhY3QgY29udGFpbnMgdGhlIFByb3h5YWJsZSBpbnRlcmZhY2UuCkFueSBjb250cmFjdCB0aGUgcHJveHkgd3JhcHMgbXVzdCBpbXBsZW1lbnQgdGhpcywgaW4gb3JkZXIKZm9yIHRoZSBwcm94eSB0byBiZSBhYmxlIHRvIHBhc3MgbXNnLnNlbmRlciBpbnRvIHRoZSB1bmRlcmx5aW5nCmNvbnRyYWN0IGFzIHRoZSBzdGF0ZSBwYXJhbWV0ZXIsIG1lc3NhZ2VTZW5kZXIuCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoqLwoKY29udHJhY3QgUHJveHlhYmxlIGlzIE93bmVkIHsKICAgIC8vIHRoZSBwcm94eSB0aGlzIGNvbnRyYWN0IGV4aXN0cyBiZWhpbmQuCiAgICBQcm94eSBwdWJsaWMgcHJveHk7CgogICAgLy8gVGhlIGNhbGxlciBvZiB0aGUgcHJveHksIHBhc3NlZCB0aHJvdWdoIHRvIHRoaXMgY29udHJhY3QuCiAgICAvLyBOb3RlIHRoYXQgZXZlcnkgZnVuY3Rpb24gdXNpbmcgdGhpcyBtZW1iZXIgbXVzdCBhcHBseSB0aGUgb25seVByb3h5IG9yCiAgICAvLyBvcHRpb25hbFByb3h5IG1vZGlmaWVycywgb3RoZXJ3aXNlIHRoZWlyIGludm9jYXRpb25zIGNhbiB1c2Ugc3RhbGUgdmFsdWVzLgogICAgYWRkcmVzcyBtZXNzYWdlU2VuZGVyOwoKICAgIGZ1bmN0aW9uIFByb3h5YWJsZShhZGRyZXNzIF9vd25lcikKICAgICAgICBPd25lZChfb3duZXIpCiAgICAgICAgcHVibGljIHsgfQoKICAgIGZ1bmN0aW9uIHNldFByb3h5KFByb3h5IF9wcm94eSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHByb3h5ID0gX3Byb3h5OwogICAgICAgIGVtaXQgUHJveHlDaGFuZ2VkKF9wcm94eSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWVzc2FnZVNlbmRlcihhZGRyZXNzIHNlbmRlcikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlQcm94eQogICAgewogICAgICAgIG1lc3NhZ2VTZW5kZXIgPSBzZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seVByb3h5CiAgICB7CiAgICAgICAgcmVxdWlyZShQcm94eShtc2cuc2VuZGVyKSA9PSBwcm94eSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXJfUHJveHkKICAgIHsKICAgICAgICByZXF1aXJlKG1lc3NhZ2VTZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb3B0aW9uYWxQcm94eQogICAgewogICAgICAgIGlmIChQcm94eShtc2cuc2VuZGVyKSAhPSBwcm94eSkgewogICAgICAgICAgICBtZXNzYWdlU2VuZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDb21iaW5lIHRoZSBvcHRpb25hbFByb3h5IGFuZCBvbmx5T3duZXJfUHJveHkgbW9kaWZpZXJzLgogICAgLy8gVGhpcyBpcyBzbGlnaHRseSBjaGVhcGVyIGFuZCBzYWZlciwgc2luY2UgdGhlcmUgaXMgYW4gb3JkZXJpbmcgcmVxdWlyZW1lbnQuCiAgICBtb2RpZmllciBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIGlmIChQcm94eShtc2cuc2VuZGVyKSAhPSBwcm94eSkgewogICAgICAgICAgICBtZXNzYWdlU2VuZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShtZXNzYWdlU2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGV2ZW50IFByb3h5Q2hhbmdlZChhZGRyZXNzIHByb3h5QWRkcmVzcyk7Cgp9CgovKgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDT05UUkFDVCBERVNDUklQVElPTgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKQSBmaXhlZCBwb2ludCBkZWNpbWFsIGxpYnJhcnkgdGhhdCBwcm92aWRlcyBiYXNpYyBtYXRoZW1hdGljYWwKb3BlcmF0aW9ucywgYW5kIGNoZWNrcyBmb3IgdW5zYWZlIGFyZ3VtZW50cywgZm9yIGV4YW1wbGUgdGhhdAp3b3VsZCBsZWFkIHRvIG92ZXJmbG93cy4KCkV4Y2VwdGlvbnMgYXJlIHRocm93biB3aGVuZXZlciB0aG9zZSB1bnNhZmUgb3BlcmF0aW9ucwpvY2N1ci4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBTYWZlRGVjaW1hbE1hdGggewoKICAgIC8vIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBpbiB0aGUgcmVwcmVzZW50YXRpb24uCiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICAvLyBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyAxLjAuCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBVTklUID0gMTAgKiogdWludChkZWNpbWFscyk7CgogICAgLyogVHJ1ZSBpZmYgYWRkaW5nIHggYW5kIHkgd2lsbCBub3Qgb3ZlcmZsb3cuICovCiAgICBmdW5jdGlvbiBhZGRJc1NhZmUodWludCB4LCB1aW50IHkpCiAgICAgICAgcHVyZQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4geCArIHkgPj0geTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBhZGRpbmcgeCBhbmQgeSwgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIGluIGNhc2Ugb2Ygb3ZlcmZsb3cuICovCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgeCwgdWludCB5KQogICAgICAgIHB1cmUKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmVxdWlyZSh4ICsgeSA+PSB5KTsKICAgICAgICByZXR1cm4geCArIHk7CiAgICB9CgogICAgLyogVHJ1ZSBpZmYgc3VidHJhY3RpbmcgeSBmcm9tIHggd2lsbCBub3Qgb3ZlcmZsb3cgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbi4gKi8KICAgIGZ1bmN0aW9uIHN1YklzU2FmZSh1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiB5IDw9IHg7CiAgICB9CgogICAgLyogUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3VidHJhY3RpbmcgeSBmcm9tIHgsIHRocm93aW5nIGFuIGV4Y2VwdGlvbiBpbiBjYXNlIG9mIG92ZXJmbG93LiAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJlcXVpcmUoeSA8PSB4KTsKICAgICAgICByZXR1cm4geCAtIHk7CiAgICB9CgogICAgLyogVHJ1ZSBpZmYgbXVsdGlwbHlpbmcgeCBhbmQgeSB3b3VsZCBub3Qgb3ZlcmZsb3cuICovCiAgICBmdW5jdGlvbiBtdWxJc1NhZmUodWludCB4LCB1aW50IHkpCiAgICAgICAgcHVyZQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAoeCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKHggKiB5KSAvIHggPT0geTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBtdWx0aXBseWluZyB4IGFuZCB5LCB0aHJvd2luZyBhbiBleGNlcHRpb24gaW4gY2FzZSBvZiBvdmVyZmxvdy4qLwogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIGlmICh4ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQgcCA9IHggKiB5OwogICAgICAgIHJlcXVpcmUocCAvIHggPT0geSk7CiAgICAgICAgcmV0dXJuIHA7CiAgICB9CgogICAgLyogUmV0dXJuIHRoZSByZXN1bHQgb2YgbXVsdGlwbHlpbmcgeCBhbmQgeSwgaW50ZXJwcmV0aW5nIHRoZSBvcGVyYW5kcyBhcyBmaXhlZC1wb2ludAogICAgICogZGVtaWNpbWFscy4gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBjYXNlIG9mIG92ZXJmbG93LiBBIHVuaXQgZmFjdG9yIGlzIGRpdmlkZWQgb3V0CiAgICAgKiBhZnRlciB0aGUgcHJvZHVjdCBvZiB4IGFuZCB5IGlzIGV2YWx1YXRlZCwgc28gdGhhdCBwcm9kdWN0IG11c3QgYmUgbGVzcyB0aGFuIDIqKjI1Ni4KICAgICAqIAogICAgICogSW5jaWRlbnRhbGx5LCB0aGUgaW50ZXJuYWwgZGl2aXNpb24gYWx3YXlzIHJvdW5kcyBkb3duOiB3ZSBjb3VsZCBoYXZlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciwKICAgICAqIGJ1dCB0aGVuIHdlIHdvdWxkIGJlIHNwZW5kaW5nIGEgc2lnbmlmaWNhbnQgZnJhY3Rpb24gb2YgYSBjZW50IChvZiBvcmRlciBhIG1pY3JvZXRoZXIKICAgICAqIGF0IHByZXNlbnQgZ2FzIHByaWNlcykgaW4gb3JkZXIgdG8gc2F2ZSBsZXNzIHRoYW4gb25lIHBhcnQgaW4gMC41ICogMTBeMTggcGVyIG9wZXJhdGlvbiwgaWYgdGhlIG9wZXJhbmRzCiAgICAgKiBjb250YWluIHNtYWxsIGVub3VnaCBmcmFjdGlvbmFsIGNvbXBvbmVudHMuIEl0IHdvdWxkIGFsc28gbWFyZ2luYWxseSBkaW1pbmlzaCB0aGUgCiAgICAgKiBkb21haW4gdGhpcyBmdW5jdGlvbiBpcyBkZWZpbmVkIHVwb24uIAogICAgICovCiAgICBmdW5jdGlvbiBzYWZlTXVsX2RlYyh1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIC8vIERpdmlkZSBieSBVTklUIHRvIHJlbW92ZSB0aGUgZXh0cmEgZmFjdG9yIGludHJvZHVjZWQgYnkgdGhlIHByb2R1Y3QuCiAgICAgICAgLy8gVU5JVCBiZSAwLgogICAgICAgIHJldHVybiBzYWZlTXVsKHgsIHkpIC8gVU5JVDsKCiAgICB9CgogICAgLyogVHJ1ZSBpZmYgdGhlIGRlbm9taW5hdG9yIG9mIHgveSBpcyBub256ZXJvLiAqLwogICAgZnVuY3Rpb24gZGl2SXNTYWZlKHVpbnQgeCwgdWludCB5KQogICAgICAgIHB1cmUKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHkgIT0gMDsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBkaXZpZGluZyB4IGJ5IHksIHRocm93aW5nIGFuIGV4Y2VwdGlvbiBpZiB0aGUgZGl2aXNvciBpcyB6ZXJvLiAqLwogICAgZnVuY3Rpb24gc2FmZURpdih1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIC8vIEFsdGhvdWdoIGEgMCBkZW5vbWluYXRvciBhbHJlYWR5IHRocm93cyBhbiBleGNlcHRpb24sCiAgICAgICAgLy8gaXQgaXMgZXF1aXZhbGVudCB0byBhIFRIUk9XIG9wZXJhdGlvbiwgd2hpY2ggY29uc3VtZXMgYWxsIGdhcy4KICAgICAgICAvLyBBIHJlcXVpcmUgc3RhdGVtZW50IGVtaXRzIFJFVkVSVCBpbnN0ZWFkLCB3aGljaCByZW1pdHMgcmVtYWluaW5nIGdhcy4KICAgICAgICByZXF1aXJlKHkgIT0gMCk7CiAgICAgICAgcmV0dXJuIHggLyB5OwogICAgfQoKICAgIC8qIFJldHVybiB0aGUgcmVzdWx0IG9mIGRpdmlkaW5nIHggYnkgeSwgaW50ZXJwcmV0aW5nIHRoZSBvcGVyYW5kcyBhcyBmaXhlZCBwb2ludCBkZWNpbWFsIG51bWJlcnMuCiAgICAgKiBUaHJvd3MgYW4gZXhjZXB0aW9uIGluIGNhc2Ugb2Ygb3ZlcmZsb3cgb3IgemVybyBkaXZpc29yOyB4IG11c3QgYmUgbGVzcyB0aGFuIDJeMjU2IC8gVU5JVC4KICAgICAqIEludGVybmFsIHJvdW5kaW5nIGlzIGRvd253YXJkOiBhIHNpbWlsYXIgY2F2ZWF0IGhvbGRzIGFzIHdpdGggc2FmZURlY011bCgpLiovCiAgICBmdW5jdGlvbiBzYWZlRGl2X2RlYyh1aW50IHgsIHVpbnQgeSkKICAgICAgICBwdXJlCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIC8vIFJlaW50cm9kdWNlIHRoZSBVTklUIGZhY3RvciB0aGF0IHdpbGwgYmUgZGl2aWRlZCBvdXQgYnkgeS4KICAgICAgICByZXR1cm4gc2FmZURpdihzYWZlTXVsKHgsIFVOSVQpLCB5KTsKICAgIH0KCiAgICAvKiBDb252ZXJ0IGFuIHVuc2lnbmVkIGludGVnZXIgdG8gYSB1bnNpZ25lZCBmaXhlZC1wb2ludCBkZWNpbWFsLgogICAgICogVGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoZSByZXN1bHQgd291bGQgYmUgb3V0IG9mIHJhbmdlLiAqLwogICAgZnVuY3Rpb24gaW50VG9EZWModWludCBpKQogICAgICAgIHB1cmUKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVNdWwoaSwgVU5JVCk7CiAgICB9Cn0KCi8qCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkNPTlRSQUNUIERFU0NSSVBUSU9OCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpUaGlzIGNvdXJ0IHByb3ZpZGVzIHRoZSBub21pbiBjb250cmFjdCB3aXRoIGEgY29uZmlzY2F0aW9uCmZhY2lsaXR5LCBpZiBlbm91Z2ggaGF2dmVuIG93bmVycyB2b3RlIHRvIGNvbmZpc2NhdGUgYSB0YXJnZXQKYWNjb3VudCdzIG5vbWlucy4KClRoaXMgaXMgZGVzaWduZWQgdG8gcHJvdmlkZSBhIG1lY2hhbmlzbSB0byByZXNwb25kIHRvIGFidXNpdmUKY29udHJhY3RzIHN1Y2ggYXMgbm9taW4gd3JhcHBlcnMsIHdoaWNoIHdvdWxkIGFsbG93IHVzZXJzIHRvCnRyYWRlIHdyYXBwZWQgbm9taW5zIHdpdGhvdXQgYWNjcnVpbmcgZmVlcyBvbiB0aG9zZSB0cmFuc2FjdGlvbnMuCgpJbiBvcmRlciB0byBwcmV2ZW50IHR5cmFubnksIGFuIGFjY291bnQgbWF5IG9ubHkgYmUgZnJvemVuIGlmCnVzZXJzIGNvbnRyb2xsaW5nIGF0IGxlYXN0IDMwJSBvZiB0aGUgdmFsdWUgb2YgaGF2dmVucyBwYXJ0aWNpcGF0ZSwKYW5kIGEgdHdvIHRoaXJkcyBtYWpvcml0eSBpcyBhdHRhaW5lZCBpbiB0aGF0IHZvdGUuCkluIG9yZGVyIHRvIHByZXZlbnQgdHlyYW5ueSBvZiB0aGUgbWFqb3JpdHkgb3IgbW9iIGp1c3RpY2UsCmNvbmZpc2NhdGlvbiBtb3Rpb25zIGFyZSBvbmx5IGFwcHJvdmVkIGlmIHRoZSBoYXZ2ZW4gZm91bmRhdGlvbgphcHByb3ZlcyB0aGUgcmVzdWx0LgpUaGlzIGxhdHRlciByZXF1aXJlbWVudCBtYXkgYmUgbGlmdGVkIGluIGZ1dHVyZSB2ZXJzaW9ucy4KClRoZSBmb3VuZGF0aW9uLCBvciBhbnkgdXNlciB3aXRoIGEgc3VmZmljaWVudCBoYXZ2ZW4gYmFsYW5jZSBtYXkgYnJpbmcgYQpjb25maXNjYXRpb24gbW90aW9uLgpBIG1vdGlvbiBsYXN0cyBmb3IgYSBkZWZhdWx0IHBlcmlvZCBvZiBvbmUgd2Vlaywgd2l0aCBhIGZ1cnRoZXIgY29uZmlybWF0aW9uCnBlcmlvZCBpbiB3aGljaCB0aGUgZm91bmRhdGlvbiBhcHByb3ZlcyB0aGUgcmVzdWx0LgpUaGUgbGF0dGVyIHBlcmlvZCBtYXkgY29uY2x1ZGUgZWFybHkgdXBvbiB0aGUgZm91bmRhdGlvbidzIGRlY2lzaW9uIHRvIGVpdGhlcgp2ZXRvIG9yIGFwcHJvdmUgdGhlIG1vb3RlZCBjb25maXNjYXRpb24gbW90aW9uLgpJZiB0aGUgY29uZmlybWF0aW9uIHBlcmlvZCBlbGFwc2VzIHdpdGhvdXQgdGhlIGZvdW5kYXRpb24gbWFraW5nIGEgZGVjaXNpb24sCnRoZSBtb3Rpb24gZmFpbHMuCgpUaGUgd2VpZ2h0IG9mIGEgaGF2dmVuIGhvbGRlcidzIHZvdGUgaXMgZGV0ZXJtaW5lZCBieSBleGFtaW5pbmcgdGhlaXIKYXZlcmFnZSBiYWxhbmNlIG92ZXIgdGhlIGxhc3QgY29tcGxldGVkIGZlZSBwZXJpb2QgcHJpb3IgdG8gdGhlCmJlZ2lubmluZyBvZiBhIGdpdmVuIG1vdGlvbi4KVGh1cywgc2luY2UgYSBmZWUgcGVyaW9kIGNhbiByb2xsIG92ZXIgaW4gdGhlIG1pZGRsZSBvZiBhIG1vdGlvbiwgd2UgbXVzdAphbHNvIHRyYWNrIGEgdXNlcidzIGF2ZXJhZ2UgYmFsYW5jZSBvZiB0aGUgbGFzdCB0d28gcGVyaW9kcy4KVGhpcyBzeXN0ZW0gaXMgZGVzaWduZWQgc3VjaCB0aGF0IGl0IGNhbm5vdCBiZSBhdHRhY2tlZCBieSB1c2VycyB0cmFuc2ZlcnJpbmcKZnVuZHMgYmV0d2VlbiB0aGVtc2VsdmVzLCB3aGlsZSBhbHNvIG5vdCByZXF1aXJpbmcgdGhlbSB0byBsb2NrIHRoZWlyIGhhdnZlbnMKZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdm90ZS4gVGhpcyBpcyBwb3NzaWJsZSBzaW5jZSBhbnkgdHJhbnNmZXIgdGhhdCBpbmNyZWFzZXMKdGhlIGF2ZXJhZ2UgYmFsYW5jZSBpbiBvbmUgYWNjb3VudCB3aWxsIGJlIHJlZmxlY3RlZCBieSBhbiBlcXVpdmFsZW50IHJlZHVjdGlvbgppbiB0aGUgdm90aW5nIHdlaWdodCBpbiB0aGUgb3RoZXIuCkF0IHByZXNlbnQgYSB1c2VyIG1heSBjYXN0IGEgdm90ZSBvbmx5IGZvciBvbmUgbW90aW9uIGF0IGEgdGltZSwKYnV0IG1heSBjYW5jZWwgdGhlaXIgdm90ZSBhdCBhbnkgdGltZSBleGNlcHQgZHVyaW5nIHRoZSBjb25maXJtYXRpb24gcGVyaW9kLAp3aGVuIHRoZSB2b3RlIHRhbGxpZXMgbXVzdCByZW1haW4gc3RhdGljIHVudGlsIHRoZSBtYXR0ZXIgaGFzIGJlZW4gc2V0dGxlZC4KCkEgbW90aW9uIHRvIGNvbmZpc2NhdGUgdGhlIGJhbGFuY2Ugb2YgYSBnaXZlbiBhZGRyZXNzIGNvbXBvc2VzCmEgc3RhdGUgbWFjaGluZSBidWlsdCBvZiB0aGUgZm9sbG93aW5nIHN0YXRlczoKCgpXYWl0aW5nOgogIC0gQSB1c2VyIHdpdGggc3RhbmRpbmcgYnJpbmdzIGEgbW90aW9uOgogICAgSWYgdGhlIHRhcmdldCBhZGRyZXNzIGlzIG5vdCBmcm96ZW47CiAgICBpbml0aWFsaXNlIHZvdGUgdGFsbGllcyB0byAwOwogICAgdHJhbnNpdGlvbiB0byB0aGUgVm90aW5nIHN0YXRlLgoKICAtIEFuIGFjY291bnQgY2FuY2VscyBhIHByZXZpb3VzIHJlc2lkdWFsIHZvdGU6CiAgICByZW1haW4gaW4gdGhlIFdhaXRpbmcgc3RhdGUuCgpWb3Rpbmc6CiAgLSBUaGUgZm91bmRhdGlvbiB2ZXRvZXMgdGhlIGluLXByb2dyZXNzIG1vdGlvbjoKICAgIHRyYW5zaXRpb24gdG8gdGhlIFdhaXRpbmcgc3RhdGUuCgogIC0gVGhlIHZvdGluZyBwZXJpb2QgZWxhcHNlczoKICAgIHRyYW5zaXRpb24gdG8gdGhlIENvbmZpcm1hdGlvbiBzdGF0ZS4KCiAgLSBBbiBhY2NvdW50IHZvdGVzIChmb3Igb3IgYWdhaW5zdCB0aGUgbW90aW9uKToKICAgIGl0cyB3ZWlnaHQgaXMgYWRkZWQgdG8gdGhlIGFwcHJvcHJpYXRlIHRhbGx5OwogICAgcmVtYWluIGluIHRoZSBWb3Rpbmcgc3RhdGUuCgogIC0gQW4gYWNjb3VudCBjYW5jZWxzIGl0cyBwcmV2aW91cyB2b3RlOgogICAgaXRzIHdlaWdodCBpcyBkZWR1Y3RlZCBmcm9tIHRoZSBhcHByb3ByaWF0ZSB0YWxseSAoaWYgYW55KTsKICAgIHJlbWFpbiBpbiB0aGUgVm90aW5nIHN0YXRlLgoKQ29uZmlybWF0aW9uOgogIC0gVGhlIGZvdW5kYXRpb24gdmV0b2VzIHRoZSBjb21wbGV0ZWQgbW90aW9uOgogICAgdHJhbnNpdGlvbiB0byB0aGUgV2FpdGluZyBzdGF0ZS4KCiAgLSBUaGUgZm91bmRhdGlvbiBhcHByb3ZlcyBjb25maXNjYXRpb24gb2YgdGhlIHRhcmdldCBhY2NvdW50OgogICAgZnJlZXplIHRoZSB0YXJnZXQgYWNjb3VudCwgdHJhbnNmZXIgaXRzIG5vbWluIGJhbGFuY2UgdG8gdGhlIGZlZSBwb29sOwogICAgdHJhbnNpdGlvbiB0byB0aGUgV2FpdGluZyBzdGF0ZS4KCiAgLSBUaGUgY29uZmlybWF0aW9uIHBlcmlvZCBlbGFwc2VzOgogICAgdHJhbnNpdGlvbiB0byB0aGUgV2FpdGluZyBzdGF0ZS4KCgpVc2VyIHZvdGVzIGFyZSBub3QgYXV0b21hdGljYWxseSBjYW5jZWxsZWQgdXBvbiB0aGUgY29uY2x1c2lvbiBvZiBhIG1vdGlvbi4KVGhlcmVmb3JlLCBhZnRlciBhIG1vdGlvbiBjb21lcyB0byBhIGNvbmNsdXNpb24sIGlmIGEgdXNlciB3aXNoZXMgdG8gdm90ZSAKaW4gYW5vdGhlciBtb3Rpb24sIHRoZXkgbXVzdCBtYW51YWxseSBjYW5jZWwgdGhlaXIgdm90ZSBpbiBvcmRlciB0byBkbyBzby4KClRoaXMgcHJvY2VkdXJlIGlzIGRlc2lnbmVkIHRvIGJlIHJlbGF0aXZlbHkgc2ltcGxlLgpUaGVyZSBhcmUgc29tZSB0aGluZ3MgdGhhdCBjYW4gYmUgYWRkZWQgdG8gZW5oYW5jZSB0aGUgZnVuY3Rpb25hbGl0eQphdCB0aGUgZXhwZW5zZSBvZiBzaW1wbGljaXR5IGFuZCBlZmZpY2llbmN5OgogIAogIC0gRGVtb2NyYXRpYyB1bmZyZWV6aW5nIG9mIG5vbWluIGFjY291bnRzIChpbmR1Y2VzIG11bHRpcGxlIGNhdGVnb3JpZXMgb2Ygdm90ZSkKICAtIENvbmZpZ3VyYWJsZSBwZXItdm90ZSBkdXJhdGlvbnM7CiAgLSBWb3RlIHN0YW5kaW5nIGRlbm9taW5hdGVkIGluIGEgZmlhdCBxdWFudGl0eSByYXRoZXIgdGhhbiBhIHF1YW50aXR5IG9mIGhhdnZlbnM7CiAgLSBDb25maXNjYXRlIGZyb20gbXVsdGlwbGUgYWRkcmVzc2VzIGluIGEgc2luZ2xlIHZvdGU7CgpXZSBtaWdodCBjb25zaWRlciB1cGRhdGluZyB0aGUgY29udHJhY3Qgd2l0aCBhbnkgb2YgdGhlc2UgZmVhdHVyZXMgYXQgYSBsYXRlciBkYXRlIGlmIG5lY2Vzc2FyeS4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBDb3VydCBpcyBPd25lZCwgU2FmZURlY2ltYWxNYXRoIHsKCiAgICAvKiA9PT09PT09PT09IFNUQVRFIFZBUklBQkxFUyA9PT09PT09PT09ICovCgogICAgLy8gVGhlIGFkZHJlc3NlcyBvZiB0aGUgdG9rZW4gY29udHJhY3RzIHRoaXMgY29uZmlzY2F0aW9uIGNvdXJ0IGludGVyYWN0cyB3aXRoLgogICAgSGF2dmVuIHB1YmxpYyBoYXZ2ZW47CiAgICBFdGhlck5vbWluIHB1YmxpYyBub21pbjsKCiAgICAvLyBUaGUgbWluaW11bSBoYXZ2ZW4gYmFsYW5jZSByZXF1aXJlZCB0byBiZSBjb25zaWRlcmVkIHRvIGhhdmUgc3RhbmRpbmcKICAgIC8vIHRvIGJlZ2luIGNvbmZpc2NhdGlvbiBwcm9jZWVkaW5ncy4KICAgIHVpbnQgcHVibGljIG1pblN0YW5kaW5nQmFsYW5jZSA9IDEwMCAqIFVOSVQ7CgogICAgLy8gVGhlIHZvdGluZyBwZXJpb2QgbGFzdHMgZm9yIHRoaXMgZHVyYXRpb24sCiAgICAvLyBhbmQgaWYgc2V0LCBtdXN0IGZhbGwgd2l0aGluIHRoZSBnaXZlbiBib3VuZHMuCiAgICB1aW50IHB1YmxpYyB2b3RpbmdQZXJpb2QgPSAxIHdlZWtzOwogICAgdWludCBjb25zdGFudCBNSU5fVk9USU5HX1BFUklPRCA9IDMgZGF5czsKICAgIHVpbnQgY29uc3RhbnQgTUFYX1ZPVElOR19QRVJJT0QgPSA0IHdlZWtzOwoKICAgIC8vIER1cmF0aW9uIG9mIHRoZSBwZXJpb2QgZHVyaW5nIHdoaWNoIHRoZSBmb3VuZGF0aW9uIG1heSBjb25maXJtCiAgICAvLyBvciB2ZXRvIGEgbW90aW9uIHRoYXQgaGFzIGNvbmNsdWRlZC4KICAgIC8vIElmIHNldCwgdGhlIGNvbmZpcm1hdGlvbiBkdXJhdGlvbiBtdXN0IGZhbGwgd2l0aGluIHRoZSBnaXZlbiBib3VuZHMuCiAgICB1aW50IHB1YmxpYyBjb25maXJtYXRpb25QZXJpb2QgPSAxIHdlZWtzOwogICAgdWludCBjb25zdGFudCBNSU5fQ09ORklSTUFUSU9OX1BFUklPRCA9IDEgZGF5czsKICAgIHVpbnQgY29uc3RhbnQgTUFYX0NPTkZJUk1BVElPTl9QRVJJT0QgPSAyIHdlZWtzOwoKICAgIC8vIE5vIGZld2VyIHRoYW4gdGhpcyBmcmFjdGlvbiBvZiBoYXZ2ZW5zIG11c3QgcGFydGljaXBhdGUgaW4gYSBtb3Rpb24KICAgIC8vIGluIG9yZGVyIGZvciBhIHF1b3J1bSB0byBiZSByZWFjaGVkLgogICAgLy8gVGhlIHBhcnRpY2lwYXRpb24gZnJhY3Rpb24gcmVxdWlyZWQgbWF5IGJlIHNldCBubyBsb3dlciB0aGFuIDEwJS4KICAgIHVpbnQgcHVibGljIHJlcXVpcmVkUGFydGljaXBhdGlvbiA9IDMgKiBVTklUIC8gMTA7CiAgICB1aW50IGNvbnN0YW50IE1JTl9SRVFVSVJFRF9QQVJUSUNJUEFUSU9OID0gVU5JVCAvIDEwOwoKICAgIC8vIEF0IGxlYXN0IHRoaXMgZnJhY3Rpb24gb2YgcGFydGljaXBhdGluZyB2b3RlcyBtdXN0IGJlIGluIGZhdm91ciBvZgogICAgLy8gY29uZmlzY2F0aW9uIGZvciB0aGUgbW90aW9uIHRvIHBhc3MuCiAgICAvLyBUaGUgcmVxdWlyZWQgbWFqb3JpdHkgbWF5IGJlIG5vIGxvd2VyIHRoYW4gNTAlLgogICAgdWludCBwdWJsaWMgcmVxdWlyZWRNYWpvcml0eSA9ICgyICogVU5JVCkgLyAzOwogICAgdWludCBjb25zdGFudCBNSU5fUkVRVUlSRURfTUFKT1JJVFkgPSBVTklUIC8gMjsKCiAgICAvLyBUaGUgbmV4dCBJRCB0byB1c2UgZm9yIG9wZW5pbmcgYSBtb3Rpb24uCiAgICB1aW50IG5leHRNb3Rpb25JRCA9IDE7CgogICAgLy8gTWFwcGluZyBmcm9tIG1vdGlvbiBJRHMgdG8gdGFyZ2V0IGFkZHJlc3Nlcy4KICAgIG1hcHBpbmcodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgbW90aW9uVGFyZ2V0OwoKICAgIC8vIFRoZSBJRCBhIG1vdGlvbiBvbiBhbiBhZGRyZXNzIGlzIGN1cnJlbnRseSBvcGVyYXRpbmcgYXQuCiAgICAvLyBaZXJvIGlmIG5vIHN1Y2ggbW90aW9uIGlzIHJ1bm5pbmcuCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRhcmdldE1vdGlvbklEOwoKICAgIC8vIFRoZSB0aW1lc3RhbXAgYXQgd2hpY2ggYSBtb3Rpb24gYmVnYW4uIFRoaXMgaXMgdXNlZCB0byBkZXRlcm1pbmUKICAgIC8vIHdoZXRoZXIgYSBtb3Rpb24gaXM6IHJ1bm5pbmcsIGluIHRoZSBjb25maXJtYXRpb24gcGVyaW9kLAogICAgLy8gb3IgaGFzIGNvbmNsdWRlZC4KICAgIC8vIEEgbW90aW9uIHJ1bnMgZnJvbSBpdHMgc3RhcnQgdGltZSB0IHVudGlsICh0ICsgdm90aW5nUGVyaW9kKSwKICAgIC8vIGFuZCB0aGVuIHRoZSBjb25maXJtYXRpb24gcGVyaW9kIHRlcm1pbmF0ZXMgbm8gbGF0ZXIgdGhhbgogICAgLy8gKHQgKyB2b3RpbmdQZXJpb2QgKyBjb25maXJtYXRpb25QZXJpb2QpLgogICAgbWFwcGluZyh1aW50ID0+IHVpbnQpIHB1YmxpYyBtb3Rpb25TdGFydFRpbWU7CgogICAgLy8gVGhlIHRhbGxpZXMgZm9yIGFuZCBhZ2FpbnN0IGNvbmZpc2NhdGlvbiBvZiBhIGdpdmVuIGJhbGFuY2UuCiAgICAvLyBUaGVzZSBhcmUgc2V0IHRvIHplcm8gYXQgdGhlIHN0YXJ0IG9mIGEgbW90aW9uLCBhbmQgYWxzbyBvbiBjb25jbHVzaW9uLAogICAgLy8ganVzdCB0byBrZWVwIHRoZSBzdGF0ZSBjbGVhbi4KICAgIG1hcHBpbmcodWludCA9PiB1aW50KSBwdWJsaWMgdm90ZXNGb3I7CiAgICBtYXBwaW5nKHVpbnQgPT4gdWludCkgcHVibGljIHZvdGVzQWdhaW5zdDsKCiAgICAvLyBUaGUgbGFzdC9wZW51bHRpbWF0ZSBhdmVyYWdlIGJhbGFuY2Ugb2YgYSB1c2VyIGF0IHRoZSB0aW1lIHRoZXkgdm90ZWQKICAgIC8vIGluIGEgcGFydGljdWxhciBtb3Rpb24uCiAgICAvLyBJZiB3ZSBkaWQgbm90IHNhdmUgdGhpcyBpbmZvcm1hdGlvbiB0aGVuIHdlIHdvdWxkIGhhdmUgdG8KICAgIC8vIGRpc2FsbG93IHRyYW5zZmVycyBpbnRvIGFuIGFjY291bnQgbGVzdCBpdCBjYW5jZWwgYSB2b3RlCiAgICAvLyB3aXRoIGdyZWF0ZXIgd2VpZ2h0IHRoYW4gdGhhdCB3aXRoIHdoaWNoIGl0IG9yaWdpbmFsbHkgdm90ZWQsCiAgICAvLyBhbmQgdGhlIGZlZSBwZXJpb2Qgcm9sbGVkIG92ZXIgaW4gYmV0d2Vlbi4KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKHVpbnQgPT4gdWludCkpIHZvdGVXZWlnaHQ7CgogICAgLy8gVGhlIHBvc3NpYmxlIHZvdGUgdHlwZXMuCiAgICAvLyBBYnN0ZW50aW9uOiBub3QgcGFydGljaXBhdGluZyBpbiBhIG1vdGlvbjsgVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS4KICAgIC8vIFllYTogdm90aW5nIGluIGZhdm91ciBvZiBhIG1vdGlvbi4KICAgIC8vIE5heTogdm90aW5nIGFnYWluc3QgYSBtb3Rpb24uCiAgICBlbnVtIFZvdGUge0Fic3RlbnRpb24sIFllYSwgTmF5fQoKICAgIC8vIEEgZ2l2ZW4gYWNjb3VudCdzIHZvdGUgaW4gc29tZSBjb25maXNjYXRpb24gbW90aW9uLgogICAgLy8gVGhpcyByZXF1aXJlcyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgVm90ZSBlbnVtIHRvIGNvcnJlc3BvbmQgdG8gYW4gYWJzdGVudGlvbi4KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKHVpbnQgPT4gVm90ZSkpIHB1YmxpYyB2b3RlOwoKICAgIC8qID09PT09PT09PT0gQ09OU1RSVUNUT1IgPT09PT09PT09PSAqLwoKICAgIGZ1bmN0aW9uIENvdXJ0KEhhdnZlbiBfaGF2dmVuLCBFdGhlck5vbWluIF9ub21pbiwgYWRkcmVzcyBfb3duZXIpCiAgICAgICAgT3duZWQoX293bmVyKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGhhdnZlbiA9IF9oYXZ2ZW47CiAgICAgICAgbm9taW4gPSBfbm9taW47CiAgICB9CgoKICAgIC8qID09PT09PT09PT0gU0VUVEVSUyA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gc2V0TWluU3RhbmRpbmdCYWxhbmNlKHVpbnQgYmFsYW5jZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIC8vIE5vIHJlcXVpcmVtZW50IG9uIHRoZSBzdGFuZGluZyB0aHJlc2hvbGQgaGVyZTsKICAgICAgICAvLyB0aGUgZm91bmRhdGlvbiBjYW4gc2V0IHRoaXMgdmFsdWUgc3VjaCB0aGF0CiAgICAgICAgLy8gYW55b25lIG9yIG5vIG9uZSBjYW4gYWN0dWFsbHkgc3RhcnQgYSBtb3Rpb24uCiAgICAgICAgbWluU3RhbmRpbmdCYWxhbmNlID0gYmFsYW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWb3RpbmdQZXJpb2QodWludCBkdXJhdGlvbikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUoTUlOX1ZPVElOR19QRVJJT0QgPD0gZHVyYXRpb24gJiYKICAgICAgICAgICAgICAgIGR1cmF0aW9uIDw9IE1BWF9WT1RJTkdfUEVSSU9EKTsKICAgICAgICAvLyBSZXF1aXJlIHRoYXQgdGhlIHZvdGluZyBwZXJpb2QgaXMgbm8gbG9uZ2VyIHRoYW4gYSBzaW5nbGUgZmVlIHBlcmlvZCwKICAgICAgICAvLyBTbyB0aGF0IGEgc2luZ2xlIHZvdGUgY2FuIHNwYW4gYXQgbW9zdCB0d28gZmVlIHBlcmlvZHMuCiAgICAgICAgcmVxdWlyZShkdXJhdGlvbiA8PSBoYXZ2ZW4udGFyZ2V0RmVlUGVyaW9kRHVyYXRpb25TZWNvbmRzKCkpOwogICAgICAgIHZvdGluZ1BlcmlvZCA9IGR1cmF0aW9uOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENvbmZpcm1hdGlvblBlcmlvZCh1aW50IGR1cmF0aW9uKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShNSU5fQ09ORklSTUFUSU9OX1BFUklPRCA8PSBkdXJhdGlvbiAmJgogICAgICAgICAgICAgICAgZHVyYXRpb24gPD0gTUFYX0NPTkZJUk1BVElPTl9QRVJJT0QpOwogICAgICAgIGNvbmZpcm1hdGlvblBlcmlvZCA9IGR1cmF0aW9uOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJlcXVpcmVkUGFydGljaXBhdGlvbih1aW50IGZyYWN0aW9uKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShNSU5fUkVRVUlSRURfUEFSVElDSVBBVElPTiA8PSBmcmFjdGlvbik7CiAgICAgICAgcmVxdWlyZWRQYXJ0aWNpcGF0aW9uID0gZnJhY3Rpb247CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UmVxdWlyZWRNYWpvcml0eSh1aW50IGZyYWN0aW9uKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShNSU5fUkVRVUlSRURfTUFKT1JJVFkgPD0gZnJhY3Rpb24pOwogICAgICAgIHJlcXVpcmVkTWFqb3JpdHkgPSBmcmFjdGlvbjsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBWSUVXIEZVTkNUSU9OUyA9PT09PT09PT09ICovCgogICAgLyogVGhlcmUgaXMgYSBtb3Rpb24gaW4gcHJvZ3Jlc3Mgb24gdGhlIHNwZWNpZmllZAogICAgICogYWNjb3VudCwgYW5kIHZvdGVzIGFyZSBiZWluZyBhY2NlcHRlZCBpbiB0aGF0IG1vdGlvbi4gKi8KICAgIGZ1bmN0aW9uIG1vdGlvblZvdGluZyh1aW50IG1vdGlvbklEKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgKHN0YXJ0VGltZSA8IG5vdykgYXMgdGhlcmUgaXMgbm8gd2F5CiAgICAgICAgLy8gdG8gc2V0IGZ1dHVyZSBzdGFydCB0aW1lcyBmb3Igdm90ZXMuCiAgICAgICAgLy8gVGhlc2UgdmFsdWVzIGFyZSB0aW1lc3RhbXBzLCB0aGV5IHdpbGwgbm90IG92ZXJmbG93CiAgICAgICAgLy8gYXMgdGhleSBjYW4gb25seSBldmVyIGJlIGluaXRpYWxpc2VkIHRvIHJlbGF0aXZlbHkgc21hbGwgdmFsdWVzLgogICAgICAgIHJldHVybiBub3cgPCBtb3Rpb25TdGFydFRpbWVbbW90aW9uSURdICsgdm90aW5nUGVyaW9kOwogICAgfQoKICAgIC8qIEEgdm90ZSBvbiB0aGUgdGFyZ2V0IGFjY291bnQgaGFzIGNvbmNsdWRlZCwgYnV0IHRoZSBtb3Rpb24KICAgICAqIGhhcyBub3QgeWV0IGJlZW4gYXBwcm92ZWQsIHZldG9lZCwgb3IgY2xvc2VkLiAqLwogICAgZnVuY3Rpb24gbW90aW9uQ29uZmlybWluZyh1aW50IG1vdGlvbklEKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIC8vIFRoZXNlIHZhbHVlcyBhcmUgdGltZXN0YW1wcywgdGhleSB3aWxsIG5vdCBvdmVyZmxvdwogICAgICAgIC8vIGFzIHRoZXkgY2FuIG9ubHkgZXZlciBiZSBpbml0aWFsaXNlZCB0byByZWxhdGl2ZWx5IHNtYWxsIHZhbHVlcy4KICAgICAgICB1aW50IHN0YXJ0VGltZSA9IG1vdGlvblN0YXJ0VGltZVttb3Rpb25JRF07CiAgICAgICAgcmV0dXJuIHN0YXJ0VGltZSArIHZvdGluZ1BlcmlvZCA8PSBub3cgJiYKICAgICAgICAgICAgICAgbm93IDwgc3RhcnRUaW1lICsgdm90aW5nUGVyaW9kICsgY29uZmlybWF0aW9uUGVyaW9kOwogICAgfQoKICAgIC8qIEEgdm90ZSBtb3Rpb24gZWl0aGVyIG5vdCBiZWd1biwgb3IgaXQgaGFzIGNvbXBsZXRlbHkgdGVybWluYXRlZC4gKi8KICAgIGZ1bmN0aW9uIG1vdGlvbldhaXRpbmcodWludCBtb3Rpb25JRCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICAvLyBUaGVzZSB2YWx1ZXMgYXJlIHRpbWVzdGFtcHMsIHRoZXkgd2lsbCBub3Qgb3ZlcmZsb3cKICAgICAgICAvLyBhcyB0aGV5IGNhbiBvbmx5IGV2ZXIgYmUgaW5pdGlhbGlzZWQgdG8gcmVsYXRpdmVseSBzbWFsbCB2YWx1ZXMuCiAgICAgICAgcmV0dXJuIG1vdGlvblN0YXJ0VGltZVttb3Rpb25JRF0gKyB2b3RpbmdQZXJpb2QgKyBjb25maXJtYXRpb25QZXJpb2QgPD0gbm93OwogICAgfQoKICAgIC8qIElmIHRoZSBtb3Rpb24gd2FzIHRvIHRlcm1pbmF0ZSBhdCB0aGlzIGluc3RhbnQsIGl0IHdvdWxkIHBhc3MuCiAgICAgKiBUaGF0IGlzOiB0aGVyZSB3YXMgc3VmZmljaWVudCBwYXJ0aWNpcGF0aW9uIGFuZCBhIHNpemVhYmxlIGVub3VnaCBtYWpvcml0eS4gKi8KICAgIGZ1bmN0aW9uIG1vdGlvblBhc3Nlcyh1aW50IG1vdGlvbklEKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHVpbnQgeWVhcyA9IHZvdGVzRm9yW21vdGlvbklEXTsKICAgICAgICB1aW50IG5heXMgPSB2b3Rlc0FnYWluc3RbbW90aW9uSURdOwogICAgICAgIHVpbnQgdG90YWxWb3RlcyA9IHNhZmVBZGQoeWVhcywgbmF5cyk7CgogICAgICAgIGlmICh0b3RhbFZvdGVzID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdWludCBwYXJ0aWNpcGF0aW9uID0gc2FmZURpdl9kZWModG90YWxWb3RlcywgaGF2dmVuLnRvdGFsU3VwcGx5KCkpOwogICAgICAgIHVpbnQgZnJhY3Rpb25JbkZhdm91ciA9IHNhZmVEaXZfZGVjKHllYXMsIHRvdGFsVm90ZXMpOwoKICAgICAgICAvLyBXZSByZXF1aXJlIHRoZSByZXN1bHQgdG8gYmUgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIHRoZSByZXF1aXJlbWVudAogICAgICAgIC8vIHRvIGVuZm9yY2UgYSBtYWpvcml0eSBiZWluZyAiNTAlICsgMSIsIGFuZCBzbyBvbi4KICAgICAgICByZXR1cm4gcGFydGljaXBhdGlvbiA+IHJlcXVpcmVkUGFydGljaXBhdGlvbiAmJgogICAgICAgICAgICAgICBmcmFjdGlvbkluRmF2b3VyID4gcmVxdWlyZWRNYWpvcml0eTsKICAgIH0KCiAgICBmdW5jdGlvbiBoYXNWb3RlZChhZGRyZXNzIGFjY291bnQsIHVpbnQgbW90aW9uSUQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHZvdGVbYWNjb3VudF1bbW90aW9uSURdICE9IFZvdGUuQWJzdGVudGlvbjsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBNVVRBVElWRSBGVU5DVElPTlMgPT09PT09PT09PSAqLwoKICAgIC8qIEJlZ2luIGEgbW90aW9uIHRvIGNvbmZpc2NhdGUgdGhlIGZ1bmRzIGluIGEgZ2l2ZW4gbm9taW4gYWNjb3VudC4KICAgICAqIE9ubHkgdGhlIGZvdW5kYXRpb24sIG9yIGFjY291bnRzIHdpdGggc3VmZmljaWVudCBoYXZ2ZW4gYmFsYW5jZXMKICAgICAqIG1heSBlbGVjdCB0byBzdGFydCBzdWNoIGEgbW90aW9uLgogICAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIG1vdGlvbiB0aGF0IHdhcyBiZWd1bi4gKi8KICAgIGZ1bmN0aW9uIGJlZ2luTW90aW9uKGFkZHJlc3MgdGFyZ2V0KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICAvLyBBIGNvbmZpc2NhdGlvbiBtb3Rpb24gbXVzdCBiZSBtb290ZWQgYnkgc29tZW9uZSB3aXRoIHN0YW5kaW5nLgogICAgICAgIHJlcXVpcmUoKGhhdnZlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gbWluU3RhbmRpbmdCYWxhbmNlKSB8fAogICAgICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgICAgIC8vIFJlcXVpcmUgdGhhdCB0aGUgdm90aW5nIHBlcmlvZCBpcyBsb25nZXIgdGhhbiBhIHNpbmdsZSBmZWUgcGVyaW9kLAogICAgICAgIC8vIFNvIHRoYXQgYSBzaW5nbGUgdm90ZSBjYW4gc3BhbiBhdCBtb3N0IHR3byBmZWUgcGVyaW9kcy4KICAgICAgICByZXF1aXJlKHZvdGluZ1BlcmlvZCA8PSBoYXZ2ZW4udGFyZ2V0RmVlUGVyaW9kRHVyYXRpb25TZWNvbmRzKCkpOwoKICAgICAgICAvLyBUaGVyZSBtdXN0IGJlIG5vIGNvbmZpc2NhdGlvbiBtb3Rpb24gYWxyZWFkeSBydW5uaW5nIGZvciB0aGlzIGFjY291bnQuCiAgICAgICAgcmVxdWlyZSh0YXJnZXRNb3Rpb25JRFt0YXJnZXRdID09IDApOwoKICAgICAgICAvLyBEaXNhbGxvdyB2b3RlcyBvbiBhY2NvdW50cyB0aGF0IGhhdmUgcHJldmlvdXNseSBiZWVuIGZyb3plbi4KICAgICAgICByZXF1aXJlKCFub21pbi5mcm96ZW4odGFyZ2V0KSk7CgogICAgICAgIHVpbnQgbW90aW9uSUQgPSBuZXh0TW90aW9uSUQrKzsKICAgICAgICBtb3Rpb25UYXJnZXRbbW90aW9uSURdID0gdGFyZ2V0OwogICAgICAgIHRhcmdldE1vdGlvbklEW3RhcmdldF0gPSBtb3Rpb25JRDsKCiAgICAgICAgbW90aW9uU3RhcnRUaW1lW21vdGlvbklEXSA9IG5vdzsKICAgICAgICBlbWl0IE1vdGlvbkJlZ3VuKG1zZy5zZW5kZXIsIG1zZy5zZW5kZXIsIHRhcmdldCwgdGFyZ2V0LCBtb3Rpb25JRCwgbW90aW9uSUQpOwoKICAgICAgICByZXR1cm4gbW90aW9uSUQ7CiAgICB9CgogICAgLyogU2hhcmVkIHZvdGUgc2V0dXAgZnVuY3Rpb24gYmV0d2VlbiB2b3RlRm9yIGFuZCB2b3RlQWdhaW5zdC4KICAgICAqIFJldHVybnMgdGhlIHZvdGVyJ3Mgdm90ZSB3ZWlnaHQuICovCiAgICBmdW5jdGlvbiBzZXR1cFZvdGUodWludCBtb3Rpb25JRCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgLy8gVGhlcmUgbXVzdCBiZSBhbiBhY3RpdmUgdm90ZSBmb3IgdGhpcyB0YXJnZXQgcnVubmluZy4KICAgICAgICAvLyBWb3RlIHRvdGFscyBtdXN0IG9ubHkgY2hhbmdlIGR1cmluZyB0aGUgdm90aW5nIHBoYXNlLgogICAgICAgIHJlcXVpcmUobW90aW9uVm90aW5nKG1vdGlvbklEKSk7CgogICAgICAgIC8vIFRoZSB2b3RlciBtdXN0IG5vdCBoYXZlIGFuIGFjdGl2ZSB2b3RlIHRoaXMgbW90aW9uLgogICAgICAgIHJlcXVpcmUoIWhhc1ZvdGVkKG1zZy5zZW5kZXIsIG1vdGlvbklEKSk7CgogICAgICAgIC8vIFRoZSB2b3RlciBtYXkgbm90IGNhc3Qgdm90ZXMgb24gdGhlbXNlbHZlcy4KICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gbW90aW9uVGFyZ2V0W21vdGlvbklEXSk7CgogICAgICAgIC8vIEVuc3VyZSB0aGUgdm90ZXIncyB2b3RlIHdlaWdodCBpcyBjdXJyZW50LgogICAgICAgIGhhdnZlbi5yZWNvbXB1dGVBY2NvdW50TGFzdEF2ZXJhZ2VCYWxhbmNlKG1zZy5zZW5kZXIpOwoKICAgICAgICB1aW50IHdlaWdodDsKICAgICAgICAvLyBXZSB1c2UgYSBmZWUgcGVyaW9kIGd1YXJhbnRlZWQgdG8gaGF2ZSB0ZXJtaW5hdGVkIGJlZm9yZQogICAgICAgIC8vIHRoZSBzdGFydCBvZiB0aGUgdm90ZS4gU2VsZWN0IHRoZSByaWdodCBwZXJpb2QgaWYKICAgICAgICAvLyBhIGZlZSBwZXJpb2Qgcm9sbHMgb3ZlciBpbiB0aGUgbWlkZGxlIG9mIHRoZSB2b3RlLgogICAgICAgIGlmIChtb3Rpb25TdGFydFRpbWVbbW90aW9uSURdIDwgaGF2dmVuLmZlZVBlcmlvZFN0YXJ0VGltZSgpKSB7CiAgICAgICAgICAgIHdlaWdodCA9IGhhdnZlbi5wZW51bHRpbWF0ZUF2ZXJhZ2VCYWxhbmNlKG1zZy5zZW5kZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdlaWdodCA9IGhhdnZlbi5sYXN0QXZlcmFnZUJhbGFuY2UobXNnLnNlbmRlcik7CiAgICAgICAgfQoKICAgICAgICAvLyBVc2VycyBtdXN0IGhhdmUgYSBub256ZXJvIHZvdGluZyB3ZWlnaHQgdG8gdm90ZS4KICAgICAgICByZXF1aXJlKHdlaWdodCA+IDApOwoKICAgICAgICB2b3RlV2VpZ2h0W21zZy5zZW5kZXJdW21vdGlvbklEXSA9IHdlaWdodDsKCiAgICAgICAgcmV0dXJuIHdlaWdodDsKICAgIH0KCiAgICAvKiBUaGUgc2VuZGVyIGNhc3RzIGEgdm90ZSBpbiBmYXZvdXIgb2YgY29uZmlzY2F0aW9uIG9mIHRoZQogICAgICogdGFyZ2V0IGFjY291bnQncyBub21pbiBiYWxhbmNlLiAqLwogICAgZnVuY3Rpb24gdm90ZUZvcih1aW50IG1vdGlvbklEKQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgdWludCB3ZWlnaHQgPSBzZXR1cFZvdGUobW90aW9uSUQpOwogICAgICAgIHZvdGVbbXNnLnNlbmRlcl1bbW90aW9uSURdID0gVm90ZS5ZZWE7CiAgICAgICAgdm90ZXNGb3JbbW90aW9uSURdID0gc2FmZUFkZCh2b3Rlc0Zvclttb3Rpb25JRF0sIHdlaWdodCk7CiAgICAgICAgZW1pdCBWb3RlZEZvcihtc2cuc2VuZGVyLCBtc2cuc2VuZGVyLCBtb3Rpb25JRCwgbW90aW9uSUQsIHdlaWdodCk7CiAgICB9CgogICAgLyogVGhlIHNlbmRlciBjYXN0cyBhIHZvdGUgYWdhaW5zdCBjb25maXNjYXRpb24gb2YgdGhlCiAgICAgKiB0YXJnZXQgYWNjb3VudCdzIG5vbWluIGJhbGFuY2UuICovCiAgICBmdW5jdGlvbiB2b3RlQWdhaW5zdCh1aW50IG1vdGlvbklEKQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgdWludCB3ZWlnaHQgPSBzZXR1cFZvdGUobW90aW9uSUQpOwogICAgICAgIHZvdGVbbXNnLnNlbmRlcl1bbW90aW9uSURdID0gVm90ZS5OYXk7CiAgICAgICAgdm90ZXNBZ2FpbnN0W21vdGlvbklEXSA9IHNhZmVBZGQodm90ZXNBZ2FpbnN0W21vdGlvbklEXSwgd2VpZ2h0KTsKICAgICAgICBlbWl0IFZvdGVkQWdhaW5zdChtc2cuc2VuZGVyLCBtc2cuc2VuZGVyLCBtb3Rpb25JRCwgbW90aW9uSUQsIHdlaWdodCk7CiAgICB9CgogICAgLyogQ2FuY2VsIGFuIGV4aXN0aW5nIHZvdGUgYnkgdGhlIHNlbmRlciBvbiBhIG1vdGlvbgogICAgICogdG8gY29uZmlzY2F0ZSB0aGUgdGFyZ2V0IGJhbGFuY2UuICovCiAgICBmdW5jdGlvbiBjYW5jZWxWb3RlKHVpbnQgbW90aW9uSUQpCiAgICAgICAgZXh0ZXJuYWwKICAgIHsKICAgICAgICAvLyBBbiBhY2NvdW50IG1heSBjYW5jZWwgaXRzIHZvdGUgZWl0aGVyIGJlZm9yZSB0aGUgY29uZmlybWF0aW9uIHBoYXNlCiAgICAgICAgLy8gd2hlbiB0aGUgbW90aW9uIGlzIHN0aWxsIG9wZW4sIG9yIGFmdGVyIHRoZSBjb25maXJtYXRpb24gcGhhc2UsCiAgICAgICAgLy8gd2hlbiB0aGUgbW90aW9uIGhhcyBjb25jbHVkZWQuCiAgICAgICAgLy8gQnV0IHRoZSB0b3RhbHMgbXVzdCBub3QgY2hhbmdlIGR1cmluZyB0aGUgY29uZmlybWF0aW9uIHBoYXNlIGl0c2VsZi4KICAgICAgICByZXF1aXJlKCFtb3Rpb25Db25maXJtaW5nKG1vdGlvbklEKSk7CgogICAgICAgIFZvdGUgc2VuZGVyVm90ZSA9IHZvdGVbbXNnLnNlbmRlcl1bbW90aW9uSURdOwoKICAgICAgICAvLyBJZiB0aGUgc2VuZGVyIGhhcyBub3Qgdm90ZWQgdGhlbiB0aGVyZSBpcyBubyBuZWVkIHRvIHVwZGF0ZSBhbnl0aGluZy4KICAgICAgICByZXF1aXJlKHNlbmRlclZvdGUgIT0gVm90ZS5BYnN0ZW50aW9uKTsKCiAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCB2b3RpbmcsIHRoZXJlIGlzIG5vIHJlYXNvbiB0byB1cGRhdGUgdGhlIHZvdGUgdG90YWxzLgogICAgICAgIGlmIChtb3Rpb25Wb3RpbmcobW90aW9uSUQpKSB7CiAgICAgICAgICAgIGlmIChzZW5kZXJWb3RlID09IFZvdGUuWWVhKSB7CiAgICAgICAgICAgICAgICB2b3Rlc0Zvclttb3Rpb25JRF0gPSBzYWZlU3ViKHZvdGVzRm9yW21vdGlvbklEXSwgdm90ZVdlaWdodFttc2cuc2VuZGVyXVttb3Rpb25JRF0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UgYWxyZWFkeSBlbnN1cmVkIHRoYXQgdGhlIHZvdGUgaXMgbm90IGFuIGFic3RlbnRpb24sCiAgICAgICAgICAgICAgICAvLyB0aGUgb25seSBvcHRpb24gcmVtYWluaW5nIGlzIFZvdGUuTmF5LgogICAgICAgICAgICAgICAgdm90ZXNBZ2FpbnN0W21vdGlvbklEXSA9IHNhZmVTdWIodm90ZXNBZ2FpbnN0W21vdGlvbklEXSwgdm90ZVdlaWdodFttc2cuc2VuZGVyXVttb3Rpb25JRF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEEgY2FuY2VsbGVkIHZvdGUgaXMgb25seSBtZWFuaW5nZnVsIGlmIGEgdm90ZSBpcyBydW5uaW5nCiAgICAgICAgICAgIGVtaXQgVm90ZUNhbmNlbGxlZChtc2cuc2VuZGVyLCBtc2cuc2VuZGVyLCBtb3Rpb25JRCwgbW90aW9uSUQpOwogICAgICAgIH0KCiAgICAgICAgZGVsZXRlIHZvdGVXZWlnaHRbbXNnLnNlbmRlcl1bbW90aW9uSURdOwogICAgICAgIGRlbGV0ZSB2b3RlW21zZy5zZW5kZXJdW21vdGlvbklEXTsKICAgIH0KCiAgICBmdW5jdGlvbiBfY2xvc2VNb3Rpb24odWludCBtb3Rpb25JRCkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIGRlbGV0ZSB0YXJnZXRNb3Rpb25JRFttb3Rpb25UYXJnZXRbbW90aW9uSURdXTsKICAgICAgICBkZWxldGUgbW90aW9uVGFyZ2V0W21vdGlvbklEXTsKICAgICAgICBkZWxldGUgbW90aW9uU3RhcnRUaW1lW21vdGlvbklEXTsKICAgICAgICBkZWxldGUgdm90ZXNGb3JbbW90aW9uSURdOwogICAgICAgIGRlbGV0ZSB2b3Rlc0FnYWluc3RbbW90aW9uSURdOwogICAgICAgIGVtaXQgTW90aW9uQ2xvc2VkKG1vdGlvbklELCBtb3Rpb25JRCk7CiAgICB9CgogICAgLyogSWYgYSBtb3Rpb24gaGFzIGNvbmNsdWRlZCwgb3IgaWYgaXQgbGFzdGVkIGl0cyBmdWxsIGR1cmF0aW9uIGJ1dCBub3QgcGFzc2VkLAogICAgICogdGhlbiBhbnlvbmUgbWF5IGNsb3NlIGl0LiAqLwogICAgZnVuY3Rpb24gY2xvc2VNb3Rpb24odWludCBtb3Rpb25JRCkKICAgICAgICBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUoKG1vdGlvbkNvbmZpcm1pbmcobW90aW9uSUQpICYmICFtb3Rpb25QYXNzZXMobW90aW9uSUQpKSB8fCBtb3Rpb25XYWl0aW5nKG1vdGlvbklEKSk7CiAgICAgICAgX2Nsb3NlTW90aW9uKG1vdGlvbklEKTsKICAgIH0KCiAgICAvKiBUaGUgZm91bmRhdGlvbiBtYXkgb25seSBjb25maXNjYXRlIGEgYmFsYW5jZSBkdXJpbmcgdGhlIGNvbmZpcm1hdGlvbgogICAgICogcGVyaW9kIGFmdGVyIGEgbW90aW9uIGhhcyBwYXNzZWQuICovCiAgICBmdW5jdGlvbiBhcHByb3ZlTW90aW9uKHVpbnQgbW90aW9uSUQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICByZXF1aXJlKG1vdGlvbkNvbmZpcm1pbmcobW90aW9uSUQpICYmIG1vdGlvblBhc3Nlcyhtb3Rpb25JRCkpOwogICAgICAgIGFkZHJlc3MgdGFyZ2V0ID0gbW90aW9uVGFyZ2V0W21vdGlvbklEXTsKICAgICAgICBub21pbi5jb25maXNjYXRlQmFsYW5jZSh0YXJnZXQpOwogICAgICAgIF9jbG9zZU1vdGlvbihtb3Rpb25JRCk7CiAgICAgICAgZW1pdCBNb3Rpb25BcHByb3ZlZChtb3Rpb25JRCwgbW90aW9uSUQpOwogICAgfQoKICAgIC8qIFRoZSBmb3VuZGF0aW9uIG1heSB2ZXRvIGEgbW90aW9uIGF0IGFueSB0aW1lLiAqLwogICAgZnVuY3Rpb24gdmV0b01vdGlvbih1aW50IG1vdGlvbklEKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZSghbW90aW9uV2FpdGluZyhtb3Rpb25JRCkpOwogICAgICAgIF9jbG9zZU1vdGlvbihtb3Rpb25JRCk7CiAgICAgICAgZW1pdCBNb3Rpb25WZXRvZWQobW90aW9uSUQsIG1vdGlvbklEKTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBFVkVOVFMgPT09PT09PT09PSAqLwoKICAgIGV2ZW50IE1vdGlvbkJlZ3VuKGFkZHJlc3MgaW5pdGlhdG9yLCBhZGRyZXNzIGluZGV4ZWQgaW5pdGlhdG9ySW5kZXgsIGFkZHJlc3MgdGFyZ2V0LCBhZGRyZXNzIGluZGV4ZWQgdGFyZ2V0SW5kZXgsIHVpbnQgbW90aW9uSUQsIHVpbnQgaW5kZXhlZCBtb3Rpb25JREluZGV4KTsKCiAgICBldmVudCBWb3RlZEZvcihhZGRyZXNzIHZvdGVyLCBhZGRyZXNzIGluZGV4ZWQgdm90ZXJJbmRleCwgdWludCBtb3Rpb25JRCwgdWludCBpbmRleGVkIG1vdGlvbklESW5kZXgsIHVpbnQgd2VpZ2h0KTsKCiAgICBldmVudCBWb3RlZEFnYWluc3QoYWRkcmVzcyB2b3RlciwgYWRkcmVzcyBpbmRleGVkIHZvdGVySW5kZXgsIHVpbnQgbW90aW9uSUQsIHVpbnQgaW5kZXhlZCBtb3Rpb25JREluZGV4LCB1aW50IHdlaWdodCk7CgogICAgZXZlbnQgVm90ZUNhbmNlbGxlZChhZGRyZXNzIHZvdGVyLCBhZGRyZXNzIGluZGV4ZWQgdm90ZXJJbmRleCwgdWludCBtb3Rpb25JRCwgdWludCBpbmRleGVkIG1vdGlvbklESW5kZXgpOwoKICAgIGV2ZW50IE1vdGlvbkNsb3NlZCh1aW50IG1vdGlvbklELCB1aW50IGluZGV4ZWQgbW90aW9uSURJbmRleCk7CgogICAgZXZlbnQgTW90aW9uVmV0b2VkKHVpbnQgbW90aW9uSUQsIHVpbnQgaW5kZXhlZCBtb3Rpb25JREluZGV4KTsKCiAgICBldmVudCBNb3Rpb25BcHByb3ZlZCh1aW50IG1vdGlvbklELCB1aW50IGluZGV4ZWQgbW90aW9uSURJbmRleCk7Cn0KCi8qCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkNPTlRSQUNUIERFU0NSSVBUSU9OCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpBIHRva2VuIHdoaWNoIGFsc28gaGFzIGEgY29uZmlndXJhYmxlIGZlZSByYXRlCmNoYXJnZWQgb24gaXRzIHRyYW5zZmVycy4gVGhpcyBpcyBkZXNpZ25lZCB0byBiZSBvdmVycmlkZGVuIGluCm9yZGVyIHRvIHByb2R1Y2UgYW4gRVJDMjAtY29tcGxpYW50IHRva2VuLgoKVGhlc2UgZmVlcyBhY2NydWUgaW50byBhIHBvb2wsIGZyb20gd2hpY2ggYSBub21pbmF0ZWQgYXV0aG9yaXR5Cm1heSB3aXRoZHJhdy4KClRoaXMgY29udHJhY3QgdXRpbGlzZXMgYSBzdGF0ZSBmb3IgdXBncmFkYWJpbGl0eSBwdXJwb3Nlcy4KSXQgcmVsaWVzIG9uIGJlaW5nIGNhbGxlZCB1bmRlcm5lYXRoIGEgcHJveHkgY29udHJhY3QsIGFzCmluY2x1ZGVkIGluIFByb3h5LnNvbC4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBFeHRlcm5TdGF0ZVByb3h5RmVlVG9rZW4gaXMgUHJveHlhYmxlLCBTYWZlRGVjaW1hbE1hdGggewoKICAgIC8qID09PT09PT09PT0gU1RBVEUgVkFSSUFCTEVTID09PT09PT09PT0gKi8KCiAgICAvLyBTdG9yZXMgYmFsYW5jZXMgYW5kIGFsbG93YW5jZXMuCiAgICBUb2tlblN0YXRlIHB1YmxpYyBzdGF0ZTsKCiAgICAvLyBPdGhlciBFUkMyMCBmaWVsZHMKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8gQSBwZXJjZW50YWdlIGZlZSBjaGFyZ2VkIG9uIGVhY2ggdHJhbnNmZXIuCiAgICB1aW50IHB1YmxpYyB0cmFuc2ZlckZlZVJhdGU7CiAgICAvLyBGZWUgbWF5IG5vdCBleGNlZWQgMTAlLgogICAgdWludCBjb25zdGFudCBNQVhfVFJBTlNGRVJfRkVFX1JBVEUgPSBVTklUIC8gMTA7CiAgICAvLyBUaGUgYWRkcmVzcyB3aXRoIHRoZSBhdXRob3JpdHkgdG8gZGlzdHJpYnV0ZSBmZWVzLgogICAgYWRkcmVzcyBwdWJsaWMgZmVlQXV0aG9yaXR5OwoKCiAgICAvKiA9PT09PT09PT09IENPTlNUUlVDVE9SID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBFeHRlcm5TdGF0ZVByb3h5RmVlVG9rZW4oc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF90cmFuc2ZlckZlZVJhdGUsIGFkZHJlc3MgX2ZlZUF1dGhvcml0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb2tlblN0YXRlIF9zdGF0ZSwgYWRkcmVzcyBfb3duZXIpCiAgICAgICAgUHJveHlhYmxlKF9vd25lcikKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBpZiAoX3N0YXRlID09IFRva2VuU3RhdGUoMCkpIHsKICAgICAgICAgICAgc3RhdGUgPSBuZXcgVG9rZW5TdGF0ZShfb3duZXIsIGFkZHJlc3ModGhpcykpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlID0gX3N0YXRlOwogICAgICAgIH0KCiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgdHJhbnNmZXJGZWVSYXRlID0gX3RyYW5zZmVyRmVlUmF0ZTsKICAgICAgICBmZWVBdXRob3JpdHkgPSBfZmVlQXV0aG9yaXR5OwogICAgfQoKICAgIC8qID09PT09PT09PT0gU0VUVEVSUyA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gc2V0VHJhbnNmZXJGZWVSYXRlKHVpbnQgX3RyYW5zZmVyRmVlUmF0ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHlfb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShfdHJhbnNmZXJGZWVSYXRlIDw9IE1BWF9UUkFOU0ZFUl9GRUVfUkFURSk7CiAgICAgICAgdHJhbnNmZXJGZWVSYXRlID0gX3RyYW5zZmVyRmVlUmF0ZTsKICAgICAgICBlbWl0IFRyYW5zZmVyRmVlUmF0ZVVwZGF0ZWQoX3RyYW5zZmVyRmVlUmF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RmVlQXV0aG9yaXR5KGFkZHJlc3MgX2ZlZUF1dGhvcml0eSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHlfb25seU93bmVyCiAgICB7CiAgICAgICAgZmVlQXV0aG9yaXR5ID0gX2ZlZUF1dGhvcml0eTsKICAgICAgICBlbWl0IEZlZUF1dGhvcml0eVVwZGF0ZWQoX2ZlZUF1dGhvcml0eSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U3RhdGUoVG9rZW5TdGF0ZSBfc3RhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIHN0YXRlID0gX3N0YXRlOwogICAgICAgIGVtaXQgU3RhdGVVcGRhdGVkKF9zdGF0ZSk7CiAgICB9CgogICAgLyogPT09PT09PT09PSBWSUVXUyA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc3RhdGUuYmFsYW5jZU9mKGFjY291bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8pCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXRlLmFsbG93YW5jZShmcm9tLCB0byk7CiAgICB9CgogICAgLy8gUmV0dXJuIHRoZSBmZWUgY2hhcmdlZCBvbiB0b3AgaW4gb3JkZXIgdG8gdHJhbnNmZXIgX3ZhbHVlIHdvcnRoIG9mIHRva2Vucy4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRmVlSW5jdXJyZWQodWludCB2YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc2FmZU11bF9kZWModmFsdWUsIHRyYW5zZmVyRmVlUmF0ZSk7CiAgICAgICAgLy8gVHJhbnNmZXJzIGxlc3MgdGhhbiB0aGUgcmVjaXByb2NhbCBvZiB0cmFuc2ZlckZlZVJhdGUgc2hvdWxkIGJlIGNvbXBsZXRlbHkgZWF0ZW4gdXAgYnkgZmVlcy4KICAgICAgICAvLyBUaGlzIGlzIG9uIHRoZSBiYXNpcyB0aGF0IHRyYW5zZmVycyBsZXNzIHRoYW4gdGhpcyB2YWx1ZSB3aWxsIHJlc3VsdCBpbiBhIG5pbCBmZWUuCiAgICAgICAgLy8gUHJvYmFibHkgdG9vIGluc2lnbmlmaWNhbnQgdG8gd29ycnkgYWJvdXQsIGJ1dCB0aGUgZm9sbG93aW5nIGNvZGUgd2lsbCBhY2hpZXZlIGl0LgogICAgICAgIC8vICAgICAgaWYgKGZlZSA9PSAwICYmIHRyYW5zZmVyRmVlUmF0ZSAhPSAwKSB7CiAgICAgICAgLy8gICAgICAgICAgcmV0dXJuIF92YWx1ZTsKICAgICAgICAvLyAgICAgIH0KICAgICAgICAvLyAgICAgIHJldHVybiBmZWU7CiAgICB9CgogICAgLy8gVGhlIHZhbHVlIHRoYXQgeW91IHdvdWxkIG5lZWQgdG8gc2VuZCBzbyB0aGF0IHRoZSByZWNpcGllbnQgcmVjZWl2ZXMKICAgIC8vIGEgc3BlY2lmaWVkIHZhbHVlLgogICAgZnVuY3Rpb24gdHJhbnNmZXJQbHVzRmVlKHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc2FmZUFkZCh2YWx1ZSwgdHJhbnNmZXJGZWVJbmN1cnJlZCh2YWx1ZSkpOwogICAgfQoKICAgIC8vIFRoZSBxdWFudGl0eSB0byBzZW5kIGluIG9yZGVyIHRoYXQgdGhlIHNlbmRlciBzcGVuZHMgYSBjZXJ0YWluIHZhbHVlIG9mIHRva2Vucy4KICAgIGZ1bmN0aW9uIHByaWNlVG9TcGVuZCh1aW50IHZhbHVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVEaXZfZGVjKHZhbHVlLCBzYWZlQWRkKFVOSVQsIHRyYW5zZmVyRmVlUmF0ZSkpOwogICAgfQoKICAgIC8vIFRoZSBiYWxhbmNlIG9mIHRoZSBub21pbiBjb250cmFjdCBpdHNlbGYgaXMgdGhlIGZlZSBwb29sLgogICAgLy8gQ29sbGVjdGVkIGZlZXMgc2l0IGhlcmUgdW50aWwgdGhleSBhcmUgZGlzdHJpYnV0ZWQuCiAgICBmdW5jdGlvbiBmZWVQb29sKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzdGF0ZS5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICB9CgoKICAgIC8qID09PT09PT09PT0gTVVUQVRJVkUgRlVOQ1RJT05TID09PT09PT09PT0gKi8KCiAgICAvKiBXaGF0ZXZlciBjYWxscyB0aGlzIHNob3VsZCBoYXZlIGVpdGhlciB0aGUgb3B0aW9uYWxQcm94eSBvciBvbmx5UHJveHkgbW9kaWZpZXIsCiAgICAgKiBhbmQgcGFzcyBpbiBtZXNzYWdlU2VuZGVyLiAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyX2J5UHJveHkoYWRkcmVzcyBzZW5kZXIsIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIC8vIFRoZSBmZWUgaXMgZGVkdWN0ZWQgZnJvbSB0aGUgc2VuZGVyJ3MgYmFsYW5jZSwgaW4gYWRkaXRpb24gdG8KICAgICAgICAvLyB0aGUgdHJhbnNmZXJyZWQgcXVhbnRpdHkuCiAgICAgICAgdWludCBmZWUgPSB0cmFuc2ZlckZlZUluY3VycmVkKHZhbHVlKTsKICAgICAgICB1aW50IHRvdGFsQ2hhcmdlID0gc2FmZUFkZCh2YWx1ZSwgZmVlKTsKCiAgICAgICAgLy8gSW5zdWZmaWNpZW50IGJhbGFuY2Ugd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYWZlIHN1YnRyYWN0aW9uLgogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihzZW5kZXIsIHNhZmVTdWIoc3RhdGUuYmFsYW5jZU9mKHNlbmRlciksIHRvdGFsQ2hhcmdlKSk7CiAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKHRvLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZih0byksIHZhbHVlKSk7CiAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKGFkZHJlc3ModGhpcyksIHNhZmVBZGQoc3RhdGUuYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpLCBmZWUpKTsKCiAgICAgICAgZW1pdCBUcmFuc2ZlcihzZW5kZXIsIHRvLCB2YWx1ZSk7CiAgICAgICAgZW1pdCBUcmFuc2ZlckZlZVBhaWQoc2VuZGVyLCBmZWUpOwogICAgICAgIGVtaXQgVHJhbnNmZXIoc2VuZGVyLCBhZGRyZXNzKHRoaXMpLCBmZWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBXaGF0ZXZlciBjYWxscyB0aGlzIHNob3VsZCBoYXZlIGVpdGhlciB0aGUgb3B0aW9uYWxQcm94eSBvciBvbmx5UHJveHkgbW9kaWZpZXIsCiAgICAgKiBhbmQgcGFzcyBpbiBtZXNzYWdlU2VuZGVyLiAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyRnJvbV9ieVByb3h5KGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIC8vIFRoZSBmZWUgaXMgZGVkdWN0ZWQgZnJvbSB0aGUgc2VuZGVyJ3MgYmFsYW5jZSwgaW4gYWRkaXRpb24gdG8KICAgICAgICAvLyB0aGUgdHJhbnNmZXJyZWQgcXVhbnRpdHkuCiAgICAgICAgdWludCBmZWUgPSB0cmFuc2ZlckZlZUluY3VycmVkKHZhbHVlKTsKICAgICAgICB1aW50IHRvdGFsQ2hhcmdlID0gc2FmZUFkZCh2YWx1ZSwgZmVlKTsKCiAgICAgICAgLy8gSW5zdWZmaWNpZW50IGJhbGFuY2Ugd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYWZlIHN1YnRyYWN0aW9uLgogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihmcm9tLCBzYWZlU3ViKHN0YXRlLmJhbGFuY2VPZihmcm9tKSwgdG90YWxDaGFyZ2UpKTsKICAgICAgICBzdGF0ZS5zZXRBbGxvd2FuY2UoZnJvbSwgc2VuZGVyLCBzYWZlU3ViKHN0YXRlLmFsbG93YW5jZShmcm9tLCBzZW5kZXIpLCB0b3RhbENoYXJnZSkpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZih0bywgc2FmZUFkZChzdGF0ZS5iYWxhbmNlT2YodG8pLCB2YWx1ZSkpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihhZGRyZXNzKHRoaXMpLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSwgZmVlKSk7CgogICAgICAgIGVtaXQgVHJhbnNmZXIoZnJvbSwgdG8sIHZhbHVlKTsKICAgICAgICBlbWl0IFRyYW5zZmVyRmVlUGFpZChzZW5kZXIsIGZlZSk7CiAgICAgICAgZW1pdCBUcmFuc2Zlcihmcm9tLCBhZGRyZXNzKHRoaXMpLCBmZWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHkKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGFkZHJlc3Mgc2VuZGVyID0gbWVzc2FnZVNlbmRlcjsKICAgICAgICBzdGF0ZS5zZXRBbGxvd2FuY2Uoc2VuZGVyLCBzcGVuZGVyLCB2YWx1ZSk7CgogICAgICAgIGVtaXQgQXBwcm92YWwoc2VuZGVyLCBzcGVuZGVyLCB2YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBmZWUgcG9vbCBpbnRvIGEgZ2l2ZW4gYWNjb3VudC4gKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RmVlKGFkZHJlc3MgYWNjb3VudCwgdWludCB2YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZlZUF1dGhvcml0eSAmJiBhY2NvdW50ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIAogICAgICAgIC8vIDAtdmFsdWUgd2l0aGRyYXdhbHMgZG8gbm90aGluZy4KICAgICAgICBpZiAodmFsdWUgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyBTYWZlIHN1YnRyYWN0aW9uIGVuc3VyZXMgYW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiB0aGUgYmFsYW5jZSBpcyBpbnN1ZmZpY2llbnQuCiAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKGFkZHJlc3ModGhpcyksIHNhZmVTdWIoc3RhdGUuYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpLCB2YWx1ZSkpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihhY2NvdW50LCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZihhY2NvdW50KSwgdmFsdWUpKTsKCiAgICAgICAgZW1pdCBGZWVzV2l0aGRyYXduKGFjY291bnQsIGFjY291bnQsIHZhbHVlKTsKICAgICAgICBlbWl0IFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIGFjY291bnQsIHZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogRG9uYXRlIHRva2VucyBmcm9tIHRoZSBzZW5kZXIncyBiYWxhbmNlIGludG8gdGhlIGZlZSBwb29sLiAqLwogICAgZnVuY3Rpb24gZG9uYXRlVG9GZWVQb29sKHVpbnQgbikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHkKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGFkZHJlc3Mgc2VuZGVyID0gbWVzc2FnZVNlbmRlcjsKCiAgICAgICAgLy8gRW1wdHkgZG9uYXRpb25zIGFyZSBkaXNhbGxvd2VkLgogICAgICAgIHVpbnQgYmFsYW5jZSA9IHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZSAhPSAwKTsKCiAgICAgICAgLy8gc2FmZVN1YiBlbnN1cmVzIHRoZSBkb25vciBoYXMgc3VmZmljaWVudCBiYWxhbmNlLgogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihzZW5kZXIsIHNhZmVTdWIoYmFsYW5jZSwgbikpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihhZGRyZXNzKHRoaXMpLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSwgbikpOwoKICAgICAgICBlbWl0IEZlZXNEb25hdGVkKHNlbmRlciwgc2VuZGVyLCBuKTsKICAgICAgICBlbWl0IFRyYW5zZmVyKHNlbmRlciwgYWRkcmVzcyh0aGlzKSwgbik7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qID09PT09PT09PT0gRVZFTlRTID09PT09PT09PT0gKi8KCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKCiAgICBldmVudCBUcmFuc2ZlckZlZVBhaWQoYWRkcmVzcyBpbmRleGVkIGFjY291bnQsIHVpbnQgdmFsdWUpOwoKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwoKICAgIGV2ZW50IFRyYW5zZmVyRmVlUmF0ZVVwZGF0ZWQodWludCBuZXdGZWVSYXRlKTsKCiAgICBldmVudCBGZWVBdXRob3JpdHlVcGRhdGVkKGFkZHJlc3MgZmVlQXV0aG9yaXR5KTsKCiAgICBldmVudCBTdGF0ZVVwZGF0ZWQoYWRkcmVzcyBuZXdTdGF0ZSk7CgogICAgZXZlbnQgRmVlc1dpdGhkcmF3bihhZGRyZXNzIGFjY291bnQsIGFkZHJlc3MgaW5kZXhlZCBhY2NvdW50SW5kZXgsIHVpbnQgdmFsdWUpOwoKICAgIGV2ZW50IEZlZXNEb25hdGVkKGFkZHJlc3MgZG9ub3IsIGFkZHJlc3MgaW5kZXhlZCBkb25vckluZGV4LCB1aW50IHZhbHVlKTsKfQoKLyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ09OVFJBQ1QgREVTQ1JJUFRJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkV0aGVyLWJhY2tlZCBub21pbiBzdGFibGVjb2luIGNvbnRyYWN0LgoKVGhpcyBjb250cmFjdCBpc3N1ZXMgbm9taW5zLCB3aGljaCBhcmUgdG9rZW5zIHdvcnRoIDEgVVNEIGVhY2guIFRoZXkgYXJlIGJhY2tlZApieSBhIHBvb2wgb2YgZXRoZXIgY29sbGF0ZXJhbCwgc28gdGhhdCBpZiBhIHVzZXIgaGFzIG5vbWlucywgdGhleSBtYXkKcmVkZWVtIHRoZW0gZm9yIGV0aGVyIGZyb20gdGhlIHBvb2wsIG9yIGlmIHRoZXkgd2FudCB0byBvYnRhaW4gbm9taW5zLAp0aGV5IG1heSBwYXkgZXRoZXIgaW50byB0aGUgcG9vbCBpbiBvcmRlciB0byBkbyBzby4KClRoZSBzdXBwbHkgb2Ygbm9taW5zIHRoYXQgbWF5IGJlIGluIGNpcmN1bGF0aW9uIGF0IGFueSB0aW1lIGlzIGxpbWl0ZWQuClRoZSBjb250cmFjdCBvd25lciBtYXkgaW5jcmVhc2UgdGhpcyBxdWFudGl0eSwgYnV0IG9ubHkgaWYgdGhleSBwcm92aWRlCmV0aGVyIHRvIGJhY2sgaXQuIFRoZSBiYWNraW5nIHRoZSBvd25lciBwcm92aWRlcyBhdCBpc3N1YW5jZSBtdXN0CmtlZXAgZWFjaCBub21pbiBhdCBsZWFzdCB0d2ljZSBvdmVyY29sbGF0ZXJhbGlzZWQuClRoZSBvd25lciBtYXkgYWxzbyBkZXN0cm95IG5vbWlucyBpbiB0aGUgcG9vbCwgd2hpY2ggaXMgcG90ZW50aWFsIGF2ZW51ZQpieSB3aGljaCB0byBtYWludGFpbiBoZWFsdGh5IGNvbGxhdGVyYWxpc2F0aW9uIGxldmVscywgYXMgaXQgcmVkdWNlcwpzdXBwbHkgd2l0aG91dCB3aXRoZHJhd2luZyBldGhlciBjb2xsYXRlcmFsLgoKQSBjb25maWd1cmFibGUgZmVlIGlzIGNoYXJnZWQgb24gbm9taW4gdHJhbnNmZXJzIGFuZCBkZXBvc2l0ZWQKaW50byBhIGNvbW1vbiBwb3QsIHdoaWNoIGhhdnZlbiBob2xkZXJzIG1heSB3aXRoZHJhdyBmcm9tIG9uY2UgcGVyCmZlZSBwZXJpb2QuCgpFdGhlciBwcmljZSBpcyBjb250aW51YWxseSB1cGRhdGVkIGJ5IGFuIGV4dGVybmFsIG9yYWNsZSwgYW5kIHRoZSB2YWx1ZQpvZiB0aGUgYmFja2luZyBpcyBjb21wdXRlZCBvbiB0aGlzIGJhc2lzLiBUbyBlbnN1cmUgdGhlIGludGVncml0eSBvZgp0aGlzIHN5c3RlbSwgaWYgdGhlIGNvbnRyYWN0J3MgcHJpY2UgaGFzIG5vdCBiZWVuIHVwZGF0ZWQgcmVjZW50bHkgZW5vdWdoLAppdCB3aWxsIHRlbXBvcmFyaWx5IGRpc2FibGUgaXRzZWxmIHVudGlsIGl0IHJlY2VpdmVzIG1vcmUgcHJpY2UgaW5mb3JtYXRpb24uCgpUaGUgY29udHJhY3Qgb3duZXIgbWF5IGF0IGFueSB0aW1lIGluaXRpYXRlIGNvbnRyYWN0IGxpcXVpZGF0aW9uLgpEdXJpbmcgdGhlIGxpcXVpZGF0aW9uIHBlcmlvZCwgbW9zdCBjb250cmFjdCBmdW5jdGlvbnMgd2lsbCBiZSBkZWFjdGl2YXRlZC4KTm8gbmV3IG5vbWlucyBtYXkgYmUgaXNzdWVkIG9yIGJvdWdodCwgYnV0IHVzZXJzIG1heSBzZWxsIG5vbWlucyBiYWNrCnRvIHRoZSBzeXN0ZW0uCklmIHRoZSBzeXN0ZW0ncyBjb2xsYXRlcmFsIGZhbGxzIGJlbG93IGEgc3BlY2lmaWVkIGxldmVsLCB0aGVuIGFueW9uZQptYXkgaW5pdGlhdGUgbGlxdWlkYXRpb24uCgpBZnRlciB0aGUgbGlxdWlkYXRpb24gcGVyaW9kIGhhcyBlbGFwc2VkLCB3aGljaCBpcyBpbml0aWFsbHkgOTAgZGF5cywKdGhlIG93bmVyIG1heSBkZXN0cm95IHRoZSBjb250cmFjdCwgdHJhbnNmZXJyaW5nIGFueSByZW1haW5pbmcgY29sbGF0ZXJhbAp0byBhIG5vbWluYXRlZCBiZW5lZmljaWFyeSBhZGRyZXNzLgpUaGlzIGxpcXVpZGF0aW9uIHBlcmlvZCBtYXkgYmUgZXh0ZW5kZWQgdXAgdG8gYSBtYXhpbXVtIG9mIDE4MCBkYXlzLgpJZiB0aGUgY29udHJhY3QgaXMgcmVjb2xsYXRlcmFsaXNlZCwgdGhlIG93bmVyIG1heSB0ZXJtaW5hdGUgbGlxdWlkYXRpb24uCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoqLwoKY29udHJhY3QgRXRoZXJOb21pbiBpcyBFeHRlcm5TdGF0ZVByb3h5RmVlVG9rZW4gewoKICAgIC8qID09PT09PT09PT0gU1RBVEUgVkFSSUFCTEVTID09PT09PT09PT0gKi8KCiAgICAvLyBUaGUgb3JhY2xlIHByb3ZpZGVzIHByaWNlIGluZm9ybWF0aW9uIHRvIHRoaXMgY29udHJhY3QuCiAgICAvLyBJdCBtYXkgb25seSBjYWxsIHRoZSB1cGRhdGVQcmljZSgpIGZ1bmN0aW9uLgogICAgYWRkcmVzcyBwdWJsaWMgb3JhY2xlOwoKICAgIC8vIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB3aGljaCBtYW5hZ2VzIGNvbmZpc2NhdGlvbiB2b3Rlcy4KICAgIENvdXJ0IHB1YmxpYyBjb3VydDsKCiAgICAvLyBGb3VuZGF0aW9uIHdhbGxldCBmb3IgZnVuZHMgdG8gZ28gdG8gcG9zdCBsaXF1aWRhdGlvbi4KICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwoKICAgIC8vIE5vbWlucyBpbiB0aGUgcG9vbCByZWFkeSB0byBiZSBzb2xkLgogICAgdWludCBwdWJsaWMgbm9taW5Qb29sOwoKICAgIC8vIEltcG9zZSBhIDUwIGJhc2lzLXBvaW50IGZlZSBmb3IgYnV5aW5nIGZyb20gYW5kIHNlbGxpbmcgdG8gdGhlIG5vbWluIHBvb2wuCiAgICB1aW50IHB1YmxpYyBwb29sRmVlUmF0ZSA9IFVOSVQgLyAyMDA7CgogICAgLy8gVGhlIG1pbmltdW0gcHVyY2hhc2FibGUgcXVhbnRpdHkgb2Ygbm9taW5zIGlzIDEgY2VudC4KICAgIHVpbnQgY29uc3RhbnQgTUlOSU1VTV9QVVJDSEFTRSA9IFVOSVQgLyAxMDA7CgogICAgLy8gV2hlbiBpc3N1aW5nLCBub21pbnMgbXVzdCBiZSBvdmVyY29sbGF0ZXJhbGlzZWQgYnkgdGhpcyByYXRpby4KICAgIHVpbnQgY29uc3RhbnQgTUlOSU1VTV9JU1NVQU5DRV9SQVRJTyA9ICAyICogVU5JVDsKCiAgICAvLyBJZiB0aGUgY29sbGF0ZXJhbGlzYXRpb24gcmF0aW8gb2YgdGhlIGNvbnRyYWN0IGZhbGxzIGJlbG93IHRoaXMgbGV2ZWwsCiAgICAvLyBpbW1lZGlhdGVseSBiZWdpbiBsaXF1aWRhdGlvbi4KICAgIHVpbnQgY29uc3RhbnQgQVVUT19MSVFVSURBVElPTl9SQVRJTyA9IFVOSVQ7CgogICAgLy8gVGhlIGxpcXVpZGF0aW9uIHBlcmlvZCBpcyB0aGUgZHVyYXRpb24gdGhhdCBtdXN0IHBhc3MgYmVmb3JlIHRoZSBsaXF1aWRhdGlvbiBwZXJpb2QgaXMgY29tcGxldGUuCiAgICAvLyBJdCBjYW4gYmUgZXh0ZW5kZWQgdXAgdG8gYSBnaXZlbiBkdXJhdGlvbi4KICAgIHVpbnQgY29uc3RhbnQgREVGQVVMVF9MSVFVSURBVElPTl9QRVJJT0QgPSA5MCBkYXlzOwogICAgdWludCBjb25zdGFudCBNQVhfTElRVUlEQVRJT05fUEVSSU9EID0gMTgwIGRheXM7CiAgICB1aW50IHB1YmxpYyBsaXF1aWRhdGlvblBlcmlvZCA9IERFRkFVTFRfTElRVUlEQVRJT05fUEVSSU9EOwoKICAgIC8vIFRoZSB0aW1lc3RhbXAgd2hlbiBsaXF1aWRhdGlvbiB3YXMgYWN0aXZhdGVkLiBXZSBpbml0aWFsaXNlIHRoaXMgdG8KICAgIC8vIHVpbnQgbWF4LCBzbyB0aGF0IHdlIGtub3cgdGhhdCB3ZSBhcmUgdW5kZXIgbGlxdWlkYXRpb24gaWYgdGhlCiAgICAvLyBsaXF1aWRhdGlvbiB0aW1lc3RhbXAgaXMgaW4gdGhlIHBhc3QuCiAgICB1aW50IHB1YmxpYyBsaXF1aWRhdGlvblRpbWVzdGFtcCA9IH51aW50KDApOwoKICAgIC8vIEV0aGVyIHByaWNlIGZyb20gb3JhY2xlIChmaWF0IHBlciBldGhlcikuCiAgICB1aW50IHB1YmxpYyBldGhlclByaWNlOwoKICAgIC8vIExhc3QgdGltZSB0aGUgcHJpY2Ugd2FzIHVwZGF0ZWQuCiAgICB1aW50IHB1YmxpYyBsYXN0UHJpY2VVcGRhdGU7CgogICAgLy8gVGhlIHBlcmlvZCBpdCB0YWtlcyBmb3IgdGhlIHByaWNlIHRvIGJlIGNvbnNpZGVyZWQgc3RhbGUuCiAgICAvLyBJZiB0aGUgcHJpY2UgaXMgc3RhbGUsIGZ1bmN0aW9ucyB0aGF0IHJlcXVpcmUgdGhlIHByaWNlIGFyZSBkaXNhYmxlZC4KICAgIHVpbnQgcHVibGljIHN0YWxlUGVyaW9kID0gMiBkYXlzOwoKICAgIC8vIEFjY291bnRzIHdoaWNoIGhhdmUgbG9zdCB0aGUgcHJpdmlsZWdlIHRvIHRyYW5zYWN0IGluIG5vbWlucy4KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuOwoKCiAgICAvKiA9PT09PT09PT09IENPTlNUUlVDVE9SID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBFdGhlck5vbWluKGFkZHJlc3MgX2hhdnZlbiwgYWRkcmVzcyBfb3JhY2xlLAogICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBpbml0aWFsRXRoZXJQcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfb3duZXIsIFRva2VuU3RhdGUgaW5pdGlhbFN0YXRlKQogICAgICAgIEV4dGVyblN0YXRlUHJveHlGZWVUb2tlbigiRXRoZXItQmFja2VkIFVTRCBOb21pbnMiLCAiZVVTRCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1ICogVU5JVCAvIDEwMDAwLCAvLyBub21pbiB0cmFuc2ZlcnMgaW5jdXIgYSAxNSBicCBmZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hhdnZlbiwgLy8gdGhlIGhhdnZlbiBjb250cmFjdCBpcyB0aGUgZmVlIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vd25lcikKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBvcmFjbGUgPSBfb3JhY2xlOwogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwoKICAgICAgICBldGhlclByaWNlID0gaW5pdGlhbEV0aGVyUHJpY2U7CiAgICAgICAgbGFzdFByaWNlVXBkYXRlID0gbm93OwogICAgICAgIGVtaXQgUHJpY2VVcGRhdGVkKGV0aGVyUHJpY2UpOwoKICAgICAgICAvLyBJdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIHRyYW5zZmVyIHRvIHRoZSBub21pbiBjb250cmFjdCBpdHNlbGYuCiAgICAgICAgZnJvemVuW3RoaXNdID0gdHJ1ZTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBTRVRURVJTID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBzZXRPcmFjbGUoYWRkcmVzcyBfb3JhY2xlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb3B0aW9uYWxQcm94eV9vbmx5T3duZXIKICAgIHsKICAgICAgICBvcmFjbGUgPSBfb3JhY2xlOwogICAgICAgIGVtaXQgT3JhY2xlVXBkYXRlZChfb3JhY2xlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDb3VydChDb3VydCBfY291cnQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIGNvdXJ0ID0gX2NvdXJ0OwogICAgICAgIGVtaXQgQ291cnRVcGRhdGVkKF9jb3VydCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QmVuZWZpY2lhcnkoYWRkcmVzcyBfYmVuZWZpY2lhcnkpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgICAgIGVtaXQgQmVuZWZpY2lhcnlVcGRhdGVkKF9iZW5lZmljaWFyeSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UG9vbEZlZVJhdGUodWludCBfcG9vbEZlZVJhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUoX3Bvb2xGZWVSYXRlIDw9IFVOSVQpOwogICAgICAgIHBvb2xGZWVSYXRlID0gX3Bvb2xGZWVSYXRlOwogICAgICAgIGVtaXQgUG9vbEZlZVJhdGVVcGRhdGVkKF9wb29sRmVlUmF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U3RhbGVQZXJpb2QodWludCBfc3RhbGVQZXJpb2QpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIHN0YWxlUGVyaW9kID0gX3N0YWxlUGVyaW9kOwogICAgICAgIGVtaXQgU3RhbGVQZXJpb2RVcGRhdGVkKF9zdGFsZVBlcmlvZCk7CiAgICB9CiAKCiAgICAvKiA9PT09PT09PT09IFZJRVcgRlVOQ1RJT05TID09PT09PT09PT0gKi8gCgogICAgLyogUmV0dXJuIHRoZSBlcXVpdmFsZW50IGZpYXQgdmFsdWUgb2YgdGhlIGdpdmVuIHF1YW50aXR5CiAgICAgKiBvZiBldGhlciBhdCB0aGUgY3VycmVudCBwcmljZS4KICAgICAqIFJldmVydHMgaWYgdGhlIHByaWNlIGlzIHN0YWxlLiAqLwogICAgZnVuY3Rpb24gZmlhdFZhbHVlKHVpbnQgZXRoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICBwcmljZU5vdFN0YWxlCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc2FmZU11bF9kZWMoZXRoLCBldGhlclByaWNlKTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIGN1cnJlbnQgZmlhdCB2YWx1ZSBvZiB0aGUgY29udHJhY3QncyBiYWxhbmNlLgogICAgICogUmV2ZXJ0cyBpZiB0aGUgcHJpY2UgaXMgc3RhbGUuICovCiAgICBmdW5jdGlvbiBmaWF0QmFsYW5jZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgLy8gUHJpY2Ugc3RhbGVuZXNzIGNoZWNrIG9jY3VycyBpbnNpZGUgdGhlIGNhbGwgdG8gZmlhdFZhbHVlLgogICAgICAgIHJldHVybiBmaWF0VmFsdWUoYWRkcmVzcyh0aGlzKS5iYWxhbmNlKTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIGVxdWl2YWxlbnQgZXRoZXIgdmFsdWUgb2YgdGhlIGdpdmVuIHF1YW50aXR5CiAgICAgKiBvZiBmaWF0IGF0IHRoZSBjdXJyZW50IHByaWNlLgogICAgICogUmV2ZXJ0cyBpZiB0aGUgcHJpY2UgaXMgc3RhbGUuICovCiAgICBmdW5jdGlvbiBldGhlclZhbHVlKHVpbnQgZmlhdCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcHJpY2VOb3RTdGFsZQogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVEaXZfZGVjKGZpYXQsIGV0aGVyUHJpY2UpOwogICAgfQoKICAgIC8qIFRoZSBzYW1lIGFzIGV0aGVyVmFsdWUoKSwgYnV0IHdpdGhvdXQgdGhlIHN0YWxlIHByaWNlIGNoZWNrLiAqLwogICAgZnVuY3Rpb24gZXRoZXJWYWx1ZUFsbG93U3RhbGUodWludCBmaWF0KSAKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzYWZlRGl2X2RlYyhmaWF0LCBldGhlclByaWNlKTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIHVuaXRzIG9mIGZpYXQgcGVyIG5vbWluIGluIHRoZSBzdXBwbHkuCiAgICAgKiBSZXZlcnRzIGlmIHRoZSBwcmljZSBpcyBzdGFsZS4gKi8KICAgIGZ1bmN0aW9uIGNvbGxhdGVyYWxpc2F0aW9uUmF0aW8oKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzYWZlRGl2X2RlYyhmaWF0QmFsYW5jZSgpLCBfbm9taW5DYXAoKSk7CiAgICB9CgogICAgLyogUmV0dXJuIHRoZSBtYXhpbXVtIG51bWJlciBvZiBleHRhbnQgbm9taW5zLAogICAgICogZXF1YWwgdG8gdGhlIG5vbWluIHBvb2wgcGx1cyB0b3RhbCAoY2lyY3VsYXRpbmcpIHN1cHBseS4gKi8KICAgIGZ1bmN0aW9uIF9ub21pbkNhcCgpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc2FmZUFkZChub21pblBvb2wsIHRvdGFsU3VwcGx5KTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIGZlZSBjaGFyZ2VkIG9uIGEgcHVyY2hhc2Ugb3Igc2FsZSBvZiBuIG5vbWlucy4gKi8KICAgIGZ1bmN0aW9uIHBvb2xGZWVJbmN1cnJlZCh1aW50IG4pCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVNdWxfZGVjKG4sIHBvb2xGZWVSYXRlKTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIGZpYXQgY29zdCAoaW5jbHVkaW5nIGZlZSkgb2YgcHVyY2hhc2luZyBuIG5vbWlucy4KICAgICAqIE5vbWlucyBhcmUgcHVyY2hhc2VkIGZvciAkMSwgcGx1cyB0aGUgZmVlLiAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VDb3N0RmlhdCh1aW50IG4pCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVBZGQobiwgcG9vbEZlZUluY3VycmVkKG4pKTsKICAgIH0KCiAgICAvKiBSZXR1cm4gdGhlIGV0aGVyIGNvc3QgKGluY2x1ZGluZyBmZWUpIG9mIHB1cmNoYXNpbmcgbiBub21pbnMuCiAgICAgKiBSZXZlcnRzIGlmIHRoZSBwcmljZSBpcyBzdGFsZS4gKi8KICAgIGZ1bmN0aW9uIHB1cmNoYXNlQ29zdEV0aGVyKHVpbnQgbikKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICAvLyBQcmljZSBzdGFsZW5lc3MgY2hlY2sgb2NjdXJzIGluc2lkZSB0aGUgY2FsbCB0byBldGhlclZhbHVlLgogICAgICAgIHJldHVybiBldGhlclZhbHVlKHB1cmNoYXNlQ29zdEZpYXQobikpOwogICAgfQoKICAgIC8qIFJldHVybiB0aGUgZmlhdCBwcm9jZWVkcyAobGVzcyB0aGUgZmVlKSBvZiBzZWxsaW5nIG4gbm9taW5zLgogICAgICogTm9taW5zIGFyZSBzb2xkIGZvciAkMSwgbWludXMgdGhlIGZlZS4gKi8KICAgIGZ1bmN0aW9uIHNhbGVQcm9jZWVkc0ZpYXQodWludCBuKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzYWZlU3ViKG4sIHBvb2xGZWVJbmN1cnJlZChuKSk7CiAgICB9CgogICAgLyogUmV0dXJuIHRoZSBldGhlciBwcm9jZWVkcyAobGVzcyB0aGUgZmVlKSBvZiBzZWxsaW5nIG4KICAgICAqIG5vbWlucy4KICAgICAqIFJldmVydHMgaWYgdGhlIHByaWNlIGlzIHN0YWxlLiAqLwogICAgZnVuY3Rpb24gc2FsZVByb2NlZWRzRXRoZXIodWludCBuKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIC8vIFByaWNlIHN0YWxlbmVzcyBjaGVjayBvY2N1cnMgaW5zaWRlIHRoZSBjYWxsIHRvIGV0aGVyVmFsdWUuCiAgICAgICAgcmV0dXJuIGV0aGVyVmFsdWUoc2FsZVByb2NlZWRzRmlhdChuKSk7CiAgICB9CgogICAgLyogVGhlIHNhbWUgYXMgc2FsZVByb2NlZWRzRXRoZXIoKSwgYnV0IHdpdGhvdXQgdGhlIHN0YWxlIHByaWNlIGNoZWNrLiAqLwogICAgZnVuY3Rpb24gc2FsZVByb2NlZWRzRXRoZXJBbGxvd1N0YWxlKHVpbnQgbikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBldGhlclZhbHVlQWxsb3dTdGFsZShzYWxlUHJvY2VlZHNGaWF0KG4pKTsKICAgIH0KCiAgICAvKiBUcnVlIGlmZiB0aGUgY3VycmVudCBibG9jayB0aW1lc3RhbXAgaXMgbGF0ZXIgdGhhbiB0aGUgdGltZQogICAgICogdGhlIHByaWNlIHdhcyBsYXN0IHVwZGF0ZWQsIHBsdXMgdGhlIHN0YWxlIHBlcmlvZC4gKi8KICAgIGZ1bmN0aW9uIHByaWNlSXNTdGFsZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHNhZmVBZGQobGFzdFByaWNlVXBkYXRlLCBzdGFsZVBlcmlvZCkgPCBub3c7CiAgICB9CgogICAgZnVuY3Rpb24gaXNMaXF1aWRhdGluZygpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIGxpcXVpZGF0aW9uVGltZXN0YW1wIDw9IG5vdzsKICAgIH0KCiAgICAvKiBUcnVlIGlmIHRoZSBjb250cmFjdCBpcyBzZWxmLWRlc3RydWN0aWJsZS4gCiAgICAgKiBUaGlzIGlzIHRydWUgaWYgZWl0aGVyIHRoZSBjb21wbGV0ZSBsaXF1aWRhdGlvbiBwZXJpb2QgaGFzIGVsYXBzZWQsCiAgICAgKiBvciBpZiBhbGwgdG9rZW5zIGhhdmUgYmVlbiByZXR1cm5lZCB0byB0aGUgY29udHJhY3QgYW5kIGl0IGhhcyBiZWVuCiAgICAgKiBpbiBsaXF1aWRhdGlvbiBmb3IgYXQgbGVhc3QgYSB3ZWVrLgogICAgICogU2luY2UgdGhlIGNvbnRyYWN0IGlzIG9ubHkgZGVzdHJ1Y3RpYmxlIGFmdGVyIHRoZSBsaXF1aWRhdGlvblRpbWVzdGFtcCwKICAgICAqIGEgZm9ydGlvcmkgY2FuU2VsZkRlc3RydWN0KCkgaW1wbGllcyBpc0xpcXVpZGF0aW5nKCkuICovCiAgICBmdW5jdGlvbiBjYW5TZWxmRGVzdHJ1Y3QoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIC8vIE5vdCBiZWluZyBpbiBsaXF1aWRhdGlvbiBpbXBsaWVzIHRoZSB0aW1lc3RhbXAgaXMgdWludCBtYXgsIHNvIGl0IHdvdWxkIHJvbGwgb3Zlci4KICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgd2UncmUgaW4gbGlxdWlkYXRpb24gZmlyc3QuCiAgICAgICAgaWYgKGlzTGlxdWlkYXRpbmcoKSkgewogICAgICAgICAgICAvLyBUaGVzZSB0aW1lc3RhbXBzIGFuZCBkdXJhdGlvbnMgaGF2ZSB2YWx1ZXMgY2xhbXBlZCB3aXRoaW4gcmVhc29uYWJsZSB2YWx1ZXMgYW5kCiAgICAgICAgICAgIC8vIGNhbm5vdCBvdmVyZmxvdy4KICAgICAgICAgICAgYm9vbCB0b3RhbFBlcmlvZEVsYXBzZWQgPSBsaXF1aWRhdGlvblRpbWVzdGFtcCArIGxpcXVpZGF0aW9uUGVyaW9kIDwgbm93OwogICAgICAgICAgICAvLyBUb3RhbCBzdXBwbHkgb2YgMCBtZWFucyBhbGwgdG9rZW5zIGhhdmUgcmV0dXJuZWQgdG8gdGhlIHBvb2wuCiAgICAgICAgICAgIGJvb2wgYWxsVG9rZW5zUmV0dXJuZWQgPSAobGlxdWlkYXRpb25UaW1lc3RhbXAgKyAxIHdlZWtzIDwgbm93KSAmJiAodG90YWxTdXBwbHkgPT0gMCk7CiAgICAgICAgICAgIHJldHVybiB0b3RhbFBlcmlvZEVsYXBzZWQgfHwgYWxsVG9rZW5zUmV0dXJuZWQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBNVVRBVElWRSBGVU5DVElPTlMgPT09PT09PT09PSAqLwoKICAgIC8qIE92ZXJyaWRlIEVSQzIwIHRyYW5zZmVyIGZ1bmN0aW9uIGluIG9yZGVyIHRvIGNoZWNrCiAgICAgKiB3aGV0aGVyIHRoZSByZWNpcGllbnQgYWNjb3VudCBpcyBmcm96ZW4uIE5vdGUgdGhhdCB0aGVyZSBpcwogICAgICogbm8gbmVlZCB0byBjaGVjayB3aGV0aGVyIHRoZSBzZW5kZXIgaGFzIGEgZnJvemVuIGFjY291bnQsCiAgICAgKiBzaW5jZSB0aGVpciBmdW5kcyBoYXZlIGFscmVhZHkgYmVlbiBjb25maXNjYXRlZCwKICAgICAqIGFuZCBubyBuZXcgZnVuZHMgY2FuIGJlIHRyYW5zZmVycmVkIHRvIGl0LiovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKQogICAgICAgIHB1YmxpYwogICAgICAgIG9wdGlvbmFsUHJveHkKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoIWZyb3plblt0b10pOwogICAgICAgIHJldHVybiBfdHJhbnNmZXJfYnlQcm94eShtZXNzYWdlU2VuZGVyLCB0bywgdmFsdWUpOwogICAgfQoKICAgIC8qIE92ZXJyaWRlIEVSQzIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbiBpbiBvcmRlciB0byBjaGVjawogICAgICogd2hldGhlciB0aGUgcmVjaXBpZW50IGFjY291bnQgaXMgZnJvemVuLiAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvcHRpb25hbFByb3h5CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKCFmcm96ZW5bdG9dKTsKICAgICAgICByZXR1cm4gX3RyYW5zZmVyRnJvbV9ieVByb3h5KG1lc3NhZ2VTZW5kZXIsIGZyb20sIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLyogVXBkYXRlIHRoZSBjdXJyZW50IGV0aGVyIHByaWNlIGFuZCB1cGRhdGUgdGhlIGxhc3QgdXBkYXRlZCB0aW1lLAogICAgICogcmVmcmVzaGluZyB0aGUgcHJpY2Ugc3RhbGVuZXNzLgogICAgICogQWxzbyBjaGVja3Mgd2hldGhlciB0aGUgY29udHJhY3QncyBjb2xsYXRlcmFsIGxldmVscyBoYXZlIGZhbGxlbiB0byBsb3csCiAgICAgKiBhbmQgaW5pdGlhdGVzIGxpcXVpZGF0aW9uIGlmIHRoYXQgaXMgdGhlIGNhc2UuCiAgICAgKiBFeGNlcHRpb25hbCBjb25kaXRpb25zOgogICAgICogICAgIE5vdCBjYWxsZWQgYnkgdGhlIG9yYWNsZS4KICAgICAqICAgICBOb3QgdGhlIG1vc3QgcmVjZW50bHkgc2VudCBwcmljZS4gKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZVByaWNlKHVpbnQgcHJpY2UsIHVpbnQgdGltZVNlbnQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBwb3N0Q2hlY2tBdXRvTGlxdWlkYXRlCiAgICB7CiAgICAgICAgLy8gU2hvdWxkIGJlIGNhbGxhYmxlIG9ubHkgYnkgdGhlIG9yYWNsZS4KICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xlKTsKICAgICAgICAvLyBNdXN0IGJlIHRoZSBtb3N0IHJlY2VudGx5IHNlbnQgcHJpY2UsIGJ1dCBub3QgdG9vIGZhciBpbiB0aGUgZnV0dXJlLgogICAgICAgIC8vIChzbyB3ZSBjYW4ndCBsb2NrIG91cnNlbHZlcyBvdXQgb2YgdXBkYXRpbmcgdGhlIG9yYWNsZSBmb3IgbG9uZ2VyIHRoYW4gdGhpcykKICAgICAgICByZXF1aXJlKGxhc3RQcmljZVVwZGF0ZSA8IHRpbWVTZW50ICYmIHRpbWVTZW50IDwgbm93ICsgMTAgbWludXRlcyk7CgogICAgICAgIGV0aGVyUHJpY2UgPSBwcmljZTsKICAgICAgICBsYXN0UHJpY2VVcGRhdGUgPSB0aW1lU2VudDsKICAgICAgICBlbWl0IFByaWNlVXBkYXRlZChwcmljZSk7CiAgICB9CgogICAgLyogSXNzdWVzIG4gbm9taW5zIGludG8gdGhlIHBvb2wgYXZhaWxhYmxlIHRvIGJlIGJvdWdodCBieSB1c2Vycy4KICAgICAqIE11c3QgYmUgYWNjb21wYW5pZWQgYnkgJG4gd29ydGggb2YgZXRoZXIuCiAgICAgKiBFeGNlcHRpb25hbCBjb25kaXRpb25zOgogICAgICogICAgIE5vdCBjYWxsZWQgYnkgY29udHJhY3Qgb3duZXIuCiAgICAgKiAgICAgSW5zdWZmaWNpZW50IGJhY2tpbmcgZnVuZHMgcHJvdmlkZWQgKHBvc3QtaXNzdWFuY2UgY29sbGF0ZXJhbGlzYXRpb24gYmVsb3cgbWluaW11bSByZXF1aXJlbWVudCkuCiAgICAgKiAgICAgUHJpY2UgaXMgc3RhbGUuICovCiAgICBmdW5jdGlvbiByZXBsZW5pc2hQb29sKHVpbnQgbikKICAgICAgICBleHRlcm5hbAogICAgICAgIHBheWFibGUKICAgICAgICBub3RMaXF1aWRhdGluZwogICAgICAgIG9wdGlvbmFsUHJveHlfb25seU93bmVyCiAgICB7CiAgICAgICAgLy8gUHJpY2Ugc3RhbGVuZXNzIGNoZWNrIG9jY3VycyBpbnNpZGUgdGhlIGNhbGwgdG8gZmlhdEJhbGFuY2UuCiAgICAgICAgLy8gU2FmZSBhZGRpdGlvbnMgYXJlIHVubmVjZXNzYXJ5IGhlcmUsIGFzIGVpdGhlciB0aGUgYWRkaXRpb24gaXMgY2hlY2tlZCBvbiB0aGUgZm9sbG93aW5nIGxpbmUKICAgICAgICAvLyBvciB0aGUgb3ZlcmZsb3cgd291bGQgY2F1c2UgdGhlIHJlcXVpcmVtZW50IG5vdCB0byBiZSBzYXRpc2ZpZWQuCiAgICAgICAgcmVxdWlyZShmaWF0QmFsYW5jZSgpID49IHNhZmVNdWxfZGVjKHNhZmVBZGQoX25vbWluQ2FwKCksIG4pLCBNSU5JTVVNX0lTU1VBTkNFX1JBVElPKSk7CiAgICAgICAgbm9taW5Qb29sID0gc2FmZUFkZChub21pblBvb2wsIG4pOwogICAgICAgIGVtaXQgUG9vbFJlcGxlbmlzaGVkKG4sIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLyogQnVybnMgbiBub21pbnMgZnJvbSB0aGUgcG9vbC4KICAgICAqIEV4Y2VwdGlvbmFsIGNvbmRpdGlvbnM6CiAgICAgKiAgICAgTm90IGNhbGxlZCBieSBjb250cmFjdCBvd25lci4KICAgICAqICAgICBUaGVyZSBhcmUgZmV3ZXIgdGhhbiBuIG5vbWlucyBpbiB0aGUgcG9vbC4gKi8KICAgIGZ1bmN0aW9uIGRpbWluaXNoUG9vbCh1aW50IG4pCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIC8vIFJlcXVpcmUgdGhhdCB0aGVyZSBhcmUgZW5vdWdoIG5vbWlucyBpbiB0aGUgYWNjZXNzaWJsZSBwb29sIHRvIGJ1cm4KICAgICAgICByZXF1aXJlKG5vbWluUG9vbCA+PSBuKTsKICAgICAgICBub21pblBvb2wgPSBzYWZlU3ViKG5vbWluUG9vbCwgbik7CiAgICAgICAgZW1pdCBQb29sRGltaW5pc2hlZChuKTsKICAgIH0KCiAgICAvKiBTZW5kcyBuIG5vbWlucyB0byB0aGUgc2VuZGVyIGZyb20gdGhlIHBvb2wsIGluIGV4Y2hhbmdlIGZvcgogICAgICogJG4gcGx1cyB0aGUgZmVlIHdvcnRoIG9mIGV0aGVyLgogICAgICogRXhjZXB0aW9uYWwgY29uZGl0aW9uczoKICAgICAqICAgICBJbnN1ZmZpY2llbnQgb3IgdG9vIG1hbnkgZnVuZHMgcHJvdmlkZWQuCiAgICAgKiAgICAgTW9yZSBub21pbnMgcmVxdWVzdGVkIHRoYW4gYXJlIGluIHRoZSBwb29sLgogICAgICogICAgIG4gYmVsb3cgdGhlIHB1cmNoYXNlIG1pbmltdW0gKDEgY2VudCkuCiAgICAgKiAgICAgY29udHJhY3QgaW4gbGlxdWlkYXRpb24uCiAgICAgKiAgICAgUHJpY2UgaXMgc3RhbGUuICovCiAgICBmdW5jdGlvbiBidXkodWludCBuKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcGF5YWJsZQogICAgICAgIG5vdExpcXVpZGF0aW5nCiAgICAgICAgb3B0aW9uYWxQcm94eQogICAgewogICAgICAgIC8vIFByaWNlIHN0YWxlbmVzcyBjaGVjayBvY2N1cnMgaW5zaWRlIHRoZSBjYWxsIHRvIHB1cmNoYXNlRXRoZXJDb3N0LgogICAgICAgIHJlcXVpcmUobiA+PSBNSU5JTVVNX1BVUkNIQVNFICYmCiAgICAgICAgICAgICAgICBtc2cudmFsdWUgPT0gcHVyY2hhc2VDb3N0RXRoZXIobikpOwogICAgICAgIGFkZHJlc3Mgc2VuZGVyID0gbWVzc2FnZVNlbmRlcjsKICAgICAgICAvLyBzdWIgcmVxdWlyZXMgdGhhdCBub21pblBvb2wgPj0gbgogICAgICAgIG5vbWluUG9vbCA9IHNhZmVTdWIobm9taW5Qb29sLCBuKTsKICAgICAgICBzdGF0ZS5zZXRCYWxhbmNlT2Yoc2VuZGVyLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpLCBuKSk7CiAgICAgICAgZW1pdCBQdXJjaGFzZWQoc2VuZGVyLCBzZW5kZXIsIG4sIG1zZy52YWx1ZSk7CiAgICAgICAgZW1pdCBUcmFuc2ZlcigwLCBzZW5kZXIsIG4pOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgbik7CiAgICB9CgogICAgLyogU2VuZHMgbiBub21pbnMgdG8gdGhlIHBvb2wgZnJvbSB0aGUgc2VuZGVyLCBpbiBleGNoYW5nZSBmb3IKICAgICAqICRuIG1pbnVzIHRoZSBmZWUgd29ydGggb2YgZXRoZXIuCiAgICAgKiBFeGNlcHRpb25hbCBjb25kaXRpb25zOgogICAgICogICAgIEluc3VmZmljaWVudCBub21pbnMgaW4gc2VuZGVyJ3Mgd2FsbGV0LgogICAgICogICAgIEluc3VmZmljaWVudCBmdW5kcyBpbiB0aGUgcG9vbCB0byBwYXkgc2VuZGVyLgogICAgICogICAgIFByaWNlIGlzIHN0YWxlIGlmIG5vdCBpbiBsaXF1aWRhdGlvbi4gKi8KICAgIGZ1bmN0aW9uIHNlbGwodWludCBuKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb3B0aW9uYWxQcm94eQogICAgewoKICAgICAgICAvLyBQcmljZSBzdGFsZW5lc3MgY2hlY2sgb2NjdXJzIGluc2lkZSB0aGUgY2FsbCB0byBzYWxlUHJvY2VlZHNFdGhlciwKICAgICAgICAvLyBidXQgd2UgYWxsb3cgcGVvcGxlIHRvIHNlbGwgdGhlaXIgbm9taW5zIGJhY2sgdG8gdGhlIHN5c3RlbQogICAgICAgIC8vIGlmIHdlJ3JlIGluIGxpcXVpZGF0aW9uLCByZWdhcmRsZXNzLgogICAgICAgIHVpbnQgcHJvY2VlZHM7CiAgICAgICAgaWYgKGlzTGlxdWlkYXRpbmcoKSkgewogICAgICAgICAgICBwcm9jZWVkcyA9IHNhbGVQcm9jZWVkc0V0aGVyQWxsb3dTdGFsZShuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwcm9jZWVkcyA9IHNhbGVQcm9jZWVkc0V0aGVyKG4pOwogICAgICAgIH0KCiAgICAgICAgcmVxdWlyZShhZGRyZXNzKHRoaXMpLmJhbGFuY2UgPj0gcHJvY2VlZHMpOwoKICAgICAgICBhZGRyZXNzIHNlbmRlciA9IG1lc3NhZ2VTZW5kZXI7CiAgICAgICAgLy8gc3ViIHJlcXVpcmVzIHRoYXQgdGhlIGJhbGFuY2UgaXMgZ3JlYXRlciB0aGFuIG4KICAgICAgICBzdGF0ZS5zZXRCYWxhbmNlT2Yoc2VuZGVyLCBzYWZlU3ViKHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpLCBuKSk7CiAgICAgICAgbm9taW5Qb29sID0gc2FmZUFkZChub21pblBvb2wsIG4pOwogICAgICAgIGVtaXQgU29sZChzZW5kZXIsIHNlbmRlciwgbiwgcHJvY2VlZHMpOwogICAgICAgIGVtaXQgVHJhbnNmZXIoc2VuZGVyLCAwLCBuKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIG4pOwogICAgICAgIHNlbmRlci50cmFuc2Zlcihwcm9jZWVkcyk7CiAgICB9CgogICAgLyogTG9jayBub21pbiBwdXJjaGFzZSBmdW5jdGlvbiBpbiBwcmVwYXJhdGlvbiBmb3IgZGVzdHJveWluZyB0aGUgY29udHJhY3QuCiAgICAgKiBXaGlsZSB0aGUgY29udHJhY3QgaXMgdW5kZXIgbGlxdWlkYXRpb24sIHVzZXJzIG1heSBzZWxsIG5vbWlucyBiYWNrIHRvIHRoZSBzeXN0ZW0uCiAgICAgKiBBZnRlciBsaXF1aWRhdGlvbiBwZXJpb2QgaGFzIHRlcm1pbmF0ZWQsIHRoZSBjb250cmFjdCBtYXkgYmUgc2VsZi1kZXN0cnVjdGVkLAogICAgICogcmV0dXJuaW5nIGFsbCByZW1haW5pbmcgZXRoZXIgdG8gdGhlIGJlbmVmaWNpYXJ5IGFkZHJlc3MuCiAgICAgKiBFeGNlcHRpb25hbCBjYXNlczoKICAgICAqICAgICBOb3QgY2FsbGVkIGJ5IGNvbnRyYWN0IG93bmVyOwogICAgICogICAgIGNvbnRyYWN0IGFscmVhZHkgaW4gbGlxdWlkYXRpb247ICovCiAgICBmdW5jdGlvbiBmb3JjZUxpcXVpZGF0aW9uKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vdExpcXVpZGF0aW5nCiAgICAgICAgb3B0aW9uYWxQcm94eV9vbmx5T3duZXIKICAgIHsKICAgICAgICBiZWdpbkxpcXVpZGF0aW9uKCk7CiAgICB9CgogICAgZnVuY3Rpb24gYmVnaW5MaXF1aWRhdGlvbigpCiAgICAgICAgaW50ZXJuYWwKICAgIHsKICAgICAgICBsaXF1aWRhdGlvblRpbWVzdGFtcCA9IG5vdzsKICAgICAgICBlbWl0IExpcXVpZGF0aW9uQmVndW4obGlxdWlkYXRpb25QZXJpb2QpOwogICAgfQoKICAgIC8qIElmIHRoZSBjb250cmFjdCBpcyBsaXF1aWRhdGluZywgdGhlIG93bmVyIG1heSBleHRlbmQgdGhlIGxpcXVpZGF0aW9uIHBlcmlvZC4KICAgICAqIEl0IG1heSBvbmx5IGdldCBsb25nZXIsIG5vdCBzaG9ydGVyLCBhbmQgaXQgbWF5IG5vdCBiZSBleHRlbmRlZCBwYXN0CiAgICAgKiB0aGUgbGlxdWlkYXRpb24gbWF4LiAqLwogICAgZnVuY3Rpb24gZXh0ZW5kTGlxdWlkYXRpb25QZXJpb2QodWludCBleHRlbnNpb24pCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUoaXNMaXF1aWRhdGluZygpKTsKICAgICAgICB1aW50IHN1bSA9IHNhZmVBZGQobGlxdWlkYXRpb25QZXJpb2QsIGV4dGVuc2lvbik7CiAgICAgICAgcmVxdWlyZShzdW0gPD0gTUFYX0xJUVVJREFUSU9OX1BFUklPRCk7CiAgICAgICAgbGlxdWlkYXRpb25QZXJpb2QgPSBzdW07CiAgICAgICAgZW1pdCBMaXF1aWRhdGlvbkV4dGVuZGVkKGV4dGVuc2lvbik7CiAgICB9CgogICAgLyogTGlxdWlkYXRpb24gY2FuIG9ubHkgYmUgc3RvcHBlZCBpZiB0aGUgY29sbGF0ZXJhbGlzYXRpb24gcmF0aW8KICAgICAqIG9mIHRoaXMgY29udHJhY3QgaGFzIHJlY292ZXJlZCBhYm92ZSB0aGUgYXV0b21hdGljIGxpcXVpZGF0aW9uCiAgICAgKiB0aHJlc2hvbGQsIGZvciBleGFtcGxlIGlmIHRoZSBldGhlciBwcmljZSBoYXMgaW5jcmVhc2VkLAogICAgICogb3IgYnkgaW5jbHVkaW5nIGVub3VnaCBldGhlciBpbiB0aGlzIHRyYW5zYWN0aW9uLiAqLwogICAgZnVuY3Rpb24gdGVybWluYXRlTGlxdWlkYXRpb24oKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcGF5YWJsZQogICAgICAgIHByaWNlTm90U3RhbGUKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUoaXNMaXF1aWRhdGluZygpKTsKICAgICAgICByZXF1aXJlKF9ub21pbkNhcCgpID09IDAgfHwgY29sbGF0ZXJhbGlzYXRpb25SYXRpbygpID49IEFVVE9fTElRVUlEQVRJT05fUkFUSU8pOwogICAgICAgIGxpcXVpZGF0aW9uVGltZXN0YW1wID0gfnVpbnQoMCk7CiAgICAgICAgbGlxdWlkYXRpb25QZXJpb2QgPSBERUZBVUxUX0xJUVVJREFUSU9OX1BFUklPRDsKICAgICAgICBlbWl0IExpcXVpZGF0aW9uVGVybWluYXRlZCgpOwogICAgfQoKICAgIC8qIFRoZSBvd25lciBtYXkgZGVzdHJveSB0aGlzIGNvbnRyYWN0LCByZXR1cm5pbmcgYWxsIGZ1bmRzIGJhY2sgdG8gdGhlIGJlbmVmaWNpYXJ5CiAgICAgKiB3YWxsZXQsIG1heSBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgY29udHJhY3QgaGFzIGJlZW4gaW4KICAgICAqIGxpcXVpZGF0aW9uIGZvciBhdCBsZWFzdCBsaXF1aWRhdGlvblBlcmlvZCwgb3IgYWxsIGNpcmN1bGF0aW5nCiAgICAgKiBub21pbnMgaGF2ZSBiZWVuIHNvbGQgYmFjayBpbnRvIHRoZSBwb29sLiAqLwogICAgZnVuY3Rpb24gc2VsZkRlc3RydWN0KCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHlfb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShjYW5TZWxmRGVzdHJ1Y3QoKSk7CiAgICAgICAgZW1pdCBTZWxmRGVzdHJ1Y3RlZChiZW5lZmljaWFyeSk7CiAgICAgICAgc2VsZmRlc3RydWN0KGJlbmVmaWNpYXJ5KTsKICAgIH0KCiAgICAvKiBJZiBhIGNvbmZpc2NhdGlvbiBjb3VydCBtb3Rpb24gaGFzIHBhc3NlZCBhbmQgcmVhY2hlZCB0aGUgY29uZmlybWF0aW9uCiAgICAgKiBzdGF0ZSwgdGhlIGNvdXJ0IG1heSB0cmFuc2ZlciB0aGUgdGFyZ2V0IGFjY291bnQncyBiYWxhbmNlIHRvIHRoZSBmZWUgcG9vbAogICAgICogYW5kIGZyZWV6ZSBpdHMgcGFydGljaXBhdGlvbiBpbiBmdXJ0aGVyIHRyYW5zYWN0aW9ucy4gKi8KICAgIGZ1bmN0aW9uIGNvbmZpc2NhdGVCYWxhbmNlKGFkZHJlc3MgdGFyZ2V0KQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgLy8gU2hvdWxkIGJlIGNhbGxhYmxlIG9ubHkgYnkgdGhlIGNvbmZpc2NhdGlvbiBjb3VydC4KICAgICAgICByZXF1aXJlKENvdXJ0KG1zZy5zZW5kZXIpID09IGNvdXJ0KTsKICAgICAgICAKICAgICAgICAvLyBBIG1vdGlvbiBtdXN0IGFjdHVhbGx5IGJlIHVuZGVyd2F5LgogICAgICAgIHVpbnQgbW90aW9uSUQgPSBjb3VydC50YXJnZXRNb3Rpb25JRCh0YXJnZXQpOwogICAgICAgIHJlcXVpcmUobW90aW9uSUQgIT0gMCk7CgogICAgICAgIC8vIFRoZXNlIGNoZWNrcyBhcmUgc3RyaWN0bHkgdW5uZWNlc3NhcnksCiAgICAgICAgLy8gc2luY2UgdGhleSBhcmUgYWxyZWFkeSBjaGVja2VkIGluIHRoZSBjb3VydCBjb250cmFjdCBpdHNlbGYuCiAgICAgICAgLy8gSSBsZWF2ZSB0aGVtIGluIG91dCBvZiBwYXJhbm9pYS4KICAgICAgICByZXF1aXJlKGNvdXJ0Lm1vdGlvbkNvbmZpcm1pbmcobW90aW9uSUQpKTsKICAgICAgICByZXF1aXJlKGNvdXJ0Lm1vdGlvblBhc3Nlcyhtb3Rpb25JRCkpOwogICAgICAgIHJlcXVpcmUoIWZyb3plblt0YXJnZXRdKTsKCiAgICAgICAgLy8gQ29uZmlzY2F0ZSB0aGUgYmFsYW5jZSBpbiB0aGUgYWNjb3VudCBhbmQgZnJlZXplIGl0LgogICAgICAgIHVpbnQgYmFsYW5jZSA9IHN0YXRlLmJhbGFuY2VPZih0YXJnZXQpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZihhZGRyZXNzKHRoaXMpLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSwgYmFsYW5jZSkpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZih0YXJnZXQsIDApOwogICAgICAgIGZyb3plblt0YXJnZXRdID0gdHJ1ZTsKICAgICAgICBlbWl0IEFjY291bnRGcm96ZW4odGFyZ2V0LCB0YXJnZXQsIGJhbGFuY2UpOwogICAgICAgIGVtaXQgVHJhbnNmZXIodGFyZ2V0LCBhZGRyZXNzKHRoaXMpLCBiYWxhbmNlKTsKICAgIH0KCiAgICAvKiBUaGUgb3duZXIgbWF5IGFsbG93IGEgcHJldmlvdXNseS1mcm96ZW4gY29udHJhY3QgdG8gb25jZQogICAgICogYWdhaW4gYWNjZXB0IGFuZCB0cmFuc2ZlciBub21pbnMuICovCiAgICBmdW5jdGlvbiB1bmZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIGlmIChmcm96ZW5bdGFyZ2V0XSAmJiBFdGhlck5vbWluKHRhcmdldCkgIT0gdGhpcykgewogICAgICAgICAgICBmcm96ZW5bdGFyZ2V0XSA9IGZhbHNlOwogICAgICAgICAgICBlbWl0IEFjY291bnRVbmZyb3plbih0YXJnZXQsIHRhcmdldCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qIEZhbGxiYWNrIGZ1bmN0aW9uIGFsbG93cyBjb252ZW5pZW50IGNvbGxhdGVyYWxpc2F0aW9uIG9mIHRoZSBjb250cmFjdCwKICAgICAqIGluY2x1ZGluZyBieSBub24tZm91bmRhdGlvbiBwYXJ0aWVzLiAqLwogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7fQoKCiAgICAvKiA9PT09PT09PT09IE1PRElGSUVSUyA9PT09PT09PT09ICovCgogICAgbW9kaWZpZXIgbm90TGlxdWlkYXRpbmcKICAgIHsKICAgICAgICByZXF1aXJlKCFpc0xpcXVpZGF0aW5nKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgcHJpY2VOb3RTdGFsZQogICAgewogICAgICAgIHJlcXVpcmUoIXByaWNlSXNTdGFsZSgpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qIEFueSBmdW5jdGlvbiBtb2RpZmllZCBieSB0aGlzIHdpbGwgYXV0b21hdGljYWxseSBsaXF1aWRhdGUKICAgICAqIHRoZSBzeXN0ZW0gaWYgdGhlIGNvbGxhdGVyYWwgbGV2ZWxzIGFyZSB0b28gbG93LgogICAgICogVGhpcyBpcyBjYWxsZWQgb24gY29sbGF0ZXJhbC12YWx1ZS9ub21pbi1zdXBwbHkgbW9kaWZ5aW5nIGZ1bmN0aW9ucyB0aGF0IGNhbgogICAgICogYWN0dWFsbHkgbW92ZSB0aGUgY29udHJhY3QgaW50byBsaXF1aWRhdGlvbi4gVGhpcyBpcyByZWFsbHkgb25seQogICAgICogdGhlIHByaWNlIHVwZGF0ZSwgc2luY2UgaXNzdWFuY2UgcmVxdWlyZXMgdGhhdCB0aGUgY29udHJhY3QgaXMgb3ZlcmNvbGxhdGVyYWxpc2VkLAogICAgICogYnVybmluZyBjYW4gb25seSBkZXN0cm95IHRva2VucyB3aXRob3V0IHdpdGhkcmF3aW5nIGJhY2tpbmcsIGJ1eWluZyBmcm9tIHRoZSBwb29sIGNhbiBvbmx5CiAgICAgKiBhc3ltcHRvdGUgdG8gYSBjb2xsYXRlcmFsaXNhdGlvbiBsZXZlbCBvZiB1bml0eSwgd2hpbGUgc2VsbGluZyBpbnRvIHRoZSBwb29sIGNhbiBvbmx5IAogICAgICogaW5jcmVhc2UgdGhlIGNvbGxhdGVyYWxpc2F0aW9uIHJhdGlvLgogICAgICogQWRkaXRpb25hbGx5LCBwcmljZSB1cGRhdGUgY2hlY2tzIHNob3VsZC93aWxsIG9jY3VyIGZyZXF1ZW50bHkuICovCiAgICBtb2RpZmllciBwb3N0Q2hlY2tBdXRvTGlxdWlkYXRlCiAgICB7CiAgICAgICAgXzsKICAgICAgICBpZiAoIWlzTGlxdWlkYXRpbmcoKSAmJiBfbm9taW5DYXAoKSAhPSAwICYmIGNvbGxhdGVyYWxpc2F0aW9uUmF0aW8oKSA8IEFVVE9fTElRVUlEQVRJT05fUkFUSU8pIHsKICAgICAgICAgICAgYmVnaW5MaXF1aWRhdGlvbigpOwogICAgICAgIH0KICAgIH0KCgogICAgLyogPT09PT09PT09PSBFVkVOVFMgPT09PT09PT09PSAqLwoKICAgIGV2ZW50IFBvb2xSZXBsZW5pc2hlZCh1aW50IG5vbWluc0NyZWF0ZWQsIHVpbnQgY29sbGF0ZXJhbERlcG9zaXRlZCk7CgogICAgZXZlbnQgUG9vbERpbWluaXNoZWQodWludCBub21pbnNEZXN0cm95ZWQpOwoKICAgIGV2ZW50IFB1cmNoYXNlZChhZGRyZXNzIGJ1eWVyLCBhZGRyZXNzIGluZGV4ZWQgYnV5ZXJJbmRleCwgdWludCBub21pbnMsIHVpbnQgZXRoKTsKCiAgICBldmVudCBTb2xkKGFkZHJlc3Mgc2VsbGVyLCBhZGRyZXNzIGluZGV4ZWQgc2VsbGVySW5kZXgsIHVpbnQgbm9taW5zLCB1aW50IGV0aCk7CgogICAgZXZlbnQgUHJpY2VVcGRhdGVkKHVpbnQgbmV3UHJpY2UpOwoKICAgIGV2ZW50IFN0YWxlUGVyaW9kVXBkYXRlZCh1aW50IG5ld1BlcmlvZCk7CgogICAgZXZlbnQgT3JhY2xlVXBkYXRlZChhZGRyZXNzIG5ld09yYWNsZSk7CgogICAgZXZlbnQgQ291cnRVcGRhdGVkKGFkZHJlc3MgbmV3Q291cnQpOwoKICAgIGV2ZW50IEJlbmVmaWNpYXJ5VXBkYXRlZChhZGRyZXNzIG5ld0JlbmVmaWNpYXJ5KTsKCiAgICBldmVudCBMaXF1aWRhdGlvbkJlZ3VuKHVpbnQgZHVyYXRpb24pOwoKICAgIGV2ZW50IExpcXVpZGF0aW9uVGVybWluYXRlZCgpOwoKICAgIGV2ZW50IExpcXVpZGF0aW9uRXh0ZW5kZWQodWludCBleHRlbnNpb24pOwoKICAgIGV2ZW50IFBvb2xGZWVSYXRlVXBkYXRlZCh1aW50IG5ld0ZlZVJhdGUpOwoKICAgIGV2ZW50IFNlbGZEZXN0cnVjdGVkKGFkZHJlc3MgYmVuZWZpY2lhcnkpOwoKICAgIGV2ZW50IEFjY291bnRGcm96ZW4oYWRkcmVzcyB0YXJnZXQsIGFkZHJlc3MgaW5kZXhlZCB0YXJnZXRJbmRleCwgdWludCBiYWxhbmNlKTsKCiAgICBldmVudCBBY2NvdW50VW5mcm96ZW4oYWRkcmVzcyB0YXJnZXQsIGFkZHJlc3MgaW5kZXhlZCB0YXJnZXRJbmRleCk7Cn0KCi8qCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkNPTlRSQUNUIERFU0NSSVBUSU9OCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpBIHRva2VuIGludGVyZmFjZSB0byBiZSBvdmVycmlkZGVuIHRvIHByb2R1Y2UgYW4gRVJDMjAtY29tcGxpYW50CnRva2VuIGNvbnRyYWN0LiBJdCByZWxpZXMgb24gYmVpbmcgY2FsbGVkIHVuZGVybmVhdGggYSBwcm94eSwKYXMgZGVzY3JpYmVkIGluIFByb3h5LnNvbC4KClRoaXMgY29udHJhY3QgdXRpbGlzZXMgYSBzdGF0ZSBmb3IgdXBncmFkYWJpbGl0eSBwdXJwb3Nlcy4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBFeHRlcm5TdGF0ZVByb3h5VG9rZW4gaXMgU2FmZURlY2ltYWxNYXRoLCBQcm94eWFibGUgewoKICAgIC8qID09PT09PT09PT0gU1RBVEUgVkFSSUFCTEVTID09PT09PT09PT0gKi8KCiAgICAvLyBTdG9yZXMgYmFsYW5jZXMgYW5kIGFsbG93YW5jZXMuCiAgICBUb2tlblN0YXRlIHB1YmxpYyBzdGF0ZTsKCiAgICAvLyBPdGhlciBFUkMyMCBmaWVsZHMKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CgoKICAgIC8qID09PT09PT09PT0gQ09OU1RSVUNUT1IgPT09PT09PT09PSAqLwoKICAgIGZ1bmN0aW9uIEV4dGVyblN0YXRlUHJveHlUb2tlbihzdHJpbmcgX25hbWUsIHN0cmluZyBfc3ltYm9sLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgaW5pdGlhbFN1cHBseSwgYWRkcmVzcyBpbml0aWFsQmVuZWZpY2lhcnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9rZW5TdGF0ZSBfc3RhdGUsIGFkZHJlc3MgX293bmVyKQogICAgICAgIFByb3h5YWJsZShfb3duZXIpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OwoKICAgICAgICAvLyBpZiB0aGUgc3RhdGUgaXNuJ3Qgc2V0LCBjcmVhdGUgYSBuZXcgb25lCiAgICAgICAgaWYgKF9zdGF0ZSA9PSBUb2tlblN0YXRlKDApKSB7CiAgICAgICAgICAgIHN0YXRlID0gbmV3IFRva2VuU3RhdGUoX293bmVyLCBhZGRyZXNzKHRoaXMpKTsKICAgICAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKGluaXRpYWxCZW5lZmljaWFyeSwgdG90YWxTdXBwbHkpOwogICAgICAgICAgICBlbWl0IFRyYW5zZmVyKGFkZHJlc3MoMCksIGluaXRpYWxCZW5lZmljaWFyeSwgaW5pdGlhbFN1cHBseSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RhdGUgPSBfc3RhdGU7CiAgICAgICAgfQogICB9CgogICAgLyogPT09PT09PT09PSBWSUVXUyA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgdG9rZW5Pd25lciwgYWRkcmVzcyBzcGVuZGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzdGF0ZS5hbGxvd2FuY2UodG9rZW5Pd25lciwgc3BlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc3RhdGUuYmFsYW5jZU9mKGFjY291bnQpOwogICAgfQoKICAgIC8qID09PT09PT09PT0gTVVUQVRJVkUgRlVOQ1RJT05TID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBzZXRTdGF0ZShUb2tlblN0YXRlIF9zdGF0ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHlfb25seU93bmVyCiAgICB7CiAgICAgICAgc3RhdGUgPSBfc3RhdGU7CiAgICAgICAgZW1pdCBTdGF0ZVVwZGF0ZWQoX3N0YXRlKTsKICAgIH0gCgogICAgLyogQW55dGhpbmcgY2FsbGluZyB0aGlzIG11c3QgYXBwbHkgdGhlIG9ubHlQcm94eSBvciBvcHRpb25hbFByb3h5IG1vZGlmaWVycy4qLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyX2J5UHJveHkoYWRkcmVzcyBzZW5kZXIsIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIC8vIEluc3VmZmljaWVudCBiYWxhbmNlIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgc2FmZSBzdWJ0cmFjdGlvbi4KICAgICAgICBzdGF0ZS5zZXRCYWxhbmNlT2Yoc2VuZGVyLCBzYWZlU3ViKHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpLCB2YWx1ZSkpOwogICAgICAgIHN0YXRlLnNldEJhbGFuY2VPZih0bywgc2FmZUFkZChzdGF0ZS5iYWxhbmNlT2YodG8pLCB2YWx1ZSkpOwoKICAgICAgICBlbWl0IFRyYW5zZmVyKHNlbmRlciwgdG8sIHZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQW55dGhpbmcgY2FsbGluZyB0aGlzIG11c3QgYXBwbHkgdGhlIG9ubHlQcm94eSBvciBvcHRpb25hbFByb3h5IG1vZGlmaWVycy4qLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyRnJvbV9ieVByb3h5KGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoZnJvbSAhPSBhZGRyZXNzKDApICYmIHRvICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICAvLyBJbnN1ZmZpY2llbnQgYmFsYW5jZSB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHNhZmUgc3VidHJhY3Rpb24uCiAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKGZyb20sIHNhZmVTdWIoc3RhdGUuYmFsYW5jZU9mKGZyb20pLCB2YWx1ZSkpOwogICAgICAgIHN0YXRlLnNldEFsbG93YW5jZShmcm9tLCBzZW5kZXIsIHNhZmVTdWIoc3RhdGUuYWxsb3dhbmNlKGZyb20sIHNlbmRlciksIHZhbHVlKSk7CiAgICAgICAgc3RhdGUuc2V0QmFsYW5jZU9mKHRvLCBzYWZlQWRkKHN0YXRlLmJhbGFuY2VPZih0byksIHZhbHVlKSk7CgogICAgICAgIGVtaXQgVHJhbnNmZXIoZnJvbSwgdG8sIHZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhZGRyZXNzIHNlbmRlciA9IG1lc3NhZ2VTZW5kZXI7CiAgICAgICAgc3RhdGUuc2V0QWxsb3dhbmNlKHNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwogICAgICAgIGVtaXQgQXBwcm92YWwoc2VuZGVyLCBzcGVuZGVyLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogPT09PT09PT09PSBFVkVOVFMgPT09PT09PT09PSAqLwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwoKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwoKICAgIGV2ZW50IFN0YXRlVXBkYXRlZChhZGRyZXNzIG5ld1N0YXRlKTsKfQoKLyoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ09OVFJBQ1QgREVTQ1JJUFRJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KClRoaXMgY29udHJhY3QgYWxsb3dzIHRoZSBmb3VuZGF0aW9uIHRvIGFwcGx5IHVuaXF1ZSB2ZXN0aW5nCnNjaGVkdWxlcyB0byBoYXZ2ZW4gZnVuZHMgc29sZCBhdCB2YXJpb3VzIGRpc2NvdW50cyBpbiB0aGUgdG9rZW4Kc2FsZS4gSGF2dmVuRXNjcm93IGdpdmVzIHVzZXJzIHRoZSBhYmlsaXR5IHRvIGluc3BlY3QgdGhlaXIKdmVzdGVkIGZ1bmRzLCB0aGVpciBxdWFudGl0aWVzIGFuZCB2ZXN0aW5nIGRhdGVzLCBhbmQgdG8gd2l0aGRyYXcKdGhlIGZlZXMgdGhhdCBhY2NydWUgb24gdGhvc2UgZnVuZHMuCgpUaGUgZmVlcyBhcmUgaGFuZGxlZCBieSB3aXRoZHJhd2luZyB0aGUgZW50aXJlIGZlZSBhbGxvY2F0aW9uCmZvciBhbGwgaGF2dmVucyBpbnNpZGUgdGhlIGVzY3JvdyBjb250cmFjdCwgYW5kIHRoZW4gYWxsb3dpbmcKdGhlIGNvbnRyYWN0IGl0c2VsZiB0byBzdWJkaXZpZGUgdGhhdCBwb29sIHVwIHByb3BvcnRpb25hbGx5IHdpdGhpbgppdHNlbGYuIEV2ZXJ5IHRpbWUgdGhlIGZlZSBwZXJpb2Qgcm9sbHMgb3ZlciBpbiB0aGUgbWFpbiBIYXZ2ZW4KY29udHJhY3QsIHRoZSBIYXZ2ZW5Fc2Nyb3cgZmVlIHBvb2wgaXMgcmVtaXR0ZWQgYmFjayBpbnRvIHRoZSAKbWFpbiBmZWUgcG9vbCB0byBiZSByZWRpc3RyaWJ1dGVkIGluIHRoZSBuZXh0IGZlZSBwZXJpb2QuCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKKi8KCmNvbnRyYWN0IEhhdnZlbkVzY3JvdyBpcyBPd25lZCwgTGltaXRlZFNldHVwKDggd2Vla3MpLCBTYWZlRGVjaW1hbE1hdGggeyAgICAKICAgIC8vIFRoZSBjb3JyZXNwb25kaW5nIEhhdnZlbiBjb250cmFjdC4KICAgIEhhdnZlbiBwdWJsaWMgaGF2dmVuOwoKICAgIC8vIExpc3RzIG9mICh0aW1lc3RhbXAsIHF1YW50aXR5KSBwYWlycyBwZXIgYWNjb3VudCwgc29ydGVkIGluIGFzY2VuZGluZyB0aW1lIG9yZGVyLgogICAgLy8gVGhlc2UgYXJlIHRoZSB0aW1lcyBhdCB3aGljaCBlYWNoIGdpdmVuIHF1YW50aXR5IG9mIGhhdnZlbnMgdmVzdHMuCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludFsyXVtdKSBwdWJsaWMgdmVzdGluZ1NjaGVkdWxlczsKCiAgICAvLyBBbiBhY2NvdW50J3MgdG90YWwgdmVzdGVkIGhhdnZlbiBiYWxhbmNlIHRvIHNhdmUgcmVjb21wdXRpbmcgdGhpcyBmb3IgZmVlIGV4dHJhY3Rpb24gcHVycG9zZXMuCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2U7CgogICAgLy8gVGhlIHRvdGFsIHJlbWFpbmluZyB2ZXN0ZWQgYmFsYW5jZSwgZm9yIHZlcmlmeWluZyB0aGUgYWN0dWFsIGhhdnZlbiBiYWxhbmNlIG9mIHRoaXMgY29udHJhY3QgYWdhaW5zdC4KICAgIHVpbnQgcHVibGljIHRvdGFsVmVzdGVkQmFsYW5jZTsKCgogICAgLyogPT09PT09PT09PSBDT05TVFJVQ1RPUiA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gSGF2dmVuRXNjcm93KGFkZHJlc3MgX293bmVyLCBIYXZ2ZW4gX2hhdnZlbikKICAgICAgICBPd25lZChfb3duZXIpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgaGF2dmVuID0gX2hhdnZlbjsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBTRVRURVJTID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBzZXRIYXZ2ZW4oSGF2dmVuIF9oYXZ2ZW4pCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBoYXZ2ZW4gPSBfaGF2dmVuOwogICAgICAgIGVtaXQgSGF2dmVuVXBkYXRlZChfaGF2dmVuKTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBWSUVXIEZVTkNUSU9OUyA9PT09PT09PT09ICovCgogICAgLyogQSBzaW1wbGUgYWxpYXMgdG8gdG90YWxWZXN0ZWRBY2NvdW50QmFsYW5jZTogcHJvdmlkZXMgRVJDMjAgYmFsYW5jZSBpbnRlZ3JhdGlvbi4gKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIGFjY291bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbYWNjb3VudF07CiAgICB9CgogICAgLyogVGhlIG51bWJlciBvZiB2ZXN0aW5nIGRhdGVzIGluIGFuIGFjY291bnQncyBzY2hlZHVsZS4gKi8KICAgIGZ1bmN0aW9uIG51bVZlc3RpbmdFbnRyaWVzKGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gdmVzdGluZ1NjaGVkdWxlc1thY2NvdW50XS5sZW5ndGg7CiAgICB9CgogICAgLyogR2V0IGEgcGFydGljdWxhciBzY2hlZHVsZSBlbnRyeSBmb3IgYW4gYWNjb3VudC4KICAgICAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYSBwYWlyICh0aW1lc3RhbXAsIGhhdnZlbiBxdWFudGl0eSkgKi8KICAgIGZ1bmN0aW9uIGdldFZlc3RpbmdTY2hlZHVsZUVudHJ5KGFkZHJlc3MgYWNjb3VudCwgdWludCBpbmRleCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludFsyXSkKICAgIHsKICAgICAgICByZXR1cm4gdmVzdGluZ1NjaGVkdWxlc1thY2NvdW50XVtpbmRleF07CiAgICB9CgogICAgLyogR2V0IHRoZSB0aW1lIGF0IHdoaWNoIGEgZ2l2ZW4gc2NoZWR1bGUgZW50cnkgd2lsbCB2ZXN0LiAqLwogICAgZnVuY3Rpb24gZ2V0VmVzdGluZ1RpbWUoYWRkcmVzcyBhY2NvdW50LCB1aW50IGluZGV4KQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiB2ZXN0aW5nU2NoZWR1bGVzW2FjY291bnRdW2luZGV4XVswXTsKICAgIH0KCiAgICAvKiBHZXQgdGhlIHF1YW50aXR5IG9mIGhhdnZlbnMgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gc2NoZWR1bGUgZW50cnkuICovCiAgICBmdW5jdGlvbiBnZXRWZXN0aW5nUXVhbnRpdHkoYWRkcmVzcyBhY2NvdW50LCB1aW50IGluZGV4KQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiB2ZXN0aW5nU2NoZWR1bGVzW2FjY291bnRdW2luZGV4XVsxXTsKICAgIH0KCiAgICAvKiBPYnRhaW4gdGhlIGluZGV4IG9mIHRoZSBuZXh0IHNjaGVkdWxlIGVudHJ5IHRoYXQgd2lsbCB2ZXN0IGZvciBhIGdpdmVuIHVzZXIuICovCiAgICBmdW5jdGlvbiBnZXROZXh0VmVzdGluZ0luZGV4KGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICB1aW50IGxlbiA9IG51bVZlc3RpbmdFbnRyaWVzKGFjY291bnQpOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGlmIChnZXRWZXN0aW5nVGltZShhY2NvdW50LCBpKSAhPSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbGVuOwogICAgfQoKICAgIC8qIE9idGFpbiB0aGUgbmV4dCBzY2hlZHVsZSBlbnRyeSB0aGF0IHdpbGwgdmVzdCBmb3IgYSBnaXZlbiB1c2VyLgogICAgICogVGhlIHJldHVybiB2YWx1ZSBpcyBhIHBhaXIgKHRpbWVzdGFtcCwgaGF2dmVuIHF1YW50aXR5KSAqLwogICAgZnVuY3Rpb24gZ2V0TmV4dFZlc3RpbmdFbnRyeShhZGRyZXNzIGFjY291bnQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludFsyXSkKICAgIHsKICAgICAgICB1aW50IGluZGV4ID0gZ2V0TmV4dFZlc3RpbmdJbmRleChhY2NvdW50KTsKICAgICAgICBpZiAoaW5kZXggPT0gbnVtVmVzdGluZ0VudHJpZXMoYWNjb3VudCkpIHsKICAgICAgICAgICAgcmV0dXJuIFt1aW50KDApLCAwXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdldFZlc3RpbmdTY2hlZHVsZUVudHJ5KGFjY291bnQsIGluZGV4KTsKICAgIH0KCiAgICAvKiBPYnRhaW4gdGhlIHRpbWUgYXQgd2hpY2ggdGhlIG5leHQgc2NoZWR1bGUgZW50cnkgd2lsbCB2ZXN0IGZvciBhIGdpdmVuIHVzZXIuICovCiAgICBmdW5jdGlvbiBnZXROZXh0VmVzdGluZ1RpbWUoYWRkcmVzcyBhY2NvdW50KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgdWludCBpbmRleCA9IGdldE5leHRWZXN0aW5nSW5kZXgoYWNjb3VudCk7CiAgICAgICAgaWYgKGluZGV4ID09IG51bVZlc3RpbmdFbnRyaWVzKGFjY291bnQpKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2V0VmVzdGluZ1RpbWUoYWNjb3VudCwgaW5kZXgpOwogICAgfQoKICAgIC8qIE9idGFpbiB0aGUgcXVhbnRpdHkgd2hpY2ggdGhlIG5leHQgc2NoZWR1bGUgZW50cnkgd2lsbCB2ZXN0IGZvciBhIGdpdmVuIHVzZXIuICovCiAgICBmdW5jdGlvbiBnZXROZXh0VmVzdGluZ1F1YW50aXR5KGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHVpbnQgaW5kZXggPSBnZXROZXh0VmVzdGluZ0luZGV4KGFjY291bnQpOwogICAgICAgIGlmIChpbmRleCA9PSBudW1WZXN0aW5nRW50cmllcyhhY2NvdW50KSkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdldFZlc3RpbmdRdWFudGl0eShhY2NvdW50LCBpbmRleCk7CiAgICB9CgoKICAgIC8qID09PT09PT09PT0gTVVUQVRJVkUgRlVOQ1RJT05TID09PT09PT09PT0gKi8KCiAgICAvKiBXaXRoZHJhd3MgYSBxdWFudGl0eSBvZiBoYXZ2ZW5zIGJhY2sgdG8gdGhlIGhhdnZlbiBjb250cmFjdC4gKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3SGF2dmVucyh1aW50IHF1YW50aXR5KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2V0dXBGdW5jdGlvbgogICAgewogICAgICAgIGhhdnZlbi50cmFuc2ZlcihoYXZ2ZW4sIHF1YW50aXR5KTsKICAgIH0KCiAgICAvKiBEZXN0cm95IHRoZSB2ZXN0aW5nIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCBhbiBhY2NvdW50LiAqLwogICAgZnVuY3Rpb24gcHVyZ2VBY2NvdW50KGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHNldHVwRnVuY3Rpb24KICAgIHsKICAgICAgICBkZWxldGUgdmVzdGluZ1NjaGVkdWxlc1thY2NvdW50XTsKICAgICAgICB0b3RhbFZlc3RlZEJhbGFuY2UgPSBzYWZlU3ViKHRvdGFsVmVzdGVkQmFsYW5jZSwgdG90YWxWZXN0ZWRBY2NvdW50QmFsYW5jZVthY2NvdW50XSk7CiAgICAgICAgZGVsZXRlIHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbYWNjb3VudF07CiAgICB9CgogICAgLyogQWRkIGEgbmV3IHZlc3RpbmcgZW50cnkgYXQgYSBnaXZlbiB0aW1lIGFuZCBxdWFudGl0eSB0byBhbiBhY2NvdW50J3Mgc2NoZWR1bGUuCiAgICAgKiBBIGNhbGwgdG8gdGhpcyBzaG91bGQgYmUgYWNjb21wYW5pZWQgYnkgZWl0aGVyIGVub3VnaCBiYWxhbmNlIGFscmVhZHkgYXZhaWxhYmxlCiAgICAgKiBpbiB0aGlzIGNvbnRyYWN0LCBvciBhIGNvcnJlc3BvbmRpbmcgY2FsbCB0byBoYXZ2ZW4uZW5kb3coKSwgdG8gZW5zdXJlIHRoYXQgd2hlbgogICAgICogdGhlIGZ1bmRzIGFyZSB3aXRoZHJhd24sIHRoZXJlIGlzIGVub3VnaCBiYWxhbmNlLCBhcyB3ZWxsIGFzIGNvcnJlY3RseSBjYWxjdWxhdGluZwogICAgICogdGhlIGZlZXMuCiAgICAgKiBOb3RlOyBhbHRob3VnaCB0aGlzIGZ1bmN0aW9uIGNvdWxkIHRlY2huaWNhbGx5IGJlIHVzZWQgdG8gcHJvZHVjZSB1bmJvdW5kZWQKICAgICAqIGFycmF5cywgaXQncyBvbmx5IGluIHRoZSBmb3VuZGF0aW9uJ3MgY29tbWFuZCB0byBhZGQgdG8gdGhlc2UgbGlzdHMuICovCiAgICBmdW5jdGlvbiBhcHBlbmRWZXN0aW5nRW50cnkoYWRkcmVzcyBhY2NvdW50LCB1aW50IHRpbWUsIHVpbnQgcXVhbnRpdHkpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2V0dXBGdW5jdGlvbgogICAgewogICAgICAgIC8vIE5vIGVtcHR5IG9yIGFscmVhZHktcGFzc2VkIHZlc3RpbmcgZW50cmllcyBhbGxvd2VkLgogICAgICAgIHJlcXVpcmUobm93IDwgdGltZSk7CiAgICAgICAgcmVxdWlyZShxdWFudGl0eSAhPSAwKTsKICAgICAgICB0b3RhbFZlc3RlZEJhbGFuY2UgPSBzYWZlQWRkKHRvdGFsVmVzdGVkQmFsYW5jZSwgcXVhbnRpdHkpOwogICAgICAgIHJlcXVpcmUodG90YWxWZXN0ZWRCYWxhbmNlIDw9IGhhdnZlbi5iYWxhbmNlT2YodGhpcykpOwoKICAgICAgICBpZiAodmVzdGluZ1NjaGVkdWxlc1thY2NvdW50XS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICB0b3RhbFZlc3RlZEFjY291bnRCYWxhbmNlW2FjY291bnRdID0gcXVhbnRpdHk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gRGlzYWxsb3cgYWRkaW5nIG5ldyB2ZXN0ZWQgaGF2dmVucyBlYXJsaWVyIHRoYW4gdGhlIGxhc3Qgb25lLgogICAgICAgICAgICAvLyBTaW5jZSBlbnRyaWVzIGFyZSBvbmx5IGFwcGVuZGVkLCB0aGlzIG1lYW5zIHRoYXQgbm8gdmVzdGluZyBkYXRlIGNhbiBiZSByZXBlYXRlZC4KICAgICAgICAgICAgcmVxdWlyZShnZXRWZXN0aW5nVGltZShhY2NvdW50LCBudW1WZXN0aW5nRW50cmllcyhhY2NvdW50KSAtIDEpIDwgdGltZSk7CiAgICAgICAgICAgIHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbYWNjb3VudF0gPSBzYWZlQWRkKHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbYWNjb3VudF0sIHF1YW50aXR5KTsKICAgICAgICB9CgogICAgICAgIHZlc3RpbmdTY2hlZHVsZXNbYWNjb3VudF0ucHVzaChbdGltZSwgcXVhbnRpdHldKTsKICAgIH0KCiAgICAvKiBDb25zdHJ1Y3QgYSB2ZXN0aW5nIHNjaGVkdWxlIHRvIHJlbGVhc2UgYSBxdWFudGl0aWVzIG9mIGhhdnZlbnMKICAgICAqIG92ZXIgYSBzZXJpZXMgb2YgaW50ZXJ2YWxzLiBBc3N1bWVzIHRoYXQgdGhlIHF1YW50aXRpZXMgYXJlIG5vbnplcm8KICAgICAqIGFuZCB0aGF0IHRoZSBzZXF1ZW5jZSBvZiB0aW1lc3RhbXBzIGlzIHN0cmljdGx5IGluY3JlYXNpbmcuICovCiAgICBmdW5jdGlvbiBhZGRWZXN0aW5nU2NoZWR1bGUoYWRkcmVzcyBhY2NvdW50LCB1aW50W10gdGltZXMsIHVpbnRbXSBxdWFudGl0aWVzKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2V0dXBGdW5jdGlvbgogICAgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHRpbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFwcGVuZFZlc3RpbmdFbnRyeShhY2NvdW50LCB0aW1lc1tpXSwgcXVhbnRpdGllc1tpXSk7CiAgICAgICAgfQoKICAgIH0KCiAgICAvKiBBbGxvdyBhIHVzZXIgdG8gd2l0aGRyYXcgYW55IHRva2VucyB0aGF0IGhhdmUgdmVzdGVkLiAqLwogICAgZnVuY3Rpb24gdmVzdCgpIAogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgdWludCB0b3RhbDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1WZXN0aW5nRW50cmllcyhtc2cuc2VuZGVyKTsgaSsrKSB7CiAgICAgICAgICAgIHVpbnQgdGltZSA9IGdldFZlc3RpbmdUaW1lKG1zZy5zZW5kZXIsIGkpOwogICAgICAgICAgICAvLyBUaGUgbGlzdCBpcyBzb3J0ZWQ7IHdoZW4gd2UgcmVhY2ggdGhlIGZpcnN0IGZ1dHVyZSB0aW1lLCBiYWlsIG91dC4KICAgICAgICAgICAgaWYgKHRpbWUgPiBub3cpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgcXR5ID0gZ2V0VmVzdGluZ1F1YW50aXR5KG1zZy5zZW5kZXIsIGkpOwogICAgICAgICAgICBpZiAocXR5ID09IDApIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2ZXN0aW5nU2NoZWR1bGVzW21zZy5zZW5kZXJdW2ldID0gWzAsIDBdOwogICAgICAgICAgICB0b3RhbCA9IHNhZmVBZGQodG90YWwsIHF0eSk7CiAgICAgICAgICAgIHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKHRvdGFsVmVzdGVkQWNjb3VudEJhbGFuY2VbbXNnLnNlbmRlcl0sIHF0eSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodG90YWwgIT0gMCkgewogICAgICAgICAgICB0b3RhbFZlc3RlZEJhbGFuY2UgPSBzYWZlU3ViKHRvdGFsVmVzdGVkQmFsYW5jZSwgdG90YWwpOwogICAgICAgICAgICBoYXZ2ZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG90YWwpOwogICAgICAgICAgICBlbWl0IFZlc3RlZChtc2cuc2VuZGVyLCBtc2cuc2VuZGVyLAogICAgICAgICAgICAgICAgICAgbm93LCB0b3RhbCk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKiA9PT09PT09PT09IEVWRU5UUyA9PT09PT09PT09ICovCgogICAgZXZlbnQgSGF2dmVuVXBkYXRlZChhZGRyZXNzIG5ld0hhdnZlbik7CgogICAgZXZlbnQgVmVzdGVkKGFkZHJlc3MgYmVuZWZpY2lhcnksIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeUluZGV4LCB1aW50IHRpbWUsIHVpbnQgdmFsdWUpOwp9CgovKgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDT05UUkFDVCBERVNDUklQVElPTgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKVGhpcyBjb250cmFjdCBhbGxvd3MgYW4gaW5oZXJpdGluZyBjb250cmFjdCB0byBiZSBkZXN0cm95ZWQgYWZ0ZXIKaXRzIG93bmVyIGluZGljYXRlcyBhbiBpbnRlbnRpb24gYW5kIHRoZW4gd2FpdHMgZm9yIGEgcGVyaW9kCndpdGhvdXQgY2hhbmdpbmcgdGhlaXIgbWluZC4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBTZWxmRGVzdHJ1Y3RpYmxlIGlzIE93bmVkIHsKCQoJdWludCBwdWJsaWMgaW5pdGlhdGlvblRpbWUgPSB+dWludCgwKTsKCXVpbnQgY29uc3RhbnQgU0RfRFVSQVRJT04gPSAzIGRheXM7CglhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCglmdW5jdGlvbiBTZWxmRGVzdHJ1Y3RpYmxlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9iZW5lZmljaWFyeSkKCQlwdWJsaWMKCQlPd25lZChfb3duZXIpCgl7CgkJYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7Cgl9CgoJZnVuY3Rpb24gc2V0QmVuZWZpY2lhcnkoYWRkcmVzcyBfYmVuZWZpY2lhcnkpCgkJZXh0ZXJuYWwKCQlvbmx5T3duZXIKCXsKCQliZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKCQllbWl0IFNlbGZEZXN0cnVjdEJlbmVmaWNpYXJ5VXBkYXRlZChfYmVuZWZpY2lhcnkpOwoJfQoKCWZ1bmN0aW9uIGluaXRpYXRlU2VsZkRlc3RydWN0KCkKCQlleHRlcm5hbAoJCW9ubHlPd25lcgoJewoJCWluaXRpYXRpb25UaW1lID0gbm93OwoJCWVtaXQgU2VsZkRlc3RydWN0SW5pdGlhdGVkKFNEX0RVUkFUSU9OKTsKCX0KCglmdW5jdGlvbiB0ZXJtaW5hdGVTZWxmRGVzdHJ1Y3QoKQoJCWV4dGVybmFsCgkJb25seU93bmVyCgl7CgkJaW5pdGlhdGlvblRpbWUgPSB+dWludCgwKTsKCQllbWl0IFNlbGZEZXN0cnVjdFRlcm1pbmF0ZWQoKTsKCX0KCglmdW5jdGlvbiBzZWxmRGVzdHJ1Y3QoKQoJCWV4dGVybmFsCgkJb25seU93bmVyCgl7CgkJcmVxdWlyZShpbml0aWF0aW9uVGltZSArIFNEX0RVUkFUSU9OIDwgbm93KTsKCQllbWl0IFNlbGZEZXN0cnVjdGVkKGJlbmVmaWNpYXJ5KTsKCQlzZWxmZGVzdHJ1Y3QoYmVuZWZpY2lhcnkpOwoJfQoKCWV2ZW50IFNlbGZEZXN0cnVjdEJlbmVmaWNpYXJ5VXBkYXRlZChhZGRyZXNzIG5ld0JlbmVmaWNpYXJ5KTsKCglldmVudCBTZWxmRGVzdHJ1Y3RJbml0aWF0ZWQodWludCBkdXJhdGlvbik7CgoJZXZlbnQgU2VsZkRlc3RydWN0VGVybWluYXRlZCgpOwoKCWV2ZW50IFNlbGZEZXN0cnVjdGVkKGFkZHJlc3MgYmVuZWZpY2lhcnkpOwp9CgovKgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDT05UUkFDVCBERVNDUklQVElPTgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKSGF2dmVuIHRva2VuIGNvbnRyYWN0LiBIYXZ2ZW5zIGFyZSB0cmFuc2ZlcmFibGUgRVJDMjAgdG9rZW5zLAphbmQgYWxzbyBnaXZlIHRoZWlyIGhvbGRlcnMgdGhlIGZvbGxvd2luZyBwcml2aWxlZ2VzLgpBbiBvd25lciBvZiBoYXZ2ZW5zIGlzIGVudGl0bGVkIHRvIGEgc2hhcmUgaW4gdGhlIGZlZXMgbGV2aWVkIG9uCm5vbWluIHRyYW5zYWN0aW9ucywgYW5kIGFkZGl0aW9uYWxseSBtYXkgcGFydGljaXBhdGUgaW4gbm9taW4KY29uZmlzY2F0aW9uIHZvdGVzLgoKQWZ0ZXIgYSBmZWUgcGVyaW9kIHRlcm1pbmF0ZXMsIHRoZSBkdXJhdGlvbiBhbmQgZmVlcyBjb2xsZWN0ZWQgZm9yIHRoYXQKcGVyaW9kIGFyZSBjb21wdXRlZCwgYW5kIHRoZSBuZXh0IHBlcmlvZCBiZWdpbnMuClRodXMgYW4gYWNjb3VudCBtYXkgb25seSB3aXRoZHJhdyB0aGUgZmVlcyBvd2VkIHRvIHRoZW0gZm9yIHRoZSBwcmV2aW91cwpwZXJpb2QsIGFuZCBtYXkgb25seSBkbyBzbyBvbmNlIHBlciBwZXJpb2QuCkFueSB1bmNsYWltZWQgZmVlcyByb2xsIG92ZXIgaW50byB0aGUgY29tbW9uIHBvdCBmb3IgdGhlIG5leHQgcGVyaW9kLgoKVGhlIGZlZSBlbnRpdGxlbWVudCBvZiBhIGhhdnZlbiBob2xkZXIgaXMgcHJvcG9ydGlvbmFsIHRvIHRoZWlyIGF2ZXJhZ2UKaGF2dmVuIGJhbGFuY2Ugb3ZlciB0aGUgbGFzdCBmZWUgcGVyaW9kLiBUaGlzIGlzIGNvbXB1dGVkIGJ5IG1lYXN1cmluZyB0aGUKYXJlYSB1bmRlciB0aGUgZ3JhcGggb2YgYSB1c2VyJ3MgYmFsYW5jZSBvdmVyIHRpbWUsIGFuZCB0aGVuIHdoZW4gZmVlcyBhcmUKZGlzdHJpYnV0ZWQsIGRpdmlkaW5nIHRocm91Z2ggYnkgdGhlIGR1cmF0aW9uIG9mIHRoZSBmZWUgcGVyaW9kLgoKV2UgbmVlZCBvbmx5IHVwZGF0ZSBmZWUgZW50aXRsZW1lbnQgb24gdHJhbnNmZXIgd2hlbiB0aGUgaGF2dmVuIGJhbGFuY2VzIG9mIHRoZSBzZW5kZXIKYW5kIHJlY2lwaWVudCBhcmUgbW9kaWZpZWQuIFRoaXMgaXMgZm9yIGVmZmljaWVuY3ksIGFuZCBhZGRzIGFuIGltcGxpY2l0IGZyaWN0aW9uIHRvCnRyYWRpbmcgaW4gdGhlIGhhdnZlbiBtYXJrZXQuIEEgaGF2dmVuIGhvbGRlciBwYXlzIGZvciBoaXMgb3duIHJlY29tcHV0YXRpb24gd2hlbmV2ZXIKaGUgd2FudHMgdG8gY2hhbmdlIGhpcyBwb3NpdGlvbiwgd2hpY2ggc2F2ZXMgdGhlIGZvdW5kYXRpb24gaGF2aW5nIHRvIG1haW50YWluIGEgcG90CmRlZGljYXRlZCB0byByZXNvdXJjaW5nIHRoaXMuCgpBIGh5cG90aGV0aWNhbCB1c2VyJ3MgYmFsYW5jZSBoaXN0b3J5IG92ZXIgb25lIGZlZSBwZXJpb2QsIHBpY3RvcmlhbGx5OgoKICAgICAgcyBfX19fCiAgICAgICB8ICAgIHwKICAgICAgIHwgICAgfF9fXyBwCiAgICAgICB8X19fX3xfX198X19fIF9fIF8gIF8KICAgICAgIGYgICAgdCAgIG4KCkhlcmUsIHRoZSBiYWxhbmNlIHdhcyBzIGJldHdlZW4gdGltZXMgZiBhbmQgdCwgYXQgd2hpY2ggdGltZSBhIHRyYW5zZmVyCm9jY3VycmVkLCB1cGRhdGluZyB0aGUgYmFsYW5jZSB0byBwLCB1bnRpbCBuLCB3aGVuIHRoZSBwcmVzZW50IHRyYW5zZmVyIG9jY3Vycy4KV2hlbiBhIG5ldyB0cmFuc2ZlciBvY2N1cnMgYXQgdGltZSBuLCB0aGUgYmFsYW5jZSBiZWluZyBwLAp3ZSBtdXN0OgoKICAtIEFkZCB0aGUgYXJlYSBwICogKG4gLSB0KSB0byB0aGUgdG90YWwgYXJlYSByZWNvcmRlZCBzbyBmYXIKICAtIFVwZGF0ZSB0aGUgbGFzdCB0cmFuc2ZlciB0aW1lIHRvIHAKClNvIGlmIHRoaXMgZ3JhcGggcmVwcmVzZW50cyB0aGUgZW50aXJlIGN1cnJlbnQgZmVlIHBlcmlvZCwKdGhlIGF2ZXJhZ2UgaGF2dmVucyBoZWxkIHNvIGZhciBpcyAoKHQtZikqcyArIChuLXQpKnApIC8gKG4tZikuClRoZSBjb21wbGVtZW50YXJ5IGNvbXB1dGF0aW9ucyBtdXN0IGJlIHBlcmZvcm1lZCBmb3IgYm90aCBzZW5kZXIgYW5kCnJlY2lwaWVudC4KCk5vdGUgdGhhdCBhIHRyYW5zZmVyIGtlZXBzIGdsb2JhbCBzdXBwbHkgb2YgaGF2dmVucyBpbnZhcmlhbnQuClRoZSBzdW0gb2YgYWxsIGJhbGFuY2VzIGlzIGNvbnN0YW50LCBhbmQgdW5tb2RpZmllZCBieSBhbnkgdHJhbnNmZXIuClNvIHRoZSBzdW0gb2YgYWxsIGJhbGFuY2VzIG11bHRpcGxpZWQgYnkgdGhlIGR1cmF0aW9uIG9mIGEgZmVlIHBlcmlvZCBpcyBhbHNvCmNvbnN0YW50LCBhbmQgdGhpcyBpcyBlcXVpdmFsZW50IHRvIHRoZSBzdW0gb2YgdGhlIGFyZWEgb2YgZXZlcnkgdXNlcidzCnRpbWUvYmFsYW5jZSBncmFwaC4gRGl2aWRpbmcgdGhyb3VnaCBieSB0aGF0IGR1cmF0aW9uIHlpZWxkcyBiYWNrIHRoZSB0b3RhbApoYXZ2ZW4gc3VwcGx5LiBTbywgYXQgdGhlIGVuZCBvZiBhIGZlZSBwZXJpb2QsIHdlIHJlYWxseSBkbyB5aWVsZCBhIHVzZXIncwphdmVyYWdlIHNoYXJlIGluIHRoZSBoYXZ2ZW4gc3VwcGx5IG92ZXIgdGhhdCBwZXJpb2QuCgpBIHNsaWdodCB3cmlua2xlIGlzIGludHJvZHVjZWQgaWYgd2UgY29uc2lkZXIgdGhlIHRpbWUgciB3aGVuIHRoZSBmZWUgcGVyaW9kCnJvbGxzIG92ZXIuIFRoZW4gdGhlIHByZXZpb3VzIGZlZSBwZXJpb2Qgay0xIGlzIGJlZm9yZSByLCBhbmQgdGhlIGN1cnJlbnQgZmVlCnBlcmlvZCBrIGlzIGFmdGVyd2FyZHMuIElmIHRoZSBsYXN0IHRyYW5zZmVyIHRvb2sgcGxhY2UgYmVmb3JlIHIsCmJ1dCB0aGUgbGF0ZXN0IHRyYW5zZmVyIG9jY3VycmVkIGFmdGVyd2FyZHM6CgprLTEgICAgICAgfCAgICAgICAgawogICAgICBzIF9ffF8KICAgICAgIHwgIHwgfAogICAgICAgfCAgfCB8X19fXyBwCiAgICAgICB8X198X3xfX19ffF9fXyBfXyBfICBfCiAgICAgICAgICB8CiAgICAgICBmICB8IHQgICAgbgogICAgICAgICAgcgoKSW4gdGhpcyBzaXR1YXRpb24gdGhlIGFyZWEgKHItZikqcyBjb250cmlidXRlcyB0byBmZWUgcGVyaW9kIGstMSwgd2hpbGUKdGhlIGFyZWEgKHQtcikqcyBjb250cmlidXRlcyB0byBmZWUgcGVyaW9kIGsuIFdlIHdpbGwgaW1wbGljaXRseSBjb25zaWRlciBhCnplcm8tdmFsdWUgdHJhbnNmZXIgdG8gaGF2ZSBvY2N1cnJlZCBhdCB0aW1lIHIuIFRoZWlyIGZlZSBlbnRpdGxlbWVudCBmb3IgdGhlCnByZXZpb3VzIHBlcmlvZCB3aWxsIGJlIGZpbmFsaXNlZCBhdCB0aGUgdGltZSBvZiB0aGVpciBmaXJzdCB0cmFuc2ZlciBkdXJpbmcgdGhlCmN1cnJlbnQgZmVlIHBlcmlvZCwgb3Igd2hlbiB0aGV5IHF1ZXJ5IG9yIHdpdGhkcmF3IHRoZWlyIGZlZSBlbnRpdGxlbWVudC4KCkluIHRoZSBpbXBsZW1lbnRhdGlvbiwgdGhlIGR1cmF0aW9uIG9mIGRpZmZlcmVudCBmZWUgcGVyaW9kcyBtYXkgYmUgc2xpZ2h0bHkgaXJyZWd1bGFyLAphcyB0aGUgY2hlY2sgdGhhdCB0aGV5IGhhdmUgcm9sbGVkIG92ZXIgb2NjdXJzIG9ubHkgd2hlbiBzdGF0ZS1jaGFuZ2luZyBoYXZ2ZW4Kb3BlcmF0aW9ucyBhcmUgcGVyZm9ybWVkLgoKQWRkaXRpb25hbGx5LCB3ZSBrZWVwIHRyYWNrIGFsc28gb2YgdGhlIHBlbnVsdGltYXRlIGFuZCBub3QganVzdCB0aGUgbGFzdAphdmVyYWdlIGJhbGFuY2UsIGluIG9yZGVyIHRvIHN1cHBvcnQgdGhlIHZvdGluZyBmdW5jdGlvbmFsaXR5IGRldGFpbGVkIGluIENvdXJ0LnNvbC4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoqLwoKY29udHJhY3QgSGF2dmVuIGlzIEV4dGVyblN0YXRlUHJveHlUb2tlbiwgU2VsZkRlc3RydWN0aWJsZSB7CgogICAgLyogPT09PT09PT09PSBTVEFURSBWQVJJQUJMRVMgPT09PT09PT09PSAqLwoKICAgIC8vIFN1bXMgb2YgYmFsYW5jZXMqZHVyYXRpb24gaW4gdGhlIGN1cnJlbnQgZmVlIHBlcmlvZC4KICAgIC8vIHJhbmdlOiBkZWNpbWFsczsgdW5pdHM6IGhhdnZlbi1zZWNvbmRzCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGN1cnJlbnRCYWxhbmNlU3VtOwoKICAgIC8vIEF2ZXJhZ2UgYWNjb3VudCBiYWxhbmNlcyBpbiB0aGUgbGFzdCBjb21wbGV0ZWQgZmVlIHBlcmlvZC4gVGhpcyBpcyBwcm9wb3J0aW9uYWwKICAgIC8vIHRvIHRoYXQgYWNjb3VudCdzIGxhc3QgcGVyaW9kIGZlZSBlbnRpdGxlbWVudC4KICAgIC8vIChpLmUuIGN1cnJlbnRCYWxhbmNlU3VtIGZvciB0aGUgcHJldmlvdXMgcGVyaW9kIGRpdmlkZWQgdGhyb3VnaCBieSBkdXJhdGlvbikKICAgIC8vIFdBUk5JTkc6IFRoaXMgbWF5IG5vdCBoYXZlIGJlZW4gdXBkYXRlZCBmb3IgdGhlIGxhdGVzdCBmZWUgcGVyaW9kIGF0IHRoZQogICAgLy8gICAgICAgICAgdGltZSBpdCBpcyBxdWVyaWVkLgogICAgLy8gcmFuZ2U6IGRlY2ltYWxzOyB1bml0czogaGF2dmVucwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBsYXN0QXZlcmFnZUJhbGFuY2U7CgogICAgLy8gVGhlIGF2ZXJhZ2UgYWNjb3VudCBiYWxhbmNlcyBpbiB0aGUgcGVyaW9kIGJlZm9yZSB0aGUgbGFzdCBjb21wbGV0ZWQgZmVlIHBlcmlvZC4KICAgIC8vIFRoaXMgaXMgdXNlZCBhcyBhIHBlcnNvbidzIHdlaWdodCBpbiBhIGNvbmZpc2NhdGlvbiB2b3RlLCBzbyBpdCBpbXBsaWVzIHRoYXQKICAgIC8vIHRoZSB2b3RlIGR1cmF0aW9uIG11c3QgYmUgbm8gbG9uZ2VyIHRoYW4gdGhlIGZlZSBwZXJpb2QgaW4gb3JkZXIgdG8gZ3VhcmFudGVlIHRoYXQgCiAgICAvLyBubyBwb3J0aW9uIG9mIGEgZmVlIHBlcmlvZCB1c2VkIGZvciBkZXRlcm1pbmluZyB2b3RlIHdlaWdodHMgZmFsbHMgd2l0aGluIHRoZQogICAgLy8gZHVyYXRpb24gb2YgYSB2b3RlIGl0IGNvbnRyaWJ1dGVzIHRvLgogICAgLy8gV0FSTklORzogVGhpcyBtYXkgbm90IGhhdmUgYmVlbiB1cGRhdGVkIGZvciB0aGUgbGF0ZXN0IGZlZSBwZXJpb2QgYXQgdGhlCiAgICAvLyAgICAgICAgICB0aW1lIGl0IGlzIHF1ZXJpZWQuCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHBlbnVsdGltYXRlQXZlcmFnZUJhbGFuY2U7CgogICAgLy8gVGhlIHRpbWUgYW4gYWNjb3VudCBsYXN0IG1hZGUgYSB0cmFuc2Zlci4KICAgIC8vIHJhbmdlOiBuYXR1cmFscwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBsYXN0VHJhbnNmZXJUaW1lc3RhbXA7CgogICAgLy8gVGhlIHRpbWUgdGhlIGN1cnJlbnQgZmVlIHBlcmlvZCBiZWdhbi4KICAgIHVpbnQgcHVibGljIGZlZVBlcmlvZFN0YXJ0VGltZSA9IDM7CiAgICAvLyBUaGUgYWN0dWFsIHN0YXJ0IG9mIHRoZSBsYXN0IGZlZSBwZXJpb2QgKHNlY29uZHMpLgogICAgLy8gVGhpcywgYW5kIHRoZSBwZW51bHRpbWF0ZSBmZWUgcGVyaW9kIGNhbiBiZSBpbml0aWFsbHkgc2V0IHRvIGFueSB2YWx1ZQogICAgLy8gICAwIDwgdmFsIDwgbm93LCBhcyBldmVyeW9uZSdzIGluZGl2aWR1YWwgbGFzdFRyYW5zZmVyVGltZSB3aWxsIGJlIDAKICAgIC8vICAgYW5kIGFzIHN1Y2gsIHRoZWlyIGxhc3RBdmdCYWwvcGVudWx0aW1hdGVBdmdCYWwgd2lsbCBiZSBzZXQgdG8gdGhhdCB2YWx1ZQogICAgLy8gICBhcGFydCBmcm9tIHRoZSBjb250cmFjdCwgd2hpY2ggd2lsbCBoYXZlIHRvdGFsU3VwcGx5CiAgICB1aW50IHB1YmxpYyBsYXN0RmVlUGVyaW9kU3RhcnRUaW1lID0gMjsKICAgIC8vIFRoZSBhY3R1YWwgc3RhcnQgb2YgdGhlIHBlbnVsdGltYXRlIGZlZSBwZXJpb2QgKHNlY29uZHMpLgogICAgdWludCBwdWJsaWMgcGVudWx0aW1hdGVGZWVQZXJpb2RTdGFydFRpbWUgPSAxOwoKICAgIC8vIEZlZSBwZXJpb2RzIHdpbGwgcm9sbCBvdmVyIGluIG5vIHNob3J0ZXIgYSB0aW1lIHRoYW4gdGhpcy4KICAgIHVpbnQgcHVibGljIHRhcmdldEZlZVBlcmlvZER1cmF0aW9uU2Vjb25kcyA9IDQgd2Vla3M7CiAgICAvLyBBbmQgbWF5IG5vdCBiZSBzZXQgdG8gYmUgc2hvcnRlciB0aGFuIGEgZGF5LgogICAgdWludCBjb25zdGFudCBNSU5fRkVFX1BFUklPRF9EVVJBVElPTl9TRUNPTkRTID0gMSBkYXlzOwogICAgLy8gQW5kIG1heSBub3QgYmUgc2V0IHRvIGJlIGxvbmdlciB0aGFuIHNpeCBtb250aHMuCiAgICB1aW50IGNvbnN0YW50IE1BWF9GRUVfUEVSSU9EX0RVUkFUSU9OX1NFQ09ORFMgPSAyNiB3ZWVrczsKCiAgICAvLyBUaGUgcXVhbnRpdHkgb2Ygbm9taW5zIHRoYXQgd2VyZSBpbiB0aGUgZmVlIHBvdCBhdCB0aGUgdGltZQogICAgLy8gb2YgdGhlIGxhc3QgZmVlIHJvbGxvdmVyIChmZWVQZXJpb2RTdGFydFRpbWUpLgogICAgdWludCBwdWJsaWMgbGFzdEZlZXNDb2xsZWN0ZWQ7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBoYXNXaXRoZHJhd25MYXN0UGVyaW9kRmVlczsKCiAgICBFdGhlck5vbWluIHB1YmxpYyBub21pbjsKICAgIEhhdnZlbkVzY3JvdyBwdWJsaWMgZXNjcm93OwoKCiAgICAvKiA9PT09PT09PT09IENPTlNUUlVDVE9SID09PT09PT09PT0gKi8KCiAgICBmdW5jdGlvbiBIYXZ2ZW4oVG9rZW5TdGF0ZSBpbml0aWFsU3RhdGUsIGFkZHJlc3MgX293bmVyKQogICAgICAgIEV4dGVyblN0YXRlUHJveHlUb2tlbigiSGF2dmVuIiwgIkhBViIsIDFlOCAqIFVOSVQsIGFkZHJlc3ModGhpcyksIGluaXRpYWxTdGF0ZSwgX293bmVyKQogICAgICAgIFNlbGZEZXN0cnVjdGlibGUoX293bmVyLCBfb3duZXIpCiAgICAgICAgLy8gT3duZWQgaXMgaW5pdGlhbGlzZWQgaW4gRXh0ZXJuU3RhdGVQcm94eVRva2VuCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgbGFzdFRyYW5zZmVyVGltZXN0YW1wW3RoaXNdID0gbm93OwogICAgICAgIGZlZVBlcmlvZFN0YXJ0VGltZSA9IG5vdzsKICAgICAgICBsYXN0RmVlUGVyaW9kU3RhcnRUaW1lID0gbm93IC0gdGFyZ2V0RmVlUGVyaW9kRHVyYXRpb25TZWNvbmRzOwogICAgICAgIHBlbnVsdGltYXRlRmVlUGVyaW9kU3RhcnRUaW1lID0gbm93IC0gMip0YXJnZXRGZWVQZXJpb2REdXJhdGlvblNlY29uZHM7CiAgICB9CgoKICAgIC8qID09PT09PT09PT0gU0VUVEVSUyA9PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gc2V0Tm9taW4oRXRoZXJOb21pbiBfbm9taW4pIAogICAgICAgIGV4dGVybmFsCiAgICAgICAgb3B0aW9uYWxQcm94eV9vbmx5T3duZXIKICAgIHsKICAgICAgICBub21pbiA9IF9ub21pbjsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRFc2Nyb3coSGF2dmVuRXNjcm93IF9lc2Nyb3cpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgewogICAgICAgIGVzY3JvdyA9IF9lc2Nyb3c7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VGFyZ2V0RmVlUGVyaW9kRHVyYXRpb24odWludCBkdXJhdGlvbikKICAgICAgICBleHRlcm5hbAogICAgICAgIHBvc3RDaGVja0ZlZVBlcmlvZFJvbGxvdmVyCiAgICAgICAgb3B0aW9uYWxQcm94eV9vbmx5T3duZXIKICAgIHsKICAgICAgICByZXF1aXJlKE1JTl9GRUVfUEVSSU9EX0RVUkFUSU9OX1NFQ09ORFMgPD0gZHVyYXRpb24gJiYKICAgICAgICAgICAgICAgIGR1cmF0aW9uIDw9IE1BWF9GRUVfUEVSSU9EX0RVUkFUSU9OX1NFQ09ORFMpOwogICAgICAgIHRhcmdldEZlZVBlcmlvZER1cmF0aW9uU2Vjb25kcyA9IGR1cmF0aW9uOwogICAgICAgIGVtaXQgRmVlUGVyaW9kRHVyYXRpb25VcGRhdGVkKGR1cmF0aW9uKTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBNVVRBVElWRSBGVU5DVElPTlMgPT09PT09PT09PSAqLwoKICAgIC8qIEFsbG93IHRoZSBvd25lciBvZiB0aGlzIGNvbnRyYWN0IHRvIGVuZG93IGFueSBhZGRyZXNzIHdpdGggaGF2dmVucwogICAgICogZnJvbSB0aGUgaW5pdGlhbCBzdXBwbHkuIFNpbmNlIHRoZSBlbnRpcmUgaW5pdGlhbCBzdXBwbHkgcmVzaWRlcwogICAgICogaW4gdGhlIGhhdnZlbiBjb250cmFjdCwgdGhpcyBkaXNhbGxvd3MgdGhlIGZvdW5kYXRpb24gZnJvbSB3aXRoZHJhd2luZwogICAgICogZmVlcyBvbiB1bmRpc3RyaWJ1dGVkIGJhbGFuY2VzLiBUaGlzIGZ1bmN0aW9uIGNhbiBhbHNvIGJlIHVzZWQKICAgICAqIHRvIHJldHJpZXZlIGFueSBoYXZ2ZW5zIHNlbnQgdG8gdGhlIEhhdnZlbiBjb250cmFjdCBpdHNlbGYuICovCiAgICBmdW5jdGlvbiBlbmRvdyhhZGRyZXNzIGFjY291bnQsIHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5X29ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CgogICAgICAgIC8vIFVzZSAidGhpcyIgaW4gb3JkZXIgdGhhdCB0aGUgaGF2dmVuIGFjY291bnQgaXMgdGhlIHNlbmRlci4KICAgICAgICAvLyBUaGF0IHRoaXMgaXMgYW4gZXhwbGljaXQgdHJhbnNmZXIgYWxzbyBpbml0aWFsaXNlcyBmZWUgZW50aXRsZW1lbnQgaW5mb3JtYXRpb24uCiAgICAgICAgcmV0dXJuIF90cmFuc2Zlcih0aGlzLCBhY2NvdW50LCB2YWx1ZSk7CiAgICB9CgogICAgLyogQWxsb3cgdGhlIG93bmVyIG9mIHRoaXMgY29udHJhY3QgdG8gZW1pdCB0cmFuc2ZlciBldmVudHMgZm9yCiAgICAgKiBjb250cmFjdCBzZXR1cCBwdXJwb3Nlcy4gKi8KICAgIGZ1bmN0aW9uIGVtaXRUcmFuc2ZlckV2ZW50cyhhZGRyZXNzIHNlbmRlciwgYWRkcmVzc1tdIHJlY2lwaWVudHMsIHVpbnRbXSB2YWx1ZXMpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCByZWNpcGllbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGVtaXQgVHJhbnNmZXIoc2VuZGVyLCByZWNpcGllbnRzW2ldLCB2YWx1ZXNbaV0pOwogICAgICAgIH0KICAgIH0KCiAgICAvKiBPdmVycmlkZSBFUkMyMCB0cmFuc2ZlciBmdW5jdGlvbiBpbiBvcmRlciB0byBwZXJmb3JtCiAgICAgKiBmZWUgZW50aXRsZW1lbnQgcmVjb21wdXRhdGlvbiB3aGVuZXZlciBiYWxhbmNlcyBhcmUgdXBkYXRlZC4gKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvcHRpb25hbFByb3h5CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gX3RyYW5zZmVyKG1lc3NhZ2VTZW5kZXIsIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLyogQW55dGhpbmcgY2FsbGluZyB0aGlzIG11c3QgYXBwbHkgdGhlIG9wdGlvbmFsUHJveHkgb3Igb25seVByb3h5IG1vZGlmaWVyLiAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKQogICAgICAgIGludGVybmFsCiAgICAgICAgcHJlQ2hlY2tGZWVQZXJpb2RSb2xsb3ZlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CgogICAgICAgIHVpbnQgc2VuZGVyUHJlQmFsYW5jZSA9IHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpOwogICAgICAgIHVpbnQgcmVjaXBpZW50UHJlQmFsYW5jZSA9IHN0YXRlLmJhbGFuY2VPZih0byk7CgogICAgICAgIC8vIFBlcmZvcm0gdGhlIHRyYW5zZmVyOiBpZiB0aGVyZSBpcyBhIHByb2JsZW0sCiAgICAgICAgLy8gYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGluIHRoaXMgY2FsbC4KICAgICAgICBfdHJhbnNmZXJfYnlQcm94eShzZW5kZXIsIHRvLCB2YWx1ZSk7CgogICAgICAgIC8vIFplcm8tdmFsdWUgdHJhbnNmZXJzIHN0aWxsIHVwZGF0ZSBmZWUgZW50aXRsZW1lbnQgaW5mb3JtYXRpb24sCiAgICAgICAgLy8gYW5kIG1heSByb2xsIG92ZXIgdGhlIGZlZSBwZXJpb2QuCiAgICAgICAgYWRqdXN0RmVlRW50aXRsZW1lbnQoc2VuZGVyLCBzZW5kZXJQcmVCYWxhbmNlKTsKICAgICAgICBhZGp1c3RGZWVFbnRpdGxlbWVudCh0bywgcmVjaXBpZW50UHJlQmFsYW5jZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIE92ZXJyaWRlIEVSQzIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbiBpbiBvcmRlciB0byBwZXJmb3JtCiAgICAgKiBmZWUgZW50aXRsZW1lbnQgcmVjb21wdXRhdGlvbiB3aGVuZXZlciBiYWxhbmNlcyBhcmUgdXBkYXRlZC4gKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBwcmVDaGVja0ZlZVBlcmlvZFJvbGxvdmVyCiAgICAgICAgb3B0aW9uYWxQcm94eQogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludCBzZW5kZXJQcmVCYWxhbmNlID0gc3RhdGUuYmFsYW5jZU9mKGZyb20pOwogICAgICAgIHVpbnQgcmVjaXBpZW50UHJlQmFsYW5jZSA9IHN0YXRlLmJhbGFuY2VPZih0byk7CgogICAgICAgIC8vIFBlcmZvcm0gdGhlIHRyYW5zZmVyOiBpZiB0aGVyZSBpcyBhIHByb2JsZW0sCiAgICAgICAgLy8gYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGluIHRoaXMgY2FsbC4KICAgICAgICBfdHJhbnNmZXJGcm9tX2J5UHJveHkobWVzc2FnZVNlbmRlciwgZnJvbSwgdG8sIHZhbHVlKTsKCiAgICAgICAgLy8gWmVyby12YWx1ZSB0cmFuc2ZlcnMgc3RpbGwgdXBkYXRlIGZlZSBlbnRpdGxlbWVudCBpbmZvcm1hdGlvbiwKICAgICAgICAvLyBhbmQgbWF5IHJvbGwgb3ZlciB0aGUgZmVlIHBlcmlvZC4KICAgICAgICBhZGp1c3RGZWVFbnRpdGxlbWVudChmcm9tLCBzZW5kZXJQcmVCYWxhbmNlKTsKICAgICAgICBhZGp1c3RGZWVFbnRpdGxlbWVudCh0bywgcmVjaXBpZW50UHJlQmFsYW5jZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIENvbXB1dGUgdGhlIGxhc3QgcGVyaW9kJ3MgZmVlIGVudGl0bGVtZW50IGZvciB0aGUgbWVzc2FnZSBzZW5kZXIKICAgICAqIGFuZCB0aGVuIGRlcG9zaXQgaXQgaW50byB0aGVpciBub21pbiBhY2NvdW50LiAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdGZWVFbnRpdGxlbWVudCgpCiAgICAgICAgcHVibGljCiAgICAgICAgcHJlQ2hlY2tGZWVQZXJpb2RSb2xsb3ZlcgogICAgICAgIG9wdGlvbmFsUHJveHkKICAgIHsKICAgICAgICBhZGRyZXNzIHNlbmRlciA9IG1lc3NhZ2VTZW5kZXI7CgogICAgICAgIC8vIERvIG5vdCBkZXBvc2l0IGZlZXMgaW50byBmcm96ZW4gYWNjb3VudHMuCiAgICAgICAgcmVxdWlyZSghbm9taW4uZnJvemVuKHNlbmRlcikpOwoKICAgICAgICAvLyBjaGVjayB0aGUgcGVyaW9kIGhhcyByb2xsZWQgb3ZlciBmaXJzdAogICAgICAgIHJvbGxvdmVyRmVlKHNlbmRlciwgbGFzdFRyYW5zZmVyVGltZXN0YW1wW3NlbmRlcl0sIHN0YXRlLmJhbGFuY2VPZihzZW5kZXIpKTsKCiAgICAgICAgLy8gT25seSBhbGxvdyBhY2NvdW50cyB0byB3aXRoZHJhdyBmZWVzIG9uY2UgcGVyIHBlcmlvZC4KICAgICAgICByZXF1aXJlKCFoYXNXaXRoZHJhd25MYXN0UGVyaW9kRmVlc1tzZW5kZXJdKTsKCiAgICAgICAgdWludCBmZWVzT3dlZDsKCiAgICAgICAgaWYgKGVzY3JvdyAhPSBIYXZ2ZW5Fc2Nyb3coMCkpIHsKICAgICAgICAgICAgZmVlc093ZWQgPSBlc2Nyb3cudG90YWxWZXN0ZWRBY2NvdW50QmFsYW5jZShzZW5kZXIpOwogICAgICAgIH0KCiAgICAgICAgZmVlc093ZWQgPSBzYWZlRGl2X2RlYyhzYWZlTXVsX2RlYyhzYWZlQWRkKGZlZXNPd2VkLCBsYXN0QXZlcmFnZUJhbGFuY2Vbc2VuZGVyXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RmVlc0NvbGxlY3RlZCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFN1cHBseSk7CgogICAgICAgIGhhc1dpdGhkcmF3bkxhc3RQZXJpb2RGZWVzW3NlbmRlcl0gPSB0cnVlOwogICAgICAgIGlmIChmZWVzT3dlZCAhPSAwKSB7CiAgICAgICAgICAgIG5vbWluLndpdGhkcmF3RmVlKHNlbmRlciwgZmVlc093ZWQpOwogICAgICAgICAgICBlbWl0IEZlZXNXaXRoZHJhd24oc2VuZGVyLCBzZW5kZXIsIGZlZXNPd2VkKTsKICAgICAgICB9CiAgICB9CgogICAgLyogVXBkYXRlIHRoZSBmZWUgZW50aXRsZW1lbnQgc2luY2UgdGhlIGxhc3QgdHJhbnNmZXIgb3IgZW50aXRsZW1lbnQKICAgICAqIGFkanVzdG1lbnQuIFNpbmNlIHRoaXMgdXBkYXRlcyB0aGUgbGFzdCB0cmFuc2ZlciB0aW1lc3RhbXAsIGlmIGludm9rZWQKICAgICAqIGNvbnNlY3V0aXZlbHksIHRoaXMgZnVuY3Rpb24gd2lsbCBkbyBub3RoaW5nIGFmdGVyIHRoZSBmaXJzdCBjYWxsLiAqLwogICAgZnVuY3Rpb24gYWRqdXN0RmVlRW50aXRsZW1lbnQoYWRkcmVzcyBhY2NvdW50LCB1aW50IHByZUJhbGFuY2UpCiAgICAgICAgaW50ZXJuYWwKICAgIHsKICAgICAgICAvLyBUaGUgdGltZSBzaW5jZSB0aGUgbGFzdCB0cmFuc2ZlciBjbGFtcHMgYXQgdGhlIGxhc3QgZmVlIHJvbGxvdmVyIHRpbWUgaWYgdGhlIGxhc3QgdHJhbnNmZXIKICAgICAgICAvLyB3YXMgZWFybGllciB0aGFuIHRoYXQuCiAgICAgICAgcm9sbG92ZXJGZWUoYWNjb3VudCwgbGFzdFRyYW5zZmVyVGltZXN0YW1wW2FjY291bnRdLCBwcmVCYWxhbmNlKTsKCiAgICAgICAgY3VycmVudEJhbGFuY2VTdW1bYWNjb3VudF0gPSBzYWZlQWRkKAogICAgICAgICAgICBjdXJyZW50QmFsYW5jZVN1bVthY2NvdW50XSwKICAgICAgICAgICAgc2FmZU11bChwcmVCYWxhbmNlLCBub3cgLSBsYXN0VHJhbnNmZXJUaW1lc3RhbXBbYWNjb3VudF0pCiAgICAgICAgKTsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSBsYXN0IHRpbWUgdGhpcyB1c2VyJ3MgYmFsYW5jZSBjaGFuZ2VkLgogICAgICAgIGxhc3RUcmFuc2ZlclRpbWVzdGFtcFthY2NvdW50XSA9IG5vdzsKICAgIH0KCiAgICAvKiBVcGRhdGUgdGhlIGdpdmVuIGFjY291bnQncyBwcmV2aW91cyBwZXJpb2QgZmVlIGVudGl0bGVtZW50IHZhbHVlLgogICAgICogRG8gbm90aGluZyBpZiB0aGUgbGFzdCB0cmFuc2ZlciBvY2N1cnJlZCBzaW5jZSB0aGUgZmVlIHBlcmlvZCByb2xsZWQgb3Zlci4KICAgICAqIElmIHRoZSBlbnRpdGxlbWVudCB3YXMgdXBkYXRlZCwgYWxzbyB1cGRhdGUgdGhlIGxhc3QgdHJhbnNmZXIgdGltZSB0byBiZQogICAgICogYXQgdGhlIHRpbWVzdGFtcCBvZiB0aGUgcm9sbG92ZXIsIHNvIGlmIHRoaXMgc2hvdWxkIGRvIG5vdGhpbmcgaWYgY2FsbGVkIG1vcmUKICAgICAqIHRoYW4gb25jZSBkdXJpbmcgYSBnaXZlbiBwZXJpb2QuCiAgICAgKgogICAgICogQ29uc2lkZXIgdGhlIGNhc2Ugd2hlcmUgdGhlIGVudGl0bGVtZW50IGlzIHVwZGF0ZWQuIElmIHRoZSBsYXN0IHRyYW5zZmVyCiAgICAgKiBvY2N1cnJlZCBhdCB0aW1lIHQgaW4gdGhlIGxhc3QgcGVyaW9kLCB0aGVuIHRoZSBzdGFycmVkIHJlZ2lvbiBpcyBhZGRlZCB0byB0aGUKICAgICAqIGVudGl0bGVtZW50LCB0aGUgbGFzdCB0cmFuc2ZlciB0aW1lc3RhbXAgaXMgbW92ZWQgdG8gciwgYW5kIHRoZSBmZWUgcGVyaW9kIGlzCiAgICAgKiByb2xsZWQgb3ZlciBmcm9tIGstMSB0byBrIHNvIHRoYXQgdGhlIG5ldyBmZWUgcGVyaW9kIHN0YXJ0IHRpbWUgaXMgYXQgdGltZSByLgogICAgICogCiAgICAgKiAgIGstMSAgICAgICB8ICAgICAgICBrCiAgICAgKiAgICAgICAgIHMgX198CiAgICAgKiAgXyAgXyBfX198Kip8CiAgICAgKiAgICAgICAgICB8Kip8CiAgICAgKiAgXyAgXyBfX198Kip8X19fIF9fIF8gIF8KICAgICAqICAgICAgICAgICAgIHwKICAgICAqICAgICAgICAgIHQgIHwKICAgICAqICAgICAgICAgICAgIHIKICAgICAqIAogICAgICogU2ltaWxhciBjb21wdXRhdGlvbnMgYXJlIHBlcmZvcm1lZCBhY2NvcmRpbmcgdG8gdGhlIGZlZSBwZXJpb2QgaW4gd2hpY2ggdGhlCiAgICAgKiBsYXN0IHRyYW5zZmVyIG9jY3VycmVkLgogICAgICovCiAgICBmdW5jdGlvbiByb2xsb3ZlckZlZShhZGRyZXNzIGFjY291bnQsIHVpbnQgbGFzdFRyYW5zZmVyVGltZSwgdWludCBwcmVCYWxhbmNlKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgaWYgKGxhc3RUcmFuc2ZlclRpbWUgPCBmZWVQZXJpb2RTdGFydFRpbWUpIHsKICAgICAgICAgICAgaWYgKGxhc3RUcmFuc2ZlclRpbWUgPCBsYXN0RmVlUGVyaW9kU3RhcnRUaW1lKSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgbGFzdCB0cmFuc2ZlciBwcmVkYXRlZCB0aGUgcHJldmlvdXMgdHdvIGZlZSBwZXJpb2RzLgogICAgICAgICAgICAgICAgaWYgKGxhc3RUcmFuc2ZlclRpbWUgPCBwZW51bHRpbWF0ZUZlZVBlcmlvZFN0YXJ0VGltZSkgewogICAgICAgICAgICAgICAgICAgIC8vIFRoZSBiYWxhbmNlIGRpZCBub3RoaW5nIGluIHRoZSBwZW51bHRpbWF0ZSBmZWUgcGVyaW9kLCBzbyB0aGUgYXZlcmFnZSBiYWxhbmNlCiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBwZXJpb2QgaXMgdGhlaXIgcHJlLXRyYW5zZmVyIGJhbGFuY2UuCiAgICAgICAgICAgICAgICAgICAgcGVudWx0aW1hdGVBdmVyYWdlQmFsYW5jZVthY2NvdW50XSA9IHByZUJhbGFuY2U7CiAgICAgICAgICAgICAgICAvLyBUaGUgbGFzdCB0cmFuc2ZlciBvY2N1cnJlZCB3aXRoaW4gdGhlIG9uZS1iZWZvcmUtdGhlLWxhc3QgZmVlIHBlcmlvZC4KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gTm8gb3ZlcmZsb3cgcmlzayBoZXJlOiB0aGUgZmFpbGVkIGd1YXJkIGltcGxpZXMgKHBlbnVsdGltYXRlRmVlUGVyaW9kU3RhcnRUaW1lIDw9IGxhc3RUcmFuc2ZlclRpbWUpLgogICAgICAgICAgICAgICAgICAgIHBlbnVsdGltYXRlQXZlcmFnZUJhbGFuY2VbYWNjb3VudF0gPSBzYWZlRGl2KAogICAgICAgICAgICAgICAgICAgICAgICBzYWZlQWRkKGN1cnJlbnRCYWxhbmNlU3VtW2FjY291bnRdLCBzYWZlTXVsKHByZUJhbGFuY2UsIChsYXN0RmVlUGVyaW9kU3RhcnRUaW1lIC0gbGFzdFRyYW5zZmVyVGltZSkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgKGxhc3RGZWVQZXJpb2RTdGFydFRpbWUgLSBwZW51bHRpbWF0ZUZlZVBlcmlvZFN0YXJ0VGltZSkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFRoZSBiYWxhbmNlIGRpZCBub3RoaW5nIGluIHRoZSBsYXN0IGZlZSBwZXJpb2QsIHNvIHRoZSBhdmVyYWdlIGJhbGFuY2UKICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgcGVyaW9kIGlzIHRoZWlyIHByZS10cmFuc2ZlciBiYWxhbmNlLgogICAgICAgICAgICAgICAgbGFzdEF2ZXJhZ2VCYWxhbmNlW2FjY291bnRdID0gcHJlQmFsYW5jZTsKCiAgICAgICAgICAgIC8vIFRoZSBsYXN0IHRyYW5zZmVyIG9jY3VycmVkIHdpdGhpbiB0aGUgbGFzdCBmZWUgcGVyaW9kLgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gVGhlIHByZXZpb3VzbHktbGFzdCBhdmVyYWdlIGJhbGFuY2UgYmVjb21lcyB0aGUgcGVudWx0aW1hdGUgYmFsYW5jZS4KICAgICAgICAgICAgICAgIHBlbnVsdGltYXRlQXZlcmFnZUJhbGFuY2VbYWNjb3VudF0gPSBsYXN0QXZlcmFnZUJhbGFuY2VbYWNjb3VudF07CgogICAgICAgICAgICAgICAgLy8gTm8gb3ZlcmZsb3cgcmlzayBoZXJlOiB0aGUgZmFpbGVkIGd1YXJkIGltcGxpZXMgKGxhc3RGZWVQZXJpb2RTdGFydFRpbWUgPD0gbGFzdFRyYW5zZmVyVGltZSkuCiAgICAgICAgICAgICAgICBsYXN0QXZlcmFnZUJhbGFuY2VbYWNjb3VudF0gPSBzYWZlRGl2KAogICAgICAgICAgICAgICAgICAgIHNhZmVBZGQoY3VycmVudEJhbGFuY2VTdW1bYWNjb3VudF0sIHNhZmVNdWwocHJlQmFsYW5jZSwgKGZlZVBlcmlvZFN0YXJ0VGltZSAtIGxhc3RUcmFuc2ZlclRpbWUpKSksCiAgICAgICAgICAgICAgICAgICAgKGZlZVBlcmlvZFN0YXJ0VGltZSAtIGxhc3RGZWVQZXJpb2RTdGFydFRpbWUpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSb2xsIG92ZXIgdG8gdGhlIG5leHQgZmVlIHBlcmlvZC4KICAgICAgICAgICAgY3VycmVudEJhbGFuY2VTdW1bYWNjb3VudF0gPSAwOwogICAgICAgICAgICBoYXNXaXRoZHJhd25MYXN0UGVyaW9kRmVlc1thY2NvdW50XSA9IGZhbHNlOwogICAgICAgICAgICBsYXN0VHJhbnNmZXJUaW1lc3RhbXBbYWNjb3VudF0gPSBmZWVQZXJpb2RTdGFydFRpbWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qIFJlY29tcHV0ZSBhbmQgcmV0dXJuIHRoZSBnaXZlbiBhY2NvdW50J3MgYXZlcmFnZSBiYWxhbmNlIGluZm9ybWF0aW9uLgogICAgICogVGhpcyBhbHNvIHJvbGxzIG92ZXIgdGhlIGZlZSBwZXJpb2QgaWYgbmVjZXNzYXJ5LCBhbmQgYnJpbmdzCiAgICAgKiB0aGUgYWNjb3VudCdzIGN1cnJlbnQgYmFsYW5jZSBzdW0gdXAgdG8gZGF0ZS4gKi8KICAgIGZ1bmN0aW9uIF9yZWNvbXB1dGVBY2NvdW50TGFzdEF2ZXJhZ2VCYWxhbmNlKGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHByZUNoZWNrRmVlUGVyaW9kUm9sbG92ZXIKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIGFkanVzdEZlZUVudGl0bGVtZW50KGFjY291bnQsIHN0YXRlLmJhbGFuY2VPZihhY2NvdW50KSk7CiAgICAgICAgcmV0dXJuIGxhc3RBdmVyYWdlQmFsYW5jZVthY2NvdW50XTsKICAgIH0KCiAgICAvKiBSZWNvbXB1dGUgYW5kIHJldHVybiB0aGUgc2VuZGVyJ3MgYXZlcmFnZSBiYWxhbmNlIGluZm9ybWF0aW9uLiAqLwogICAgZnVuY3Rpb24gcmVjb21wdXRlTGFzdEF2ZXJhZ2VCYWxhbmNlKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9wdGlvbmFsUHJveHkKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBfcmVjb21wdXRlQWNjb3VudExhc3RBdmVyYWdlQmFsYW5jZShtZXNzYWdlU2VuZGVyKTsKICAgIH0KCiAgICAvKiBSZWNvbXB1dGUgYW5kIHJldHVybiB0aGUgZ2l2ZW4gYWNjb3VudCdzIGF2ZXJhZ2UgYmFsYW5jZSBpbmZvcm1hdGlvbi4gKi8KICAgIGZ1bmN0aW9uIHJlY29tcHV0ZUFjY291bnRMYXN0QXZlcmFnZUJhbGFuY2UoYWRkcmVzcyBhY2NvdW50KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gX3JlY29tcHV0ZUFjY291bnRMYXN0QXZlcmFnZUJhbGFuY2UoYWNjb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gcm9sbG92ZXJGZWVQZXJpb2QoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGNoZWNrRmVlUGVyaW9kUm9sbG92ZXIoKTsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBNT0RJRklFUlMgPT09PT09PT09PSAqLwoKICAgIC8qIElmIHRoZSBmZWUgcGVyaW9kIGhhcyByb2xsZWQgb3ZlciwgdGhlbgogICAgICogc2F2ZSB0aGUgc3RhcnQgdGltZXMgb2YgdGhlIGxhc3QgZmVlIHBlcmlvZCwKICAgICAqIGFzIHdlbGwgYXMgdGhlIHBlbnVsdGltYXRlIGZlZSBwZXJpb2QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrRmVlUGVyaW9kUm9sbG92ZXIoKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgLy8gSWYgdGhlIGZlZSBwZXJpb2QgaGFzIHJvbGxlZCBvdmVyLi4uCiAgICAgICAgaWYgKGZlZVBlcmlvZFN0YXJ0VGltZSArIHRhcmdldEZlZVBlcmlvZER1cmF0aW9uU2Vjb25kcyA8PSBub3cpIHsKICAgICAgICAgICAgbGFzdEZlZXNDb2xsZWN0ZWQgPSBub21pbi5mZWVQb29sKCk7CgogICAgICAgICAgICAvLyBTaGlmdCB0aGUgdGhyZWUgcGVyaW9kIHN0YXJ0IHRpbWVzIGJhY2sgb25lIHBsYWNlCiAgICAgICAgICAgIHBlbnVsdGltYXRlRmVlUGVyaW9kU3RhcnRUaW1lID0gbGFzdEZlZVBlcmlvZFN0YXJ0VGltZTsKICAgICAgICAgICAgbGFzdEZlZVBlcmlvZFN0YXJ0VGltZSA9IGZlZVBlcmlvZFN0YXJ0VGltZTsKICAgICAgICAgICAgZmVlUGVyaW9kU3RhcnRUaW1lID0gbm93OwogICAgICAgICAgICAKICAgICAgICAgICAgZW1pdCBGZWVQZXJpb2RSb2xsb3Zlcihub3cpOwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBwb3N0Q2hlY2tGZWVQZXJpb2RSb2xsb3ZlcgogICAgewogICAgICAgIF87CiAgICAgICAgY2hlY2tGZWVQZXJpb2RSb2xsb3ZlcigpOwogICAgfQoKICAgIG1vZGlmaWVyIHByZUNoZWNrRmVlUGVyaW9kUm9sbG92ZXIKICAgIHsKICAgICAgICBjaGVja0ZlZVBlcmlvZFJvbGxvdmVyKCk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyogPT09PT09PT09PSBFVkVOVFMgPT09PT09PT09PSAqLwoKICAgIGV2ZW50IEZlZVBlcmlvZFJvbGxvdmVyKHVpbnQgdGltZXN0YW1wKTsKCiAgICBldmVudCBGZWVQZXJpb2REdXJhdGlvblVwZGF0ZWQodWludCBkdXJhdGlvbik7CgogICAgZXZlbnQgRmVlc1dpdGhkcmF3bihhZGRyZXNzIGFjY291bnQsIGFkZHJlc3MgaW5kZXhlZCBhY2NvdW50SW5kZXgsIHVpbnQgdmFsdWUpOwp9CgovKgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDT05UUkFDVCBERVNDUklQVElPTgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKQSBjb250cmFjdCB0aGF0IGhvbGRzIHRoZSBzdGF0ZSBvZiBhbiBFUkMyMCBjb21wbGlhbnQgdG9rZW4uCgpUaGlzIGNvbnRyYWN0IGlzIHVzZWQgc2lkZSBieSBzaWRlIHdpdGggZXh0ZXJuYWwgc3RhdGUgdG9rZW4KY29udHJhY3RzLCBzdWNoIGFzIEhhdnZlbiBhbmQgRXRoZXJOb21pbi4KSXQgcHJvdmlkZXMgYW4gZWFzeSB3YXkgdG8gdXBncmFkZSBjb250cmFjdCBsb2dpYyB3aGlsZQptYWludGFpbmluZyBhbGwgdXNlciBiYWxhbmNlcyBhbmQgYWxsb3dhbmNlcy4gVGhpcyBpcyBkZXNpZ25lZAp0byB0byBtYWtlIHRoZSBjaGFuZ2VvdmVyIGFzIGVhc3kgYXMgcG9zc2libGUsIHNpbmNlIG1hcHBpbmdzCmFyZSBub3Qgc28gY2hlYXAgb3Igc3RyYWlnaHRmb3J3YXJkIHRvIG1pZ3JhdGUuCgpUaGUgZmlyc3QgZGVwbG95ZWQgY29udHJhY3Qgd291bGQgY3JlYXRlIHRoaXMgc3RhdGUgY29udHJhY3QsCnVzaW5nIGl0IGFzIGl0cyBzdG9yZSBvZiBiYWxhbmNlcy4KV2hlbiBhIG5ldyBjb250cmFjdCBpcyBkZXBsb3llZCwgaXQgbGlua3MgdG8gdGhlIGV4aXN0aW5nCnN0YXRlIGNvbnRyYWN0LCB3aG9zZSBvd25lciB3b3VsZCB0aGVuIGNoYW5nZSBpdHMgYXNzb2NpYXRlZApjb250cmFjdCB0byB0aGUgbmV3IG9uZS4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiovCgpjb250cmFjdCBUb2tlblN0YXRlIGlzIE93bmVkIHsKCiAgICAvLyB0aGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3QgdGhhdCBjYW4gbW9kaWZ5IGJhbGFuY2VzIGFuZCBhbGxvd2FuY2VzCiAgICAvLyB0aGlzIGNhbiBvbmx5IGJlIGNoYW5nZWQgYnkgdGhlIG93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIGFzc29jaWF0ZWRDb250cmFjdDsKCiAgICAvLyBFUkMyMCBmaWVsZHMuCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgZnVuY3Rpb24gVG9rZW5TdGF0ZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfYXNzb2NpYXRlZENvbnRyYWN0KQogICAgICAgIE93bmVkKF9vd25lcikKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBhc3NvY2lhdGVkQ29udHJhY3QgPSBfYXNzb2NpYXRlZENvbnRyYWN0OwogICAgICAgIGVtaXQgQXNzb2NpYXRlZENvbnRyYWN0VXBkYXRlZChfYXNzb2NpYXRlZENvbnRyYWN0KTsKICAgIH0KCiAgICAvKiA9PT09PT09PT09IFNFVFRFUlMgPT09PT09PT09PSAqLwoKICAgIC8vIENoYW5nZSB0aGUgYXNzb2NpYXRlZCBjb250cmFjdCB0byBhIG5ldyBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXRBc3NvY2lhdGVkQ29udHJhY3QoYWRkcmVzcyBfYXNzb2NpYXRlZENvbnRyYWN0KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgYXNzb2NpYXRlZENvbnRyYWN0ID0gX2Fzc29jaWF0ZWRDb250cmFjdDsKICAgICAgICBlbWl0IEFzc29jaWF0ZWRDb250cmFjdFVwZGF0ZWQoX2Fzc29jaWF0ZWRDb250cmFjdCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QWxsb3dhbmNlKGFkZHJlc3MgdG9rZW5Pd25lciwgYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUFzc29jaWF0ZWRDb250cmFjdAogICAgewogICAgICAgIGFsbG93YW5jZVt0b2tlbk93bmVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEJhbGFuY2VPZihhZGRyZXNzIGFjY291bnQsIHVpbnQgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5QXNzb2NpYXRlZENvbnRyYWN0CiAgICB7CiAgICAgICAgYmFsYW5jZU9mW2FjY291bnRdID0gdmFsdWU7CiAgICB9CgoKICAgIC8qID09PT09PT09PT0gTU9ESUZJRVJTID09PT09PT09PT0gKi8KCiAgICBtb2RpZmllciBvbmx5QXNzb2NpYXRlZENvbnRyYWN0CiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFzc29jaWF0ZWRDb250cmFjdCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKiA9PT09PT09PT09IEVWRU5UUyA9PT09PT09PT09ICovCgogICAgZXZlbnQgQXNzb2NpYXRlZENvbnRyYWN0VXBkYXRlZChhZGRyZXNzIF9hc3NvY2lhdGVkQ29udHJhY3QpOwp9CgovKgpNSVQgTGljZW5zZQoKQ29weXJpZ2h0IChjKSAyMDE4IEhhdnZlbgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQpvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQpTT0ZUV0FSRS4KKi8='.
	

]
