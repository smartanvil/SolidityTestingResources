Class {
	#name : #SRTad9b778c4c9621db20f8b2140e7fedc19c179e1a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad9b778c4c9621db20f8b2140e7fedc19c179e1a >> base64 [
	^ ''.
	

]
