Class {
	#name : #SRT3adf2a89a38048bd4518e5a05c53fbd35122a605,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3adf2a89a38048bd4518e5a05c53fbd35122a605 >> base64 [
	^ ''.
	

]
