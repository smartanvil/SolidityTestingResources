Class {
	#name : #SRT760fae3a4278b3b46c5bbf08c0d107ecc3981a6a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT760fae3a4278b3b46c5bbf08c0d107ecc3981a6a >> base64 [
	^ ''.
	

]
