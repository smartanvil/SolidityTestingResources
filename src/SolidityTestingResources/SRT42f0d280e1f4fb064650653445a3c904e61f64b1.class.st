Class {
	#name : #SRT42f0d280e1f4fb064650653445a3c904e61f64b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42f0d280e1f4fb064650653445a3c904e61f64b1 >> base64 [
	^ ''.
	

]
