Class {
	#name : #SRT3688587725ed6dda84bcd25aeeb04997415da50a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3688587725ed6dda84bcd25aeeb04997415da50a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgogLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UKIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoKIGNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKCS8vLyBAbm90aWNlIEdldCB0aGUgdG90YWwgdG9rZW4gc3VwcGx5CglmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxBbW91bnQpOwoKCS8vLyBAbm90aWNlICBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBvZiBhbm90aGVyIGFjY291bnQgd2l0aCBhZGRyZXNzIF9vd25lcgoJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKCS8vLyBAbm90aWNlICBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgX3RvCglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgoJLy8vIEBub3RpY2UgIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKCS8vLyBAbm90aWNlICBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgoJLy8vIEBub3RpY2UgIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgoJLy8vIEBub3RpY2UgIHRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIHNvbWUgREVYIGZ1bmN0aW9uYWxpdHkKCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgoJLy8vIEBub3RpY2UgIFJldHVybnMgdGhlIGFtb3VudCB3aGljaCBfc3BlbmRlciBpcyBzdGlsbCBhbGxvd2VkIHRvIHdpdGhkcmF3IGZyb20gX293bmVyCglmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCgkvLy8gQG5vdGljZSAgVHJpZ2dlcmVkIHdoZW4gdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZC4KCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKCS8vLyBAbm90aWNlICBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLgoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CiB9CiAKIGNvbnRyYWN0IG93bmVkewoJYWRkcmVzcyBwdWJsaWMgb3duZXI7CglhZGRyZXNzIGNvbnN0YW50IHN1cGVydmlzb3IgID0gMHgzMThCMGY3NjhmNWM2YzU2NzIyN0FBNTBCNTFCNWIzMDc4OTAyZjhDOwoJCglmdW5jdGlvbiBvd25lZCgpewoJCW93bmVyID0gbXNnLnNlbmRlcjsKCX0KCgkvLy8gQG5vdGljZSBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgoJbW9kaWZpZXIgaXNPd25lciB7CgkJYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBzdXBlcnZpc29yKTsKCQlfOwoJfQoJCgkvLy8gQG5vdGljZSBUcmFuc2ZlciB0aGUgb3duZXJzaGlwIG9mIHRoaXMgY29udHJhY3QKCWZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpOwoJCglldmVudCBvd25lckNoYW5nZWQoYWRkcmVzcyB3aG9UcmFuc2ZlcnJlZE93bmVyc2hpcCwgYWRkcmVzcyBmb3JtZXJPd25lciwgYWRkcmVzcyBuZXdPd25lcik7CiB9Cgpjb250cmFjdCBCRnJlZUNvbnRyYWN0IGlzIEVSQzIwSW50ZXJmYWNlLCBvd25lZHsKCglzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQkZyZWUiOwoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiQkZSIjsKCXVpbnQgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMDsKCXVpbnQyNTYgcHVibGljIF90b3RhbFN1cHBseSA9IDIyNDAwMDA7Cgl1aW50MjU2IHB1YmxpYyBpY29NaW4gPSAzMDAwMDA7CQkJCQkvLyA9IDMwMDAwMDsgYW1vdW50IGlzIGluIFRva2VucywgMS44MDAuMDAwCgl1aW50MjU2IHB1YmxpYyBwcmVJY29MaW1pdCA9IDYwMDAwMDsJCQkvLyA9IDYwMDAwMDsgYW1vdW50IGlzIGluIHRva2VucywgMy42MDAuMDAwCgl1aW50MjU2IHB1YmxpYyBjb3VudEhvbGRlcnMgPSAwOwkJCQkvLyBjb3VudCBob3cgbWFueSB1bmlxdWUgaG9sZGVycyBoYXZlIHRva2VucwoJdWludDI1NiBwdWJsaWMgYW1vdW50T2ZJbnZlc3RtZW50cyA9IDA7CS8vIGFtb3VudCBvZiBjb2xsZWN0ZWQgd2VpCgkKCXVpbnQyNTYgcHJlSUNPcHJpY2U7CQkJCQkJCQkJLy8gcHJpY2Ugb2YgMSB0b2tlbiBpbiB3ZWlzIGZvciB0aGUgcHJlSUNPIHRpbWUKCXVpbnQyNTYgSUNPcHJpY2U7CQkJCQkJCQkJCS8vIHByaWNlIG9mIDEgdG9rZW4gaW4gd2VpcyBmb3IgdGhlIElDTyB0aW1lCgl1aW50MjU2IHB1YmxpYyBjdXJyZW50VG9rZW5QcmljZTsJCQkJLy8gY3VycmVudCB0b2tlbiBwcmljZSBpbiB3ZWlzCgl1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7CQkJCQkJCQkvLyBidXliYWNrIHByaWNlIG9mIG9uZSB0b2tlbiBpbiB3ZWlzCgkKCWJvb2wgcHVibGljIHByZUljb0lzUnVubmluZzsKCWJvb2wgcHVibGljIG1pbmltYWxHb2FsUmVhY2hlZDsKCWJvb2wgcHVibGljIGljb0lzQ2xvc2VkOwoJYm9vbCBpY29FeGl0SXNQb3NzaWJsZTsKCQoKCS8vQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAoJbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdG9rZW5CYWxhbmNlT2Y7CgoJLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudAoJbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgkKCS8vbGlzdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IGZyb3plbiBhY2NvdW50cwoJbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGZyb3plbkFjY291bnQ7CgkKCS8vdGhpcyBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiBhIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCglldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIGluaXRpYXRvciwgYWRkcmVzcyBhY2NvdW50LCBzdHJpbmcgc3RhdHVzKTsKCQoJLy90aGlzIGdlbmVyYXRlIGEgcHVibGljIGV2ZW50IG9uIGEgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKCWV2ZW50IEJvbnVzQ2hhbmdlZCh1aW50OCBib251c09sZCwgdWludDggYm9udXNOZXcpOwoJCgkvL3RoaXMgZ2VuZXJhdGUgYSBwdWJsaWMgZXZlbnQgb24gYSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwoJZXZlbnQgbWluR29hbFJlYWNoZWQodWludDI1NiBtaW5JY29BbW91bnQsIHN0cmluZyBub3RpY2UpOwoJCgkvL3RoaXMgZ2VuZXJhdGUgYSBwdWJsaWMgZXZlbnQgb24gYSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwoJZXZlbnQgcHJlSWNvRW5kZWQodWludDI1NiBwcmVJY29BbW91bnQsIHN0cmluZyBub3RpY2UpOwoJCgkvL3RoaXMgZ2VuZXJhdGUgYSBwdWJsaWMgZXZlbnQgb24gYSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwoJZXZlbnQgcHJpY2VVcGRhdGVkKHVpbnQyNTYgb2xkUHJpY2UsIHVpbnQyNTYgbmV3UHJpY2UsIHN0cmluZyBub3RpY2UpOwoJCgkvL3RoaXMgZ2VuZXJhdGUgYSBwdWJsaWMgZXZlbnQgb24gYSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwoJZXZlbnQgd2l0aGRyYXdlZChhZGRyZXNzIF90bywgdWludDI1NiBzdW1tZSwgc3RyaW5nIG5vdGljZSk7CgkKCS8vdGhpcyBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiBhIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCglldmVudCBkZXBvc2l0ZWQoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBzdW1tZSwgc3RyaW5nIG5vdGljZSk7CgkKCS8vdGhpcyBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiBhIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCglldmVudCBvcmRlclRvVHJhbnNmZXIoYWRkcmVzcyBpbml0aWF0b3IsIGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IHN1bW1lLCBzdHJpbmcgbm90aWNlKTsKCQoJLy90aGlzIGdlbmVyYXRlIGEgcHVibGljIGV2ZW50IG9uIGEgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKCWV2ZW50IHRva2VuQ3JlYXRlZChhZGRyZXNzIF9jcmVhdG9yLCB1aW50MjU2IHN1bW1lLCBzdHJpbmcgbm90aWNlKTsKCQoJLy90aGlzIGdlbmVyYXRlIGEgcHVibGljIGV2ZW50IG9uIGEgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKCWV2ZW50IHRva2VuRGVzdHJveWVkKGFkZHJlc3MgX2Rlc3Ryb3llciwgdWludDI1NiBzdW1tZSwgc3RyaW5nIG5vdGljZSk7CgkKCS8vdGhpcyBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiBhIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCglldmVudCBpY29TdGF0dXNVcGRhdGVkKGFkZHJlc3MgX2luaXRpYXRvciwgc3RyaW5nIHN0YXR1cyk7CgoJLy8vIEBub3RpY2UgQ29uc3RydWN0b3Igb2YgdGhlIGNvbnRyYWN0CglmdW5jdGlvbiBCRnJlZUNvbnRyYWN0KCkgewoJCXByZUljb0lzUnVubmluZyA9IHRydWU7CgkJbWluaW1hbEdvYWxSZWFjaGVkID0gZmFsc2U7CgkJaWNvRXhpdElzUG9zc2libGUgPSBmYWxzZTsKCQlpY29Jc0Nsb3NlZCA9IGZhbHNlOwoJCXRva2VuQmFsYW5jZU9mW3RoaXNdICs9IF90b3RhbFN1cHBseTsKCQlhbGxvd2VkW3RoaXNdW293bmVyXSA9IF90b3RhbFN1cHBseTsKCQlhbGxvd2VkW3RoaXNdW3N1cGVydmlzb3JdID0gX3RvdGFsU3VwcGx5OwoJCWN1cnJlbnRUb2tlblByaWNlID0gMC4wMjQzNDA3NzA3OTEwNzUxMDAgKiAxIGV0aGVyOwkvLyBpbml0aWFsIHByaWNlIG9mIDEgVG9rZW4KCQlwcmVJQ09wcmljZSA9IDAuMDI0MzQwNzcwNzkxMDc1MTAwICogMSBldGhlcjsgCQkJLy8gcHJpY2Ugb2YgMSB0b2tlbiBpbiB3ZWlzIGZvciB0aGUgcHJlSUNPIHRpbWUsIGNhLjYsLSBFdXJvCgkJSUNPcHJpY2UgPSAwLjA0MDU2Nzk1MTMxODQ1ODQwMCAqIDEgZXRoZXI7CQkJCS8vIHByaWNlIG9mIDEgdG9rZW4gaW4gd2VpcyBmb3IgdGhlIElDTyB0aW1lLCBjYS4xMCwtIEV1cm8KCQlzZWxsUHJpY2UgPSAwOwoJCXVwZGF0ZVByaWNlcygpOwoJfQoKCWZ1bmN0aW9uICgpIHBheWFibGUgewoJCXJlcXVpcmUoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pOwoJCWlmKG1zZy52YWx1ZSA+IDAgJiYgIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pIHsKCQkJYnV5VG9rZW4oKTsKCQl9Cgl9CgoJLy8vIEBub3RpY2UgUmV0dXJucyBhIHdob2xlIGFtb3VudCBvZiB0b2tlbnMKCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbEFtb3VudCkgewoJCXRvdGFsQW1vdW50ID0gX3RvdGFsU3VwcGx5OwoJfQoKCS8vLyBAbm90aWNlIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CglmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewoJCXJldHVybiB0b2tlbkJhbGFuY2VPZltfb3duZXJdOwoJfQoKCS8vLyBAbm90aWNlIFNob3dzIGhvdyBtdWNoIHRva2VucyBfc3BlbmRlciBjYW4gc3BlbmQgZnJvbSBfb3duZXIgYWRkcmVzcwoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewoJCXJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwoJfQoJCgkvLy8gQG5vdGljZSBDYWxjdWxhdGVzIGFtb3VudCBvZiB3ZWlzIG5lZWRlZCB0byBidXkgbW9yZSB0aGFuIG9uZSB0b2tlbgoJLy8vIEBwYXJhbSBob3dNYW55VG9rZW5Ub0J1eSAtIEFtb3VudCBvZiB0b2tlbnMgdG8gY2FsY3VsYXRlCglmdW5jdGlvbiBjYWxjdWxhdGVUaGVFbmRQcmljZSh1aW50MjU2IGhvd01hbnlUb2tlblRvQnV5KSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1bW1hcml6ZWRQcmljZUluV2VpcykgewoJCWlmKGhvd01hbnlUb2tlblRvQnV5ID4gMCkgewoJCQlzdW1tYXJpemVkUHJpY2VJbldlaXMgPSBob3dNYW55VG9rZW5Ub0J1eSAqIGN1cnJlbnRUb2tlblByaWNlOwoJCX1lbHNlIHsKCQkJc3VtbWFyaXplZFByaWNlSW5XZWlzID0gMDsKCQl9Cgl9CgkKCS8vLyBAbm90aWNlIFNob3dzIGlmIGFjY291bnQgaXMgZnJvemVuCgkvLy8gQHBhcmFtIGFjY291bnQgLSBBY2NvdW50YWRkcmVzcyB0byBjaGVjawoJZnVuY3Rpb24gY2hlY2tGcm96ZW5BY2NvdW50cyhhZGRyZXNzIGFjY291bnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgYWNjb3VudElzRnJvemVuKSB7CgkJYWNjb3VudElzRnJvemVuID0gZnJvemVuQWNjb3VudFthY2NvdW50XTsKCX0KCgkvLy8gQG5vdGljZSBCdXkgdG9rZW5zIGZyb20gY29udHJhY3QgYnkgc2VuZGluZyBldGhlcgoJZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSBwdWJsaWMgewoJCXJlcXVpcmUoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pOwoJCXJlcXVpcmUobXNnLnZhbHVlID4gMCk7CgkJYnV5VG9rZW4oKTsKCX0KCgkvLy8gQG5vdGljZSBTZWxsIHRva2VucyBhbmQgcmVjZWl2ZSBldGhlciBmcm9tIGNvbnRyYWN0CglmdW5jdGlvbiBzZWxsKHVpbnQyNTYgYW1vdW50KSB7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA+PSBhbW91bnQpOyAgICAgICAgIAkvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKCQlyZXF1aXJlKGFtb3VudCA+IDApOwoJCXJlcXVpcmUoc2VsbFByaWNlID4gMCk7CgkJX3RyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7CgkJdWludDI1NiByZXZlbnVlID0gYW1vdW50ICogc2VsbFByaWNlOwoJCXJlcXVpcmUodGhpcy5iYWxhbmNlID49IHJldmVudWUpOwoJCW1zZy5zZW5kZXIudHJhbnNmZXIocmV2ZW51ZSk7ICAgICAgICAgICAgICAgIAkJLy8gc2VuZHMgZXRoZXIgdG8gdGhlIHNlbGxlcjogaXQncyBpbXBvcnRhbnQgdG8gZG8gdGhpcyBsYXN0IHRvIHByZXZlbnQgcmVjdXJzaW9uIGF0dGFja3MKCX0KCQoJLy8vIEBub3RpY2UgQWxsb3cgdXNlciB0byBzZWxsIG1heGltdW0gcG9zc2libGUgYW1vdW50IG9mIHRva2VucywgZGVwZW5kIG9uIGV0aGVyIGFtb3VudCBvbiBjb250cmFjdAoJZnVuY3Rpb24gc2VsbE1heGltdW1Qb3NzaWJsZUFtb3VudE9mVG9rZW5zKCkgewoJCXJlcXVpcmUoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pOwoJCXJlcXVpcmUodG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPiAwKTsKCQlyZXF1aXJlKHRoaXMuYmFsYW5jZSA+IHNlbGxQcmljZSk7CgkJaWYodG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKiBzZWxsUHJpY2UgPD0gdGhpcy5iYWxhbmNlKSB7CgkJCXNlbGwodG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0pOwoJCX1lbHNlIHsKCQkJc2VsbCh0aGlzLmJhbGFuY2UgLyBzZWxsUHJpY2UpOwoJCX0KCX0KCgkvLy8gQG5vdGljZSBUcmFuc2ZlciBhbW91bnQgb2YgdG9rZW5zIGZyb20gb3duIHdhbGxldCB0byBzb21lb25lIGVsc2UKCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgkJYXNzZXJ0KG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSk7CgkJYXNzZXJ0KF90byAhPSBhZGRyZXNzKDApKTsKCQlyZXF1aXJlKCFmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKTsKCQlyZXF1aXJlKCFmcm96ZW5BY2NvdW50W190b10pOwoJCXJlcXVpcmUodG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKCQlyZXF1aXJlKHRva2VuQmFsYW5jZU9mW21zZy5zZW5kZXJdIC0gX3ZhbHVlIDwgdG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0pOwoJCXJlcXVpcmUodG9rZW5CYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IHRva2VuQmFsYW5jZU9mW190b10pOwoJCXJlcXVpcmUoX3ZhbHVlID4gMCk7CgkJX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLy8gQG5vdGljZSAgU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KCS8vLyBAbm90aWNlICBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAoJLy8vIEBub3RpY2UgIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlCgkvLy8gQG5vdGljZSAgZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwoJLy8vIEBub3RpY2UgIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCgkvLy8gQG5vdGljZSAgdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOgoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sCWFkZHJlc3MgX3RvLAl1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgkJYXNzZXJ0KG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSk7CgkJYXNzZXJ0KF9mcm9tICE9IGFkZHJlc3MoMCkpOwoJCWFzc2VydChfdG8gIT0gYWRkcmVzcygwKSk7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSk7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOwoJCXJlcXVpcmUoIWZyb3plbkFjY291bnRbX3RvXSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKCQlyZXF1aXJlKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZltfZnJvbV0gLSBfdmFsdWUgPCB0b2tlbkJhbGFuY2VPZltfZnJvbV0pOwoJCXJlcXVpcmUodG9rZW5CYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IHRva2VuQmFsYW5jZU9mW190b10pOwoJCXJlcXVpcmUoX3ZhbHVlID4gMCk7CgkJb3JkZXJUb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF9mcm9tLCBfdG8sIF92YWx1ZSwgIk9yZGVyIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIGFsbG93ZWQgYWNjb3VudCIpOwoJCV90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoJCWFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLy8gQG5vdGljZSBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgoJLy8vIEBub3RpY2UgSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCQlyZXF1aXJlKCFmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKTsKCQlhc3NlcnQoX3NwZW5kZXIgIT0gYWRkcmVzcygwKSk7CgkJcmVxdWlyZShfdmFsdWUgPj0gMCk7CgkJYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8vIEBub3RpY2UgQ2hlY2sgaWYgbWluaW1hbCBnb2FsIG9mIElDTyBpcyByZWFjaGVkCglmdW5jdGlvbiBjaGVja01pbmltYWxHb2FsKCkgaW50ZXJuYWwgewoJCWlmKHRva2VuQmFsYW5jZU9mW3RoaXNdIDw9IF90b3RhbFN1cHBseSAtIGljb01pbikgewoJCQltaW5pbWFsR29hbFJlYWNoZWQgPSB0cnVlOwoJCQltaW5Hb2FsUmVhY2hlZChpY29NaW4sICJNaW5pbWFsIGdvYWwgb2YgSUNPIGlzIHJlYWNoZWQhIik7CgkJfQoJfQoKCS8vLyBAbm90aWNlIENoZWNrIGlmIHByZUlDTyBpcyBlbmRlZAoJZnVuY3Rpb24gY2hlY2tQcmVJY29TdGF0dXMoKSBpbnRlcm5hbCB7CgkJaWYodG9rZW5CYWxhbmNlT2ZbdGhpc10gPD0gX3RvdGFsU3VwcGx5IC0gcHJlSWNvTGltaXQpIHsKCQkJcHJlSWNvSXNSdW5uaW5nID0gZmFsc2U7CgkJCXByZUljb0VuZGVkKHByZUljb0xpbWl0LCAiVG9rZW4gYW1vdW50IGZvciBwcmVJQ08gc29sZCEiKTsKCQl9Cgl9CgoJLy8vIEBub3RpY2UgUHJvY2Vzc2luZyBlYWNoIGJ1eWluZwoJZnVuY3Rpb24gYnV5VG9rZW4oKSBpbnRlcm5hbCB7CgkJdWludDI1NiB2YWx1ZSA9IG1zZy52YWx1ZTsKCQlhZGRyZXNzIHNlbmRlciA9IG1zZy5zZW5kZXI7CgkJcmVxdWlyZSghaWNvSXNDbG9zZWQpOwoJCXJlcXVpcmUoIWZyb3plbkFjY291bnRbc2VuZGVyXSk7CgkJcmVxdWlyZSh2YWx1ZSA+IDApOwoJCXJlcXVpcmUoY3VycmVudFRva2VuUHJpY2UgPiAwKTsKCQl1aW50MjU2IGFtb3VudCA9IHZhbHVlIC8gY3VycmVudFRva2VuUHJpY2U7CQkJLy8gY2FsY3VsYXRlcyBhbW91bnQgb2YgdG9rZW5zCgkJdWludDI1NiBtb25leUJhY2sgPSB2YWx1ZSAtIChhbW91bnQgKiBjdXJyZW50VG9rZW5QcmljZSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlt0aGlzXSA+PSBhbW91bnQpOyAgICAgICAgICAgICAgCQkvLyBjaGVja3MgaWYgY29udHJhY3QgaGFzIGVub3VnaCB0byBzZWxsCgkJYW1vdW50T2ZJbnZlc3RtZW50cyA9IGFtb3VudE9mSW52ZXN0bWVudHMgKyAodmFsdWUgLSBtb25leUJhY2spOwoJCXVwZGF0ZVByaWNlcygpOwoJCV90cmFuc2Zlcih0aGlzLCBzZW5kZXIsIGFtb3VudCk7CgkJaWYoIW1pbmltYWxHb2FsUmVhY2hlZCkgewoJCQljaGVja01pbmltYWxHb2FsKCk7CgkJfQoJCWlmKG1vbmV5QmFjayA+IDApIHsKCQkJc2VuZGVyLnRyYW5zZmVyKG1vbmV5QmFjayk7CgkJfQoJfQoKCS8vLyBAbm90aWNlIEludGVybmFsIHRyYW5zZmVyLCBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdAoJZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewoJCWFzc2VydChfZnJvbSAhPSBhZGRyZXNzKDApKTsKCQlhc3NlcnQoX3RvICE9IGFkZHJlc3MoMCkpOwoJCXJlcXVpcmUoX3ZhbHVlID4gMCk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKCQlyZXF1aXJlKHRva2VuQmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiB0b2tlbkJhbGFuY2VPZltfdG9dKTsKCQlyZXF1aXJlKCFmcm96ZW5BY2NvdW50W19mcm9tXSk7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFtfdG9dKTsKCQlpZih0b2tlbkJhbGFuY2VPZltfdG9dID09IDApewoJCQljb3VudEhvbGRlcnMgKz0gMTsKCQl9CgkJdG9rZW5CYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKCQlpZih0b2tlbkJhbGFuY2VPZltfZnJvbV0gPT0gMCl7CgkJCWNvdW50SG9sZGVycyAtPSAxOwoJCX0KCQl0b2tlbkJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKCQlhbGxvd2VkW3RoaXNdW293bmVyXSA9IHRva2VuQmFsYW5jZU9mW3RoaXNdOwoJCWFsbG93ZWRbdGhpc11bc3VwZXJ2aXNvcl0gPSB0b2tlbkJhbGFuY2VPZlt0aGlzXTsKCQlUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoJfQoKCS8vLyBAbm90aWNlIFNldCBjdXJyZW50IElDTyBwcmljZXMgaW4gd2VpIGZvciBvbmUgdG9rZW4KCWZ1bmN0aW9uIHVwZGF0ZVByaWNlcygpIGludGVybmFsIHsKCQl1aW50MjU2IG9sZFByaWNlID0gY3VycmVudFRva2VuUHJpY2U7CgkJaWYocHJlSWNvSXNSdW5uaW5nKSB7CgkJCWNoZWNrUHJlSWNvU3RhdHVzKCk7CgkJfQoJCWlmKHByZUljb0lzUnVubmluZykgewoJCQljdXJyZW50VG9rZW5QcmljZSA9IHByZUlDT3ByaWNlOwoJCX1lbHNlewoJCQljdXJyZW50VG9rZW5QcmljZSA9IElDT3ByaWNlOwoJCX0KCQkKCQlpZihvbGRQcmljZSAhPSBjdXJyZW50VG9rZW5QcmljZSkgewoJCQlwcmljZVVwZGF0ZWQob2xkUHJpY2UsIGN1cnJlbnRUb2tlblByaWNlLCAiVG9rZW4gcHJpY2UgdXBkYXRlZCEiKTsKCQl9Cgl9CgoJLy8vIEBub3RpY2UgU2V0IGN1cnJlbnQgcHJlSUNPIHByaWNlIGluIHdlaSBmb3Igb25lIHRva2VuCgkvLy8gQHBhcmFtIHByaWNlRm9yUHJlSWNvSW5XZWkgLSBpcyB0aGUgYW1vdW50IGluIHdlaSBmb3Igb25lIHRva2VuCglmdW5jdGlvbiBzZXRQcmVJQ09QcmljZSh1aW50MjU2IHByaWNlRm9yUHJlSWNvSW5XZWkpIGlzT3duZXIgewoJCXJlcXVpcmUocHJpY2VGb3JQcmVJY29JbldlaSA+IDApOwoJCXJlcXVpcmUocHJlSUNPcHJpY2UgIT0gcHJpY2VGb3JQcmVJY29JbldlaSk7CgkJcHJlSUNPcHJpY2UgPSBwcmljZUZvclByZUljb0luV2VpOwoJCXVwZGF0ZVByaWNlcygpOwoJfQoKCS8vLyBAbm90aWNlIFNldCBjdXJyZW50IElDTyBwcmljZSBpbiB3ZWkgZm9yIG9uZSB0b2tlbgoJLy8vIEBwYXJhbSBwcmljZUZvckljb0luV2VpIC0gaXMgdGhlIGFtb3VudCBpbiB3ZWkgZm9yIG9uZSB0b2tlbgoJZnVuY3Rpb24gc2V0SUNPUHJpY2UodWludDI1NiBwcmljZUZvckljb0luV2VpKSBpc093bmVyIHsKCQlyZXF1aXJlKHByaWNlRm9ySWNvSW5XZWkgPiAwKTsKCQlyZXF1aXJlKElDT3ByaWNlICE9IHByaWNlRm9ySWNvSW5XZWkpOwoJCUlDT3ByaWNlID0gcHJpY2VGb3JJY29JbldlaTsKCQl1cGRhdGVQcmljZXMoKTsKCX0KCgkvLy8gQG5vdGljZSBTZXQgYm90aCBwcmljZXMgYXQgdGhlIHNhbWUgdGltZQoJLy8vIEBwYXJhbSBwcmljZUZvclByZUljb0luV2VpIC0gUHJpY2Ugb2YgdGhlIHRva2VuIGluIHByZSBJQ08KCS8vLyBAcGFyYW0gcHJpY2VGb3JJY29JbldlaSAtIFByaWNlIG9mIHRoZSB0b2tlbiBpbiBJQ08KCWZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IHByaWNlRm9yUHJlSWNvSW5XZWksIHVpbnQyNTYgcHJpY2VGb3JJY29JbldlaSkgaXNPd25lciB7CgkJcmVxdWlyZShwcmljZUZvclByZUljb0luV2VpID4gMCk7CgkJcmVxdWlyZShwcmljZUZvckljb0luV2VpID4gMCk7CgkJcHJlSUNPcHJpY2UgPSBwcmljZUZvclByZUljb0luV2VpOwoJCUlDT3ByaWNlID0gcHJpY2VGb3JJY29JbldlaTsKCQl1cGRhdGVQcmljZXMoKTsKCX0KCgkvLy8gQG5vdGljZSBTZXQgdGhlIGN1cnJlbnQgc2VsbCBwcmljZSBpbiB3ZWkgZm9yIG9uZSB0b2tlbgoJLy8vIEBwYXJhbSBwcmljZUluV2VpIC0gaXMgdGhlIGFtb3VudCBpbiB3ZWkgZm9yIG9uZSB0b2tlbgoJZnVuY3Rpb24gc2V0U2VsbFByaWNlKHVpbnQyNTYgcHJpY2VJbldlaSkgaXNPd25lciB7CgkJcmVxdWlyZShwcmljZUluV2VpID49IDApOwoJCXNlbGxQcmljZSA9IHByaWNlSW5XZWk7Cgl9CgoJLy8vIEBub3RpY2UgJ2ZyZWV6ZT8gUHJldmVudCB8IEFsbG93JyAnYWNjb3VudCcgZnJvbSBzZW5kaW5nIGFuZCByZWNlaXZpbmcgdG9rZW5zCgkvLy8gQHBhcmFtIGFjY291bnQgLSBhZGRyZXNzIHRvIGJlIGZyb3plbgoJLy8vIEBwYXJhbSBmcmVlemUgLSBzZWxlY3QgaXMgdGhlIGFjY291bnQgZnJvemVuIG9yIG5vdAoJZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIGFjY291bnQsIGJvb2wgZnJlZXplKSBpc093bmVyIHsKCQlyZXF1aXJlKGFjY291bnQgIT0gb3duZXIpOwoJCXJlcXVpcmUoYWNjb3VudCAhPSBzdXBlcnZpc29yKTsKCQlmcm96ZW5BY2NvdW50W2FjY291bnRdID0gZnJlZXplOwoJCWlmKGZyZWV6ZSkgewoJCQlGcm96ZW5GdW5kcyhtc2cuc2VuZGVyLCBhY2NvdW50LCAiQWNjb3VudCBzZXQgZnJvemVuISIpOwoJCX1lbHNlIHsKCQkJRnJvemVuRnVuZHMobXNnLnNlbmRlciwgYWNjb3VudCwgIkFjY291bnQgc2V0IGZyZWUgZm9yIHVzZSEiKTsKCQl9Cgl9CgoJLy8vIEBub3RpY2UgQ3JlYXRlIGFuIGFtb3VudCBvZiB0b2tlbgoJLy8vIEBwYXJhbSBhbW91bnQgLSB0b2tlbiB0byBjcmVhdGUKCWZ1bmN0aW9uIG1pbnRUb2tlbih1aW50MjU2IGFtb3VudCkgaXNPd25lciB7CgkJcmVxdWlyZShhbW91bnQgPiAwKTsKCQlyZXF1aXJlKHRva2VuQmFsYW5jZU9mW3RoaXNdIDw9IGljb01pbik7CS8vIG93bmVyIGNhbiBjcmVhdGUgdG9rZW4gb25seSBpZiB0aGUgaW5pdGlhbCBhbW91bnQgaXMgc3Ryb25nbHkgbm90IGVub3VnaCB0byBzdXBwbHkgYW5kIGRlbWFuZCBJQ08KCQlyZXF1aXJlKF90b3RhbFN1cHBseSArIGFtb3VudCA+IF90b3RhbFN1cHBseSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlt0aGlzXSArIGFtb3VudCA+IHRva2VuQmFsYW5jZU9mW3RoaXNdKTsKCQlfdG90YWxTdXBwbHkgKz0gYW1vdW50OwoJCXRva2VuQmFsYW5jZU9mW3RoaXNdICs9IGFtb3VudDsKCQlhbGxvd2VkW3RoaXNdW293bmVyXSA9IHRva2VuQmFsYW5jZU9mW3RoaXNdOwoJCWFsbG93ZWRbdGhpc11bc3VwZXJ2aXNvcl0gPSB0b2tlbkJhbGFuY2VPZlt0aGlzXTsKCQl0b2tlbkNyZWF0ZWQobXNnLnNlbmRlciwgYW1vdW50LCAiQWRkaXRpb25hbCB0b2tlbnMgY3JlYXRlZCEiKTsKCX0KCgkvLy8gQG5vdGljZSBEZXN0cm95IGFuIGFtb3VudCBvZiB0b2tlbgoJLy8vIEBwYXJhbSBhbW91bnQgLSB0b2tlbiB0byBkZXN0cm95CglmdW5jdGlvbiBkZXN0cm95VG9rZW4odWludDI1NiBhbW91bnQpIGlzT3duZXIgewoJCXJlcXVpcmUoYW1vdW50ID4gMCk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlt0aGlzXSA+PSBhbW91bnQpOwoJCXJlcXVpcmUoX3RvdGFsU3VwcGx5ID49IGFtb3VudCk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlt0aGlzXSAtIGFtb3VudCA+PSAwKTsKCQlyZXF1aXJlKF90b3RhbFN1cHBseSAtIGFtb3VudCA+PSAwKTsKCQl0b2tlbkJhbGFuY2VPZlt0aGlzXSAtPSBhbW91bnQ7CgkJX3RvdGFsU3VwcGx5IC09IGFtb3VudDsKCQlhbGxvd2VkW3RoaXNdW293bmVyXSA9IHRva2VuQmFsYW5jZU9mW3RoaXNdOwoJCWFsbG93ZWRbdGhpc11bc3VwZXJ2aXNvcl0gPSB0b2tlbkJhbGFuY2VPZlt0aGlzXTsKCQl0b2tlbkRlc3Ryb3llZChtc2cuc2VuZGVyLCBhbW91bnQsICJBbiBhbW91bnQgb2YgdG9rZW5zIGRlc3Ryb3llZCEiKTsKCX0KCgkvLy8gQG5vdGljZSBUcmFuc2ZlciB0aGUgb3duZXJzaGlwIHRvIGFub3RoZXIgYWNjb3VudAoJLy8vIEBwYXJhbSBuZXdPd25lciAtIGFkZHJlc3Mgd2hvIGdldCB0aGUgb3duZXJzaGlwCglmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBpc093bmVyIHsKCQlhc3NlcnQobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CgkJYWRkcmVzcyBvbGRPd25lciA9IG93bmVyOwoJCW93bmVyID0gbmV3T3duZXI7CgkJb3duZXJDaGFuZ2VkKG1zZy5zZW5kZXIsIG9sZE93bmVyLCBuZXdPd25lcik7CgkJYWxsb3dlZFt0aGlzXVtvbGRPd25lcl0gPSAwOwoJCWFsbG93ZWRbdGhpc11bbmV3T3duZXJdID0gdG9rZW5CYWxhbmNlT2ZbdGhpc107Cgl9CgoJLy8vIEBub3RpY2UgVHJhbnNmZXIgZXRoZXIgZnJvbSBzbWFydGNvbnRyYWN0IHRvIG93bmVyCglmdW5jdGlvbiBjb2xsZWN0KCkgaXNPd25lciB7CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPiAwKTsKCQlyZXF1aXJlKG1pbmltYWxHb2FsUmVhY2hlZCk7CS8vIE93bmVyIGNhbiBnZXQgZnVuZHMgb25seSBpZiBtaW5pbWFsIGZ1bmRyaXNpbmcgaXMgcmVhY2hlZAoJCXdpdGhkcmF3KHRoaXMuYmFsYW5jZSk7CiAgICB9CgoJLy8vIEBub3RpY2UgV2l0aGRyYXcgYW4gYW1vdW50IG9mIGV0aGVyCgkvLy8gQHBhcmFtIHN1bW1lSW5XZWkgLSBhbW91dCB0byB3aXRoZHJhdwoJZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBzdW1tZUluV2VpKSBpc093bmVyIHsKCQl1aW50MjU2IGNvbnRyYWN0YmFsYW5jZSA9IHRoaXMuYmFsYW5jZTsKCQlhZGRyZXNzIHNlbmRlciA9IG1zZy5zZW5kZXI7CgkJcmVxdWlyZShjb250cmFjdGJhbGFuY2UgPj0gc3VtbWVJbldlaSk7CgkJcmVxdWlyZShtaW5pbWFsR29hbFJlYWNoZWQpOwkvLyBPd25lciBjYW4gZ2V0IGZ1bmRzIG9ubHkgaWYgbWluaW1hbCBmdW5kcmlzaW5nIGlzIHJlYWNoZWQKCQl3aXRoZHJhd2VkKHNlbmRlciwgc3VtbWVJbldlaSwgIndlaSB3aXRoZHJhd2VkIik7CiAgICAgICAgc2VuZGVyLnRyYW5zZmVyKHN1bW1lSW5XZWkpOwoJfQoKCS8vLyBAbm90aWNlIERlcG9zaXQgYW4gYW1vdW50IG9mIGV0aGVyCglmdW5jdGlvbiBkZXBvc2l0KCkgcGF5YWJsZSBpc093bmVyIHsKCQlyZXF1aXJlKG1zZy52YWx1ZSA+IDApOwoJCXJlcXVpcmUobXNnLnNlbmRlci5iYWxhbmNlID49IG1zZy52YWx1ZSk7CgkJZGVwb3NpdGVkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgIndlaSBkZXBvc2l0ZWQiKTsKCX0KCgkvLy8gQG5vdGljZSBBbGxvdyB1c2VyIHRvIGV4aXQgSUNPCgkvLy8gQHBhcmFtIGV4aXRBbGxvd2VkIC0gc3RhdHVzIGlmIHRoZSBleGl0IGlzIGFsbG93ZWQKCWZ1bmN0aW9uIGFsbG93SWNvRXhpdChib29sIGV4aXRBbGxvd2VkKSBpc093bmVyIHsKCQlyZXF1aXJlKGljb0V4aXRJc1Bvc3NpYmxlICE9IGV4aXRBbGxvd2VkKTsKCQlpY29FeGl0SXNQb3NzaWJsZSA9IGV4aXRBbGxvd2VkOwoJfQoKCS8vLyBAbm90aWNlIFN0b3AgcnVubmluZyBJQ08KCS8vLyBAcGFyYW0gaWNvSXNTdG9wcGVkIC0gc3RhdHVzIGlmIHRoaXMgSUNPIGlzIHN0b3BwZWQKCWZ1bmN0aW9uIHN0b3BUaGlzSWNvKGJvb2wgaWNvSXNTdG9wcGVkKSBpc093bmVyIHsKCQlyZXF1aXJlKGljb0lzQ2xvc2VkICE9IGljb0lzU3RvcHBlZCk7CgkJaWNvSXNDbG9zZWQgPSBpY29Jc1N0b3BwZWQ7CgkJaWYoaWNvSXNTdG9wcGVkKSB7CgkJCWljb1N0YXR1c1VwZGF0ZWQobXNnLnNlbmRlciwgIkNvaW4gb2ZmZXJpbmcgd2FzIHN0b3BwZWQhIik7CgkJfWVsc2UgewoJCQlpY29TdGF0dXNVcGRhdGVkKG1zZy5zZW5kZXIsICJDb2luIG9mZmVyaW5nIGlzIHJ1bm5pbmchIik7CgkJfQoJfQoKCS8vLyBAbm90aWNlIFNlbGwgYWxsIHRva2VucyBmb3IgaGFsZiBvZiBhIHByaWNlIGFuZCBleGl0IHRoaXMgSUNPCglmdW5jdGlvbiBleGl0VGhpc0ljb0ZvckhhbGZPZlRva2VuUHJpY2UoKSB7CgkJcmVxdWlyZShpY29FeGl0SXNQb3NzaWJsZSk7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA+IDApOyAgICAgICAgIAkvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKCQlyZXF1aXJlKGN1cnJlbnRUb2tlblByaWNlID4gMSk7CgkJdWludDI1NiBhbW91bnQgPSB0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA7CgkJdWludDI1NiByZXZlbnVlID0gYW1vdW50ICogY3VycmVudFRva2VuUHJpY2UgLyAyOwoJCXJlcXVpcmUodGhpcy5iYWxhbmNlID49IHJldmVudWUpOwoJCV90cmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOwoJCW1zZy5zZW5kZXIudHJhbnNmZXIocmV2ZW51ZSk7ICAgICAgICAgICAgICAgIAkvLyBzZW5kcyBldGhlciB0byB0aGUgc2VsbGVyOiBpdCdzIGltcG9ydGFudCB0byBkbyB0aGlzIGxhc3QgdG8gcHJldmVudCByZWN1cnNpb24gYXR0YWNrcwoJfQoKCS8vLyBAbm90aWNlIFNlbGwgYWxsIG9mIHRva2VucyBmb3IgYWxsIGV0aGVyIG9mIHRoaXMgc21hcnRjb250cmFjdAoJZnVuY3Rpb24gZ2V0QWxsTXlUb2tlbnNGb3JBbGxFdGhlck9uQ29udHJhY3QoKSB7CgkJcmVxdWlyZShpY29FeGl0SXNQb3NzaWJsZSk7CgkJcmVxdWlyZSghZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSk7CgkJcmVxdWlyZSh0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA+IDApOyAgICAgICAgIAkvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKCQlyZXF1aXJlKGN1cnJlbnRUb2tlblByaWNlID4gMSk7CgkJdWludDI1NiBhbW91bnQgPSB0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA7CgkJdWludDI1NiByZXZlbnVlID0gYW1vdW50ICogY3VycmVudFRva2VuUHJpY2UgLyAyOwoJCXJlcXVpcmUodGhpcy5iYWxhbmNlIDw9IHJldmVudWUpOwoJCV90cmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOwoJCW1zZy5zZW5kZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsgCgl9Cn0='.
	

]
