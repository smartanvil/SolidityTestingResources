Class {
	#name : #SRT9058592e52c5639d4009d921cbd84d410b95bd2a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9058592e52c5639d4009d921cbd84d410b95bd2a >> base64 [
	^ 'LyohIGdiY29pbi5zb2wgfCAoYykgMjAxNyBEZXZlbG9wIGJ5IEJlbG92SVRMYWIsIGF1dG9yIG15LmxpZmUuY29va2llIHwgTGljZW5zZTogTUlUICovCgovKgogICAg0J4g0L3QsNGBOgoKICAgINCd0LDRiNCwINGB0LjRgdGC0LXQvNCwIEdCINGB0L7RgdGC0L7QuNGCINC40Lcg0L3QtdGB0LrQvtC70YzQutC40YUg0LHQsNC90LrQvtCyLCDRgNCw0YHQv9C+0LvQvtC20LXQvdC90YvRhSDQvdCwINGC0LXRgNGA0LjRgtC+0YDQuNC4INCV0LLRgNC+0YHQvtGO0LfQsCwg0KDQvtGB0YHQuNC4INC4INCh0L7QtdC00LjQvdC10L3QvdGL0YUg0KjRgtCw0YLQvtCyINCQ0LzQtdGA0LjQutC4LAogICAg0LAg0YLQsNC6INC20LUg0LIg0YHQutC+0YDQvtC8INCy0YDQtdC80LXQvdC4INC90LDRiNC4INGA0Y/QtNGLINC/0L7Qv9C+0LvQvdC40YIg0LHQsNC90Log0LjQtyDQmtC40YLQsNGPLiDQndCw0YjQsCDRhNC40L3QsNC90YHQvtCy0LDRjyDRgdC40YHRgtC10LzQsCDQv9C+0YHRgtC+0Y/QvdC90L4g0YDQsNC30LLQuNCy0LDQtdGC0YHRjyDQuCDRgdGC0YDQtdC80LjRgtGB0Y8g0LTQu9GPIAogICAg0YPRgdC+0LLQtdGA0YjQtdC90YHRgtCy0L7QstCw0L3QuNGPINC00LvRjyDQvdCw0YjQuNGFINC60LvQuNC10L3RgtC+0LIuINCU0LvRjyDRjdGC0L7Qs9C+INC80Ysg0LLQvtGB0YHQvtC10LTQuNC90LjQu9C40YHRjCDQsiDQvtC00L3RgyDQutGA0YPQv9C90YPRjiDQvNC40YDQvtCy0YPRjiDRhNC40L3QsNC90YHQvtCy0YPRjiDRgdC10YLRjCwg0LrQvtGC0L7RgNCw0Y8g0LzQvtC20LXRggogICAg0L/RgNC10LTQvtGB0YLQsNCy0LvRj9GC0Ywg0LTQu9GPINC90LDRiNC40YUg0LrQu9C40LXQvdGC0L7QsiDQuCDQu9GO0LTQtdC5INCx0LDQvdC60L7QstGB0LrQuNC1INGD0YHQu9GD0LPQuCDQstGB0LXRhSDQvdCw0L/RgNCw0LLQu9C10L3QuNC5LCDRgdCy0L7RjiDQstCw0LvRjtGC0YMgR0JDb2luLCAg0LrRgNC40L/RgtC+0LLQsNC70Y7RgtC90YPRjiDRhNC+0L3QtNC+0LLRg9GOCiAgICDQsdC40YDQttGDIEdCTWFya2V0cyAtINCz0LTQtSDQutCw0LbQtNGL0Lkg0YfQtdC70L7QstC10LosINC70LjQsdC+INC/0YDQvtGE0LXRgdGB0LjQvtC90LDQu9GM0L3Ri9C5INGC0YDQtdC50LTQtdGALCDRgdC80L7QttC10YIg0YPQstC10LvQuNGH0LjRgtGMINGB0LLQvtC5INC60LDQv9C40YLQsNC7LCDQv9GD0YLQtdC8INGC0L7RgNCz0L7QstC70Lgg0L3QsCAKICAgINCx0LjRgNC20LUuINCd0LDRiNCwINGE0LjQvdCw0L3RgdC+0LLQsNGPINGB0LjRgdGC0LXQvNCwICAg0L/QvtGB0YLQvtGP0L3QvdC+ICDRgSDQutCw0LbQtNGL0Lwg0LzQtdGB0Y/RhtC10Lwg0YPQstC10LvQuNGH0LjQstCw0LXRgtGB0Y8g0L3QsCDQvtC00LjQvSDQvtGE0LjRgSDQsiDRgNCw0LfQvdGL0YUg0YHRgtGA0LDQvdCw0YUsINGH0YLQviDQv9C+0LfQstC+0LvQuNGCIAogICAg0LLQvtGB0L/QvtC70YzQt9C+0LLQsNGC0YzRgdGPICDQvdCw0YjQuNC80Lgg0YPRgdC70YPQs9Cw0LzQuCDQs9GA0LDQttC00LDQvdC40L3RgyDRgtC+0Lkg0LjQu9C4INC40L3QvtC5INGB0YLRgNCw0L3Riy4g0J3QsNGI0Lgg0YPRgdC70YPQs9C4INC70L7Rj9C70YzQvdGLINC60L4g0LLRgdC10Lwg0L3QsNGI0LjQvCDQutC70LjQtdC90YLQsNC8LiDQnNGLIAogICAg0L/RgNC10LTQvtGB0YLQsNCy0LvRj9C10Lwg0L/QvtGC0YDQtdCx0LjRgtC10LvRjNGB0LrQuNC1INC60YDQtdC00LjRgtGLLCDQsNCy0YLQvtC60YDQtdC00LjRgtC+0LLQsNC90LjQtSwg0LjQv9C+0YLQtdGH0L3QvtC1INC60YDQtdC00LjRgtC+0LLQsNC90LjQtSwg0L/QvtC0INC80LjQvdC40LzQsNC70YzQvdGL0LUg0L/RgNC+0YbQtdC90YLRiywg0L7RgtC60YDRi9Cy0LDQtdGCIAogICAg0LTQtdC/0L7Qt9C40YLQvdGL0LUg0Lgg0LjQvdCy0LXRgdGC0LjRhtC40L7QvdC90YvQtSDQstC60LvQsNC00YssINCy0LrQu9Cw0LTRiyDQvdCwINC00L7QstC10YDQuNGC0LXQu9GM0L3QvtC1INGD0L/RgNCw0LLQu9C10L3QuNC1LCDRgdGC0YDQsNGF0L7QstCw0L3QuNC1INGBINCx0L7Qu9GM0YjQuNC80Lgg0LLQvtC30LzQvtC20L3QvtGB0YLRj9C80LgsINC+0LHQvNC10L3QvdC40LoKICAgINCy0LDQu9GO0YIsINC/0LvQsNGC0LXQttC90LDRjyDRgdC40YHRgtC10LzQsCwg0YLQsNC6INC20LUg0LzQvtC20L3QviDQvtC/0LvQsNGH0LjQstCw0YLRjCDQvdCw0YjQtdC5INC60YDQuNC/0YLQvtCy0LDQu9GO0YLQvtC5IEdCQ29pbiDRg9GB0LvRg9Cz0Lgg0YLQsNC60YHQuCDQsiDRgNCw0LfQvdGL0YUg0YHRgtGA0LDQvdCw0YUsINC+0L/Qu9Cw0YfQuNCy0LDRgtGMIAogICAg0LfQsCDRgtGD0YDQuNGB0YLQuNGH0LXRgdC60LjQtSDQv9GD0YLQtdCy0LrQuCDRgyDRgtGD0YDQvtC/0LXRgNCw0YLQvtGA0L7QsiwgINCf0L4g0YHQuNGB0YLQtdC80LUg0LvQvtGP0LvRjNC90L7RgdGC0Lgg0LjQvNC10YLRjCDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC/0L7Qu9GD0YfQsNGC0Ywg0YHQutC40LTQutC4INC4IGNhc2ggYmFjayDQsiAKICAgINC/0YDQvtC00YPQutGC0L7QstGL0YUg0LzQsNCz0LDQt9C40L3QsNGFINC/0LDRgNGC0L3QtdGA0L7QsiDQuCDQvNC90L7Qs9C+0LUg0LTRgNGD0LPQvtC1LiDQoSDQvdCw0LzQuCDQstGLINCx0YPQtNC10YLQtSDQuNC80LXRgtGMINCy0YHQtSDQsiDQvtC00L3QvtC5INGB0LjRgdGC0LXQvNC1INC4INC90LUg0L3Rg9C20L3QviDQsdGD0LTQtdGCINC+0LHRgNCw0YnQsNGC0YzRgdGPIAogICAg0LIg0YHRgtC+0YDQvtC90L3QuNC1INGB0YLRgNGD0LrRgtGD0YDRiy4g0KPQtNC+0LHRgdGC0LLQviDQuCDQmtCw0YfQtdGB0YLQstC+INC00LvRjyDQstGB0LXRhSDQutC70LjQtdC90YLQvtCyLiAKKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsgXzsgfQoKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogICAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgogICAgZXZlbnQgUGF1c2UoKTsKICAgIGV2ZW50IFVucGF1c2UoKTsKCiAgICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgeyByZXF1aXJlKCFwYXVzZWQpOyBfOyB9CiAgICBtb2RpZmllciB3aGVuUGF1c2VkKCkgeyByZXF1aXJlKHBhdXNlZCk7IF87IH0KCiAgICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIFBhdXNlKCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCB7CiAgICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICAgICAgVW5wYXVzZSgpOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMCB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwoKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwoKICAgICAgICBpZihfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGJ1cm5lciwgdWludDI1NiB2YWx1ZSk7CgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CgogICAgICAgIGJhbGFuY2VzW2J1cm5lcl0gPSBiYWxhbmNlc1tidXJuZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CgogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9Cgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICAgIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwogICAgdWludCBwdWJsaWMgTUFYX1NVUFBMWTsKCiAgICBtb2RpZmllciBjYW5NaW50KCkgeyByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOyBfOyB9CgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KSA8PSBNQVhfU1VQUExZKTsKCiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwoKICAgICAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwoKICAgICAgICBNaW50RmluaXNoZWQoKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8qCiAgICBJQ08gR0JDb2luCiAgICAtINCt0LzQuNGB0YHQuNGPINGC0L7QutC10L3QvtCyINC+0LPRgNCw0L3QuNGH0LXQvdCwICjQstGB0LXQs9C+IDQwIDAwMCAwMDAg0YLQvtC60LXQvdC+0LIsINGC0L7QutC10L3RiyDQstGL0L/Rg9GB0LrQsNGO0YLRgdGPINCy0L4g0LLRgNC10LzRjyBDcm93ZHNhbGUpCiAgICAtINCm0LXQvdCwINGC0L7QutC10L3QsCDQstC+INCy0YDQtdC80Y8g0YHRgtCw0YDRgtCwOiAxIEVUSCA9IDIwINGC0L7QutC10L3QvtCyICgxIEV0aCAofjUwMCQpIC8gMjAgPSB+MjUkKSAo0YbQtdC90YMg0LzQvtC20L3QviDQuNC30LzQtdC90LjRgtGMINCy0L4g0LLRgNC10LzRjyBJQ08pCiAgICAtINCc0LjQvdC40LzQsNC70YzQvdCw0Y8g0Lgg0LzQsNC60YHQuNC80LDQu9GM0L3QsNGPINGB0YPQvNC80LAg0L/QvtC60YPQv9C60Lg6IDEgRVRIINC4IDEwIDAwMCBFVEgKICAgIC0g0KLQvtC60LXQvdC+0LIg0L3QsCDQv9GA0L7QtNCw0LbRgyAyMCAwMDAgMDAwICg1MCUpCiAgICAtIDIwIDAwMCAwMDAgKDUwJSkg0YLQvtC60LXQvdC+0LIg0L/QtdGA0LXQtNCw0LXRgtGB0Y8g0LHQtdC90LXRhNC40YbQuNCw0YDRgyDQstC+INCy0YDQtdC80Y8g0YHQvtC30LTQsNC90LjRjyDRgtC+0LrQtdC90LAKICAgIC0g0KHRgNC10LTRgdGC0LLQsCDQvtGCINC/0L7QutGD0L/QutC4INGC0L7QutC10L3QvtCyINC/0LXRgNC10LTQsNGO0YLRgdGPINCx0LXQvdC10YTQuNGG0LjQsNGA0YMKICAgIC0g0JfQsNC60YDRi9GC0LjQtSBDcm93ZHNhbGUg0L/RgNC+0LjRgdGF0L7QtNC40YIg0YEg0L/QvtC80L7RidGM0Y4g0YTRg9C90LrRhtC40LggYHdpdGhkcmF3KClgOtC90LXRgNCw0YHQutGD0L/Qu9C10L3QvdGL0LUg0YLQvtC60LXQvdGLINC4INGD0L/RgNCw0LLQu9C10L3QuNC1INGC0L7QutC10L3QvtC8INC/0LXRgNC10LTQsNGR0YLRgdGPINCx0LXQvdC10YTQuNGG0LjQsNGA0YMsINCy0YvQv9GD0YHQuiDRgtC+0LrQtdC90L7QsiDQt9Cw0LrRgNGL0LLQsNC10YLRgdGPCiAgICAtINCY0LfQvNC10L3QuNC1INGG0LXQvdGLINGC0L7QutC10L3QsCDQv9GA0L7QuNGB0YXQvtC00LXRgiDRhNGD0L3QutGG0LjQtdC5IGBzZXRUb2tlblByaWNlKF92YWx1ZSlgLCDQs9C00LUgYF92YWx1ZWAgLSDQutC+0Lst0LLQviDRgtC+0LrQtdC90L7QsiDQv9C+0LrRg9C80LDQtdC80L7QtSDQt9CwIDEgRXRoZXIsINGB0LzQtdC90LAg0YHRgtC+0LjQvNC+0YHRgtC4INGC0L7QutC10L3QsCDQtNC+0YHRgtGD0L/QvdC+INGC0L7Qu9GM0LrQviDQstC+INCy0YDQtdC80Y8g0L/QsNGD0LfRiyDQsNC00LzQuNC90LjRgdGC0YDQsNGC0L7RgNGDLCDQv9C+0YHQu9C1INC30LDQstC10YDRiNC10L3QuNGPIENyb3dkc2FsZSDRhNGD0L3QutGG0LjRjyDRgdGC0LDQvdC+0LLQuNGC0YHRjyDQvdC10LTQvtGB0YLRg9C/0L3QvtC5CiovCmNvbnRyYWN0IFRva2VuIGlzIEJ1cm5hYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkdCQ29pbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJHQkNOIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgZnVuY3Rpb24gVG9rZW4oKSB7CiAgICAgICAgTUFYX1NVUFBMWSA9IDQwMDAwMDAwICogMSBldGhlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1heGltdW0gYW1vdW50IHRva2VucwogICAgICAgIG1pbnQoMHhGNTkxMjVGQ0I5MmJCQjM2NGU3RjNjMTA2RTlCQUViOGI0YkI2OUIwLCAyMDAwMDAwMCAqIDEgZXRoZXIpOyAgICAgICAKICAgIH0KfQoKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIFRva2VuIHB1YmxpYyB0b2tlbjsKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5ID0gMHhGNTkxMjVGQ0I5MmJCQjM2NGU3RjNjMTA2RTlCQUViOGI0YkI2OUIwOyAgICAgICAgCgogICAgdWludCBwdWJsaWMgY29sbGVjdGVkV2VpOwogICAgdWludCBwdWJsaWMgdG9rZW5zU29sZDsKCiAgICB1aW50IHB1YmxpYyB0b2tlbnNGb3JTYWxlID0gMjAwMDAwMDAgKiAxIGV0aGVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCB0b2tlbnMgZm9yIHNhbGUKICAgIHVpbnQgcHVibGljIHByaWNlVG9rZW5XZWkgPSAxIGV0aGVyIC8gMjA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSBFdGggKH41MDAkKSAvIDIwID0gfjI1JAoKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUZpbmlzaGVkID0gZmFsc2U7CgogICAgZXZlbnQgTmV3Q29udHJpYnV0aW9uKGFkZHJlc3MgaW5kZXhlZCBob2xkZXIsIHVpbnQyNTYgdG9rZW5BbW91bnQsIHVpbnQyNTYgZXRoZXJBbW91bnQpOwogICAgZXZlbnQgV2l0aGRyYXcoKTsKCiAgICBmdW5jdGlvbiBDcm93ZHNhbGUoKSB7CiAgICAgICAgdG9rZW4gPSBuZXcgVG9rZW4oKTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIHB1cmNoYXNlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VG9rZW5QcmljZSh1aW50IF92YWx1ZSkgb25seU93bmVyIHdoZW5QYXVzZWQgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICBwcmljZVRva2VuV2VpID0gMSBldGhlciAvIF92YWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcHVyY2hhc2UoKSB3aGVuTm90UGF1c2VkIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICByZXF1aXJlKHRva2Vuc1NvbGQgPCB0b2tlbnNGb3JTYWxlKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAxIGV0aGVyICYmIG1zZy52YWx1ZSA8PSAxMDAwMCAqIDEgZXRoZXIpOwoKICAgICAgICB1aW50IHN1bSA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IGFtb3VudCA9IHN1bS5kaXYocHJpY2VUb2tlbldlaSkubXVsKDEgZXRoZXIpOwogICAgICAgIHVpbnQgcmV0U3VtID0gMDsKICAgICAgICAKICAgICAgICBpZih0b2tlbnNTb2xkLmFkZChhbW91bnQpID4gdG9rZW5zRm9yU2FsZSkgewogICAgICAgICAgICB1aW50IHJldEFtb3VudCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCkuc3ViKHRva2Vuc0ZvclNhbGUpOwogICAgICAgICAgICByZXRTdW0gPSByZXRBbW91bnQubXVsKHByaWNlVG9rZW5XZWkpLmRpdigxIGV0aGVyKTsKCiAgICAgICAgICAgIGFtb3VudCA9IGFtb3VudC5zdWIocmV0QW1vdW50KTsKICAgICAgICAgICAgc3VtID0gc3VtLnN1YihyZXRTdW0pOwogICAgICAgIH0KCiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCk7CiAgICAgICAgY29sbGVjdGVkV2VpID0gY29sbGVjdGVkV2VpLmFkZChzdW0pOwoKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2ZlcihzdW0pOwogICAgICAgIHRva2VuLm1pbnQobXNnLnNlbmRlciwgYW1vdW50KTsKCiAgICAgICAgaWYocmV0U3VtID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJldFN1bSk7CiAgICAgICAgfQoKICAgICAgICBOZXdDb250cmlidXRpb24obXNnLnNlbmRlciwgYW1vdW50LCBzdW0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVGaW5pc2hlZCk7CiAgICAgICAgCiAgICAgICAgaWYodG9rZW5zRm9yU2FsZS5zdWIodG9rZW5zU29sZCkgPiAwKSB7CiAgICAgICAgICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vuc0ZvclNhbGUuc3ViKHRva2Vuc1NvbGQpKTsKICAgICAgICB9CgogICAgICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgICAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChiZW5lZmljaWFyeSk7CgogICAgICAgIGNyb3dkc2FsZUZpbmlzaGVkID0gdHJ1ZTsKCiAgICAgICAgV2l0aGRyYXcoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIHRva2VuLmJhbGFuY2VPZihfb3duZXIpOwogICAgfQp9'.
	

]
