Class {
	#name : #SRT847966338e9023c6a19682Cc5E321516e79Bc7dE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT847966338e9023c6a19682Cc5E321516e79Bc7dE >> base64 [
	^ ''.
	

]
