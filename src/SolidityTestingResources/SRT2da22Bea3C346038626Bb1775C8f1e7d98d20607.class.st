Class {
	#name : #SRT2da22Bea3C346038626Bb1775C8f1e7d98d20607,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2da22Bea3C346038626Bb1775C8f1e7d98d20607 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICB9Cgp9CgoKLyoKICogSGFsdGFibGUKICoKICogQWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuCiAqIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4gRGlmZmVycyBmcm9tIFBhdXNhYmxlIGJ5IHJlcXVpcmluZyBhIHN0YXRlLgogKgogKgogKiBPcmlnaW5hbGx5IGVudmlzaW9uZWQgaW4gRmlyc3RCbG9vZCBJQ08gY29udHJhY3QuCiAqLwogY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgIGJvb2wgcHVibGljIGhhbHRlZDsKCiAgIG1vZGlmaWVyIGluTm9ybWFsU3RhdGUgewogICAgIGFzc2VydCghaGFsdGVkKTsKICAgICBfOwogICB9CgogICBtb2RpZmllciBpbkVtZXJnZW5jeVN0YXRlIHsKICAgICBhc3NlcnQoaGFsdGVkKTsKICAgICBfOwogICB9CgogICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICBmdW5jdGlvbiBoYWx0KCkgZXh0ZXJuYWwgb25seU93bmVyIGluTm9ybWFsU3RhdGUgewogICAgIGhhbHRlZCA9IHRydWU7CiAgIH0KCiAgIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgZnVuY3Rpb24gdW5oYWx0KCkgZXh0ZXJuYWwgb25seU93bmVyIGluRW1lcmdlbmN5U3RhdGUgewogICAgIGhhbHRlZCA9IGZhbHNlOwogICB9CgogfQovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgovKioKICogQHRpdGxlIEJ1cm5hYmxlCiAqCiAqIEBkZXYgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICovCmNvbnRyYWN0IEJ1cm5hYmxlIGlzIFN0YW5kYXJkVG9rZW4gewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAvKiBUaGlzIG5vdGlmaWVzIGNsaWVudHMgYWJvdXQgdGhlIGFtb3VudCBidXJudCAqLwogIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOy8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlcyB0b3RhbFN1cHBseQogICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOyAgICAgICAgICAgIC8vIFVwZGF0ZXMgdG90YWxTdXBwbHkKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBCdXJuKF9mcm9tLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgLy91c2UgYnVybgoKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7IC8vdXNlIGJ1cm4KCiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQp9CgovKioKICogQHRpdGxlIEppbmNvclRva2VuCiAqCiAqIEBkZXYgQnVybmFibGUgT3duYWJsZSBFUkMyMCB0b2tlbgogKi8KIGNvbnRyYWN0IEppbmNvclRva2VuIGlzIEJ1cm5hYmxlLCBPd25hYmxlIHsKCiAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJKaW5jb3IgVG9rZW4iOwogICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJKQ1IiOwogICB1aW50MjU2IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICB1aW50MjU2IHB1YmxpYyBJTklUSUFMX1NVUFBMWSA9IDM1MDAwMDAwICogMSBldGhlcjsKCiAgIC8qIFRoZSBmaW5hbGl6ZXIgY29udHJhY3QgdGhhdCBhbGxvd3MgdW5saWZ0IHRoZSB0cmFuc2ZlciBsaW1pdHMgb24gdGhpcyB0b2tlbiAqLwogICBhZGRyZXNzIHB1YmxpYyByZWxlYXNlQWdlbnQ7CgogICAvKiogQSBjcm93ZHNhbGUgY29udHJhY3QgY2FuIHJlbGVhc2UgdXMgdG8gdGhlIHdpbGQgaWYgSUNPIHN1Y2Nlc3MuIElmIGZhbHNlIHdlIGFyZSBhcmUgaW4gdHJhbnNmZXIgbG9jayB1cCBwZXJpb2QuKi8KICAgYm9vbCBwdWJsaWMgcmVsZWFzZWQgPSBmYWxzZTsKCiAgIC8qKiBNYXAgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gdHJhbnNmZXIgdG9rZW5zIHJlZ2FyZGxlc3Mgb2YgdGhlIGxvY2sgZG93biBwZXJpb2QuIFRoZXNlIGFyZSBjcm93ZHNhbGUgY29udHJhY3RzIGFuZCBwb3NzaWJsZSB0aGUgdGVhbSBtdWx0aXNpZyBpdHNlbGYuICovCiAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHRyYW5zZmVyQWdlbnRzOwoKICAgLyoqCiAgICAqIExpbWl0IHRva2VuIHRyYW5zZmVyIHVudGlsIHRoZSBjcm93ZHNhbGUgaXMgb3Zlci4KICAgICoKICAgICovCiAgIG1vZGlmaWVyIGNhblRyYW5zZmVyKGFkZHJlc3MgX3NlbmRlcikgewogICAgIHJlcXVpcmUodHJhbnNmZXJBZ2VudHNbX3NlbmRlcl0gfHwgcmVsZWFzZWQpOwogICAgIF87CiAgIH0KCiAgIC8qKiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBvbmx5IGJlZm9yZSBvciBhZnRlciB0aGUgdG9rZW5zIGhhdmUgYmVlbiByZWxlYXNlc2QgKi8KICAgbW9kaWZpZXIgaW5SZWxlYXNlU3RhdGUoYm9vbCByZWxlYXNlU3RhdGUpIHsKICAgICByZXF1aXJlKHJlbGVhc2VTdGF0ZSA9PSByZWxlYXNlZCk7CiAgICAgXzsKICAgfQoKICAgLyoqIFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYnkgYSB3aGl0ZWxpc3RlZCByZWxlYXNlIGFnZW50LiAqLwogICBtb2RpZmllciBvbmx5UmVsZWFzZUFnZW50KCkgewogICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSByZWxlYXNlQWdlbnQpOwogICAgIF87CiAgIH0KCgogICAvKioKICAgICogQGRldiBDb250cnVjdG9yIHRoYXQgZ2l2ZXMgbXNnLnNlbmRlciBhbGwgb2YgZXhpc3RpbmcgdG9rZW5zLgogICAgKi8KICAgZnVuY3Rpb24gSmluY29yVG9rZW4oKSB7CiAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwogICB9CgoKICAgLyoqCiAgICAqIFNldCB0aGUgY29udHJhY3QgdGhhdCBjYW4gY2FsbCByZWxlYXNlIGFuZCBtYWtlIHRoZSB0b2tlbiB0cmFuc2ZlcmFibGUuCiAgICAqCiAgICAqIERlc2lnbiBjaG9pY2UuIEFsbG93IHJlc2V0IHRoZSByZWxlYXNlIGFnZW50IHRvIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLgogICAgKi8KICAgZnVuY3Rpb24gc2V0UmVsZWFzZUFnZW50KGFkZHJlc3MgYWRkcikgb25seU93bmVyIGluUmVsZWFzZVN0YXRlKGZhbHNlKSBwdWJsaWMgewoKICAgICAvLyBXZSBkb24ndCBkbyBpbnRlcmZhY2UgY2hlY2sgaGVyZSBhcyB3ZSBtaWdodCB3YW50IHRvIGEgbm9ybWFsIHdhbGxldCBhZGRyZXNzIHRvIGFjdCBhcyBhIHJlbGVhc2UgYWdlbnQKICAgICByZWxlYXNlQWdlbnQgPSBhZGRyOwogICB9CgogICBmdW5jdGlvbiByZWxlYXNlKCkgb25seVJlbGVhc2VBZ2VudCBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKICAgICByZWxlYXNlZCA9IHRydWU7CiAgIH0KCiAgIC8qKgogICAgKiBPd25lciBjYW4gYWxsb3cgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKGEgY3Jvd2RzYWxlIGNvbnRyYWN0KSB0byB0cmFuc2ZlciB0b2tlbnMgZGVzcGl0ZSB0aGUgbG9jayB1cCBwZXJpb2QuCiAgICAqLwogICBmdW5jdGlvbiBzZXRUcmFuc2ZlckFnZW50KGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0ZSkgb25seU93bmVyIGluUmVsZWFzZVN0YXRlKGZhbHNlKSBwdWJsaWMgewogICAgIHRyYW5zZmVyQWdlbnRzW2FkZHJdID0gc3RhdGU7CiAgIH0KCiAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgLy8gQ2FsbCBCdXJuYWJsZS50cmFuc2ZlcigpCiAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgfQoKICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgIC8vIENhbGwgQnVybmFibGUudHJhbnNmZXJGb3JtKCkKICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgIH0KCiAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICByZXR1cm4gc3VwZXIuYnVybihfdmFsdWUpOwogICB9CgogICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgIHJldHVybiBzdXBlci5idXJuRnJvbShfZnJvbSwgX3ZhbHVlKTsKICAgfQogfQoKCgpjb250cmFjdCBKaW5jb3JUb2tlblByZVNhbGUgaXMgT3duYWJsZSwgSGFsdGFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBzdHJpbmcgcHVibGljIG5hbWUgPSAiSmluY29yIFRva2VuIFByZVNhbGUiOwoKICBKaW5jb3JUb2tlbiBwdWJsaWMgdG9rZW47CgogIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwoKICB1aW50IHB1YmxpYyBoYXJkQ2FwOwoKICB1aW50IHB1YmxpYyBzb2Z0Q2FwOwoKICB1aW50IHB1YmxpYyBwcmljZTsKCiAgdWludCBwdWJsaWMgcHVyY2hhc2VMaW1pdDsKCiAgdWludCBwdWJsaWMgY29sbGVjdGVkID0gMDsKCiAgdWludCBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQgPSAwOwoKICB1aW50IHB1YmxpYyB3ZWlSZWZ1bmRlZCA9IDA7CgogIHVpbnQgcHVibGljIHN0YXJ0QmxvY2s7CgogIHVpbnQgcHVibGljIGVuZEJsb2NrOwoKICBib29sIHB1YmxpYyBzb2Z0Q2FwUmVhY2hlZCA9IGZhbHNlOwoKICBib29sIHB1YmxpYyBjcm93ZHNhbGVGaW5pc2hlZCA9IGZhbHNlOwoKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHJlZnVuZGVkOwoKICBldmVudCBHb2FsUmVhY2hlZCh1aW50IGFtb3VudFJhaXNlZCk7CgogIGV2ZW50IFNvZnRDYXBSZWFjaGVkKHVpbnQgc29mdENhcCk7CgogIGV2ZW50IE5ld0NvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgaG9sZGVyLCB1aW50MjU2IHRva2VuQW1vdW50LCB1aW50MjU2IGV0aGVyQW1vdW50KTsKCiAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludDI1NiBhbW91bnQpOwoKICBtb2RpZmllciBwcmVTYWxlQWN0aXZlKCkgewogICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gc3RhcnRCbG9jayAmJiBibG9jay5udW1iZXIgPCBlbmRCbG9jayk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgcHJlU2FsZUVuZGVkKCkgewogICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gZW5kQmxvY2spOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIEppbmNvclRva2VuUHJlU2FsZSgKICB1aW50IF9oYXJkQ2FwVVNELAogIHVpbnQgX3NvZnRDYXBVU0QsCiAgYWRkcmVzcyBfdG9rZW4sCiAgYWRkcmVzcyBfYmVuZWZpY2lhcnksCiAgdWludCBfdG90YWxUb2tlbnMsCiAgdWludCBfcHJpY2VFVEgsCiAgdWludCBfcHVyY2hhc2VMaW1pdFVTRCwKCiAgdWludCBfc3RhcnRCbG9jaywKICB1aW50IF9lbmRCbG9jawogICkgewogICAgaGFyZENhcCA9IF9oYXJkQ2FwVVNELm11bCgxIGV0aGVyKS5kaXYoX3ByaWNlRVRIKTsKICAgIHNvZnRDYXAgPSBfc29mdENhcFVTRC5tdWwoMSBldGhlcikuZGl2KF9wcmljZUVUSCk7CiAgICBwcmljZSA9IF90b3RhbFRva2Vucy5tdWwoMSBldGhlcikuZGl2KGhhcmRDYXApOwoKICAgIHB1cmNoYXNlTGltaXQgPSBfcHVyY2hhc2VMaW1pdFVTRC5tdWwoMSBldGhlcikuZGl2KF9wcmljZUVUSCkubXVsKHByaWNlKTsKICAgIHRva2VuID0gSmluY29yVG9rZW4oX3Rva2VuKTsKICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwoKICAgIHN0YXJ0QmxvY2sgPSBfc3RhcnRCbG9jazsKICAgIGVuZEJsb2NrID0gX2VuZEJsb2NrOwogIH0KCiAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDAuMSAqIDEgZXRoZXIpOwogICAgZG9QdXJjaGFzZShtc2cuc2VuZGVyKTsKICB9CgogIGZ1bmN0aW9uIHJlZnVuZCgpIGV4dGVybmFsIHByZVNhbGVFbmRlZCBpbk5vcm1hbFN0YXRlIHsKICAgIHJlcXVpcmUoc29mdENhcFJlYWNoZWQgPT0gZmFsc2UpOwogICAgcmVxdWlyZShyZWZ1bmRlZFttc2cuc2VuZGVyXSA9PSBmYWxzZSk7CgogICAgdWludCBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwogICAgcmVxdWlyZShiYWxhbmNlID4gMCk7CgogICAgdWludCByZWZ1bmQgPSBiYWxhbmNlLmRpdihwcmljZSk7CiAgICBpZiAocmVmdW5kID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgIHJlZnVuZCA9IHRoaXMuYmFsYW5jZTsKICAgIH0KCiAgICBhc3NlcnQobXNnLnNlbmRlci5zZW5kKHJlZnVuZCkpOwogICAgcmVmdW5kZWRbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgd2VpUmVmdW5kZWQgPSB3ZWlSZWZ1bmRlZC5hZGQocmVmdW5kKTsKICAgIFJlZnVuZGVkKG1zZy5zZW5kZXIsIHJlZnVuZCk7CiAgfQoKICBmdW5jdGlvbiB3aXRoZHJhdygpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHNvZnRDYXBSZWFjaGVkKTsKICAgIGFzc2VydChiZW5lZmljaWFyeS5zZW5kKGNvbGxlY3RlZCkpOwogICAgdG9rZW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CiAgfQoKICBmdW5jdGlvbiBkb1B1cmNoYXNlKGFkZHJlc3MgX293bmVyKSBwcml2YXRlIHByZVNhbGVBY3RpdmUgaW5Ob3JtYWxTdGF0ZSB7CgogICAgcmVxdWlyZSghY3Jvd2RzYWxlRmluaXNoZWQpOwogICAgcmVxdWlyZShjb2xsZWN0ZWQuYWRkKG1zZy52YWx1ZSkgPD0gaGFyZENhcCk7CgogICAgaWYgKCFzb2Z0Q2FwUmVhY2hlZCAmJiBjb2xsZWN0ZWQgPCBzb2Z0Q2FwICYmIGNvbGxlY3RlZC5hZGQobXNnLnZhbHVlKSA+PSBzb2Z0Q2FwKSB7CiAgICAgIHNvZnRDYXBSZWFjaGVkID0gdHJ1ZTsKICAgICAgU29mdENhcFJlYWNoZWQoc29mdENhcCk7CiAgICB9CiAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZSAqIHByaWNlOwogICAgcmVxdWlyZSh0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikuYWRkKHRva2VucykgPD0gcHVyY2hhc2VMaW1pdCk7CgogICAgaWYgKHRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA9PSAwKSBpbnZlc3RvckNvdW50Kys7CgogICAgY29sbGVjdGVkID0gY29sbGVjdGVkLmFkZChtc2cudmFsdWUpOwoKICAgIHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2Vucyk7CgogICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2Vucyk7CgogICAgTmV3Q29udHJpYnV0aW9uKF9vd25lciwgdG9rZW5zLCBtc2cudmFsdWUpOwoKICAgIGlmIChjb2xsZWN0ZWQgPT0gaGFyZENhcCkgewogICAgICBHb2FsUmVhY2hlZChoYXJkQ2FwKTsKICAgIH0KICB9Cn0='.
	

]
