Class {
	#name : #SRT90bacf482bd59c7f1a829b6b3923a4caa4dd7545,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90bacf482bd59c7f1a829b6b3923a4caa4dd7545 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIEFycmF5IFV0aWxpdGllcyBMaWJyYXJ5CiAqIEBhdXRob3IgTWFqb29sci5pbwogKgogKiB2ZXJzaW9uIDEuMC4xCiAqIENvcHlyaWdodCAoYykgMjAxNyBNYWpvb2xyLCBMTEMKICogVGhlIE1JVCBMaWNlbnNlIChNSVQpCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9NYWpvb2xyL2V0aGVyZXVtLWxpYnJhcmllcy9ibG9iL21hc3Rlci9MSUNFTlNFCiAqCiAqIFRoZSBBcnJheSBVdGlsaXRpZXMgTGlicmFyeSBwcm92aWRlcyBhIGZldyB1dGlsaXR5IGZ1bmN0aW9ucyB0byB3b3JrIHdpdGgKICogc3RvcmFnZSBhcnJheXMgaW4gcGxhY2UuIE1ham9vbHIgd29ya3Mgb24gb3BlbiBzb3VyY2UgcHJvamVjdHMgaW4gdGhlIEV0aGVyZXVtCiAqIGNvbW11bml0eSB3aXRoIHRoZSBwdXJwb3NlIG9mIHRlc3RpbmcsIGRvY3VtZW50aW5nLCBhbmQgZGVwbG95aW5nIHJldXNhYmxlCiAqIGNvZGUgb250byB0aGUgYmxvY2tjaGFpbiB0byBpbXByb3ZlIHNlY3VyaXR5IGFuZCB1c2FiaWxpdHkgb2Ygc21hcnQKICogY29udHJhY3RzLiBNYWpvb2xyIGFsc28gc3RyaXZlcyB0byBlZHVjYXRlIG5vbi1wcm9maXRzLCBzY2hvb2xzLCBhbmQgb3RoZXIKICogY29tbXVuaXR5IG1lbWJlcnMgYWJvdXQgdGhlIGFwcGxpY2F0aW9uIG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neS4KICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb246IG1ham9vbHIuaW8KICoKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgogKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuCiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZCiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsCiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFCiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgogKi8KCmxpYnJhcnkgQXJyYXlVdGlsc0xpYiB7CgogIC8vLyBAZGV2IFN1bSB2ZWN0b3IKICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMKICAvLy8gQHJldHVybiBzdW0gVGhlIHN1bSBvZiBhbGwgZWxlbWVudHMsIGRvZXMgbm90IGNoZWNrIGZvciBvdmVyZmxvdwogIGZ1bmN0aW9uIHN1bUVsZW1lbnRzKHVpbnQyNTZbXSBzdG9yYWdlIHNlbGYpIGNvbnN0YW50IHJldHVybnModWludDI1NiBzdW0pewogICAgYXNzZW1ibHkgewogICAgICBtc3RvcmUoMHg2MCxzZWxmX3Nsb3QpCgogICAgICBmb3IgeyBsZXQgaSA6PSAwIH0gbHQoaSwgc2xvYWQoc2VsZl9zbG90KSkgeyBpIDo9IGFkZChpLCAxKSB9IHsKICAgICAgICBzdW0gOj0gYWRkKHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpLHN1bSkKICAgICAgfQogICAgfQogIH0KCiAgLy8vIEBkZXYgUmV0dXJucyB0aGUgbWF4IHZhbHVlIGluIGFuIGFycmF5LgogIC8vLyBAcGFyYW0gc2VsZiBTdG9yYWdlIGFycmF5IGNvbnRhaW5pbmcgdWludDI1NiB0eXBlIHZhcmlhYmxlcwogIC8vLyBAcmV0dXJuIG1heFZhbHVlIFRoZSBoaWdoZXN0IHZhbHVlIGluIHRoZSBhcnJheQogIGZ1bmN0aW9uIGdldE1heCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgbWF4VmFsdWUpIHsKICAgIGFzc2VtYmx5IHsKICAgICAgbXN0b3JlKDB4NjAsc2VsZl9zbG90KQogICAgICBtYXhWYWx1ZSA6PSBzbG9hZChzaGEzKDB4NjAsMHgyMCkpCgogICAgICBmb3IgeyBsZXQgaSA6PSAwIH0gbHQoaSwgc2xvYWQoc2VsZl9zbG90KSkgeyBpIDo9IGFkZChpLCAxKSB9IHsKICAgICAgICBzd2l0Y2ggbHQoc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxpKSksIG1heFZhbHVlKQogICAgICAgIGNhc2UgMCB7CiAgICAgICAgICBtYXhWYWx1ZSA6PSBzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLGkpKQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLy8vIEBkZXYgRmluZHMgdGhlIGluZGV4IG9mIGEgZ2l2ZW4gdmFsdWUgaW4gYW4gYXJyYXkKICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMKICAvLy8gQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yCiAgLy8vIEBwYXJhbSBpc1NvcnRlZCBUcnVlIGlmIHRoZSBhcnJheSBpcyBzb3J0ZWQsIGZhbHNlIG90aGVyd2lzZQogIC8vLyBAcmV0dXJuIGZvdW5kIFRydWUgaWYgdGhlIHZhbHVlIHdhcyBmb3VuZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgLy8vIEByZXR1cm4gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBnaXZlbiB2YWx1ZSwgcmV0dXJucyAwIGlmIGZvdW5kIGlzIGZhbHNlCiAgZnVuY3Rpb24gaW5kZXhPZih1aW50MjU2W10gc3RvcmFnZSBzZWxmLCB1aW50MjU2IHZhbHVlLCBib29sIGlzU29ydGVkKSBjb25zdGFudAogICAgICAgICAgIHJldHVybnMoYm9vbCBmb3VuZCwgdWludDI1NiBpbmRleCkgewogICAgYXNzZW1ibHl7CiAgICAgIG1zdG9yZSgweDYwLHNlbGZfc2xvdCkKICAgICAgbGV0IGxvdyA6PSAwCiAgICAgIGxldCBoaWdoIDo9IHN1YihzbG9hZChzZWxmX3Nsb3QpLDEpCiAgICAgIGxldCBtaWQgOj0gMAogICAgICBqdW1waSh1bnNvcnRlZCwgaXN6ZXJvKGlzU29ydGVkKSkKICAgICAgc29ydGVkOgogICAgICAgIGp1bXBpKGRvbmUsIGd0KGxvdyxoaWdoKSkKICAgICAgICBtaWQgOj0gZGl2KGFkZChsb3csaGlnaCksMikKICAgICAgICBqdW1waShzZXRILCBsdCh2YWx1ZSxzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLG1pZCkpKSkKICAgICAgICBqdW1waShzZXRMLCBndCh2YWx1ZSxzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLG1pZCkpKSkKICAgICAgICBmb3VuZCA6PSAxCiAgICAgICAgaW5kZXggOj0gbWlkCiAgICAgICAganVtcChkb25lKQogICAgICAgIHNldEg6CiAgICAgICAgICBoaWdoIDo9IHN1YihtaWQsMSkKICAgICAgICAgIGp1bXAoc29ydGVkKQogICAgICAgIHNldEw6CiAgICAgICAgICBsb3cgOj0gYWRkKG1pZCwxKQogICAgICAgICAganVtcChzb3J0ZWQpCiAgICAgIHVuc29ydGVkOgogICAgICAgIGp1bXBpKGxvb3AsIGlzemVybyhlcShzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLGxvdykpLCB2YWx1ZSkpKQogICAgICAgIGZvdW5kIDo9IDEKICAgICAgICBpbmRleCA6PSBsb3cKICAgICAgICBqdW1wKGRvbmUpCiAgICAgICAgbG9vcDoKICAgICAgICAgIGxvdyA6PSBhZGQobG93LDEpCiAgICAgICAgICBqdW1waSh1bnNvcnRlZCwgbHQobG93LCBzbG9hZChzZWxmX3Nsb3QpKSkKICAgICAgZG9uZToKICAgIH0KICB9CgogIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGhlYXBTb3J0CiAgLy8vIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgY2hpbGQgbm9kZQogIC8vLyBAcmV0dXJuIHBJIFRoZSBwYXJlbnQgbm9kZSBpbmRleAogIGZ1bmN0aW9uIGdldFBhcmVudEkodWludDI1NiBpbmRleCkgY29uc3RhbnQgcHJpdmF0ZSByZXR1cm5zICh1aW50MjU2IHBJKSB7CiAgICB1aW50MjU2IGkgPSBpbmRleCAtIDE7CiAgICBwSSA9IGkvMjsKICB9CgogIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGhlYXBTb3J0CiAgLy8vIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgcGFyZW50IG5vZGUKICAvLy8gQHJldHVybiBsY0kgVGhlIGluZGV4IG9mIGxlZnQgY2hpbGQKICBmdW5jdGlvbiBnZXRMZWZ0Q2hpbGRJKHVpbnQyNTYgaW5kZXgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludDI1NiBsY0kpIHsKICAgIHVpbnQyNTYgaSA9IGluZGV4ICogMjsKICAgIGxjSSA9IGkgKyAxOwogIH0KCiAgLy8vIEBkZXYgU29ydHMgZ2l2ZW4gYXJyYXkgaW4gcGxhY2UKICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMKICBmdW5jdGlvbiBoZWFwU29ydCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSB7CiAgICB1aW50MjU2IGVuZCA9IHNlbGYubGVuZ3RoIC0gMTsKICAgIHVpbnQyNTYgc3RhcnQgPSBnZXRQYXJlbnRJKGVuZCk7CiAgICB1aW50MjU2IHJvb3QgPSBzdGFydDsKICAgIHVpbnQyNTYgbENoaWxkOwogICAgdWludDI1NiByQ2hpbGQ7CiAgICB1aW50MjU2IHN3YXA7CiAgICB1aW50MjU2IHRlbXA7CiAgICB3aGlsZShzdGFydCA+PSAwKXsKICAgICAgcm9vdCA9IHN0YXJ0OwogICAgICBsQ2hpbGQgPSBnZXRMZWZ0Q2hpbGRJKHN0YXJ0KTsKICAgICAgd2hpbGUobENoaWxkIDw9IGVuZCl7CiAgICAgICAgckNoaWxkID0gbENoaWxkICsgMTsKICAgICAgICBzd2FwID0gcm9vdDsKICAgICAgICBpZihzZWxmW3N3YXBdIDwgc2VsZltsQ2hpbGRdKQogICAgICAgICAgc3dhcCA9IGxDaGlsZDsKICAgICAgICBpZigockNoaWxkIDw9IGVuZCkgJiYgKHNlbGZbc3dhcF08c2VsZltyQ2hpbGRdKSkKICAgICAgICAgIHN3YXAgPSByQ2hpbGQ7CiAgICAgICAgaWYoc3dhcCA9PSByb290KQogICAgICAgICAgbENoaWxkID0gZW5kKzE7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICB0ZW1wID0gc2VsZltzd2FwXTsKICAgICAgICAgIHNlbGZbc3dhcF0gPSBzZWxmW3Jvb3RdOwogICAgICAgICAgc2VsZltyb290XSA9IHRlbXA7CiAgICAgICAgICByb290ID0gc3dhcDsKICAgICAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkocm9vdCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmKHN0YXJ0ID09IDApCiAgICAgICAgYnJlYWs7CiAgICAgIGVsc2UKICAgICAgICBzdGFydCA9IHN0YXJ0IC0gMTsKICAgIH0KICAgIHdoaWxlKGVuZCA+IDApewogICAgICB0ZW1wID0gc2VsZltlbmRdOwogICAgICBzZWxmW2VuZF0gPSBzZWxmWzBdOwogICAgICBzZWxmWzBdID0gdGVtcDsKICAgICAgZW5kID0gZW5kIC0gMTsKICAgICAgcm9vdCA9IDA7CiAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkoMCk7CiAgICAgIHdoaWxlKGxDaGlsZCA8PSBlbmQpewogICAgICAgIHJDaGlsZCA9IGxDaGlsZCArIDE7CiAgICAgICAgc3dhcCA9IHJvb3Q7CiAgICAgICAgaWYoc2VsZltzd2FwXSA8IHNlbGZbbENoaWxkXSkKICAgICAgICAgIHN3YXAgPSBsQ2hpbGQ7CiAgICAgICAgaWYoKHJDaGlsZCA8PSBlbmQpICYmIChzZWxmW3N3YXBdPHNlbGZbckNoaWxkXSkpCiAgICAgICAgICBzd2FwID0gckNoaWxkOwogICAgICAgIGlmKHN3YXAgPT0gcm9vdCkKICAgICAgICAgIGxDaGlsZCA9IGVuZCArIDE7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICB0ZW1wID0gc2VsZltzd2FwXTsKICAgICAgICAgIHNlbGZbc3dhcF0gPSBzZWxmW3Jvb3RdOwogICAgICAgICAgc2VsZltyb290XSA9IHRlbXA7CiAgICAgICAgICByb290ID0gc3dhcDsKICAgICAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkocm9vdCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9'.
	

]
