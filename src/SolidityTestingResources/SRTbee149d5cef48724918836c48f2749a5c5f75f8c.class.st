Class {
	#name : #SRTbee149d5cef48724918836c48f2749a5c5f75f8c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbee149d5cef48724918836c48f2749a5c5f75f8c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBTaW1wbGVBdWN0aW9uIHsKICAgIC8vIAogICAgLy8gVGhpcyBpcyBhbiBhdWN0aW9uIHdoZXJlIFVOSUNFRiBpcyB0aGUgYmVuZWZpY2lhcnkgCiAgICAvLwogICAgLy8gVGhlIGhpZ2hlc3QgYmlkZGVyIG9mIHRoaXMgYXVjdGlvbiBpcyBlbnRpdGVsZWQgdG8gUG9zdGVyIE51bWJlciBvbmUgb2YgdGhlIHdvcmxkcyBmaXJzdCBFaHRlcmV1bSBmdW5kZWQgbW92aWUgVGhlLVBpdHQtQ2lyY3VzIE1vdmllLiAKICAgIC8vIFRoZSBQb3N0ZXIgaXMgYSBsaW1pdGVkIGVkaXRpb25zIHNlcmlncmFwaHkgKG51bWJlcmVkIGFuZCBzaWduZWQgYnkgdGhlIGFydGlzdCkuCiAgICAvLyBUbyBjbGFpbSB0aGUgcG9zdGVyIHRoZSBoaWdoZXN0IGJpZGRlciBjYW4gZ2V0IGluIHRvdWNoIHdpdGggdGhlLXBpdHRzLWNpcmN1cy5jb20gb3Igc2VuZCB0aGUgYWRkcmVzcyBhbiBkYXRhLWZpZWxkIHRyYW5zYXRpb24gdG8gdGhlIGNvbnRyYWN0IG9mIHRoZSBiZW5lZmljaWFyeSA9IDB4YjIzMzk3Zjk3NzE1MTE4NTMyYzhjMTIwN0Y1Njc4RWQ0RmJhRUE2YyBhZnRlciB0aGUgYXVjdGlvbiBoYXMgZW5kZWQKICAgIC8vIAogICAgLy8gCiAgICAvLwogICAgLy9QYXJhbWV0ZXJzIG9mIHRoZSBhdWN0aW9uLiBUaW1lcyBhcmUgZWl0aGVyCiAgICAvLyBhYnNvbHV0ZSB1bml4IHRpbWVzdGFtcHMgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMSkKICAgIC8vIG9yIHRpbWUgcGVyaW9kcyBpbiBzZWNvbmRzLgogICAgLy8gCiAgCQogICAgdWludCBwdWJsaWMgYXVjdGlvblN0YXJ0OwogICAgdWludCBwdWJsaWMgYmlkZGluZ1RpbWU7CgogICAgLy8gQ3VycmVudCBzdGF0ZSBvZiB0aGUgYXVjdGlvbi4KICAgIGFkZHJlc3MgcHVibGljIGhpZ2hlc3RCaWRkZXI7CiAgICB1aW50IHB1YmxpYyBoaWdoZXN0QmlkOwoKICAgIC8vIEFsbG93ZWQgd2l0aGRyYXdhbHMgb2YgcHJldmlvdXMgYmlkcwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHBlbmRpbmdSZXR1cm5zOwoKICAgIC8vIFNldCB0byB0cnVlIGF0IHRoZSBlbmQsIGRpc2FsbG93cyBhbnkgY2hhbmdlCiAgICBib29sIGVuZGVkOwoKICAgIC8vIEV2ZW50cyB0aGF0IHdpbGwgYmUgZmlyZWQgb24gY2hhbmdlcy4KICAgIGV2ZW50IEhpZ2hlc3RCaWRJbmNyZWFzZWQoYWRkcmVzcyBiaWRkZXIsIHVpbnQgYW1vdW50KTsKICAgIGV2ZW50IEF1Y3Rpb25FbmRlZChhZGRyZXNzIHdpbm5lciwgdWludCBhbW91bnQpOwoKICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgYSBzby1jYWxsZWQgbmF0c3BlYyBjb21tZW50LAogICAgLy8gcmVjb2duaXphYmxlIGJ5IHRoZSB0aHJlZSBzbGFzaGVzLgogICAgLy8gSXQgd2lsbCBiZSBzaG93biB3aGVuIHRoZSB1c2VyIGlzIGFza2VkIHRvCiAgICAvLyBjb25maXJtIGEgdHJhbnNhY3Rpb24uCgogICAgLy8vIENyZWF0ZSBhIHNpbXBsZSBhdWN0aW9uIHdpdGggYF9iaWRkaW5nVGltZWAKICAgIC8vLyBzZWNvbmRzIGJpZGRpbmcgdGltZSBvbiBiZWhhbGYgb2YgdGhlCiAgICAvLy8gYmVuZWZpY2lhcnkgYWRkcmVzcyBgX2JlbmVmaWNpYXJ5YC4KICAgIAogICAgYWRkcmVzcyBfYmVuZWZpY2lhcnkgPSAweGIyMzM5N2Y5NzcxNTExODUzMmM4YzEyMDdGNTY3OEVkNEZiYUVBNmM7CgkvLyBVTklDRUYgTXVsdGlzaWcgV2FsbGV0IGFjY29yZGluZyB0bzoKCS8vIHVuaWNlZnN0b3JpZXMub3JnLzIwMTcvMDgvMDQvdW5pY2VmLXZlbnR1cmVzLWV4cGxvcmluZy1zbWFydC1jb250cmFjdHMvCglhZGRyZXNzIGJlbmVmaWNpYXJ5OwogICAgCiAgICBmdW5jdGlvbiBTaW1wbGVBdWN0aW9uKCkgewogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgICAgIGF1Y3Rpb25TdGFydCA9IG5vdzsKICAgICAgICBiaWRkaW5nVGltZSA9IDI1ODc1ODc7CiAgICB9CgogICAgLy8vIEJpZCBvbiB0aGUgYXVjdGlvbiB3aXRoIHRoZSB2YWx1ZSBzZW50CiAgICAvLy8gdG9nZXRoZXIgd2l0aCB0aGlzIHRyYW5zYWN0aW9uLgogICAgLy8vIFRoZSB2YWx1ZSB3aWxsIG9ubHkgYmUgcmVmdW5kZWQgaWYgdGhlCiAgICAvLy8gYXVjdGlvbiBpcyBub3Qgd29uLgogICAgZnVuY3Rpb24gYmlkKCkgcGF5YWJsZSB7CiAgICAgICAgLy8gTm8gYXJndW1lbnRzIGFyZSBuZWNlc3NhcnksIGFsbAogICAgICAgIC8vIGluZm9ybWF0aW9uIGlzIGFscmVhZHkgcGFydCBvZgogICAgICAgIC8vIHRoZSB0cmFuc2FjdGlvbi4gVGhlIGtleXdvcmQgcGF5YWJsZQogICAgICAgIC8vIGlzIHJlcXVpcmVkIGZvciB0aGUgZnVuY3Rpb24gdG8KICAgICAgICAvLyBiZSBhYmxlIHRvIHJlY2VpdmUgRXRoZXIuCgogICAgICAgIC8vIFJldmVydCB0aGUgY2FsbCBpZiB0aGUgYmlkZGluZwogICAgICAgIC8vIHBlcmlvZCBpcyBvdmVyLgogICAgICAgIHJlcXVpcmUobm93IDw9IChhdWN0aW9uU3RhcnQgKyBiaWRkaW5nVGltZSkpOwoKICAgICAgICAvLyBJZiB0aGUgYmlkIGlzIG5vdCBoaWdoZXIsIHNlbmQgdGhlCiAgICAgICAgLy8gbW9uZXkgYmFjay4KICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IGhpZ2hlc3RCaWQpOwoKICAgICAgICBpZiAoaGlnaGVzdEJpZGRlciAhPSAwKSB7CiAgICAgICAgICAgIC8vIFNlbmRpbmcgYmFjayB0aGUgbW9uZXkgYnkgc2ltcGx5IHVzaW5nCiAgICAgICAgICAgIC8vIGhpZ2hlc3RCaWRkZXIuc2VuZChoaWdoZXN0QmlkKSBpcyBhIHNlY3VyaXR5IHJpc2sKICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCBjYW4gYmUgcHJldmVudGVkIGJ5IHRoZSBjYWxsZXIgYnkgZS5nLgogICAgICAgICAgICAvLyByYWlzaW5nIHRoZSBjYWxsIHN0YWNrIHRvIDEwMjMuIEl0IGlzIGFsd2F5cyBzYWZlcgogICAgICAgICAgICAvLyB0byBsZXQgdGhlIHJlY2lwaWVudHMgd2l0aGRyYXcgdGhlaXIgbW9uZXkgdGhlbXNlbHZlcy4KICAgICAgICAgICAgcGVuZGluZ1JldHVybnNbaGlnaGVzdEJpZGRlcl0gKz0gaGlnaGVzdEJpZDsKICAgICAgICB9CiAgICAgICAgaGlnaGVzdEJpZGRlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgaGlnaGVzdEJpZCA9IG1zZy52YWx1ZTsKICAgICAgICBIaWdoZXN0QmlkSW5jcmVhc2VkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIFdpdGhkcmF3IGEgYmlkIHRoYXQgd2FzIG92ZXJiaWQuCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IGFtb3VudCA9IHBlbmRpbmdSZXR1cm5zW21zZy5zZW5kZXJdOwogICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0byBzZXQgdGhpcyB0byB6ZXJvIGJlY2F1c2UgdGhlIHJlY2lwaWVudAogICAgICAgICAgICAvLyBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIGFnYWluIGFzIHBhcnQgb2YgdGhlIHJlY2VpdmluZyBjYWxsCiAgICAgICAgICAgIC8vIGJlZm9yZSBgc2VuZGAgcmV0dXJucy4KICAgICAgICAgICAgcGVuZGluZ1JldHVybnNbbXNnLnNlbmRlcl0gPSAwOwoKICAgICAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoYW1vdW50KSkgewogICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBjYWxsIHRocm93IGhlcmUsIGp1c3QgcmVzZXQgdGhlIGFtb3VudCBvd2luZwogICAgICAgICAgICAgICAgcGVuZGluZ1JldHVybnNbbXNnLnNlbmRlcl0gPSBhbW91bnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvLyBVc2VycyB3YW50IHRvIGtub3cgd2hlbiB0aGUgYXVjdGlvbiBlbmRzLCBzZWNvbmRzIGZyb20gMTk3MC0wMS0wMQogICAgZnVuY3Rpb24gYXVjdGlvbkVuZFRpbWUoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGF1Y3Rpb25TdGFydCArIGJpZGRpbmdUaW1lOwogICAgfQogICAgCiAgICAvLy8gRW5kIHRoZSBhdWN0aW9uIGFuZCBzZW5kIHRoZSBoaWdoZXN0IGJpZAogICAgLy8vIHRvIHRoZSBiZW5lZmljaWFyeS4KICAgIGZ1bmN0aW9uIGF1Y3Rpb25FbmQoKSB7CiAgICAgICAgLy8gSXQgaXMgYSBnb29kIGd1aWRlbGluZSB0byBzdHJ1Y3R1cmUgZnVuY3Rpb25zIHRoYXQgaW50ZXJhY3QKICAgICAgICAvLyB3aXRoIG90aGVyIGNvbnRyYWN0cyAoaS5lLiB0aGV5IGNhbGwgZnVuY3Rpb25zIG9yIHNlbmQgRXRoZXIpCiAgICAgICAgLy8gaW50byB0aHJlZSBwaGFzZXM6CiAgICAgICAgLy8gMS4gY2hlY2tpbmcgY29uZGl0aW9ucwogICAgICAgIC8vIDIuIHBlcmZvcm1pbmcgYWN0aW9ucyAocG90ZW50aWFsbHkgY2hhbmdpbmcgY29uZGl0aW9ucykKICAgICAgICAvLyAzLiBpbnRlcmFjdGluZyB3aXRoIG90aGVyIGNvbnRyYWN0cwogICAgICAgIC8vIElmIHRoZXNlIHBoYXNlcyBhcmUgbWl4ZWQgdXAsIHRoZSBvdGhlciBjb250cmFjdCBjb3VsZCBjYWxsCiAgICAgICAgLy8gYmFjayBpbnRvIHRoZSBjdXJyZW50IGNvbnRyYWN0IGFuZCBtb2RpZnkgdGhlIHN0YXRlIG9yIGNhdXNlCiAgICAgICAgLy8gZWZmZWN0cyAoZXRoZXIgcGF5b3V0KSB0byBiZSBwZXJmb3JtZWQgbXVsdGlwbGUgdGltZXMuCiAgICAgICAgLy8gSWYgZnVuY3Rpb25zIGNhbGxlZCBpbnRlcm5hbGx5IGluY2x1ZGUgaW50ZXJhY3Rpb24gd2l0aCBleHRlcm5hbAogICAgICAgIC8vIGNvbnRyYWN0cywgdGhleSBhbHNvIGhhdmUgdG8gYmUgY29uc2lkZXJlZCBpbnRlcmFjdGlvbiB3aXRoCiAgICAgICAgLy8gZXh0ZXJuYWwgY29udHJhY3RzLgoKICAgICAgICAvLyAxLiBDb25kaXRpb25zCiAgICAgICAgcmVxdWlyZShub3cgPj0gKGF1Y3Rpb25TdGFydCArIGJpZGRpbmdUaW1lKSk7IC8vIGF1Y3Rpb24gZGlkIG5vdCB5ZXQgZW5kCiAgICAgICAgcmVxdWlyZSghZW5kZWQpOyAvLyB0aGlzIGZ1bmN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkCgogICAgICAgIC8vIDIuIEVmZmVjdHMKICAgICAgICBlbmRlZCA9IHRydWU7CiAgICAgICAgQXVjdGlvbkVuZGVkKGhpZ2hlc3RCaWRkZXIsIGhpZ2hlc3RCaWQpOwoKICAgICAgICAvLyAzLiBJbnRlcmFjdGlvbgogICAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKGhpZ2hlc3RCaWQpOwogICAgfQp9'.
	

]
