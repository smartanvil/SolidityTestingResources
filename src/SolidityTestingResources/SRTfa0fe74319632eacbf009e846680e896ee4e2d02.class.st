Class {
	#name : #SRTfa0fe74319632eacbf009e846680e896ee4e2d02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa0fe74319632eacbf009e846680e896ee4e2d02 >> base64 [
	^ ''.
	

]
