Class {
	#name : #SRT3c337fa1bf8725f59f73db6db719c792c5e8ae74,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c337fa1bf8725f59f73db6db719c792c5e8ae74 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgRVJDMjBDb25zdGFudCB7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgd2hvICkgY29uc3RhbnQgcmV0dXJucyAodWludCB2YWx1ZSk7Cn0KY29udHJhY3QgRVJDMjBTdGF0ZWZ1bCB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7Cn0KY29udHJhY3QgRVJDMjBFdmVudHMgewogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7Cn0KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBDb25zdGFudCwgRVJDMjBTdGF0ZWZ1bCwgRVJDMjBFdmVudHMge30KCmNvbnRyYWN0IE93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIE93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IFdoaXRlbGlzdFNhbGUgaXMgT3duZWQgewoKICAgIEVSQzIwIHB1YmxpYyBtYW5hVG9rZW47CgogICAgLy8gQW1vdW50IG9mIE1BTkEgcmVjZWl2ZWQgcGVyIEVUSAogICAgdWludDI1NiBwdWJsaWMgbWFuYVBlckV0aDsKCiAgICAvLyBTYWxlcyBzdGFydCBhdCB0aGlzIHRpbWVzdGFtcAogICAgdWludDI1NiBwdWJsaWMgaW5pdGlhbFRpbWVzdGFtcDsKCiAgICAvLyBUaGUgc2FsZSBnb2VzIG9uIHRocm91Z2ggNiBkYXlzLgogICAgLy8gRWFjaCBkYXksIHVzZXJzIGFyZSBhbGxvd2VkIHRvIGJ1eSB1cCB0byBhIGNlcnRhaW4gKGN1bW11bGF0aXZlKSBsaW1pdCBvZiBNQU5BLgoKICAgIC8vIFRoaXMgbWFwcGluZyBzdG9yZXMgdGhlIGFkZHJlc3NlcyBmb3Igd2hpdGVsaXN0ZWQgdXNlcnMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgd2hpdGVsaXN0ZWQ7CgogICAgLy8gVXNlZCB0byBjYWxjdWxhdGUgdGhlIGN1cnJlbnQgbGltaXQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYm91Z2h0OwoKICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlcyBhbGxvd2VkIHBlciBkYXkgYXJlIGNvcGllZCBmcm9tIHRoaXMgYXJyYXkKICAgIHVpbnQyNTZbNl0gcHVibGljIGxpbWl0UGVyRGF5OwoKICAgIC8vIEZvcndhcmRpbmcgYWRkcmVzcwogICAgYWRkcmVzcyBwdWJsaWMgcmVjZWl2ZXI7CgogICAgZXZlbnQgTG9nV2l0aGRyYXdhbCh1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBMb2dCb3VnaHQodWludCBvcmRlckluTWFuYSk7CiAgICBldmVudCBMb2dVc2VyQWRkZWQoYWRkcmVzcyB1c2VyKTsKICAgIGV2ZW50IExvZ1VzZXJSZW1vdmVkKGFkZHJlc3MgdXNlcik7CgogICAgZnVuY3Rpb24gV2hpdGVsaXN0U2FsZSAoCiAgICAgICAgRVJDMjAgX21hbmFUb2tlbiwKICAgICAgICB1aW50MjU2IF9pbml0aWFsVGltZXN0YW1wLAogICAgICAgIGFkZHJlc3MgX3JlY2VpdmVyCiAgICApCiAgICAgICAgT3duZWQoKQogICAgewogICAgICAgIG1hbmFUb2tlbiAgICAgICAgPSBfbWFuYVRva2VuOwogICAgICAgIGluaXRpYWxUaW1lc3RhbXAgPSBfaW5pdGlhbFRpbWVzdGFtcDsKICAgICAgICByZWNlaXZlciAgICAgICAgID0gX3JlY2VpdmVyOwoKICAgICAgICBtYW5hUGVyRXRoICAgICAgID0gMTE5NTQ7CiAgICAgICAgbGltaXRQZXJEYXlbMF0gICA9IDMuMyBldGhlcjsKICAgICAgICBsaW1pdFBlckRheVsxXSAgID0gMTAgZXRoZXIgICArIGxpbWl0UGVyRGF5WzBdOwogICAgICAgIGxpbWl0UGVyRGF5WzJdICAgPSAzMCBldGhlciAgICsgbGltaXRQZXJEYXlbMV07CiAgICAgICAgbGltaXRQZXJEYXlbM10gICA9IDkwIGV0aGVyICAgKyBsaW1pdFBlckRheVsyXTsKICAgICAgICBsaW1pdFBlckRheVs0XSAgID0gNDUwIGV0aGVyICArIGxpbWl0UGVyRGF5WzNdOwogICAgICAgIGxpbWl0UGVyRGF5WzVdICAgPSAxNTAwIGV0aGVyICsgbGltaXRQZXJEYXlbNF07CiAgICB9CgogICAgLy8gV2l0aGRyYXcgTWFuYSAob25seSBvd25lcikKICAgIGZ1bmN0aW9uIHdpdGhkcmF3TWFuYSh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spIHsKICAgICAgICByZXR1cm4gd2l0aGRyYXdUb2tlbihtYW5hVG9rZW4sIF92YWx1ZSk7CiAgICB9CgogICAgLy8gV2l0aGRyYXcgYW55IEVSQzIwIHRva2VuIChqdXN0IGluIGNhc2UpCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKGFkZHJlc3MgX3Rva2VuLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spIHsKICAgICAgICByZXR1cm4gRVJDMjAoX3Rva2VuKS50cmFuc2Zlcihvd25lcixfdmFsdWUpOwogICAgICAgIExvZ1dpdGhkcmF3YWwoX3ZhbHVlKTsKICAgIH0KCiAgICAvLyBDaGFuZ2UgYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgcmVjZWl2ZWQKICAgIGZ1bmN0aW9uIGNoYW5nZVJlY2VpdmVyKGFkZHJlc3MgX3JlY2VpdmVyKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX3JlY2VpdmVyICE9IDApOwogICAgICAgIHJlY2VpdmVyID0gX3JlY2VpdmVyOwogICAgfQoKICAgIC8vIENhbGN1bGF0ZSB3aGljaCBkYXkgaW50byB0aGUgc2FsZSBhcmUgd2UuCiAgICBmdW5jdGlvbiBnZXREYXkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIFNhZmVNYXRoLnN1YihibG9jay50aW1lc3RhbXAsIGluaXRpYWxUaW1lc3RhbXApIC8gMSBkYXlzOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlJZkFjdGl2ZSB7CiAgICAgICAgcmVxdWlyZShnZXREYXkoKSA+PSAwKTsKICAgICAgICByZXF1aXJlKGdldERheSgpIDwgNik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoYWRkcmVzcyBiZW5lZmljaWFyeSkgcGF5YWJsZSBvbmx5SWZBY3RpdmUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMCk7CiAgICAgICAgcmVxdWlyZSh3aGl0ZWxpc3RlZFttc2cuc2VuZGVyXSk7CgogICAgICAgIHVpbnQgZGF5ID0gZ2V0RGF5KCk7CiAgICAgICAgdWludDI1NiBhbGxvd2VkRm9yU2VuZGVyID0gbGltaXRQZXJEYXlbZGF5XSAtIGJvdWdodFttc2cuc2VuZGVyXTsKCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IGFsbG93ZWRGb3JTZW5kZXIpIHJldmVydCgpOwoKICAgICAgICB1aW50MjU2IGJhbGFuY2VJbk1hbmEgPSBtYW5hVG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwoKICAgICAgICB1aW50IG9yZGVySW5NYW5hID0gbXNnLnZhbHVlICogbWFuYVBlckV0aDsKICAgICAgICBpZiAob3JkZXJJbk1hbmEgPiBiYWxhbmNlSW5NYW5hKSByZXZlcnQoKTsKCiAgICAgICAgYm91Z2h0W21zZy5zZW5kZXJdID0gU2FmZU1hdGguYWRkKGJvdWdodFttc2cuc2VuZGVyXSwgbXNnLnZhbHVlKTsKICAgICAgICBtYW5hVG9rZW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIG9yZGVySW5NYW5hKTsKICAgICAgICByZWNlaXZlci50cmFuc2Zlcihtc2cudmFsdWUpOwoKICAgICAgICBMb2dCb3VnaHQob3JkZXJJbk1hbmEpOwogICAgfQoKICAgIC8vIEFkZCBhIHVzZXIgdG8gdGhlIHdoaXRlbGlzdAogICAgZnVuY3Rpb24gYWRkVXNlcihhZGRyZXNzIHVzZXIpIG9ubHlPd25lciB7CiAgICAgICAgd2hpdGVsaXN0ZWRbdXNlcl0gPSB0cnVlOwogICAgICAgIExvZ1VzZXJBZGRlZCh1c2VyKTsKICAgIH0KCiAgICAvLyBSZW1vdmUgYW4gdXNlciBmcm9tIHRoZSB3aGl0ZWxpc3QKICAgIGZ1bmN0aW9uIHJlbW92ZVVzZXIoYWRkcmVzcyB1c2VyKSBvbmx5T3duZXIgewogICAgICAgIHdoaXRlbGlzdGVkW3VzZXJdID0gZmFsc2U7CiAgICAgICAgTG9nVXNlclJlbW92ZWQodXNlcik7CiAgICB9CgogICAgLy8gQmF0Y2ggYWRkIHVzZXJzCiAgICBmdW5jdGlvbiBhZGRNYW55VXNlcnMoYWRkcmVzc1tdIHVzZXJzKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUodXNlcnMubGVuZ3RoIDwgMTAwMDApOwogICAgICAgIGZvciAodWludCBpbmRleCA9IDA7IGluZGV4IDwgdXNlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICB3aGl0ZWxpc3RlZFt1c2Vyc1tpbmRleF1dID0gdHJ1ZTsKICAgICAgICAgICAgIExvZ1VzZXJBZGRlZCh1c2Vyc1tpbmRleF0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIGJ1eShtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
