Class {
	#name : #SRT2ccbff3a042c68716ed2a2cb0c544a9f1d1935e1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ccbff3a042c68716ed2a2cb0c544a9f1d1935e1 >> base64 [
	^ ''.
	

]
