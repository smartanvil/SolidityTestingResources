Class {
	#name : #SRT537033D43720cD654f6F0Ee141B6acc855312d60,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT537033D43720cD654f6F0Ee141B6acc855312d60 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40IC4xMTsKCi8qCiAqIEB0aXRsZSBTdHJpbmcgJiBzbGljZSB1dGlsaXR5IGxpYnJhcnkgZm9yIFNvbGlkaXR5IGNvbnRyYWN0cy4KICogQGF1dGhvciBOaWNrIEpvaG5zb24gPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIyMjQzNTA0MzQxNGE0YzRiNDY2MjRjNGQ1NjQ2NGQ1NjBjNGM0NzU2Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4KICoKICogQGRldiBGdW5jdGlvbmFsaXR5IGluIHRoaXMgbGlicmFyeSBpcyBsYXJnZWx5IGltcGxlbWVudGVkIHVzaW5nIGFuCiAqICAgICAgYWJzdHJhY3Rpb24gY2FsbGVkIGEgJ3NsaWNlJy4gQSBzbGljZSByZXByZXNlbnRzIGEgcGFydCBvZiBhIHN0cmluZyAtCiAqICAgICAgYW55dGhpbmcgZnJvbSB0aGUgZW50aXJlIHN0cmluZyB0byBhIHNpbmdsZSBjaGFyYWN0ZXIsIG9yIGV2ZW4gbm8KICogICAgICBjaGFyYWN0ZXJzIGF0IGFsbCAoYSAwLWxlbmd0aCBzbGljZSkuIFNpbmNlIGEgc2xpY2Ugb25seSBoYXMgdG8gc3BlY2lmeQogKiAgICAgIGFuIG9mZnNldCBhbmQgYSBsZW5ndGgsIGNvcHlpbmcgYW5kIG1hbmlwdWxhdGluZyBzbGljZXMgaXMgYSBsb3QgbGVzcwogKiAgICAgIGV4cGVuc2l2ZSB0aGFuIGNvcHlpbmcgYW5kIG1hbmlwdWxhdGluZyB0aGUgc3RyaW5ncyB0aGV5IHJlZmVyZW5jZS4KICoKICogICAgICBUbyBmdXJ0aGVyIHJlZHVjZSBnYXMgY29zdHMsIG1vc3QgZnVuY3Rpb25zIG9uIHNsaWNlIHRoYXQgbmVlZCB0byByZXR1cm4KICogICAgICBhIHNsaWNlIG1vZGlmeSB0aGUgb3JpZ2luYWwgb25lIGluc3RlYWQgb2YgYWxsb2NhdGluZyBhIG5ldyBvbmU7IGZvcgogKiAgICAgIGluc3RhbmNlLCBgcy5zcGxpdCgiLiIpYCB3aWxsIHJldHVybiB0aGUgdGV4dCB1cCB0byB0aGUgZmlyc3QgJy4nLAogKiAgICAgIG1vZGlmeWluZyBzIHRvIG9ubHkgY29udGFpbiB0aGUgcmVtYWluZGVyIG9mIHRoZSBzdHJpbmcgYWZ0ZXIgdGhlICcuJy4KICogICAgICBJbiBzaXR1YXRpb25zIHdoZXJlIHlvdSBkbyBub3Qgd2FudCB0byBtb2RpZnkgdGhlIG9yaWdpbmFsIHNsaWNlLCB5b3UKICogICAgICBjYW4gbWFrZSBhIGNvcHkgZmlyc3Qgd2l0aCBgLmNvcHkoKWAsIGZvciBleGFtcGxlOgogKiAgICAgIGBzLmNvcHkoKS5zcGxpdCgiLiIpYC4gVHJ5IGFuZCBhdm9pZCB1c2luZyB0aGlzIGlkaW9tIGluIGxvb3BzOyBzaW5jZQogKiAgICAgIFNvbGlkaXR5IGhhcyBubyBtZW1vcnkgbWFuYWdlbWVudCwgaXQgd2lsbCByZXN1bHQgaW4gYWxsb2NhdGluZyBtYW55CiAqICAgICAgc2hvcnQtbGl2ZWQgc2xpY2VzIHRoYXQgYXJlIGxhdGVyIGRpc2NhcmRlZC4KICoKICogICAgICBGdW5jdGlvbnMgdGhhdCByZXR1cm4gdHdvIHNsaWNlcyBjb21lIGluIHR3byB2ZXJzaW9uczogYSBub24tYWxsb2NhdGluZwogKiAgICAgIHZlcnNpb24gdGhhdCB0YWtlcyB0aGUgc2Vjb25kIHNsaWNlIGFzIGFuIGFyZ3VtZW50LCBtb2RpZnlpbmcgaXQgaW4KICogICAgICBwbGFjZSwgYW5kIGFuIGFsbG9jYXRpbmcgdmVyc2lvbiB0aGF0IGFsbG9jYXRlcyBhbmQgcmV0dXJucyB0aGUgc2Vjb25kCiAqICAgICAgc2xpY2U7IHNlZSBgbmV4dFJ1bmVgIGZvciBleGFtcGxlLgogKgogKiAgICAgIEZ1bmN0aW9ucyB0aGF0IGhhdmUgdG8gY29weSBzdHJpbmcgZGF0YSB3aWxsIHJldHVybiBzdHJpbmdzIHJhdGhlciB0aGFuCiAqICAgICAgc2xpY2VzOyB0aGVzZSBjYW4gYmUgY2FzdCBiYWNrIHRvIHNsaWNlcyBmb3IgZnVydGhlciBwcm9jZXNzaW5nIGlmCiAqICAgICAgcmVxdWlyZWQuCiAqCiAqICAgICAgRm9yIGNvbnZlbmllbmNlLCBzb21lIGZ1bmN0aW9ucyBhcmUgcHJvdmlkZWQgd2l0aCBub24tbW9kaWZ5aW5nCiAqICAgICAgdmFyaWFudHMgdGhhdCBjcmVhdGUgYSBuZXcgc2xpY2UgYW5kIHJldHVybiBib3RoOyBmb3IgaW5zdGFuY2UsCiAqICAgICAgYHMuc3BsaXROZXcoJy4nKWAgbGVhdmVzIHMgdW5tb2RpZmllZCwgYW5kIHJldHVybnMgdHdvIHZhbHVlcwogKiAgICAgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxlZnQgYW5kIHJpZ2h0IHBhcnRzIG9mIHRoZSBzdHJpbmcuCiAqLwpsaWJyYXJ5IHN0cmluZ3MgewogICAgc3RydWN0IHNsaWNlIHsKICAgICAgICB1aW50IF9sZW47CiAgICAgICAgdWludCBfcHRyOwogICAgfQoKICAgIGZ1bmN0aW9uIG1lbWNweSh1aW50IGRlc3QsIHVpbnQgc3JjLCB1aW50IGxlbikgcHJpdmF0ZSB7CiAgICAgICAgLy8gQ29weSB3b3JkLWxlbmd0aCBjaHVua3Mgd2hpbGUgcG9zc2libGUKICAgICAgICBmb3IoOyBsZW4gPj0gMzI7IGxlbiAtPSAzMikgewogICAgICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgICAgICBtc3RvcmUoZGVzdCwgbWxvYWQoc3JjKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBkZXN0ICs9IDMyOwogICAgICAgICAgICBzcmMgKz0gMzI7CiAgICAgICAgfQoKICAgICAgICAvLyBDb3B5IHJlbWFpbmluZyBieXRlcwogICAgICAgIHVpbnQgbWFzayA9IDI1NiAqKiAoMzIgLSBsZW4pIC0gMTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBzcmNwYXJ0IDo9IGFuZChtbG9hZChzcmMpLCBub3QobWFzaykpCiAgICAgICAgICAgIGxldCBkZXN0cGFydCA6PSBhbmQobWxvYWQoZGVzdCksIG1hc2spCiAgICAgICAgICAgIG1zdG9yZShkZXN0LCBvcihkZXN0cGFydCwgc3JjcGFydCkpCiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgYSBzbGljZSBjb250YWluaW5nIHRoZSBlbnRpcmUgc3RyaW5nLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHN0cmluZyB0byBtYWtlIGEgc2xpY2UgZnJvbS4KICAgICAqIEByZXR1cm4gQSBuZXdseSBhbGxvY2F0ZWQgc2xpY2UgY29udGFpbmluZyB0aGUgZW50aXJlIHN0cmluZy4KICAgICAqLwogICAgZnVuY3Rpb24gdG9TbGljZShzdHJpbmcgc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICB1aW50IHB0cjsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHB0ciA6PSBhZGQoc2VsZiwgMHgyMCkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNsaWNlKGJ5dGVzKHNlbGYpLmxlbmd0aCwgcHRyKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgYSBudWxsLXRlcm1pbmF0ZWQgYnl0ZXMzMiBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgdmFsdWUgdG8gZmluZCB0aGUgbGVuZ3RoIG9mLgogICAgICogQHJldHVybiBUaGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcsIGZyb20gMCB0byAzMi4KICAgICAqLwogICAgZnVuY3Rpb24gbGVuKGJ5dGVzMzIgc2VsZikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgcmV0OwogICAgICAgIGlmIChzZWxmID09IDApCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIGlmIChzZWxmICYgMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSAxNjsKICAgICAgICAgICAgc2VsZiA9IGJ5dGVzMzIodWludChzZWxmKSAvIDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYgJiAweGZmZmZmZmZmZmZmZmZmZmYgPT0gMCkgewogICAgICAgICAgICByZXQgKz0gODsKICAgICAgICAgICAgc2VsZiA9IGJ5dGVzMzIodWludChzZWxmKSAvIDB4MTAwMDAwMDAwMDAwMDAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmZmZmZmZmYgPT0gMCkgewogICAgICAgICAgICByZXQgKz0gNDsKICAgICAgICAgICAgc2VsZiA9IGJ5dGVzMzIodWludChzZWxmKSAvIDB4MTAwMDAwMDAwKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYgJiAweGZmZmYgPT0gMCkgewogICAgICAgICAgICByZXQgKz0gMjsKICAgICAgICAgICAgc2VsZiA9IGJ5dGVzMzIodWludChzZWxmKSAvIDB4MTAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmYgPT0gMCkgewogICAgICAgICAgICByZXQgKz0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDMyIC0gcmV0OwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgYSBzbGljZSBjb250YWluaW5nIHRoZSBlbnRpcmUgYnl0ZXMzMiwgaW50ZXJwcmV0ZWQgYXMgYQogICAgICogICAgICBudWxsLXRlcm1pbnRhZWQgdXRmLTggc3RyaW5nLgogICAgICogQHBhcmFtIHNlbGYgVGhlIGJ5dGVzMzIgdmFsdWUgdG8gY29udmVydCB0byBhIHNsaWNlLgogICAgICogQHJldHVybiBBIG5ldyBzbGljZSBjb250YWluaW5nIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgYXJndW1lbnQgdXAgdG8gdGhlCiAgICAgKiAgICAgICAgIGZpcnN0IG51bGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvU2xpY2VCMzIoYnl0ZXMzMiBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSByZXQpIHsKICAgICAgICAvLyBBbGxvY2F0ZSBzcGFjZSBmb3IgYHNlbGZgIGluIG1lbW9yeSwgY29weSBpdCB0aGVyZSwgYW5kIHBvaW50IHJldCBhdCBpdAogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IHB0ciA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoMHg0MCwgYWRkKHB0ciwgMHgyMCkpCiAgICAgICAgICAgIG1zdG9yZShwdHIsIHNlbGYpCiAgICAgICAgICAgIG1zdG9yZShhZGQocmV0LCAweDIwKSwgcHRyKQogICAgICAgIH0KICAgICAgICByZXQuX2xlbiA9IGxlbihzZWxmKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIGEgbmV3IHNsaWNlIGNvbnRhaW5pbmcgdGhlIHNhbWUgZGF0YSBhcyB0aGUgY3VycmVudCBzbGljZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBjb3B5LgogICAgICogQHJldHVybiBBIG5ldyBzbGljZSBjb250YWluaW5nIHRoZSBzYW1lIGRhdGEgYXMgYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiBjb3B5KHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgcmV0dXJuIHNsaWNlKHNlbGYuX2xlbiwgc2VsZi5fcHRyKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBDb3BpZXMgYSBzbGljZSB0byBhIG5ldyBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gY29weS4KICAgICAqIEByZXR1cm4gQSBuZXdseSBhbGxvY2F0ZWQgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHNsaWNlJ3MgdGV4dC4KICAgICAqLwogICAgZnVuY3Rpb24gdG9TdHJpbmcoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgdmFyIHJldCA9IG5ldyBzdHJpbmcoc2VsZi5fbGVuKTsKICAgICAgICB1aW50IHJldHB0cjsKICAgICAgICBhc3NlbWJseSB7IHJldHB0ciA6PSBhZGQocmV0LCAzMikgfQoKICAgICAgICBtZW1jcHkocmV0cHRyLCBzZWxmLl9wdHIsIHNlbGYuX2xlbik7CiAgICAgICAgcmV0dXJuIHJldDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBsZW5ndGggaW4gcnVuZXMgb2YgdGhlIHNsaWNlLiBOb3RlIHRoYXQgdGhpcyBvcGVyYXRpb24KICAgICAqICAgICAgdGFrZXMgdGltZSBwcm9wb3J0aW9uYWwgdG8gdGhlIGxlbmd0aCBvZiB0aGUgc2xpY2U7IGF2b2lkIHVzaW5nIGl0CiAgICAgKiAgICAgIGluIGxvb3BzLCBhbmQgY2FsbCBgc2xpY2UuZW1wdHkoKWAgaWYgeW91IG9ubHkgbmVlZCB0byBrbm93IHdoZXRoZXIKICAgICAqICAgICAgdGhlIHNsaWNlIGlzIGVtcHR5IG9yIG5vdC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHJldHVybiBUaGUgbGVuZ3RoIG9mIHRoZSBzbGljZSBpbiBydW5lcy4KICAgICAqLwogICAgZnVuY3Rpb24gbGVuKHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICAvLyBTdGFydGluZyBhdCBwdHItMzEgbWVhbnMgdGhlIExTQiB3aWxsIGJlIHRoZSBieXRlIHdlIGNhcmUgYWJvdXQKICAgICAgICB2YXIgcHRyID0gc2VsZi5fcHRyIC0gMzE7CiAgICAgICAgdmFyIGVuZCA9IHB0ciArIHNlbGYuX2xlbjsKICAgICAgICBmb3IgKHVpbnQgbGVuID0gMDsgcHRyIDwgZW5kOyBsZW4rKykgewogICAgICAgICAgICB1aW50OCBiOwogICAgICAgICAgICBhc3NlbWJseSB7IGIgOj0gYW5kKG1sb2FkKHB0ciksIDB4RkYpIH0KICAgICAgICAgICAgaWYgKGIgPCAweDgwKSB7CiAgICAgICAgICAgICAgICBwdHIgKz0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmKGIgPCAweEUwKSB7CiAgICAgICAgICAgICAgICBwdHIgKz0gMjsKICAgICAgICAgICAgfSBlbHNlIGlmKGIgPCAweEYwKSB7CiAgICAgICAgICAgICAgICBwdHIgKz0gMzsKICAgICAgICAgICAgfSBlbHNlIGlmKGIgPCAweEY4KSB7CiAgICAgICAgICAgICAgICBwdHIgKz0gNDsKICAgICAgICAgICAgfSBlbHNlIGlmKGIgPCAweEZDKSB7CiAgICAgICAgICAgICAgICBwdHIgKz0gNTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHB0ciArPSA2OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBsZW47CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyB0cnVlIGlmIHRoZSBzbGljZSBpcyBlbXB0eSAoaGFzIGEgbGVuZ3RoIG9mIDApLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIHNsaWNlIGlzIGVtcHR5LCBGYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVtcHR5KHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc2VsZi5fbGVuID09IDA7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIHBvc2l0aXZlIG51bWJlciBpZiBgb3RoZXJgIGNvbWVzIGxleGljb2dyYXBoaWNhbGx5IGFmdGVyCiAgICAgKiAgICAgIGBzZWxmYCwgYSBuZWdhdGl2ZSBudW1iZXIgaWYgaXQgY29tZXMgYmVmb3JlLCBvciB6ZXJvIGlmIHRoZQogICAgICogICAgICBjb250ZW50cyBvZiB0aGUgdHdvIHNsaWNlcyBhcmUgZXF1YWwuIENvbXBhcmlzb24gaXMgZG9uZSBwZXItcnVuZSwKICAgICAqICAgICAgb24gdW5pY29kZSBjb2RlcG9pbnRzLgogICAgICogQHBhcmFtIHNlbGYgVGhlIGZpcnN0IHNsaWNlIHRvIGNvbXBhcmUuCiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIHNlY29uZCBzbGljZSB0byBjb21wYXJlLgogICAgICogQHJldHVybiBUaGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uLgogICAgICovCiAgICBmdW5jdGlvbiBjb21wYXJlKHNsaWNlIHNlbGYsIHNsaWNlIG90aGVyKSBpbnRlcm5hbCByZXR1cm5zIChpbnQpIHsKICAgICAgICB1aW50IHNob3J0ZXN0ID0gc2VsZi5fbGVuOwogICAgICAgIGlmIChvdGhlci5fbGVuIDwgc2VsZi5fbGVuKQogICAgICAgICAgICBzaG9ydGVzdCA9IG90aGVyLl9sZW47CgogICAgICAgIHZhciBzZWxmcHRyID0gc2VsZi5fcHRyOwogICAgICAgIHZhciBvdGhlcnB0ciA9IG90aGVyLl9wdHI7CiAgICAgICAgZm9yICh1aW50IGlkeCA9IDA7IGlkeCA8IHNob3J0ZXN0OyBpZHggKz0gMzIpIHsKICAgICAgICAgICAgdWludCBhOwogICAgICAgICAgICB1aW50IGI7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGEgOj0gbWxvYWQoc2VsZnB0cikKICAgICAgICAgICAgICAgIGIgOj0gbWxvYWQob3RoZXJwdHIpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGEgIT0gYikgewogICAgICAgICAgICAgICAgLy8gTWFzayBvdXQgaXJyZWxldmFudCBieXRlcyBhbmQgY2hlY2sgYWdhaW4KICAgICAgICAgICAgICAgIHVpbnQgbWFzayA9IH4oMiAqKiAoOCAqICgzMiAtIHNob3J0ZXN0ICsgaWR4KSkgLSAxKTsKICAgICAgICAgICAgICAgIHZhciBkaWZmID0gKGEgJiBtYXNrKSAtIChiICYgbWFzayk7CiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPSAwKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnQoZGlmZik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2VsZnB0ciArPSAzMjsKICAgICAgICAgICAgb3RoZXJwdHIgKz0gMzI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnQoc2VsZi5fbGVuKSAtIGludChvdGhlci5fbGVuKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIHR3byBzbGljZXMgY29udGFpbiB0aGUgc2FtZSB0ZXh0LgogICAgICogQHBhcmFtIHNlbGYgVGhlIGZpcnN0IHNsaWNlIHRvIGNvbXBhcmUuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2Vjb25kIHNsaWNlIHRvIGNvbXBhcmUuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIHNsaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gZXF1YWxzKHNsaWNlIHNlbGYsIHNsaWNlIG90aGVyKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGNvbXBhcmUoc2VsZiwgb3RoZXIpID09IDA7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgRXh0cmFjdHMgdGhlIGZpcnN0IHJ1bmUgaW4gdGhlIHNsaWNlIGludG8gYHJ1bmVgLCBhZHZhbmNpbmcgdGhlCiAgICAgKiAgICAgIHNsaWNlIHRvIHBvaW50IHRvIHRoZSBuZXh0IHJ1bmUgYW5kIHJldHVybmluZyBgc2VsZmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEBwYXJhbSBydW5lIFRoZSBzbGljZSB0aGF0IHdpbGwgY29udGFpbiB0aGUgZmlyc3QgcnVuZS4KICAgICAqIEByZXR1cm4gYHJ1bmVgLgogICAgICovCiAgICBmdW5jdGlvbiBuZXh0UnVuZShzbGljZSBzZWxmLCBzbGljZSBydW5lKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHJ1bmUuX3B0ciA9IHNlbGYuX3B0cjsKCiAgICAgICAgaWYgKHNlbGYuX2xlbiA9PSAwKSB7CiAgICAgICAgICAgIHJ1bmUuX2xlbiA9IDA7CiAgICAgICAgICAgIHJldHVybiBydW5lOwogICAgICAgIH0KCiAgICAgICAgdWludCBsZW47CiAgICAgICAgdWludCBiOwogICAgICAgIC8vIExvYWQgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlIHJ1bmUgaW50byB0aGUgTFNCcyBvZiBiCiAgICAgICAgYXNzZW1ibHkgeyBiIDo9IGFuZChtbG9hZChzdWIobWxvYWQoYWRkKHNlbGYsIDMyKSksIDMxKSksIDB4RkYpIH0KICAgICAgICBpZiAoYiA8IDB4ODApIHsKICAgICAgICAgICAgbGVuID0gMTsKICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RTApIHsKICAgICAgICAgICAgbGVuID0gMjsKICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjApIHsKICAgICAgICAgICAgbGVuID0gMzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZW4gPSA0OwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgZm9yIHRydW5jYXRlZCBjb2RlcG9pbnRzCiAgICAgICAgaWYgKGxlbiA+IHNlbGYuX2xlbikgewogICAgICAgICAgICBydW5lLl9sZW4gPSBzZWxmLl9sZW47CiAgICAgICAgICAgIHNlbGYuX3B0ciArPSBzZWxmLl9sZW47CiAgICAgICAgICAgIHNlbGYuX2xlbiA9IDA7CiAgICAgICAgICAgIHJldHVybiBydW5lOwogICAgICAgIH0KCiAgICAgICAgc2VsZi5fcHRyICs9IGxlbjsKICAgICAgICBzZWxmLl9sZW4gLT0gbGVuOwogICAgICAgIHJ1bmUuX2xlbiA9IGxlbjsKICAgICAgICByZXR1cm4gcnVuZTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBmaXJzdCBydW5lIGluIHRoZSBzbGljZSwgYWR2YW5jaW5nIHRoZSBzbGljZSB0byBwb2ludAogICAgICogICAgICB0byB0aGUgbmV4dCBydW5lLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIEEgc2xpY2UgY29udGFpbmluZyBvbmx5IHRoZSBmaXJzdCBydW5lIGZyb20gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiBuZXh0UnVuZShzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSByZXQpIHsKICAgICAgICBuZXh0UnVuZShzZWxmLCByZXQpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIG51bWJlciBvZiB0aGUgZmlyc3QgY29kZXBvaW50IGluIHRoZSBzbGljZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHJldHVybiBUaGUgbnVtYmVyIG9mIHRoZSBmaXJzdCBjb2RlcG9pbnQgaW4gdGhlIHNsaWNlLgogICAgICovCiAgICBmdW5jdGlvbiBvcmQoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAodWludCByZXQpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICB1aW50IHdvcmQ7CiAgICAgICAgdWludCBsZW47CiAgICAgICAgdWludCBkaXYgPSAyICoqIDI0ODsKCiAgICAgICAgLy8gTG9hZCB0aGUgcnVuZSBpbnRvIHRoZSBNU0JzIG9mIGIKICAgICAgICBhc3NlbWJseSB7IHdvcmQ6PSBtbG9hZChtbG9hZChhZGQoc2VsZiwgMzIpKSkgfQogICAgICAgIHZhciBiID0gd29yZCAvIGRpdjsKICAgICAgICBpZiAoYiA8IDB4ODApIHsKICAgICAgICAgICAgcmV0ID0gYjsKICAgICAgICAgICAgbGVuID0gMTsKICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RTApIHsKICAgICAgICAgICAgcmV0ID0gYiAmIDB4MUY7CiAgICAgICAgICAgIGxlbiA9IDI7CiAgICAgICAgfSBlbHNlIGlmKGIgPCAweEYwKSB7CiAgICAgICAgICAgIHJldCA9IGIgJiAweDBGOwogICAgICAgICAgICBsZW4gPSAzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldCA9IGIgJiAweDA3OwogICAgICAgICAgICBsZW4gPSA0OwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgZm9yIHRydW5jYXRlZCBjb2RlcG9pbnRzCiAgICAgICAgaWYgKGxlbiA+IHNlbGYuX2xlbikgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIGZvciAodWludCBpID0gMTsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGRpdiA9IGRpdiAvIDI1NjsKICAgICAgICAgICAgYiA9ICh3b3JkIC8gZGl2KSAmIDB4RkY7CiAgICAgICAgICAgIGlmIChiICYgMHhDMCAhPSAweDgwKSB7CiAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIFVURi04IHNlcXVlbmNlCiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXQgPSAocmV0ICogNjQpIHwgKGIgJiAweDNGKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXQ7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyB0aGUga2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBzbGljZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBoYXNoLgogICAgICogQHJldHVybiBUaGUgaGFzaCBvZiB0aGUgc2xpY2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGtlY2NhayhzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIHJldCkgewogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgcmV0IDo9IHNoYTMobWxvYWQoYWRkKHNlbGYsIDMyKSksIG1sb2FkKHNlbGYpKQogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRydWUgaWYgYHNlbGZgIHN0YXJ0cyB3aXRoIGBuZWVkbGVgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBzbGljZSBzdGFydHMgd2l0aCB0aGUgcHJvdmlkZWQgdGV4dCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChzZWxmLl9sZW4gPCBuZWVkbGUuX2xlbikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoc2VsZi5fcHRyID09IG5lZWRsZS5fcHRyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgYm9vbCBlcXVhbDsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBsZW4gOj0gbWxvYWQobmVlZGxlKQogICAgICAgICAgICBsZXQgc2VsZnB0ciA6PSBtbG9hZChhZGQoc2VsZiwgMHgyMCkpCiAgICAgICAgICAgIGxldCBuZWVkbGVwdHIgOj0gbWxvYWQoYWRkKG5lZWRsZSwgMHgyMCkpCiAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgfQogICAgICAgIHJldHVybiBlcXVhbDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBJZiBgc2VsZmAgc3RhcnRzIHdpdGggYG5lZWRsZWAsIGBuZWVkbGVgIGlzIHJlbW92ZWQgZnJvbSB0aGUKICAgICAqICAgICAgYmVnaW5uaW5nIG9mIGBzZWxmYC4gT3RoZXJ3aXNlLCBgc2VsZmAgaXMgdW5tb2RpZmllZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgc2xpY2UgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJleW9uZChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgaWYgKHNlbGYuX2xlbiA8IG5lZWRsZS5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIH0KCiAgICAgICAgYm9vbCBlcXVhbCA9IHRydWU7CiAgICAgICAgaWYgKHNlbGYuX3B0ciAhPSBuZWVkbGUuX3B0cikgewogICAgICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgICAgICBsZXQgbGVuIDo9IG1sb2FkKG5lZWRsZSkKICAgICAgICAgICAgICAgIGxldCBzZWxmcHRyIDo9IG1sb2FkKGFkZChzZWxmLCAweDIwKSkKICAgICAgICAgICAgICAgIGxldCBuZWVkbGVwdHIgOj0gbWxvYWQoYWRkKG5lZWRsZSwgMHgyMCkpCiAgICAgICAgICAgICAgICBlcXVhbCA6PSBlcShzaGEzKHNlbGZwdHIsIGxlbiksIHNoYTMobmVlZGxlcHRyLCBsZW4pKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZXF1YWwpIHsKICAgICAgICAgICAgc2VsZi5fbGVuIC09IG5lZWRsZS5fbGVuOwogICAgICAgICAgICBzZWxmLl9wdHIgKz0gbmVlZGxlLl9sZW47CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIHNsaWNlIGVuZHMgd2l0aCBgbmVlZGxlYC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgc2xpY2UgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgc2xpY2Ugc3RhcnRzIHdpdGggdGhlIHByb3ZpZGVkIHRleHQsIGZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gZW5kc1dpdGgoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHNlbGYuX2xlbiA8IG5lZWRsZS5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHZhciBzZWxmcHRyID0gc2VsZi5fcHRyICsgc2VsZi5fbGVuIC0gbmVlZGxlLl9sZW47CgogICAgICAgIGlmIChzZWxmcHRyID09IG5lZWRsZS5fcHRyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgYm9vbCBlcXVhbDsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBsZW4gOj0gbWxvYWQobmVlZGxlKQogICAgICAgICAgICBsZXQgbmVlZGxlcHRyIDo9IG1sb2FkKGFkZChuZWVkbGUsIDB4MjApKQogICAgICAgICAgICBlcXVhbCA6PSBlcShzaGEzKHNlbGZwdHIsIGxlbiksIHNoYTMobmVlZGxlcHRyLCBsZW4pKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGVxdWFsOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IElmIGBzZWxmYCBlbmRzIHdpdGggYG5lZWRsZWAsIGBuZWVkbGVgIGlzIHJlbW92ZWQgZnJvbSB0aGUKICAgICAqICAgICAgZW5kIG9mIGBzZWxmYC4gT3RoZXJ3aXNlLCBgc2VsZmAgaXMgdW5tb2RpZmllZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgc2xpY2UgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVudGlsKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuIDwgbmVlZGxlLl9sZW4pIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfQoKICAgICAgICB2YXIgc2VsZnB0ciA9IHNlbGYuX3B0ciArIHNlbGYuX2xlbiAtIG5lZWRsZS5fbGVuOwogICAgICAgIGJvb2wgZXF1YWwgPSB0cnVlOwogICAgICAgIGlmIChzZWxmcHRyICE9IG5lZWRsZS5fcHRyKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCBsZW4gOj0gbWxvYWQobmVlZGxlKQogICAgICAgICAgICAgICAgbGV0IG5lZWRsZXB0ciA6PSBtbG9hZChhZGQobmVlZGxlLCAweDIwKSkKICAgICAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChlcXVhbCkgewogICAgICAgICAgICBzZWxmLl9sZW4gLT0gbmVlZGxlLl9sZW47CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZjsKICAgIH0KCiAgICAvLyBSZXR1cm5zIHRoZSBtZW1vcnkgYWRkcmVzcyBvZiB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZgogICAgLy8gYG5lZWRsZWAgaW4gYHNlbGZgLCBvciB0aGUgZmlyc3QgYnl0ZSBhZnRlciBgc2VsZmAgaWYgbm90IGZvdW5kLgogICAgZnVuY3Rpb24gZmluZFB0cih1aW50IHNlbGZsZW4sIHVpbnQgc2VsZnB0ciwgdWludCBuZWVkbGVsZW4sIHVpbnQgbmVlZGxlcHRyKSBwcml2YXRlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IHB0cjsKICAgICAgICB1aW50IGlkeDsKCiAgICAgICAgaWYgKG5lZWRsZWxlbiA8PSBzZWxmbGVuKSB7CiAgICAgICAgICAgIGlmIChuZWVkbGVsZW4gPD0gMzIpIHsKICAgICAgICAgICAgICAgIC8vIE9wdGltaXplZCBhc3NlbWJseSBmb3IgNjggZ2FzIHBlciBieXRlIG9uIHNob3J0IHN0cmluZ3MKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgICAgICBsZXQgbWFzayA6PSBub3Qoc3ViKGV4cCgyLCBtdWwoOCwgc3ViKDMyLCBuZWVkbGVsZW4pKSksIDEpKQogICAgICAgICAgICAgICAgICAgIGxldCBuZWVkbGVkYXRhIDo9IGFuZChtbG9hZChuZWVkbGVwdHIpLCBtYXNrKQogICAgICAgICAgICAgICAgICAgIGxldCBlbmQgOj0gYWRkKHNlbGZwdHIsIHN1YihzZWxmbGVuLCBuZWVkbGVsZW4pKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBzZWxmcHRyCiAgICAgICAgICAgICAgICAgICAgbG9vcDoKICAgICAgICAgICAgICAgICAgICBqdW1waShleGl0LCBlcShhbmQobWxvYWQocHRyKSwgbWFzayksIG5lZWRsZWRhdGEpKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBhZGQocHRyLCAxKQogICAgICAgICAgICAgICAgICAgIGp1bXBpKGxvb3AsIGx0KHN1YihwdHIsIDEpLCBlbmQpKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBhZGQoc2VsZnB0ciwgc2VsZmxlbikKICAgICAgICAgICAgICAgICAgICBleGl0OgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEZvciBsb25nIG5lZWRsZXMsIHVzZSBoYXNoaW5nCiAgICAgICAgICAgICAgICBieXRlczMyIGhhc2g7CiAgICAgICAgICAgICAgICBhc3NlbWJseSB7IGhhc2ggOj0gc2hhMyhuZWVkbGVwdHIsIG5lZWRsZWxlbikgfQogICAgICAgICAgICAgICAgcHRyID0gc2VsZnB0cjsKICAgICAgICAgICAgICAgIGZvciAoaWR4ID0gMDsgaWR4IDw9IHNlbGZsZW4gLSBuZWVkbGVsZW47IGlkeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXMzMiB0ZXN0SGFzaDsKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSB7IHRlc3RIYXNoIDo9IHNoYTMocHRyLCBuZWVkbGVsZW4pIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGFzaCA9PSB0ZXN0SGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgICAgICAgICBwdHIgKz0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZnB0ciArIHNlbGZsZW47CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgbWVtb3J5IGFkZHJlc3Mgb2YgdGhlIGZpcnN0IGJ5dGUgYWZ0ZXIgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZgogICAgLy8gYG5lZWRsZWAgaW4gYHNlbGZgLCBvciB0aGUgYWRkcmVzcyBvZiBgc2VsZmAgaWYgbm90IGZvdW5kLgogICAgZnVuY3Rpb24gcmZpbmRQdHIodWludCBzZWxmbGVuLCB1aW50IHNlbGZwdHIsIHVpbnQgbmVlZGxlbGVuLCB1aW50IG5lZWRsZXB0cikgcHJpdmF0ZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBwdHI7CgogICAgICAgIGlmIChuZWVkbGVsZW4gPD0gc2VsZmxlbikgewogICAgICAgICAgICBpZiAobmVlZGxlbGVuIDw9IDMyKSB7CiAgICAgICAgICAgICAgICAvLyBPcHRpbWl6ZWQgYXNzZW1ibHkgZm9yIDY5IGdhcyBwZXIgYnl0ZSBvbiBzaG9ydCBzdHJpbmdzCiAgICAgICAgICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IG1hc2sgOj0gbm90KHN1YihleHAoMiwgbXVsKDgsIHN1YigzMiwgbmVlZGxlbGVuKSkpLCAxKSkKICAgICAgICAgICAgICAgICAgICBsZXQgbmVlZGxlZGF0YSA6PSBhbmQobWxvYWQobmVlZGxlcHRyKSwgbWFzaykKICAgICAgICAgICAgICAgICAgICBwdHIgOj0gYWRkKHNlbGZwdHIsIHN1YihzZWxmbGVuLCBuZWVkbGVsZW4pKQogICAgICAgICAgICAgICAgICAgIGxvb3A6CiAgICAgICAgICAgICAgICAgICAganVtcGkocmV0LCBlcShhbmQobWxvYWQocHRyKSwgbWFzayksIG5lZWRsZWRhdGEpKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBzdWIocHRyLCAxKQogICAgICAgICAgICAgICAgICAgIGp1bXBpKGxvb3AsIGd0KGFkZChwdHIsIDEpLCBzZWxmcHRyKSkKICAgICAgICAgICAgICAgICAgICBwdHIgOj0gc2VsZnB0cgogICAgICAgICAgICAgICAgICAgIGp1bXAoZXhpdCkKICAgICAgICAgICAgICAgICAgICByZXQ6CiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IGFkZChwdHIsIG5lZWRsZWxlbikKICAgICAgICAgICAgICAgICAgICBleGl0OgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEZvciBsb25nIG5lZWRsZXMsIHVzZSBoYXNoaW5nCiAgICAgICAgICAgICAgICBieXRlczMyIGhhc2g7CiAgICAgICAgICAgICAgICBhc3NlbWJseSB7IGhhc2ggOj0gc2hhMyhuZWVkbGVwdHIsIG5lZWRsZWxlbikgfQogICAgICAgICAgICAgICAgcHRyID0gc2VsZnB0ciArIChzZWxmbGVuIC0gbmVlZGxlbGVuKTsKICAgICAgICAgICAgICAgIHdoaWxlIChwdHIgPj0gc2VsZnB0cikgewogICAgICAgICAgICAgICAgICAgIGJ5dGVzMzIgdGVzdEhhc2g7CiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHkgeyB0ZXN0SGFzaCA6PSBzaGEzKHB0ciwgbmVlZGxlbGVuKSB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2ggPT0gdGVzdEhhc2gpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdHIgKyBuZWVkbGVsZW47CiAgICAgICAgICAgICAgICAgICAgcHRyIC09IDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlbGZwdHI7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgTW9kaWZpZXMgYHNlbGZgIHRvIGNvbnRhaW4gZXZlcnl0aGluZyBmcm9tIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mCiAgICAgKiAgICAgIGBuZWVkbGVgIHRvIHRoZSBlbmQgb2YgdGhlIHNsaWNlLiBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZQogICAgICogICAgICBpZiBgbmVlZGxlYCBpcyBub3QgZm91bmQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc2VhcmNoIGFuZCBtb2RpZnkuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcmV0dXJuIGBzZWxmYC4KICAgICAqLwogICAgZnVuY3Rpb24gZmluZChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgdWludCBwdHIgPSBmaW5kUHRyKHNlbGYuX2xlbiwgc2VsZi5fcHRyLCBuZWVkbGUuX2xlbiwgbmVlZGxlLl9wdHIpOwogICAgICAgIHNlbGYuX2xlbiAtPSBwdHIgLSBzZWxmLl9wdHI7CiAgICAgICAgc2VsZi5fcHRyID0gcHRyOwogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IE1vZGlmaWVzIGBzZWxmYCB0byBjb250YWluIHRoZSBwYXJ0IG9mIHRoZSBzdHJpbmcgZnJvbSB0aGUgc3RhcnQgb2YKICAgICAqICAgICAgYHNlbGZgIHRvIHRoZSBlbmQgb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYG5lZWRsZWAuIElmIGBuZWVkbGVgCiAgICAgKiAgICAgIGlzIG5vdCBmb3VuZCwgYHNlbGZgIGlzIHNldCB0byB0aGUgZW1wdHkgc2xpY2UuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc2VhcmNoIGFuZCBtb2RpZnkuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcmV0dXJuIGBzZWxmYC4KICAgICAqLwogICAgZnVuY3Rpb24gcmZpbmQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyID0gcmZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgc2VsZi5fbGVuID0gcHRyIC0gc2VsZi5fcHRyOwogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFNwbGl0cyB0aGUgc2xpY2UsIHNldHRpbmcgYHNlbGZgIHRvIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0CiAgICAgKiAgICAgIG9jY3VycmVuY2Ugb2YgYG5lZWRsZWAsIGFuZCBgdG9rZW5gIHRvIGV2ZXJ5dGhpbmcgYmVmb3JlIGl0LiBJZgogICAgICogICAgICBgbmVlZGxlYCBkb2VzIG5vdCBvY2N1ciBpbiBgc2VsZmAsIGBzZWxmYCBpcyBzZXQgdG8gdGhlIGVtcHR5IHNsaWNlLAogICAgICogICAgICBhbmQgYHRva2VuYCBpcyBzZXQgdG8gdGhlIGVudGlyZXR5IG9mIGBzZWxmYC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzcGxpdC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcGFyYW0gdG9rZW4gQW4gb3V0cHV0IHBhcmFtZXRlciB0byB3aGljaCB0aGUgZmlyc3QgdG9rZW4gaXMgd3JpdHRlbi4KICAgICAqIEByZXR1cm4gYHRva2VuYC4KICAgICAqLwogICAgZnVuY3Rpb24gc3BsaXQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlLCBzbGljZSB0b2tlbikgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICB1aW50IHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgdG9rZW4uX3B0ciA9IHNlbGYuX3B0cjsKICAgICAgICB0b2tlbi5fbGVuID0gcHRyIC0gc2VsZi5fcHRyOwogICAgICAgIGlmIChwdHIgPT0gc2VsZi5fcHRyICsgc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIC8vIE5vdCBmb3VuZAogICAgICAgICAgICBzZWxmLl9sZW4gPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlbGYuX2xlbiAtPSB0b2tlbi5fbGVuICsgbmVlZGxlLl9sZW47CiAgICAgICAgICAgIHNlbGYuX3B0ciA9IHB0ciArIG5lZWRsZS5fbGVuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdG9rZW47CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU3BsaXRzIHRoZSBzbGljZSwgc2V0dGluZyBgc2VsZmAgdG8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QKICAgICAqICAgICAgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYCwgYW5kIHJldHVybmluZyBldmVyeXRoaW5nIGJlZm9yZSBpdC4gSWYKICAgICAqICAgICAgYG5lZWRsZWAgZG9lcyBub3Qgb2NjdXIgaW4gYHNlbGZgLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZSwKICAgICAqICAgICAgYW5kIHRoZSBlbnRpcmV0eSBvZiBgc2VsZmAgaXMgcmV0dXJuZWQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc3BsaXQuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHJldHVybiBUaGUgcGFydCBvZiBgc2VsZmAgdXAgdG8gdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYGRlbGltYC4KICAgICAqLwogICAgZnVuY3Rpb24gc3BsaXQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSB0b2tlbikgewogICAgICAgIHNwbGl0KHNlbGYsIG5lZWRsZSwgdG9rZW4pOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFNwbGl0cyB0aGUgc2xpY2UsIHNldHRpbmcgYHNlbGZgIHRvIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBsYXN0CiAgICAgKiAgICAgIG9jY3VycmVuY2Ugb2YgYG5lZWRsZWAsIGFuZCBgdG9rZW5gIHRvIGV2ZXJ5dGhpbmcgYWZ0ZXIgaXQuIElmCiAgICAgKiAgICAgIGBuZWVkbGVgIGRvZXMgbm90IG9jY3VyIGluIGBzZWxmYCwgYHNlbGZgIGlzIHNldCB0byB0aGUgZW1wdHkgc2xpY2UsCiAgICAgKiAgICAgIGFuZCBgdG9rZW5gIGlzIHNldCB0byB0aGUgZW50aXJldHkgb2YgYHNlbGZgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNwbGl0LgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEBwYXJhbSB0b2tlbiBBbiBvdXRwdXQgcGFyYW1ldGVyIHRvIHdoaWNoIHRoZSBmaXJzdCB0b2tlbiBpcyB3cml0dGVuLgogICAgICogQHJldHVybiBgdG9rZW5gLgogICAgICovCiAgICBmdW5jdGlvbiByc3BsaXQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlLCBzbGljZSB0b2tlbikgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICB1aW50IHB0ciA9IHJmaW5kUHRyKHNlbGYuX2xlbiwgc2VsZi5fcHRyLCBuZWVkbGUuX2xlbiwgbmVlZGxlLl9wdHIpOwogICAgICAgIHRva2VuLl9wdHIgPSBwdHI7CiAgICAgICAgdG9rZW4uX2xlbiA9IHNlbGYuX2xlbiAtIChwdHIgLSBzZWxmLl9wdHIpOwogICAgICAgIGlmIChwdHIgPT0gc2VsZi5fcHRyKSB7CiAgICAgICAgICAgIC8vIE5vdCBmb3VuZAogICAgICAgICAgICBzZWxmLl9sZW4gPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlbGYuX2xlbiAtPSB0b2tlbi5fbGVuICsgbmVlZGxlLl9sZW47CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBTcGxpdHMgdGhlIHNsaWNlLCBzZXR0aW5nIGBzZWxmYCB0byBldmVyeXRoaW5nIGJlZm9yZSB0aGUgbGFzdAogICAgICogICAgICBvY2N1cnJlbmNlIG9mIGBuZWVkbGVgLCBhbmQgcmV0dXJuaW5nIGV2ZXJ5dGhpbmcgYWZ0ZXIgaXQuIElmCiAgICAgKiAgICAgIGBuZWVkbGVgIGRvZXMgbm90IG9jY3VyIGluIGBzZWxmYCwgYHNlbGZgIGlzIHNldCB0byB0aGUgZW1wdHkgc2xpY2UsCiAgICAgKiAgICAgIGFuZCB0aGUgZW50aXJldHkgb2YgYHNlbGZgIGlzIHJldHVybmVkLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNwbGl0LgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEByZXR1cm4gVGhlIHBhcnQgb2YgYHNlbGZgIGFmdGVyIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYGRlbGltYC4KICAgICAqLwogICAgZnVuY3Rpb24gcnNwbGl0KHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UgdG9rZW4pIHsKICAgICAgICByc3BsaXQoc2VsZiwgbmVlZGxlLCB0b2tlbik7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgQ291bnRzIHRoZSBudW1iZXIgb2Ygbm9ub3ZlcmxhcHBpbmcgb2NjdXJyZW5jZXMgb2YgYG5lZWRsZWAgaW4gYHNlbGZgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcmV0dXJuIFRoZSBudW1iZXIgb2Ygb2NjdXJyZW5jZXMgb2YgYG5lZWRsZWAgZm91bmQgaW4gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiBjb3VudChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHVpbnQgY291bnQpIHsKICAgICAgICB1aW50IHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cikgKyBuZWVkbGUuX2xlbjsKICAgICAgICB3aGlsZSAocHRyIDw9IHNlbGYuX3B0ciArIHNlbGYuX2xlbikgewogICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICBwdHIgPSBmaW5kUHRyKHNlbGYuX2xlbiAtIChwdHIgLSBzZWxmLl9wdHIpLCBwdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cikgKyBuZWVkbGUuX2xlbjsKICAgICAgICB9CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBUcnVlIGlmIGBzZWxmYCBjb250YWlucyBgbmVlZGxlYC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzZWFyY2guCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHJldHVybiBUcnVlIGlmIGBuZWVkbGVgIGlzIGZvdW5kIGluIGBzZWxmYCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBjb250YWlucyhzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gcmZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cikgIT0gc2VsZi5fcHRyOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgYSBuZXdseSBhbGxvY2F0ZWQgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGNvbmNhdGVuYXRpb24gb2YKICAgICAqICAgICAgYHNlbGZgIGFuZCBgb3RoZXJgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIGZpcnN0IHNsaWNlIHRvIGNvbmNhdGVuYXRlLgogICAgICogQHBhcmFtIG90aGVyIFRoZSBzZWNvbmQgc2xpY2UgdG8gY29uY2F0ZW5hdGUuCiAgICAgKiBAcmV0dXJuIFRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSB0d28gc3RyaW5ncy4KICAgICAqLwogICAgZnVuY3Rpb24gY29uY2F0KHNsaWNlIHNlbGYsIHNsaWNlIG90aGVyKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICB2YXIgcmV0ID0gbmV3IHN0cmluZyhzZWxmLl9sZW4gKyBvdGhlci5fbGVuKTsKICAgICAgICB1aW50IHJldHB0cjsKICAgICAgICBhc3NlbWJseSB7IHJldHB0ciA6PSBhZGQocmV0LCAzMikgfQogICAgICAgIG1lbWNweShyZXRwdHIsIHNlbGYuX3B0ciwgc2VsZi5fbGVuKTsKICAgICAgICBtZW1jcHkocmV0cHRyICsgc2VsZi5fbGVuLCBvdGhlci5fcHRyLCBvdGhlci5fbGVuKTsKICAgICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IEpvaW5zIGFuIGFycmF5IG9mIHNsaWNlcywgdXNpbmcgYHNlbGZgIGFzIGEgZGVsaW1pdGVyLCByZXR1cm5pbmcgYQogICAgICogICAgICBuZXdseSBhbGxvY2F0ZWQgc3RyaW5nLgogICAgICogQHBhcmFtIHNlbGYgVGhlIGRlbGltaXRlciB0byB1c2UuCiAgICAgKiBAcGFyYW0gcGFydHMgQSBsaXN0IG9mIHNsaWNlcyB0byBqb2luLgogICAgICogQHJldHVybiBBIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcgY29udGFpbmluZyBhbGwgdGhlIHNsaWNlcyBpbiBgcGFydHNgLAogICAgICogICAgICAgICBqb2luZWQgd2l0aCBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGpvaW4oc2xpY2Ugc2VsZiwgc2xpY2VbXSBwYXJ0cykgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAwKQogICAgICAgICAgICByZXR1cm4gIiI7CgogICAgICAgIHVpbnQgbGVuID0gc2VsZi5fbGVuICogKHBhcnRzLmxlbmd0aCAtIDEpOwogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGxlbiArPSBwYXJ0c1tpXS5fbGVuOwoKICAgICAgICB2YXIgcmV0ID0gbmV3IHN0cmluZyhsZW4pOwogICAgICAgIHVpbnQgcmV0cHRyOwogICAgICAgIGFzc2VtYmx5IHsgcmV0cHRyIDo9IGFkZChyZXQsIDMyKSB9CgogICAgICAgIGZvcihpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIG1lbWNweShyZXRwdHIsIHBhcnRzW2ldLl9wdHIsIHBhcnRzW2ldLl9sZW4pOwogICAgICAgICAgICByZXRwdHIgKz0gcGFydHNbaV0uX2xlbjsKICAgICAgICAgICAgaWYgKGkgPCBwYXJ0cy5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgICBtZW1jcHkocmV0cHRyLCBzZWxmLl9wdHIsIHNlbGYuX2xlbik7CiAgICAgICAgICAgICAgICByZXRwdHIgKz0gc2VsZi5fbGVuOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmV0OwogICAgfQp9CgoKY29udHJhY3QgQ29udHJhY3Qge2Z1bmN0aW9uIHBlZ0hhbmRsZXIoIGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlICk7fQoKCmNvbnRyYWN0IE1hbmFnZXIgewogICAgCiAgICAKICAgIGFkZHJlc3Mgb3duZXI7CiAgICBhZGRyZXNzICBtYW5hZ2VyOwogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seU1hbmFnZW1lbnQgewogICAgICAgIGlmKCBtc2cuc2VuZGVyICE9IG93bmVyICYmIG1zZy5zZW5kZXIgIT0gbWFuYWdlciApIHRocm93OwogICAgICAgIF87CiAgICB9CiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCn0KCmNvbnRyYWN0IFRva2VuIHsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbkhvbGRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSAge30KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gZ2V0QWNjb3VudENvdW50KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcyh1aW50IHNsb3QpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcykge30KICAgIAp9CgogCiBjb250cmFjdCBDb250cmFjdHMgewogICAgIAogICAgQ29udHJhY3QgcHVibGljIGNvbnRyYWN0X2FkZHJlc3M7CiAgICBUb2tlbiB0b2tlbjsKICAgIHVpbnQyNTYgcHJvZml0X3Blcl90b2tlbjsKICAgIGFkZHJlc3MgcHVibGljIFRva2VuQ3JlYXRpb25Db250cmFjdDsKICAgIAogCiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IGJvb2wgKSBwdWJsaWMgY29udHJhY3RzOwogICAgbWFwcGluZyggYWRkcmVzcyA9PiBib29sICkgcHVibGljIGNvbnRyYWN0RXhpc3RzOwogICAgbWFwcGluZyggdWludCA9PiBhZGRyZXNzKSBwdWJsaWMgIGNvbnRyYWN0SW5kZXg7CiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IGJvb2wgKSBwdWJsaWMgY29udHJhY3RPcmlnaW47CiAgICAKICAgIHVpbnQgcHVibGljIGNvbnRyYWN0Q291bnQ7CiAgICBhZGRyZXNzIG93bmVyOwoKCgoKCiAgICBldmVudCBDb250cmFjdENhbGwgKCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50IF92YWx1ZSApOwogICAgZXZlbnQgTG9nICggYWRkcmVzcyBfYWRkcmVzcywgdWludCB2YWx1ZSAgKTsKICAgIGV2ZW50IE1lc3NhZ2UgKCB1aW50IHZhbHVlICApOwoKICAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgCiAgICAgbW9kaWZpZXIgb25seVRva2VuQ29udHJhY3RDcmVhdG9yIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gVG9rZW5DcmVhdGlvbkNvbnRyYWN0ICB8fCAgbXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCgogICAgZnVuY3Rpb24gYWRkQ29udHJhY3QgKCBhZGRyZXNzIF9jb250cmFjdCApIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyhib29sKSAgewogICAgICAgIAogICAgICAgIAogICAgICAgICAgICBjb250cmFjdHNbIF9jb250cmFjdCBdID0gdHJ1ZTsKICAgICAgICBpZiAgKCAhY29udHJhY3RFeGlzdHNbIF9jb250cmFjdCBdKXsKICAgICAgICAgICAgY29udHJhY3RFeGlzdHNbIF9jb250cmFjdCBdID0gdHJ1ZTsKICAgICAgICAgICAgY29udHJhY3RJbmRleFsgY29udHJhY3RDb3VudCBdID0gX2NvbnRyYWN0OwogICAgICAgICAgICBjb250cmFjdE9yaWdpblsgX2NvbnRyYWN0IF0gPSB0cnVlOwogICAgICAgICAgICBjb250cmFjdENvdW50Kys7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldENvbnRyYWN0T3JpZ2luICggYWRkcmVzcyBfY29udHJhY3QgLCBib29sIHdobyApIG9ubHlUb2tlbkNvbnRyYWN0Q3JlYXRvciB7CiAgICAgICAgCiAgICAgICAgIGNvbnRyYWN0T3JpZ2luWyBfY29udHJhY3QgXSA9IHdobzsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0Q29udHJhY3RPcmlnaW4gKCkgIHJldHVybnMgKGJvb2wgYikgIHsKICAgICAgICAKICAgICAgICAgcmV0dXJuIGNvbnRyYWN0T3JpZ2luWyBtc2cuc2VuZGVyIF07CiAgICAgICAgCiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gbGF0Y2hDb250cmFjdCAoKSBwdWJsaWMgcmV0dXJucyhib29sKSAgewogICAgICAgIAogICAgICAgIAogICAgICAgICAgICBjb250cmFjdHNbIG1zZy5zZW5kZXIgXSA9IHRydWU7CiAgICAgICAgaWYgICggIWNvbnRyYWN0RXhpc3RzWyBtc2cuc2VuZGVyIF0pewogICAgICAgICAgICBjb250cmFjdEV4aXN0c1sgbXNnLnNlbmRlciBdID0gdHJ1ZTsKICAgICAgICAgICAgY29udHJhY3RJbmRleFsgY29udHJhY3RDb3VudCBdID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgY29udHJhY3RPcmlnaW5bIG1zZy5zZW5kZXIgXSA9IGZhbHNlOwogICAgICAgICAgICBjb250cmFjdENvdW50Kys7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gdW5sYXRjaENvbnRyYWN0ICggKSBwdWJsaWMgcmV0dXJucyhib29sKXsKICAgICAgICAKICAgICAgIAogICAgICAgIGNvbnRyYWN0c1sgbXNnLnNlbmRlciBdID0gZmFsc2U7CiAgICAgICAgCiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gcmVtb3ZlQ29udHJhY3QgKCBhZGRyZXNzIF9jb250cmFjdCApICBwdWJsaWMgIG9ubHlPd25lciByZXR1cm5zKGJvb2wpIHsKICAgICAgICAKICAgICAgICBjb250cmFjdHNbIF9jb250cmFjdCBdID0gIGZhbHNlOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIAogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGdldENvbnRyYWN0Q291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGNvbnRyYWN0Q291bnQ7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldENvbnRyYWN0QWRkcmVzcyggdWludCBzbG90ICkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpewogICAgICAgIAogICAgICAgIHJldHVybiBjb250cmFjdEluZGV4W3Nsb3RdOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRDb250cmFjdFN0YXR1cyggYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICAKICAgICAgICByZXR1cm4gY29udHJhY3RzWyBfYWRkcmVzc107CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNvbnRyYWN0Q2hlY2sgKCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IHZhbHVlICkgaW50ZXJuYWwgIHsKICAgICAgICAKICAgICAgIAogICAgICAgIAogICAgICAgIGlmKCBjb250cmFjdHNbIF9hZGRyZXNzIF0gKSB7CiAgICAgICAgICAgIGNvbnRyYWN0X2FkZHJlc3MgPSBDb250cmFjdCAoICBfYWRkcmVzcyAgKTsKICAgICAgICAgICAgY29udHJhY3RfYWRkcmVzcy5wZWdIYW5kbGVyICAoIG1zZy5zZW5kZXIgLCB2YWx1ZSApOwogICAgICAgICAKICAgICAgICB9ICAgICAgICAKICAgICAgLy8gIENvbnRyYWN0Q2FsbCAoIF9hZGRyZXNzICwgdmFsdWUgICk7CiAgICB9CiAgICAKICAgIAogICAKICAgIAogICAgCgp9Cgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7CiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsKfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmxpYnJhcnkgU3RyaW5nVXRpbHMgewogICAgLy8vIEBkZXYgRG9lcyBhIGJ5dGUtYnktYnl0ZSBsZXhpY29ncmFwaGljYWwgY29tcGFyaXNvbiBvZiB0d28gc3RyaW5ncy4KICAgIC8vLyBAcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyIGlmIGBfYWAgaXMgc21hbGxlciwgemVybyBpZiB0aGV5IGFyZSBlcXVhbAogICAgLy8vIGFuZCBhIHBvc2l0aXZlIG51bWJlIGlmIGBfYmAgaXMgc21hbGxlci4KICAgIGZ1bmN0aW9uIGNvbXBhcmUoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIHJldHVybnMgKGludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBhID0gYnl0ZXMoX2EpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gYS5sZW5ndGg7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgbWluTGVuZ3RoKSBtaW5MZW5ndGggPSBiLmxlbmd0aDsKICAgICAgICAvL0B0b2RvIHVucm9sbCB0aGUgbG9vcCBpbnRvIGluY3JlbWVudHMgb2YgMzIgYW5kIGRvIGZ1bGwgMzIgYnl0ZSBjb21wYXJpc29ucwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG1pbkxlbmd0aDsgaSArKykKICAgICAgICAgICAgaWYgKGFbaV0gPCBiW2ldKQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICBlbHNlIGlmIChhW2ldID4gYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgZWxzZSBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIC8vLyBAZGV2IENvbXBhcmVzIHR3byBzdHJpbmdzIGFuZCByZXR1cm5zIHRydWUgaWZmIHRoZXkgYXJlIGVxdWFsLgogICAgZnVuY3Rpb24gZXF1YWwoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gY29tcGFyZShfYSwgX2IpID09IDA7CiAgICB9CiAgICAvLy8gQGRldiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgX25lZWRsZSBpbiBfaGF5c3RhY2sKICAgIGZ1bmN0aW9uIGluZGV4T2Yoc3RyaW5nIF9oYXlzdGFjaywgc3RyaW5nIF9uZWVkbGUpIHJldHVybnMgKGludCkKICAgIHsKICAgICAgICBieXRlcyBtZW1vcnkgaCA9IGJ5dGVzKF9oYXlzdGFjayk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG4gPSBieXRlcyhfbmVlZGxlKTsKICAgICAgICBpZihoLmxlbmd0aCA8IDEgfHwgbi5sZW5ndGggPCAxIHx8IChuLmxlbmd0aCA+IGgubGVuZ3RoKSkgCiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpIC8vIHNpbmNlIHdlIGhhdmUgdG8gYmUgYWJsZSB0byByZXR1cm4gLTEgKGlmIHRoZSBjaGFyIGlzbid0IGZvdW5kIG9yIGlucHV0IGVycm9yKSwgdGhpcyBmdW5jdGlvbiBtdXN0IHJldHVybiBhbiAiaW50IiB0eXBlIHdpdGggYSBtYXggbGVuZ3RoIG9mICgyXjEyOCAtIDEpCiAgICAgICAgICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgdWludCBzdWJpbmRleCA9IDA7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGgubGVuZ3RoOyBpICsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoaFtpXSA9PSBuWzBdKSAvLyBmb3VuZCB0aGUgZmlyc3QgY2hhciBvZiBiCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXggPSAxOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKHN1YmluZGV4IDwgbi5sZW5ndGggJiYgKGkgKyBzdWJpbmRleCkgPCBoLmxlbmd0aCAmJiBoW2kgKyBzdWJpbmRleF0gPT0gbltzdWJpbmRleF0pIC8vIHNlYXJjaCB1bnRpbCB0aGUgY2hhcnMgZG9uJ3QgbWF0Y2ggb3IgdW50aWwgd2UgcmVhY2ggdGhlIGVuZCBvZiBhIG9yIGIKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfSAgIAogICAgICAgICAgICAgICAgICAgIGlmKHN1YmluZGV4ID09IG4ubGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50KGkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9ICAgCiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwIHsKCiAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50IHRvdGFsU3VwcGx5KTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnModWludDI1Nik7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zKGJvb2wgb2spOwoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSByZXR1cm5zKGJvb2wgb2spOwoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnModWludCk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwoKfQoKCmNvbnRyYWN0IFN1YlRva2VuIHsgZnVuY3Rpb24gU3ViVG9rZW5DcmVhdGUgKCB1aW50MjU2IF9pbml0aWFsU3VwcGx5LCB1aW50OCBkZWNpbWFsVW5pdHMsIHN0cmluZyAgX25hbWUsIHN0cmluZyAgIF9zeW1ib2wsIGFkZHJlc3MgX3Rva2Vub3duZXIgKQpyZXR1cm5zIChhZGRyZXNzKXt9IH0KCmNvbnRyYWN0IERpdmlkZW5kIHsgZnVuY3Rpb24gc2V0UmVzZWxsZXIgKCBhZGRyZXNzICl7fX0KCmNvbnRyYWN0IFBlZyBpcyBFUkMyMCwgQ29udHJhY3RzLCBNYW5hZ2VyIHsKCiAgICB1c2luZyBzdHJpbmdzIGZvciAqOwogICAgdXNpbmcgU2FmZU1hdGgKICAgIGZvciB1aW50MjU2OwogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnVG9rZW4gMC4xJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICB1aW50MjU2IHB1YmxpYyBpbml0aWFsU3VwcGx5OwoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgbWludGVyOwogICAgYWRkcmVzcyBwdWJsaWMgbWFuYWdlcjsKICAgIGFkZHJlc3MgcHVibGljIG1hc3RlcnJlc2VsbGVyY29udHJhY3Q7CiAgICAKICAgIE1lbW8gbTsKICAgIAogICAgdWludDI1NiBwdWJsaWMgZGl2aWRlbmRjb21taXNzaW9uOwogICAgdWludDI1NiBwdWJsaWMgdHJhbnNhY3Rpb25mZWU7CiAgICAKCgogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nKCB1aW50ID0+IGFkZHJlc3MpIHB1YmxpYyBhY2NvdW50SW5kZXg7CiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IGJvb2wgKSBwdWJsaWMgYWNjb3VudEZyZWV6ZTsKICAgIG1hcHBpbmcoIGFkZHJlc3MgPT4gYm9vbCApIHB1YmxpYyByZXNlbGxlcjsKICAgIHVpbnQgYWNjb3VudENvdW50OwogICAgCiAgICAKICAgIHN0cnVjdCBNZW1vIHsKICAgICAgICAgYWRkcmVzcyAgIF9mcm9tOwogICAgICAgICBhZGRyZXNzICAgICBfdG87CiAgICAgICAgIHVpbnQyNTYgX2Ftb3VudDsKICAgICAgICAgc3RyaW5nICAgIF9tZW1vOwogICAgICAgICBzdHJpbmcgICAgX2hhc2g7CiAgICB9CiAgICAKICAgIG1hcHBpbmcgKCBzdHJpbmcgPT4gdWludCApIHByaXZhdGUgbWVtb3M7CiAgICBtYXBwaW5nKCB1aW50ID0+IE1lbW8gKSBwcml2YXRlIG1lbW9JbmRleDsKICAgIHVpbnQgbWVtb0NvdW50OwogICAKICAgIAogICAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgRnJvemVuRnVuZHMgKCBhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4gKTsKICAgIAogICAgZXZlbnQgVFRMQWNjb3VudHMgKCB1aW50IGFjY291bnRzICk7CiAgICBldmVudCBUVExTdXBwbHkgKCB1aW50IHN1cHBseSApIDsKICAgIGV2ZW50IERpc3BsYXkgIChhZGRyZXNzIF9mcm9tLCAgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCwgc3RyaW5nIF9tZW1vLCBzdHJpbmcgX2hhc2gpOwoKICAgIC8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50ICovCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFBlZygpIHsKCiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1aW50MjU2IF9pbml0aWFsU3VwcGx5ID0gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCA7IC8vIFRISVMgSEVSRSBNQVkgTkVFRCBUTyBCRSBBREpVU1RFRC4uCiAgICAgICAgICAgIC8vIE1ZRVRIRVJXQUxMRVQgQU5EIE1JU1QgQk9USCBTSE9XIERJRkVSRU5UIFFVQU5USVRJRVMgQkVDQVVTRSBPRiBUSEUgREVDSU1BTAogICAgICAgICAgICAvLyBJTkZPUk1BVElPTgogICAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cyA9IDMwOwogICAgICAgIGFwcGVuZFRva2VuSG9sZGVycyhtc2cuc2VuZGVyKTsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbFN1cHBseTsgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OyAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgaW5pdGlhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OwogICAgICAgIG5hbWUgPSAiUEVHIjsgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gIlBFRyI7IC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7IC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIG1lbW9Db3VudCsrOwogICAgICAgIG93bmVyICAgPSBtc2cuc2VuZGVyOwogICAgICAgIG1hbmFnZXIgPSBvd25lcjsKICAgICAgICBtaW50ZXIgID0gb3duZXI7CiAgICAgICAgZGl2aWRlbmRjb21taXNzaW9uID0gIDEwMDsKICAgIH0KCiAgICAvLyBTcGVjaWZpZXMgY29udHJhY3QgYWRkcmVzcyBhcyBhIHZhbGlkIHN0dWRpbyBzdWIgcHJvamVjdAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIC8vIEZ1bmN0aW9uIGFsbG93cyBmb3IgZXh0ZXJuYWwgYWNjZXNzIHRvIHRva2VuSG9sZXIncyBCYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbkhvbGRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiBiYWxhbmNlT2ZbdG9rZW5Ib2xkZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KCiAgICAvLyBGdW5jdGlvbiBhbGxvd3MgZm9yIGV4dGVybmFsIGFjY2VzcyB0byBudW1iZXIgb2YgYWNjb3VudHMgdGhhdCBhcmUgaG9sZGluZyBvciBvbmNlIGhlbGQgU3R1ZGlvCiAgICAvL3Rva2VucwoKICAgIGZ1bmN0aW9uIGdldEFjY291bnRDb3VudCgpIGNvbnN0YW50IHJldHVybnModWludDI1NikgewoKICAgICAgICByZXR1cm4gYWNjb3VudENvdW50OwogICAgfQoKICAgIC8vZnVuY3Rpb24gYWxsb3dzIGZvciBleHRlcm5hbCBhY2Nlc3MgdG8gdG9rZW5Ib2xkZXJzCiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKHVpbnQgc2xvdCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CgogICAgICAgIHJldHVybiBhY2NvdW50SW5kZXhbc2xvdF07CgogICAgfQoKICAgIC8vIGNoZWNrcyB0byBzZWUgaWYgdG9rZW5ob2xkZXIgaGFzIGEgYmFsYW5jZSwgaWYgbm90IGl0IGFwcGVuZHMgdGhlIHRva2VuaG9sZGVyIHRvIHRoZSBhY2NvdW50SW5kZXgKICAgLy8gd2hpY2ggdGhlIGdldEFkZHJlc3MoKSBjYW4gbGF0ZXIgYWNjZXNzIGV4dGVybmFsbHkKCiAgICBmdW5jdGlvbiBhcHBlbmRUb2tlbkhvbGRlcnMoYWRkcmVzcyB0b2tlbkhvbGRlcikgcHJpdmF0ZSB7CgogICAgICAgIGlmIChiYWxhbmNlT2ZbdG9rZW5Ib2xkZXJdID09IDApIHsKICAgICAgICAgICAgYWNjb3VudEluZGV4W2FjY291bnRDb3VudF0gPSB0b2tlbkhvbGRlcjsKICAgICAgICAgICAgYWNjb3VudENvdW50Kys7CiAgICAgICAgfQoKICAgIH0KCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBvaykgewogICAgICAgIGlmIChfdG8gPT0gMHgwKSB0aHJvdzsgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7IC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAoKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoIGFjY291bnRGcmVlemVbIG1zZy5zZW5kZXIgXSAgKSB0aHJvdzsKICAgICAgICAKICAgICAgIAogICAgICAgIAogICAgICAgIGFwcGVuZFRva2VuSG9sZGVycyhfdG8pOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICAKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7IC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICAgICAgY29udHJhY3RDaGVjayggX3RvICwgX3ZhbHVlICk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIAogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcldpdGhNZW1vKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgc3RyaW5nIF9tZW1vLCBzdHJpbmcgX2hhc2ggKSBwdWJsaWMgcmV0dXJucyhib29sIG9rKSB7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgdmFyIF9oaCA9IF9oYXNoLnRvU2xpY2UoKTsKICAgICAgICB1aW50IGxlbiA9IF9oaC5sZW4oKTsKICAgICAgICByZXF1aXJlICggbGVuID4gMTAgKTsKICAgICAgICBpZiAoIG1lbW9zWyBfaGFzaCBdICE9IDAgKSB0aHJvdzsKICAgICAgICB0cmFuc2ZlciAoIF90bywgX3ZhbHVlKTsKICAgICAgIAogICAgICAgIG0uX2Zyb20gICA9IG1zZy5zZW5kZXI7CiAgICAgICAgbS5fdG8gICAgID0gX3RvOwogICAgICAgIG0uX2Ftb3VudCA9IF92YWx1ZTsKICAgICAgICBtLl9tZW1vICAgPSBfbWVtbzsKICAgICAgICBtLl9oYXNoICAgPSBfaGFzaDsKICAgICAgICBtZW1vSW5kZXhbIG1lbW9Db3VudCBdID0gbTsKICAgICAgICBtZW1vcyBbIF9oYXNoIF0gPSBtZW1vQ291bnQ7CiAgICAgICAgbWVtb0NvdW50Kys7CiAgICAgICAgCiAgICAgICAgRGlzcGxheSAoICBtc2cuc2VuZGVyICwgICBfdG8sICBfdmFsdWUsICBfbWVtbywgX2hhc2ggKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0TWVtb3MoIHN0cmluZyAgX2hhc2ggKSByZXR1cm5zICggIGFkZHJlc3MgX2Zyb20sICBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50LCBzdHJpbmcgX21lbW8gKSB7CiAgICAgICAgCiAgICAgICAgaWYgKCBtZW1vcyBbX2hhc2hdID09IDAgKSB0aHJvdzsgICAgCiAgICAgICAgX2Zyb20gPSBtZW1vSW5kZXhbbWVtb3MgW19oYXNoXV0uX2Zyb207CiAgICAgICAgX3RvID0gIG1lbW9JbmRleFttZW1vcyBbX2hhc2hdXS5fdG87CiAgICAgICAgX2Ftb3VudCAgPSBtZW1vSW5kZXhbbWVtb3MgW19oYXNoXV0uX2Ftb3VudDsKICAgICAgICBfbWVtbyA9IG1lbW9JbmRleFttZW1vcyBbX2hhc2hdXS5fbWVtbzsKICAgICAgICAKICAgICAgICBEaXNwbGF5ICggICBfZnJvbSwgICBfdG8sICBfYW1vdW50LCAgX21lbW8sIF9oYXNoICk7CiAgICAgICAgICAgCiAgICAgICAgcmV0dXJuICggX2Zyb20sIF90bywgX2Ftb3VudCwgX21lbW8gKSA7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gZ2V0TWVtbyggdWludDI1NiBudW0gKSByZXR1cm5zICggIGFkZHJlc3MgX2Zyb20sICBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50LCBzdHJpbmcgX21lbW8sIHN0cmluZyBfaGFzaCApICB7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZSAoIG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBtYW5hZ2VyICk7CiAgICAgICAgX2Zyb20gPSBtZW1vSW5kZXhbIG51bSBdLl9mcm9tOwogICAgICAgIF90byA9ICBtZW1vSW5kZXhbIG51bSBdLl90bzsKICAgICAgICBfYW1vdW50ICA9IG1lbW9JbmRleFsgbnVtIF0uX2Ftb3VudDsKICAgICAgICBfbWVtbyA9IG1lbW9JbmRleFsgbnVtIF0uX21lbW87CiAgICAgICAgX2hhc2ggPSBtZW1vSW5kZXhbIG51bSBdLl9oYXNoOwogICAgICAgIAogICAgICAgIERpc3BsYXkgKCAgIF9mcm9tLCAgIF90bywgIF9hbW91bnQsICBfbWVtbywgX2hhc2ggKTsKICAgICAgICAKICAgICAgICByZXR1cm4gKCBfZnJvbSwgX3RvLCBfYW1vdW50LCBfbWVtbywgX2hhc2ggKTsKICAgICAgICAKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXREaXZpZGVuZENvbW1pc3Npb24gKCB1aW50MjU2IF9jb21tICkgIHsKICAgICAgICAKICAgICAgICBpZiggbXNnLnNlbmRlciAhPSBvd25lciAmJiBtc2cuc2VuZGVyICE9IG1hbmFnZXIgKSB0aHJvdzsKICAgICAgICBpZiAgKF9jb21tID4gMjAwICkgdGhyb3c7CiAgICAgICAgZGl2aWRlbmRjb21taXNzaW9uID0gX2NvbW07CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICB9CiAgICAKICAgICBmdW5jdGlvbiBzZXRUcmFuc2FjdGlvbkZlZSAoIHVpbnQyNTYgX2ZlZSApIHsKICAgICAgICAKICAgICAgICBpZiggbXNnLnNlbmRlciAhPSBvd25lciAmJiBtc2cuc2VuZGVyICE9IG1hbmFnZXIgKSB0aHJvdzsKICAgICAgICBpZiAgKF9mZWUgPiAxMDAgKSB0aHJvdzsKICAgICAgICB0cmFuc2FjdGlvbmZlZT0gX2ZlZTsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNYXN0ZXJSZXNlbGxlckNvbnRyYWN0ICggYWRkcmVzcyBfY29udHJhY3QgKSB7CiAgICAgICAgaWYoIG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbXNnLnNlbmRlciAhPSBtYW5hZ2VyICkgdGhyb3c7CgogICAgICAgIG1hc3RlcnJlc2VsbGVyY29udHJhY3QgPSBfY29udHJhY3Q7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJlc2VsbGVyT25EaXN0cmlidXRpb25Db250cmFjdCAoIGFkZHJlc3MgX2NvbnRyYWN0LCBhZGRyZXNzIHJlc2VsbGVyICkgewoKICAgICAgICBpZiggbXNnLnNlbmRlciAhPSBvd25lciAmJiBtc2cuc2VuZGVyICE9IG1hbmFnZXIgKSB0aHJvdzsKICAgICAgICBEaXZpZGVuZCBkaXYgPSBEaXZpZGVuZCAoIF9jb250cmFjdCApOwogICAgICAgIGRpdi5zZXRSZXNlbGxlciAoIHJlc2VsbGVyICk7CgoKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRSZXNlbGxlciAoIGFkZHJlc3MgX2NvbnRyYWN0IClvbmx5UmVzZWxsZXJ7CgoKICAgICAgICByZXNlbGxlcltfY29udHJhY3RdID0gdHJ1ZTsKCiAgICB9CgogICAgZnVuY3Rpb24gaXNSZXNlbGxlciAoIGFkZHJlc3MgX2NvbnRyYWN0ICkgY29uc3RhbnQgcmV0dXJucyhib29sKXsKCgogICAgICAgIHJldHVybiByZXNlbGxlcltfY29udHJhY3RdOwogICAgfQogICAgCgogICAgZnVuY3Rpb24gcmVtb3ZlUmVzZWxsZXIgKCBhZGRyZXNzIF9jb250cmFjdCApb25seU93bmVyewoKICAgICAgICByZXNlbGxlcltfY29udHJhY3RdID0gZmFsc2U7CgogICAgfQogICAgCgogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbCggbXNnLnNlbmRlciAsX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb21tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dhbmNlW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgdGhyb3c7IC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7IC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGlmICggYWNjb3VudEZyZWV6ZVsgX2Zyb20gXSAgKSB0aHJvdzsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICBhcHBlbmRUb2tlbkhvbGRlcnMoX3RvKTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgY29udHJhY3RDaGVjayggX3RvICwgX3ZhbHVlICk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm5Gcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7IC8vIENoZWNrIGFsbG93YW5jZQoKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihfZnJvbSwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seU1pbnRlciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pbnRlciApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVJlc2VsbGVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWFzdGVycmVzZWxsZXJjb250cmFjdCApOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CgogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFzc2lnbk1pbnRlciAoYWRkcmVzcyBfbWludGVyKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgbWludGVyID0gX21pbnRlcjsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBhc3NpZ25NYW5hZ2VtZW50IChhZGRyZXNzIF9tYW5hZ2VyKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgbWFuYWdlciA9IF9tYW5hZ2VyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50ICggYWRkcmVzcyBfYWNjb3VudCApIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgICAgCiAgICAgICAgYWNjb3VudEZyZWV6ZSBbIF9hY2NvdW50IF0gPSB0cnVlOwogICAgICAgIEZyb3plbkZ1bmRzICggX2FjY291bnQgLCB0cnVlICk7CiAgICAgICAgCiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVuZnJlZXplQWNjb3VudCAoIGFkZHJlc3MgX2FjY291bnQgKSBwdWJsaWMgb25seU93bmVyewogICAgICAgIAogICAgICAgICBhY2NvdW50RnJlZXplIFsgX2FjY291bnQgXSA9IGZhbHNlOwogICAgICAgICBGcm96ZW5GdW5kcyAoIF9hY2NvdW50ICwgZmFsc2UgKTsKICAgICAgICAKICAgICAgICAKICAgIH0KICAgIAogICAgCiAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgYXBwZW5kVG9rZW5Ib2xkZXJzKHRhcmdldCk7CiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICBUcmFuc2ZlcigwLCBvd25lciwgbWludGVkQW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihvd25lciwgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwoKICAgIH0KICAgIAogICAgIGZ1bmN0aW9uIG1pbnRUb2tlbkJ5TWludGVyKCBhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQgKSBvbmx5TWludGVyICB7CiAgICAgICAgCiAgICAgICAgYXBwZW5kVG9rZW5Ib2xkZXJzKHRhcmdldCk7CiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICBUcmFuc2ZlcigwLCBtaW50ZXIsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIobWludGVyLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7CgogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRUb2tlbkNyZWF0aW9uQ29udHJhY3QgKCBhZGRyZXNzIF9jb250cmFjdGFkZHJlc3MgKSBvbmx5T3duZXIgewogICAgICAgIAogICAgICAgIAogICAgICAgIFRva2VuQ3JlYXRpb25Db250cmFjdCA9IF9jb250cmFjdGFkZHJlc3M7CiAgICAgICAgCiAgICAgICAgCiAgICB9CiAgICAKICAgIAogICAgCgoKICAgIAogICAgCiAgICAgZnVuY3Rpb24gcGF5UGVnRGlzdHJpYnV0aW9uKCBhZGRyZXNzIF90b2tlbiwgdWludDI1NiBhbW91bnQgKXsKICAgICAgICAgCiAgICAgICAgaWYgKCAhIGdldENvbnRyYWN0U3RhdHVzKCBtc2cuc2VuZGVyICkpIHRocm93OwogICAgICAgIGlmICggYmFsYW5jZU9mWyBtc2cuc2VuZGVyIF0gPCBhbW91bnQgKSB0aHJvdzsKICAgICAgICBpZiAoICEgZ2V0Q29udHJhY3RPcmlnaW4oKSApewogICAgICAgICAgICAKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRva2VuID0gVG9rZW4gKCBfdG9rZW4gKTsKICAgICAgICBUcmFuc2ZlciggbXNnLnNlbmRlciAsIF90b2tlbiwgYW1vdW50ICk7CiAgICAgICAgdWludDI1NiAgYWNjb3VudENvdW50ID0gdG9rZW4uZ2V0QWNjb3VudENvdW50KCk7CiAgICAgICAgdWludDI1NiAgc3VwcGx5ID0gdG9rZW4udG90YWxTdXBwbHkoKTsKICAgICAgICBMb2coIF90b2tlbiwgYW1vdW50ICApOwogICAgICAgIHByb2ZpdF9wZXJfdG9rZW4gPSBhbW91bnQgLyBzdXBwbHk7CiAgICAgICAgTWVzc2FnZSggcHJvZml0X3Blcl90b2tlbiApOwogICAgICAgIGZvciAoIHVpbnQgaT0wOyBpIDwgYWNjb3VudENvdW50IDsgaSsrICkgewogICAgICAgICAgICAgICAKICAgICAgICAgICAgYWRkcmVzcyB0b2tlbkhvbGRlciA9IHRva2VuLmdldEFkZHJlc3MoaSk7CiAgICAgICAgICAgCiAgICAgICAgICAgIGlmICggdG9rZW5Ib2xkZXIgIT0gbXNnLnNlbmRlciApIHsKCiAgICAgICAgICAgIC8vdHJhbnNmZXIoIHRva2VuSG9sZGVyLCAgdG9rZW4uYmFsYW5jZU9mKCB0b2tlbkhvbGRlciApICogcHJvZml0X3Blcl90b2tlbiApOwogICAgICAgICAgICAgICAgYmFsYW5jZU9mWyB0b2tlbkhvbGRlciBdICs9IHRva2VuLmJhbGFuY2VPZiggdG9rZW5Ib2xkZXIgKSAqIHByb2ZpdF9wZXJfdG9rZW47IAoKICAgICAgICAgICAgfQogICAgICAgIAogICAgICAgICAgfQogICAgICAgICAgICBiYWxhbmNlT2ZbIG1zZy5zZW5kZXIgXSAtPSBhbW91bnQ7CiAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgfQoKICAgIAp9'.
	

]
