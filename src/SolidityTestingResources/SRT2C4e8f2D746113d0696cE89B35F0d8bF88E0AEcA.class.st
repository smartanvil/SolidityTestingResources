Class {
	#name : #SRT2C4e8f2D746113d0696cE89B35F0d8bF88E0AEcA,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2C4e8f2D746113d0696cE89B35F0d8bF88E0AEcA >> base64 [
	^ ''.
	

]
