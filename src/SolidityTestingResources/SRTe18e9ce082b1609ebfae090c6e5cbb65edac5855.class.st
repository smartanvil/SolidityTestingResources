Class {
	#name : #SRTe18e9ce082b1609ebfae090c6e5cbb65edac5855,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe18e9ce082b1609ebfae090c6e5cbb65edac5855 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Ci8vIEFic3RyYWN0IGNvbnRyYWN0IGZvciB0aGUgZnVsbCBFUkMgMjAgVG9rZW4gc3RhbmRhcmQKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCgpjb250cmFjdCBFUkMyMCB7CiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgewogICAgICB0aHJvdzsKICAgIH0KICB9Cn0KCmNvbnRyYWN0IENvbnRyb2xsZWQgewogICAgbW9kaWZpZXIgb25seUNvbnRyb2xsZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyb2xsZXIpOwogICAgICAgIF87CiAgICB9CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgewogICAgICAgIGNvbnRyb2xsZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGFkZHJlc3MgcHVibGljIG5ld0NvbnRyb2xsZXI7CgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgb25seUNvbnRyb2xsZXIgewogICAgICAgIG5ld0NvbnRyb2xsZXIgPSBfbmV3Q29udHJvbGxlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gbmV3Q29udHJvbGxlcikgewogICAgICAgICAgICBjb250cm9sbGVyID0gbmV3Q29udHJvbGxlcjsKICAgICAgICB9CiAgICB9Cn0KY29udHJhY3QgREFPQ29udHJvbGxlZCBpcyBDb250cm9sbGVkewogICAgYWRkcmVzcyBwdWJsaWMgZGFvOwogICAgbW9kaWZpZXIgb25seURBT3sKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gZGFvKTsKICAgICAgICBfOwogICAgfQogICAgZnVuY3Rpb24gc2V0REFPKGFkZHJlc3MgX2Rhbykgb25seUNvbnRyb2xsZXJ7CiAgICAgICAgZGFvID0gX2RhbzsKICAgIH0KfQoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBFUkMyMCwgU2FmZU1hdGgsIERBT0NvbnRyb2xsZWR7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwoJYWRkcmVzc1tdIHB1YmxpYyBtaW50aW5nRmFjdG9yaWVzOwoJdWludCBwdWJsaWMgbnVtRmFjdG9yaWVzOwoJZnVuY3Rpb24gcmVzZXRGYWN0b3JpZXMoKSBvbmx5Q29udHJvbGxlcnsKCSAgICBudW1GYWN0b3JpZXMgPSAwOwoJfQoJZnVuY3Rpb24gYWRkTWludGluZ0ZhY3RvcnkoYWRkcmVzcyBfZmFjdG9yeSkgb25seUNvbnRyb2xsZXJ7CgkgICAgbWludGluZ0ZhY3Rvcmllcy5wdXNoKF9mYWN0b3J5KTsKCSAgICBudW1GYWN0b3JpZXMgKz0gMTsKCX0KCQoJZnVuY3Rpb24gcmVtb3ZlTWludGluZ0ZhY3RvcnkoYWRkcmVzcyBfZmFjdG9yeSkgb25seUNvbnRyb2xsZXJ7CgkgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbnVtRmFjdG9yaWVzOyBpKyspewoJICAgICAgICBpZiAoX2ZhY3RvcnkgPT0gbWludGluZ0ZhY3Rvcmllc1tpXSkKCSAgICAgICAgewoJICAgICAgICAgICAgbWludGluZ0ZhY3Rvcmllc1tpXSA9IDA7CgkgICAgICAgIH0KCSAgICB9Cgl9CgkKCW1vZGlmaWVyIG9ubHlGYWN0b3J5ewoJICAgIGJvb2wgaXNGYWN0b3J5ID0gZmFsc2U7CgkgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbnVtRmFjdG9yaWVzOyBpKyspewoJICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBtaW50aW5nRmFjdG9yaWVzW2ldICYmIG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSkKCSAgICAgICAgewoJICAgICAgICAgICAgaXNGYWN0b3J5ID0gdHJ1ZTsKCSAgICAgICAgfQoJICAgIH0KCSAgICBpZiAoIWlzRmFjdG9yeSkgdGhyb3c7CgkgICAgXzsKCX0KfQpjb250cmFjdCBDb2xsZWN0aWJsZUZlZVRva2VuIGlzIE1pbnRhYmxlVG9rZW57Cgl1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgltYXBwaW5nKHVpbnQgPT4gdWludCkgcHVibGljIHJvdW5kRmVlczsKCW1hcHBpbmcodWludCA9PiB1aW50KSBwdWJsaWMgcmVjb3JkZWRDb2luU3VwcGx5Rm9yUm91bmQ7CgltYXBwaW5nKHVpbnQgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgcHVibGljIGNsYWltZWRGZWVzOwoJbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBsYXN0Q2xhaW1lZFJvdW5kOwoJdWludCBwdWJsaWMgbGF0ZXN0Um91bmQgPSAwOwoJdWludCBwdWJsaWMgaW5pdGlhbFJvdW5kID0gMTsKCXVpbnQgcHVibGljIHJlc2VydmVzOwogICAgZXZlbnQgQ2xhaW1lZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50MjU2IF9hbW91bnQpOwogICAgZXZlbnQgRGVwb3NpdGVkKHVpbnQyNTYgX2Ftb3VudCwgdWludCBpbmRleGVkIHJvdW5kKTsKCQoJbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewoJCWlmKG1zZy5kYXRhLmxlbmd0aCAhPSBzaXplICsgNCkgewoJCXRocm93OwoJCX0KCQlfOwoJfQoJCglmdW5jdGlvbiByZWR1Y2VSZXNlcnZlcyh1aW50IHZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMSAqIDMyKSBvbmx5REFPewoJICAgIHJlc2VydmVzID0gc2FmZVN1YihyZXNlcnZlcywgdmFsdWUpOwoJfQoJCglmdW5jdGlvbiBhZGRSZXNlcnZlcyh1aW50IHZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMSAqIDMyKSBvbmx5REFPewoJICAgIHJlc2VydmVzID0gc2FmZUFkZChyZXNlcnZlcywgdmFsdWUpOwoJfQoJCglmdW5jdGlvbiBkZXBvc2l0RmVlcyh1aW50IHZhbHVlKSBvbmx5REFPIHsKCQlsYXRlc3RSb3VuZCArPSAxOwoJCURlcG9zaXRlZCh2YWx1ZSwgbGF0ZXN0Um91bmQpOwoJCXJlY29yZGVkQ29pblN1cHBseUZvclJvdW5kW2xhdGVzdFJvdW5kXSA9IHRvdGFsU3VwcGx5OwoJCXJvdW5kRmVlc1tsYXRlc3RSb3VuZF0gPSB2YWx1ZTsKCX0KCWZ1bmN0aW9uIGNsYWltRmVlcyhhZGRyZXNzIF9vd25lcikgb25seVBheWxvYWRTaXplKDEgKiAzMikgb25seURBTyByZXR1cm5zICh1aW50IHRvdGFsRmVlcykgewoJCXRvdGFsRmVlcyA9IDA7CgkJZm9yICh1aW50IGkgPSBsYXN0Q2xhaW1lZFJvdW5kW19vd25lcl0gKyAxOyBpIDw9IGxhdGVzdFJvdW5kOyBpKyspewoJCQl1aW50IGZlZUZvclJvdW5kID0gYmFsYW5jZXNbX293bmVyXSAqIGZlZVBlclVuaXRPZkNvaW4oaSk7CgkJCWlmIChmZWVGb3JSb3VuZCA+IGNsYWltZWRGZWVzW2ldW19vd25lcl0pewoJCQkJZmVlRm9yUm91bmQgPSBzYWZlU3ViKGZlZUZvclJvdW5kLGNsYWltZWRGZWVzW2ldW19vd25lcl0pOwoJCQl9CgkJCWVsc2UgewoJCQkJZmVlRm9yUm91bmQgPSAwOwoJCQl9CgkJCWNsYWltZWRGZWVzW2ldW19vd25lcl0gPSBzYWZlQWRkKGNsYWltZWRGZWVzW2ldW19vd25lcl0sIGZlZUZvclJvdW5kKTsKCQkJdG90YWxGZWVzID0gc2FmZUFkZCh0b3RhbEZlZXMsIGZlZUZvclJvdW5kKTsKCQl9CgkJbGFzdENsYWltZWRSb3VuZFtfb3duZXJdID0gbGF0ZXN0Um91bmQ7CgkJQ2xhaW1lZChfb3duZXIsIGZlZUZvclJvdW5kKTsKCQlyZXR1cm4gdG90YWxGZWVzOwoJfQoKCWZ1bmN0aW9uIGNsYWltRmVlc0ZvclJvdW5kKGFkZHJlc3MgX293bmVyLCB1aW50IHJvdW5kKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBvbmx5REFPIHJldHVybnMgKHVpbnQgZmVlRm9yUm91bmQpIHsKCQlmZWVGb3JSb3VuZCA9IGJhbGFuY2VzW19vd25lcl0gKiBmZWVQZXJVbml0T2ZDb2luKHJvdW5kKTsKCQlpZiAoZmVlRm9yUm91bmQgPiBjbGFpbWVkRmVlc1tyb3VuZF1bX293bmVyXSl7CgkJCWZlZUZvclJvdW5kID0gc2FmZVN1YihmZWVGb3JSb3VuZCxjbGFpbWVkRmVlc1tyb3VuZF1bX293bmVyXSk7CgkJfQoJCWVsc2UgewoJCQlmZWVGb3JSb3VuZCA9IDA7CgkJfQoJCWNsYWltZWRGZWVzW3JvdW5kXVtfb3duZXJdID0gc2FmZUFkZChjbGFpbWVkRmVlc1tyb3VuZF1bX293bmVyXSwgZmVlRm9yUm91bmQpOwoJCUNsYWltZWQoX293bmVyLCBmZWVGb3JSb3VuZCk7CgkJcmV0dXJuIGZlZUZvclJvdW5kOwoJfQoKCWZ1bmN0aW9uIF9yZXNldFRyYW5zZmVycmVkQ29pbkZlZXMoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3JlY2VpcGllbnQsIHVpbnQgbnVtQ29pbnMpIGludGVybmFsIHJldHVybnMgKGJvb2wpewoJCWZvciAodWludCBpID0gbGFzdENsYWltZWRSb3VuZFtfb3duZXJdICsgMTsgaSA8PSBsYXRlc3RSb3VuZDsgaSsrKXsKCQkJdWludCBmZWVGb3JSb3VuZCA9IGJhbGFuY2VzW19vd25lcl0gKiBmZWVQZXJVbml0T2ZDb2luKGkpOwoJCQlpZiAoZmVlRm9yUm91bmQgPiBjbGFpbWVkRmVlc1tpXVtfb3duZXJdKSB7CgkJCQkvL0FkZCB1bmNsYWltZWQgZmVlcyB0byByZXNlcnZlcwoJCQkJdWludCB1bmNsYWltZWRGZWVzID0gbWluMjU2KG51bUNvaW5zICogZmVlUGVyVW5pdE9mQ29pbihpKSwgc2FmZVN1YihmZWVGb3JSb3VuZCwgY2xhaW1lZEZlZXNbaV1bX293bmVyXSkpOwoJCQkJcmVzZXJ2ZXMgPSBzYWZlQWRkKHJlc2VydmVzLCB1bmNsYWltZWRGZWVzKTsKCQkJCWNsYWltZWRGZWVzW2ldW19vd25lcl0gPSBzYWZlQWRkKGNsYWltZWRGZWVzW2ldW19vd25lcl0sIHVuY2xhaW1lZEZlZXMpOwoJCQl9CgkJfQoJCWZvciAodWludCB4ID0gbGFzdENsYWltZWRSb3VuZFtfcmVjZWlwaWVudF0gKyAxOyB4IDw9IGxhdGVzdFJvdW5kOyB4KyspewoJCQkvL0VtcHR5IGZlZXMgZm9yIG5ldyByZWNlaXBpZW50CgkJCWNsYWltZWRGZWVzW3hdW19yZWNlaXBpZW50XSA9IHNhZmVBZGQoY2xhaW1lZEZlZXNbeF1bX3JlY2VpcGllbnRdLCBudW1Db2lucyAqIGZlZVBlclVuaXRPZkNvaW4oeCkpOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0KCWZ1bmN0aW9uIGZlZVBlclVuaXRPZkNvaW4odWludCByb3VuZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZmVlKXsKCQlyZXR1cm4gc2FmZURpdihyb3VuZEZlZXNbcm91bmRdLCByZWNvcmRlZENvaW5TdXBwbHlGb3JSb3VuZFtyb3VuZF0pOwoJfQoJCglmdW5jdGlvbiByZXNlcnZlc1BlclVuaXRUb2tlbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKCSAgICByZXR1cm4gcmVzZXJ2ZXMgLyB0b3RhbFN1cHBseTsKCX0KCQogICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IGFtb3VudCkgb25seUZhY3Rvcnl7CiAgICAgICAvL1Vwb24gZmFjdG9yeSB0cmFuc2ZlciwgZmVlcyB3aWxsIGJlIHJlZGlzdHJpYnV0ZWQgaW50byByZXNlcnZlcwogICAgICAgbGFzdENsYWltZWRSb3VuZFttc2cuc2VuZGVyXSA9IGxhdGVzdFJvdW5kOwogICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBhbW91bnQpOwogICAgICAgYmFsYW5jZXNbX293bmVyXSArPSBhbW91bnQ7CiAgIH0KfQoKY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBDb2xsZWN0aWJsZUZlZVRva2VuewoKICAgIGV2ZW50IEJ1cm5lZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50MjU2IF92YWx1ZSk7CiAgICBmdW5jdGlvbiBidXJuKGFkZHJlc3MgX293bmVyLCB1aW50IGFtb3VudCkgb25seURBTyByZXR1cm5zICh1aW50IGJ1cm5WYWx1ZSl7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfb3duZXJdID49IGFtb3VudCk7CiAgICAgICAgLy9WYWxpZGF0aW9uIGlzIGRvbmUgdG8gZW5zdXJlIG5vIGZlZXMgcmVtYWluaW5nIGluIHRva2VuCiAgICAgICAgcmVxdWlyZShsYXRlc3RSb3VuZCA9PSBsYXN0Q2xhaW1lZFJvdW5kW19vd25lcl0pOwogICAgICAgIGJ1cm5WYWx1ZSA9IHJlc2VydmVzUGVyVW5pdFRva2VuKCkgKiBhbW91bnQ7CiAgICAgICAgcmVzZXJ2ZXMgPSBzYWZlU3ViKHJlc2VydmVzLCBidXJuVmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19vd25lcl0gPSBzYWZlU3ViKGJhbGFuY2VzW19vd25lcl0sIGFtb3VudCk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3ViKHRvdGFsU3VwcGx5LCBhbW91bnQpOwogICAgICAgIFRyYW5zZmVyKF9vd25lciwgdGhpcywgYW1vdW50KTsKICAgICAgICBCdXJuZWQoX293bmVyLCBhbW91bnQpOwogICAgICAgIHJldHVybiBidXJuVmFsdWU7CiAgICB9CiAgICAKfQovKgogKiBIYWx0YWJsZQogKgogKiBBYnN0cmFjdCBjb250cmFjdCB0aGF0IGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4KICogZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLiBEaWZmZXJzIGZyb20gUGF1c2FibGUgYnkgY2F1c2luZyBhIHRocm93IHdoZW4gaW4gaGFsdCBtb2RlLgogKgogKgogKiBPcmlnaW5hbGx5IGVudmlzaW9uZWQgaW4gRmlyc3RCbG9vZCBJQ08gY29udHJhY3QuCiAqLwpjb250cmFjdCBIYWx0YWJsZSBpcyBDb250cm9sbGVkIHsKICBib29sIHB1YmxpYyBoYWx0ZWQ7CgogIG1vZGlmaWVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICBpZiAoaGFsdGVkKSB0aHJvdzsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5SW5FbWVyZ2VuY3kgewogICAgaWYgKCFoYWx0ZWQpIHRocm93OwogICAgXzsKICB9CgogIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW1lcmdlbmN5LCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgZnVuY3Rpb24gaGFsdCgpIGV4dGVybmFsIG9ubHlDb250cm9sbGVyIHsKICAgIGhhbHRlZCA9IHRydWU7CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgZnVuY3Rpb24gdW5oYWx0KCkgZXh0ZXJuYWwgb25seUNvbnRyb2xsZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGhhbHRlZCA9IGZhbHNlOwogIH0KCn0KCi8qKgogKiBTdGFuZGFyZCBFUkMyMCB0b2tlbiB3aXRoIFNob3J0IEhhbmQgQXR0YWNrIGFuZCBhcHByb3ZlKCkgcmFjZSBjb25kaXRpb24gbWl0aWdhdGlvbi4KICoKICogQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOgogKiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFNwaGVyZVRva2VuIGlzIEJ1cm5hYmxlVG9rZW4sIEhhbHRhYmxlIHsKICAgIAogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAvL1RoZSBUb2tlbidzIG5hbWU6IGUuZy4gRGlnaXhEQU8gVG9rZW5zCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgIC8vQW4gaWRlbnRpZmllcjogZS5nLiBSRVAKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICdTUFJfMC4xJzsgLy9BbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUKICAgIGJvb2wgcHVibGljIGlzVHJhbnNmZXJFbmFibGVkOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgICBmdW5jdGlvbiBTcGhlcmVUb2tlbigpewogICAgICAgIG5hbWUgPSAnRXRoZXJTcGhlcmUnOwogICAgICAgIHN5bWJvbCA9ICdTUFInOwogICAgICAgIGRlY2ltYWxzID0gNDsKICAgICAgICBpc1RyYW5zZmVyRW5hYmxlZCA9IGZhbHNlOwogICAgfQogIC8qKgogICAqCiAgICogRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sKICAgKgogICAqIGh0dHA6Ly92ZXNzZW5lcy5jb20vdGhlLWVyYzIwLXNob3J0LWFkZHJlc3MtYXR0YWNrLWV4cGxhaW5lZC8KICAgKi8KICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICAgaWYobXNnLmRhdGEubGVuZ3RoICE9IHNpemUgKyA0KSB7CiAgICAgICB0aHJvdzsKICAgICB9CiAgICAgXzsKICB9CgogICAgZnVuY3Rpb24gc2V0VHJhbnNmZXJFbmFibGUoYm9vbCBlbmFibGVkKSBvbmx5REFPewogICAgICAgIGlzVHJhbnNmZXJFbmFibGVkID0gZW5hYmxlZDsKICAgIH0KICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwcml2YXRlIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgaWYgKF92YWx1ZSA+IGJhbGFuY2VzW19mcm9tXSB8fCAhaXNUcmFuc2ZlckVuYWJsZWQpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoIV9yZXNldFRyYW5zZmVycmVkQ29pbkZlZXMoX2Zyb20sIF90bywgX3ZhbHVlKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgc3RvcEluRW1lcmdlbmN5IHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmV0dXJuIGRvVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZXhjaGFuZ2VUcmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHN0b3BJbkVtZXJnZW5jeSBvbmx5RmFjdG9yeSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoX3ZhbHVlID4gYmFsYW5jZXNbbXNnLnNlbmRlcl0pIHtyZXR1cm4gZmFsc2U7fQogICAgICAgIGlmICghX3Jlc2V0VHJhbnNmZXJyZWRDb2luRmVlcyhtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSkpeyByZXR1cm4gZmFsc2U7fQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgc3RvcEluRW1lcmdlbmN5IHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKICAgIGlmIChfdmFsdWUgPiBiYWxhbmNlc1tfZnJvbV0gfHwgIWlzVHJhbnNmZXJFbmFibGVkIHx8IF92YWx1ZSA+IF9hbGxvd2FuY2UpIHJldHVybiBmYWxzZTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihfYWxsb3dhbmNlLCBfdmFsdWUpOwogICAgcmV0dXJuIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHN0b3BJbkVtZXJnZW5jeSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBBdG9taWMgaW5jcmVtZW50IG9mIGFwcHJvdmVkIHNwZW5kaW5nCiAgICoKICAgKiBXb3JrcyBhcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKgogICAqLwogIGZ1bmN0aW9uIGFkZEFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpCiAgb25seVBheWxvYWRTaXplKDIgKiAzMikgc3RvcEluRW1lcmdlbmN5CiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBzYWZlQWRkKG9sZFZhbHVlLCBfYWRkZWRWYWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQXRvbWljIGRlY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZy4KICAgKgogICAqIFdvcmtzIGFyb3VuZCBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqLwogIGZ1bmN0aW9uIHN1YkFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkKICBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBzdG9wSW5FbWVyZ2VuY3kKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgIHVpbnQgb2xkVmFsID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CgogICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbCkgewogICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgICB9IGVsc2UgewogICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBzYWZlU3ViKG9sZFZhbCwgX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgfQoKfQ=='.
	

]
