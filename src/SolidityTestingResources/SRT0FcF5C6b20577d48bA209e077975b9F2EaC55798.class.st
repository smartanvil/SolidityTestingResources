Class {
	#name : #SRT0FcF5C6b20577d48bA209e077975b9F2EaC55798,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0FcF5C6b20577d48bA209e077975b9F2EaC55798 >> base64 [
	^ ''.
	

]
