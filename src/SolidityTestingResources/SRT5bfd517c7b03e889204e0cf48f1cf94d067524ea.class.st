Class {
	#name : #SRT5bfd517c7b03e889204e0cf48f1cf94d067524ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5bfd517c7b03e889204e0cf48f1cf94d067524ea >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgoKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHtmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTt9CgoKY29udHJhY3QgdG9rZW4gewogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgLyogVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgYnVybnQgKi8KICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gdG9rZW4oCiAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICApIHsKICAgICAgICBiYWxhbmNlT2ZbYWRkcmVzcyh0aGlzKV0gPSBpbml0aWFsU3VwcGx5OyAvLyBHaXZlIHRoZSBjb250cmFjdCBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7IC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IGRlY2ltYWxVbml0czsgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID4gX3ZhbHVlKTsgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VPZltfdG9dKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7IC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIHlvdXIgYWNjb3VudAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPCBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgLy8vIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgIC8vLyBAcGFyYW0gX2V4dHJhRGF0YSBzb21lIGV4dHJhIGluZm9ybWF0aW9uIHRvIHNlbmQgdG8gdGhlIGFwcHJvdmVkIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseQogICAgLy8vIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCBvZiBtb25leSB0byBidXJuCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA+IF92YWx1ZSk7IC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsgLy8gVXBkYXRlcyB0b3RhbFN1cHBseQogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7IC8vIENoZWNrIGlmIHRoZSB0YXJnZXRlZCBiYWxhbmNlIGlzIGVub3VnaAogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgdGFyZ2V0ZWQgYmFsYW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIncyBhbGxvd2FuY2UKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7IC8vIFVwZGF0ZSB0b3RhbFN1cHBseQogICAgICAgIEJ1cm4oX2Zyb20sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCgpjb250cmFjdCBNeUFkdmFuY2VkVG9rZW4gaXMgb3duZWQsIHRva2VuIHsKICAgIHVpbnQyNTYgcHVibGljIHNlbGxQcmljZTsKICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBNeUFkdmFuY2VkVG9rZW4oCiAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICApIHRva2VuKGluaXRpYWxTdXBwbHksIHRva2VuTmFtZSwgZGVjaW1hbFVuaXRzLCB0b2tlblN5bWJvbCkge30KCiAgICAvKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOyAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPiBfdmFsdWUpOyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID4gYmFsYW5jZU9mW190b10pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOyAvLyBDaGVjayBpZiBzZW5kZXIgaXMgZnJvemVuCiAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfdG9dKTsgLy8gQ2hlY2sgaWYgcmVjaXBpZW50IGlzIGZyb3plbgogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7IC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDcmVhdGUgYG1pbnRlZEFtb3VudGAgdG9rZW5zIGFuZCBzZW5kIGl0IHRvIGB0YXJnZXRgCiAgICAvLy8gQHBhcmFtIHRhcmdldCBBZGRyZXNzIHRvIHJlY2VpdmUgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBtaW50ZWRBbW91bnQgdGhlIGFtb3VudCBvZiB0b2tlbnMgaXQgd2lsbCByZWNlaXZlCiAgICBmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXIgewogICAgICAgIGJhbGFuY2VPZlt0YXJnZXRdICs9IG1pbnRlZEFtb3VudDsKICAgICAgICB0b3RhbFN1cHBseSArPSBtaW50ZWRBbW91bnQ7CiAgICAgICAgVHJhbnNmZXIoMCwgdGhpcywgbWludGVkQW1vdW50KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgYGZyZWV6ZT8gUHJldmVudCB8IEFsbG93YCBgdGFyZ2V0YCBmcm9tIHNlbmRpbmcgJiByZWNlaXZpbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIHRhcmdldCBBZGRyZXNzIHRvIGJlIGZyb3plbgogICAgLy8vIEBwYXJhbSBmcmVlemUgZWl0aGVyIHRvIGZyZWV6ZSBpdCBvciBub3QKICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBvbmx5T3duZXIgewogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsKICAgICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3cgdXNlcnMgdG8gYnV5IHRva2VucyBmb3IgYG5ld0J1eVByaWNlYCBldGggYW5kIHNlbGwgdG9rZW5zIGZvciBgbmV3U2VsbFByaWNlYCBldGgKICAgIC8vLyBAcGFyYW0gbmV3U2VsbFByaWNlIFByaWNlIHRoZSB1c2VycyBjYW4gc2VsbCB0byB0aGUgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gbmV3QnV5UHJpY2UgUHJpY2UgdXNlcnMgY2FuIGJ1eSBmcm9tIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3U2VsbFByaWNlLCB1aW50MjU2IG5ld0J1eVByaWNlKSBvbmx5T3duZXIgewogICAgICAgIHNlbGxQcmljZSA9IG5ld1NlbGxQcmljZTsKICAgICAgICBidXlQcmljZSA9IG5ld0J1eVByaWNlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEJ1eSB0b2tlbnMgZnJvbSBjb250cmFjdCBieSBzZW5kaW5nIGV0aGVyCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAvLyBjYWxjdWxhdGVzIHRoZSBhbW91bnQKICAgICAgICBfdHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgLy8gbWFrZXMgdGhlIHRyYW5zZmVycwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbGwgYGFtb3VudGAgdG9rZW5zIHRvIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNvbGQKICAgIGZ1bmN0aW9uIHNlbGwodWludDI1NiBhbW91bnQpIHsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBhbW91bnQgKiBzZWxsUHJpY2UpOyAvLyBjaGVja3MgaWYgdGhlIGNvbnRyYWN0IGhhcyBlbm91Z2ggZXRoZXIgdG8gYnV5CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7IC8vIG1ha2VzIHRoZSB0cmFuc2ZlcnMKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudCAqIHNlbGxQcmljZSk7IC8vIHNlbmRzIGV0aGVyIHRvIHRoZSBzZWxsZXIuIEl0J3MgaW1wb3J0YW50IHRvIGRvIHRoaXMgbGFzdCB0byBhdm9pZCByZWN1cnNpb24gYXR0YWNrcwogICAgfQp9Cgpjb250cmFjdCBOZXVyb1Rva2VuIGlzIE15QWR2YW5jZWRUb2tlbiB7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgdWludDI1NiBwdWJsaWMgZnJvemVuVG9rZW5zU3VwcGx5OwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gTmV1cm9Ub2tlbigpIE15QWR2YW5jZWRUb2tlbigxNzUwMDAwMCwgIk5ldXJvVG9rZW4iLCAwLCAiTlJUIikgewogICAgICAgIGZyZWV6ZVRva2VucygxNzQzNzAwMCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgRnJlZXplIGBmcm96ZW5BbW91bnRgIHRva2VucyBmcm9tIGJlaW5nIHNvbGQKICAgIC8vLyBAcGFyYW0gZnJvemVuQW1vdW50IGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgZnJvemVuCiAgICBmdW5jdGlvbiBmcmVlemVUb2tlbnModWludDI1NiBmcm96ZW5BbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbYWRkcmVzcyh0aGlzKV0gPj0gZnJvemVuQW1vdW50KTsgLy8gQ2hlY2sgaWYgdGhlIGNvbnRyYWN0IGhhcyBlbm91Z2gKCiAgICAgICAgZnJvemVuVG9rZW5zU3VwcGx5ICs9IGZyb3plbkFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbYWRkcmVzcyh0aGlzKV0gLT0gZnJvemVuQW1vdW50OwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlbGVhc2UgYHJlbGVhc2VkQW1vdW50YCB0b2tlbnMgdG8gY29udHJhY3QKICAgIC8vLyBAcGFyYW0gcmVsZWFzZWRBbW91bnQgYW1vdW50IG9mIHRva2VucyB0byBiZSByZWxlYXNlZAogICAgZnVuY3Rpb24gcmVsZWFzZVRva2Vucyh1aW50MjU2IHJlbGVhc2VkQW1vdW50KSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoZnJvemVuVG9rZW5zU3VwcGx5ID49IHJlbGVhc2VkQW1vdW50KTsgLy8gQ2hlY2sgaWYgdGhlIGNvbnRyYWN0IGhhcyBlbm91Z2ggcmVsZWFzZWQgdG9rZW5zCgogICAgICAgIGZyb3plblRva2Vuc1N1cHBseSAtPSByZWxlYXNlZEFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbYWRkcmVzcyh0aGlzKV0gKz0gcmVsZWFzZWRBbW91bnQ7CiAgICB9Cn0='.
	

]
