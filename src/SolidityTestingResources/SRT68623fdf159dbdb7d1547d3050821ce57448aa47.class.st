Class {
	#name : #SRT68623fdf159dbdb7d1547d3050821ce57448aa47,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT68623fdf159dbdb7d1547d3050821ce57448aa47 >> base64 [
	^ ''.
	

]
