Class {
	#name : #SRT54a2d42a40F51259DedD1978F6c118a0f0Eff078,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT54a2d42a40F51259DedD1978F6c118a0f0Eff078 >> base64 [
	^ ''.
	

]
