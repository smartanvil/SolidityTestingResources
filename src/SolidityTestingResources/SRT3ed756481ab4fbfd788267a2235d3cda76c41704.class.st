Class {
	#name : #SRT3ed756481ab4fbfd788267a2235d3cda76c41704,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3ed756481ab4fbfd788267a2235d3cda76c41704 >> base64 [
	^ ''.
	

]
