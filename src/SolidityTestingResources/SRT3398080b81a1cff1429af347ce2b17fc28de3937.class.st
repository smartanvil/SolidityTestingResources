Class {
	#name : #SRT3398080b81a1cff1429af347ce2b17fc28de3937,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3398080b81a1cff1429af347ce2b17fc28de3937 >> base64 [
	^ ''.
	

]
