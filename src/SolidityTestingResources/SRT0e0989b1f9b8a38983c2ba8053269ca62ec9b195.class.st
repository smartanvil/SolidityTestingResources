Class {
	#name : #SRT0e0989b1f9b8a38983c2ba8053269ca62ec9b195,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0e0989b1f9b8a38983c2ba8053269ca62ec9b195 >> base64 [
	^ ''.
	

]
