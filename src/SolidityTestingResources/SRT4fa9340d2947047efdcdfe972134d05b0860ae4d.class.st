Class {
	#name : #SRT4fa9340d2947047efdcdfe972134d05b0860ae4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4fa9340d2947047efdcdfe972134d05b0860ae4d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjIxOwoKY29udHJhY3QgU2FmZU1hdGggewogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgTUFYX1VJTlQyNTYgPQogICAgICAgIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBwdXJlIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLSB5KSByZXZlcnQoKTsKICAgICAgICByZXR1cm4geCArIHk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBpZiAoeCA8IHkpIHJldmVydCgpOwogICAgICAgIHJldHVybiB4IC0geTsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgeCwgdWludDI1NiB5KSBwdXJlIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGlmICh5ID09IDApIHJldHVybiAwOwogICAgICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLyB5KSByZXZlcnQoKTsKICAgICAgICByZXR1cm4geCAqIHk7CiAgICB9Cn0KY29udHJhY3QgVG9rZW57CiAgICAvLyB0b2tlbuaAu+mHj++8jOm7mOiupOS8muS4unB1YmxpY+WPmOmHj+eUn+aIkOS4gOS4qmdldHRlcuWHveaVsOaOpeWPo++8jOWQjeensOS4unRvdGFsU3VwcGx5KCkuCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLy8g6I635Y+W6LSm5oi3X293bmVy5oul5pyJdG9rZW7nmoTmlbDph48gCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8v5LuO5raI5oGv5Y+R6YCB6ICF6LSm5oi35Lit5b6AX3Rv6LSm5oi36L2s5pWw6YeP5Li6X3ZhbHVl55qEdG9rZW4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAvL+S7jui0puaIt19mcm9t5Lit5b6A6LSm5oi3X3Rv6L2s5pWw6YeP5Li6X3ZhbHVl55qEdG9rZW7vvIzkuI5hcHByb3Zl5pa55rOV6YWN5ZCI5L2/55SoCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucwogICAgICAgIChib29sIHN1Y2Nlc3MpOwoKICAgIC8v5raI5oGv5Y+R6YCB6LSm5oi36K6+572u6LSm5oi3X3NwZW5kZXLog73ku47lj5HpgIHotKbmiLfkuK3ovazlh7rmlbDph4/kuLpfdmFsdWXnmoR0b2tlbgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAvL+iOt+WPlui0puaIt19zcGVuZGVy5Y+v5Lul5LuO6LSm5oi3X293bmVy5Lit6L2s5Ye6dG9rZW7nmoTmlbDph48KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgCiAgICAgICAgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICAvL+WPkeeUn+i9rOi0puaXtuW/hemhu+imgeinpuWPkeeahOS6i+S7tiAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIC8v5b2T5Ye95pWwYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSnmiJDlip/miafooYzml7blv4Xpobvop6blj5HnmoTkuovku7YKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiAKICAgIF92YWx1ZSk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4sIFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy/pu5jorqR0b3RhbFN1cHBseSDkuI3kvJrotoXov4fmnIDlpKflgLwgKDJeMjU2IC0gMSkuCiAgICAgICAgLy/lpoLmnpzpmo/nnYDml7bpl7TnmoTmjqjnp7vlsIbkvJrmnInmlrDnmoR0b2tlbueUn+aIkO+8jOWImeWPr+S7peeUqOS4i+mdoui/meWPpemBv+WFjea6ouWHuueahOW8guW4uAogICAgICAgIC8vcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7Ly/ku47mtojmga/lj5HpgIHogIXotKbmiLfkuK3lh4/ljrt0b2tlbuaVsOmHj192YWx1ZQogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7Ly/lvoDmjqXmlLbotKbmiLflop7liqB0b2tlbuaVsOmHj192YWx1ZQogICAgICAgIGVtaXQgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOy8v6Kem5Y+R6L2s5biB5Lqk5piT5LqL5Lu2CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zCiAgICAgICAgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IAogICAgICAgIC8vIF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsvL+aOpeaUtui0puaIt+WinuWKoHRva2Vu5pWw6YePX3ZhbHVlCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7IC8v5pSv5Ye66LSm5oi3X2Zyb23lh4/ljrt0b2tlbuaVsOmHj192YWx1ZQogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsvL+a2iOaBr+WPkemAgeiAheWPr+S7peS7jui0puaIt19mcm9t5Lit6L2s5Ye655qE5pWw6YeP5YeP5bCRX3ZhbHVlCiAgICAgICAgZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOy8v6Kem5Y+R6L2s5biB5Lqk5piT5LqL5Lu2CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIGVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07Ly/lhYHorrhfc3BlbmRlcuS7jl9vd25lcuS4rei9rOWHuueahHRva2Vu5pWwCiAgICB9CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwp9Cgpjb250cmFjdCBaZXJvSG9vU3RhbmRhcmRUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsgCgogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsgICAgICAgICAgICAgICAgICAgLy/lkI3np7A6IGVnIFNpbW9uIEJ1Y2tzCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgICAgLy/mnIDlpJrnmoTlsI/mlbDkvY3mlbDvvIxIb3cgbWFueSBkZWNpbWFscyB0byBzaG93LiBpZS4gVGhlcmUgY291bGQgMTAwMCBiYXNlIHVuaXRzIHdpdGggMyBkZWNpbWFscy4gTWVhbmluZyAwLjk4MCBTQlggPSA5ODAgYmFzZSB1bml0cy4gSXQncyBsaWtlIGNvbXBhcmluZyAxIHdlaSB0byAxIGV0aGVyLgogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7ICAgICAgICAgICAgICAgLy90b2tlbueugOensDogZWcgU0JYCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnemVybyAxLjAuMCc7ICAgIC8v54mI5pysCgogICAgZnVuY3Rpb24gWmVyb0hvb1N0YW5kYXJkVG9rZW4odWludDI1NiBfaW5pdGlhbEFtb3VudCwgc3RyaW5nIF90b2tlbk5hbWUsIHVpbnQ4IF9kZWNpbWFsVW5pdHMsIHN0cmluZyBfdG9rZW5TeW1ib2wpIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbEFtb3VudDsgLy8g5Yid5aeLdG9rZW7mlbDph4/nu5nkuojmtojmga/lj5HpgIHogIUKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsQW1vdW50OyAgICAgICAgIC8vIOiuvue9ruWIneWni+aAu+mHjwogICAgICAgIG5hbWUgPSBfdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAvLyB0b2tlbuWQjeensAogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgIC8vIOWwj+aVsOS9jeaVsAogICAgICAgIHN5bWJvbCA9IF90b2tlblN5bWJvbDsgICAgICAgICAgICAgLy8gdG9rZW7nroDnp7AKICAgIH0KCiAgICAvKiBBcHByb3ZlcyBhbmQgdGhlbiBjYWxscyB0aGUgcmVjZWl2aW5nIGNvbnRyYWN0ICovCgogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYyByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIGVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgLy9jYWxsIHRoZSByZWNlaXZlQXBwcm92YWwgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0IHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0IGhhdmUgdG8gaW5jbHVkZSBhIGNvbnRyYWN0IGluIGhlcmUganVzdCBmb3IgdGhpcy4KICAgICAgICAvL3JlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW5Db250cmFjdCwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICAvL2l0IGlzIGFzc3VtZWQgdGhhdCB3aGVuIGRvZXMgdGhpcyB0aGF0IHRoZSBjYWxsICpzaG91bGQqIHN1Y2NlZWQsIG90aGVyd2lzZSBvbmUgd291bGQgdXNlIHZhbmlsbGEgYXBwcm92ZSBpbnN0ZWFkLgogICAgICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChieXRlczQoYnl0ZXMzMihrZWNjYWsyNTYoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSkpLCBtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCn0='.
	

]
