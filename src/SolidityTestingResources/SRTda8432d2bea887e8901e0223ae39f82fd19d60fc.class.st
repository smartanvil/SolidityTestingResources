Class {
	#name : #SRTda8432d2bea887e8901e0223ae39f82fd19d60fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTda8432d2bea887e8901e0223ae39f82fd19d60fc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNzsKCmNvbnRyYWN0IGJldF92YXJpb3VzewogICAgZW51bSBTdGF0ZSB7IFN0YXJ0ZWQsIExvY2tlZCB9CiAgU3RhdGUgcHVibGljIHN0YXRlID0gU3RhdGUuU3RhcnRlZDsKICBzdHJ1Y3QgR3Vlc3N7CiAgICBhZGRyZXNzIGFkZHI7CiAgICB1aW50ICAgIGd1ZXNzOwogIH0KICB1aW50IGFycmF5c2l6ZT0xMDAwOwogIHVpbnQgY29uc3RhbnQgbWF4Z3Vlc3M9MTAwMDAwMDsKICB1aW50IGJldHRpbmdwcmljZSA9IDAuMDEgZXRoZXI7CiAgR3Vlc3NbMTAwMF0gZ3Vlc3NlczsKICB1aW50ICAgIG51bWd1ZXNzZXMgPSAwOwogIGJ5dGVzMzIgY3VyaGFzaCA9ICcnOwogIAogIHVpbnQgc3Rhc3RpY3NhcnJheWl0ZW1zID0gMjA7CiAgdWludFsyMF0gc3RhdGlzdGljczsKCiAgdWludCBfZ2FtZWluZGV4ID0gMTsKICAKICBzdHJ1Y3QgV2lubmVyewogICAgYWRkcmVzcyBhZGRyOwogIH0KICBXaW5uZXJbMTAwMF0gd2lubm5lcnM7CiAgdWludCAgICBudW13aW5uZXJzID0gMDsKCiAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBfc3RhdGUpIHsKICAgICAgcmVxdWlyZShzdGF0ZSA9PSBfc3RhdGUpOwogICAgICBfOwogIH0KIAogIGFkZHJlc3MgZGV2ZWxvcGVyID0gMHgwOwogIGV2ZW50IFNlbnRQcml6ZVRvV2lubmVyKGFkZHJlc3Mgd2lubmVyLCB1aW50IG1vbmV5LCB1aW50IGd1ZXNzLCB1aW50IGdhbWVpbmRleCwgdWludCBsb3R0ZXJ5bnVtYmVyLCB1aW50IHRpbWVzdGFtcCk7CiAgZXZlbnQgU2VudERldmVsb3BlckZlZSh1aW50IGFtb3VudCwgdWludCBiYWxhbmNlKTsKCiAgZnVuY3Rpb24gYmV0X3ZhcmlvdXMoKSAKICB7CiAgICBpZihkZXZlbG9wZXI9PWFkZHJlc3MoMCkpewogICAgICBkZXZlbG9wZXIgPSBtc2cuc2VuZGVyOwogICAgfQogIH0KCiAgZnVuY3Rpb24gc2V0QmV0dGluZ0NvbmRpdGlvbih1aW50IF9jb250ZW5kZXJzLCB1aW50IF9iZXR0aW5ncHJpY2UpCiAgewogICAgaWYobXNnLnNlbmRlciAhPSBkZXZlbG9wZXIpCiAgICAgIHJldHVybjsKICAJYXJyYXlzaXplICA9IF9jb250ZW5kZXJzOwogIAlpZihhcnJheXNpemU+MTAwMCkKICAJICBhcnJheXNpemUgPSAxMDAwOwogIAliZXR0aW5ncHJpY2UgPSBfYmV0dGluZ3ByaWNlOwogIH0KICAKICBmdW5jdGlvbiBnZXRNYXhDb250ZW5kZXJzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50KXsKICAJcmV0dXJuIGFycmF5c2l6ZTsKICB9CgogIGZ1bmN0aW9uIGdldEJldHRpbmdQcmljZSgpIGNvbnN0YW50IHJldHVybnModWludCl7CiAgCXJldHVybiBiZXR0aW5ncHJpY2U7CiAgfQogICAgCiAgZnVuY3Rpb24gZmluZFdpbm5lcnModWludCB2YWx1ZSkgcmV0dXJucyAodWludCkKICB7CiAgICBudW13aW5uZXJzID0gMDsKICAgIHVpbnQgbGFzdGRpZmYgPSBtYXhndWVzczsKICAgIHVpbnQgaSA9IDA7CiAgICBpbnQgZGlmZiA9IDA7CiAgICB1aW50IGd1ZXNzID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1ndWVzc2VzOyBpKyspIHsKICAgICAgZGlmZiA9IChpbnQpKChpbnQpKHZhbHVlKS0oaW50KShndWVzc2VzW2ldLmd1ZXNzKSk7CiAgICAgIGlmKGRpZmY8MCkKICAgICAgICBkaWZmID0gZGlmZiotMTsKICAgICAgaWYobGFzdGRpZmY+KHVpbnQpKGRpZmYpKXsKICAgICAgICBndWVzcyA9IGd1ZXNzZXNbaV0uZ3Vlc3M7CiAgICAgICAgbGFzdGRpZmYgPSAodWludCkoZGlmZik7CiAgICAgIH0KICAgIH0KICAgIAogICAgZm9yIChpID0gMDsgaSA8IG51bWd1ZXNzZXM7IGkrKykgewogICAgICBkaWZmID0gKGludCkoKGludCkodmFsdWUpLShpbnQpKGd1ZXNzZXNbaV0uZ3Vlc3MpKTsKICAgICAgaWYoZGlmZjwwKQogICAgICAgIGRpZmYgPSBkaWZmKi0xOwogICAgICBpZihsYXN0ZGlmZj09dWludChkaWZmKSl7CiAgICAgICAgd2lubm5lcnNbbnVtd2lubmVycysrXS5hZGRyID0gZ3Vlc3Nlc1tpXS5hZGRyOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZ3Vlc3M7CiAgfQogIAogIGZ1bmN0aW9uIGdldERldmVsb3BlckFkZHJlc3MoKSBjb25zdGFudCByZXR1cm5zKGFkZHJlc3MpCiAgewogICAgcmV0dXJuIGRldmVsb3BlcjsKICB9CiAgCiAgZnVuY3Rpb24gZ2V0RGV2ZWxvcGVyRmVlKCkgY29uc3RhbnQgcmV0dXJucyh1aW50KQogIHsKICAgIHVpbnQgZGV2ZWxvcGVyZmVlID0gdGhpcy5iYWxhbmNlLzEwMDsKICAgIHJldHVybiBkZXZlbG9wZXJmZWU7CiAgfQogIAogIGZ1bmN0aW9uIGdldEJhbGFuY2UoKSBjb25zdGFudCByZXR1cm5zKHVpbnQpCiAgewogICAgIHJldHVybiB0aGlzLmJhbGFuY2U7CiAgfQogIAogIGZ1bmN0aW9uIGdldExvdHRlcnlNb25leSgpIGNvbnN0YW50IHJldHVybnModWludCkKICB7CiAgICB1aW50IGRldmVsb3BlcmZlZSA9IGdldERldmVsb3BlckZlZSgpOwogICAgdWludCBwcml6ZSA9ICh0aGlzLmJhbGFuY2UgLSBkZXZlbG9wZXJmZWUpLyhudW13aW5uZXJzPDE/MTpudW13aW5uZXJzKTsKICAgIHJldHVybiBwcml6ZTsKICB9CgogIGZ1bmN0aW9uIGdldEJldHRpbmdTdGFzdGljcygpIAogICAgcGF5YWJsZQogICAgcmV0dXJucyh1aW50WzIwXSkKICB7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA9PSBiZXR0aW5ncHJpY2UqMyk7CiAgICByZXR1cm4gc3RhdGlzdGljczsKICB9CiAgCiAgZnVuY3Rpb24gZ2V0QmV0dGluZ1N0YXR1cygpCiAgICBjb25zdGFudAogICAgcmV0dXJucyAodWludCwgdWludCwgdWludCwgdWludCwgdWludCkKICB7CiAgICByZXR1cm4gKCh1aW50KShzdGF0ZSksIG51bWd1ZXNzZXMsIGdldExvdHRlcnlNb25leSgpLCB0aGlzLmJhbGFuY2UsIGJldHRpbmdwcmljZSk7CiAgfQogIAogIGZ1bmN0aW9uIGZpbmlzaCgpCiAgewogICAgc3RhdGUgPSBTdGF0ZS5Mb2NrZWQ7CgogICAgdWludCBsb3R0ZXJ5bnVtYmVyID0gKHVpbnQoY3VyaGFzaCkrYmxvY2sudGltZXN0YW1wKSUobWF4Z3Vlc3MrMSk7CiAgICAvLyBub3cgdGhhdCB3ZSBrbm93IHRoZSByYW5kb20gbnVtYmVyIHdhcyBzYWZlbHkgZ2VuZXJhdGUsIGxldCdzIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByYW5kb20gbnVtYmVyLi4KICAgIHZhciBndWVzcyA9IGZpbmRXaW5uZXJzKGxvdHRlcnludW1iZXIpOwogICAgdWludCBwcml6ZSA9IGdldExvdHRlcnlNb25leSgpOwogICAgdWludCByZW1haW4gPSB0aGlzLmJhbGFuY2UgLSAocHJpemUqbnVtd2lubmVycyk7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW13aW5uZXJzOyBpKyspIHsKICAgICAgYWRkcmVzcyB3aW5uZXIgPSB3aW5ubmVyc1tpXS5hZGRyOwogICAgICB3aW5uZXIudHJhbnNmZXIocHJpemUpOwogICAgICBTZW50UHJpemVUb1dpbm5lcih3aW5uZXIsIHByaXplLCBndWVzcywgX2dhbWVpbmRleCwgbG90dGVyeW51bWJlciwgYmxvY2sudGltZXN0YW1wKTsKICAgIH0KICAgIC8vIGdpdmUgZGVsdmVvcGVyIHRoZSBtb25leSBsZWZ0IGJlaGluZAogICAgU2VudERldmVsb3BlckZlZShyZW1haW4sIHRoaXMuYmFsYW5jZSk7CiAgICBkZXZlbG9wZXIudHJhbnNmZXIocmVtYWluKTsgCiAgICAKICAgIG51bWd1ZXNzZXMgPSAwOwogICAgZm9yIChpID0gMDsgaSA8IHN0YXN0aWNzYXJyYXlpdGVtczsgaSsrKSB7CiAgICAgIHN0YXRpc3RpY3NbaV0gPSAwOwogICAgfQogICAgX2dhbWVpbmRleCsrOwogICAgc3RhdGUgPSBTdGF0ZS5TdGFydGVkOwogIH0KCiAgZnVuY3Rpb24gYWRkZ3Vlc3ModWludCBndWVzcykgCiAgICBpblN0YXRlKFN0YXRlLlN0YXJ0ZWQpCiAgICBwYXlhYmxlCiAgewogICAgcmVxdWlyZShtc2cudmFsdWUgPT0gYmV0dGluZ3ByaWNlKTsKICAgIAogICAgdWludCBkaXZpZGVieSA9IG1heGd1ZXNzL3N0YXN0aWNzYXJyYXlpdGVtczsKICAgIGN1cmhhc2ggPSBzaGEyNTYoYmxvY2sudGltZXN0YW1wLCBibG9jay5jb2luYmFzZSwgYmxvY2suZGlmZmljdWx0eSwgY3VyaGFzaCk7CiAgICBpZigodWludCkobnVtZ3Vlc3NlcysxKTw9YXJyYXlzaXplKSB7CiAgICAgIGd1ZXNzZXNbbnVtZ3Vlc3NlcysrXSA9IEd1ZXNzKG1zZy5zZW5kZXIsIGd1ZXNzKTsKICAgICAgdWludCBzdGF0aW5kZXggPSBndWVzcyAvIGRpdmlkZWJ5OwogICAgICBpZihzdGF0aW5kZXg+PXN0YXN0aWNzYXJyYXlpdGVtcykgc3RhdGluZGV4ID0gc3Rhc3RpY3NhcnJheWl0ZW1zLTE7CiAgICAgIHN0YXRpc3RpY3Nbc3RhdGluZGV4XSArKzsKICAgICAgaWYoKHVpbnQpKG51bWd1ZXNzZXMpPj1hcnJheXNpemUpewogICAgICAgIGZpbmlzaCgpOwogICAgICB9CiAgICB9CiAgfQp9'.
	

]
