Class {
	#name : #SRT4055ce7003525c966beff40cfe6f04ab4c0dd82f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4055ce7003525c966beff40cfe6f04ab4c0dd82f >> base64 [
	^ ''.
	

]
