Class {
	#name : #SRTd814203dba42d2c708cb52381dc1f471329da32c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd814203dba42d2c708cb52381dc1f471329da32c >> base64 [
	^ ''.
	

]
