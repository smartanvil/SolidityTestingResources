Class {
	#name : #SRT218ce76c54c3b7c716969e206ee35461dd70b015,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT218ce76c54c3b7c716969e206ee35461dd70b015 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCmNvbnRyYWN0IEFic3RyYWN0RU5TIHsKICAgIGZ1bmN0aW9uIG93bmVyKGJ5dGVzMzIgbm9kZSkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIHJlc29sdmVyKGJ5dGVzMzIgbm9kZSkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIHR0bChieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnModWludDY0KTsKICAgIGZ1bmN0aW9uIHNldE93bmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyBvd25lcik7CiAgICBmdW5jdGlvbiBzZXRTdWJub2RlT3duZXIoYnl0ZXMzMiBub2RlLCBieXRlczMyIGxhYmVsLCBhZGRyZXNzIG93bmVyKTsKICAgIGZ1bmN0aW9uIHNldFJlc29sdmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyByZXNvbHZlcik7CiAgICBmdW5jdGlvbiBzZXRUVEwoYnl0ZXMzMiBub2RlLCB1aW50NjQgdHRsKTsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgb3duZXIgb2YgYSBub2RlIGFzc2lnbnMgYSBuZXcgb3duZXIgdG8gYSBzdWJub2RlLgogICAgZXZlbnQgTmV3T3duZXIoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGJ5dGVzMzIgaW5kZXhlZCBsYWJlbCwgYWRkcmVzcyBvd25lcik7CgogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIG93bmVyIG9mIGEgbm9kZSB0cmFuc2ZlcnMgb3duZXJzaGlwIHRvIGEgbmV3IGFjY291bnQuCiAgICBldmVudCBUcmFuc2ZlcihieXRlczMyIGluZGV4ZWQgbm9kZSwgYWRkcmVzcyBvd25lcik7CgogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIHJlc29sdmVyIGZvciBhIG5vZGUgY2hhbmdlcy4KICAgIGV2ZW50IE5ld1Jlc29sdmVyKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBhZGRyZXNzIHJlc29sdmVyKTsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgVFRMIG9mIGEgbm9kZSBjaGFuZ2VzCiAgICBldmVudCBOZXdUVEwoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIHVpbnQ2NCB0dGwpOwp9CgovKioKICogQSBzaW1wbGUgcmVzb2x2ZXIgYW55b25lIGNhbiB1c2U7IG9ubHkgYWxsb3dzIHRoZSBvd25lciBvZiBhIG5vZGUgdG8gc2V0IGl0cwogKiBhZGRyZXNzLgogKi8KY29udHJhY3QgUHVibGljUmVzb2x2ZXIgewogICAgYnl0ZXM0IGNvbnN0YW50IEFERFJfSU5URVJGQUNFX0lEID0gMHgzYjNiNTdkZTsKICAgIGJ5dGVzNCBjb25zdGFudCBDT05URU5UX0lOVEVSRkFDRV9JRCA9IDB4ZDgzODlkYzU7CiAgICBieXRlczQgY29uc3RhbnQgQUJJX0lOVEVSRkFDRV9JRCA9IDB4MjIwM2FiNTY7CiAgICBieXRlczQgY29uc3RhbnQgUFVCS0VZX0lOVEVSRkFDRV9JRCA9IDB4Yzg2OTAyMzM7CgogICAgc3RydWN0IFB1YmxpY0tleSB7CiAgICAgICAgYnl0ZXMzMiB4OwogICAgICAgIGJ5dGVzMzIgeTsKICAgIH0KCiAgICBzdHJ1Y3QgUmVjb3JkIHsKICAgICAgICBhZGRyZXNzIGFkZHI7CiAgICAgICAgYnl0ZXMzMiBjb250ZW50OwogICAgICAgIFB1YmxpY0tleSBwdWJrZXk7CiAgICAgICAgbWFwcGluZyh1aW50MjU2PT5ieXRlcykgYWJpczsKICAgIH0KCiAgICBBYnN0cmFjdEVOUyBlbnM7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PlJlY29yZCkgcmVjb3JkczsKCiAgICBtb2RpZmllciBvbmx5X293bmVyKGJ5dGVzMzIgbm9kZSkgewogICAgICAgIGlmKGVucy5vd25lcihub2RlKSAhPSBtc2cuc2VuZGVyKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQ29uc3RydWN0b3IuCiAgICAgKiBAcGFyYW0gZW5zQWRkciBUaGUgRU5TIHJlZ2lzdHJhciBjb250cmFjdC4KICAgICAqLwogICAgZnVuY3Rpb24gUHVibGljUmVzb2x2ZXIoQWJzdHJhY3RFTlMgZW5zQWRkcikgewogICAgICAgIGVucyA9IGVuc0FkZHI7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHJlc29sdmVyIGltcGxlbWVudHMgdGhlIGludGVyZmFjZSBzcGVjaWZpZWQgYnkgdGhlIHByb3ZpZGVkIGhhc2guCiAgICAgKiBAcGFyYW0gaW50ZXJmYWNlSUQgVGhlIElEIG9mIHRoZSBpbnRlcmZhY2UgdG8gY2hlY2sgZm9yLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBjb250cmFjdCBpbXBsZW1lbnRzIHRoZSByZXF1ZXN0ZWQgaW50ZXJmYWNlLgogICAgICovCiAgICBmdW5jdGlvbiBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgaW50ZXJmYWNlSUQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gaW50ZXJmYWNlSUQgPT0gQUREUl9JTlRFUkZBQ0VfSUQgfHwKICAgICAgICAgICAgICAgaW50ZXJmYWNlSUQgPT0gQ09OVEVOVF9JTlRFUkZBQ0VfSUQgfHwKICAgICAgICAgICAgICAgaW50ZXJmYWNlSUQgPT0gQUJJX0lOVEVSRkFDRV9JRCB8fAogICAgICAgICAgICAgICBpbnRlcmZhY2VJRCA9PSBQVUJLRVlfSU5URVJGQUNFX0lEOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuCiAgICAgKiBAcmV0dXJuIFRoZSBhc3NvY2lhdGVkIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZHIoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIHJldCkgewogICAgICAgIHJldCA9IHJlY29yZHNbbm9kZV0uYWRkcjsKICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgdGhlIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLgogICAgICogTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGF0IG5vZGUgaW4gdGhlIEVOUyByZWdpc3RyeS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBhZGRyIFRoZSBhZGRyZXNzIHRvIHNldC4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QWRkcihieXRlczMyIG5vZGUsIGFkZHJlc3MgYWRkcikgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgcmVjb3Jkc1tub2RlXS5hZGRyID0gYWRkcjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnQgaGFzaCBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNvdXJjZSB0eXBlIGlzIG5vdCBzdGFuZGFyZGl6ZWQsIGFuZCB3aWxsIGxpa2VseSBjaGFuZ2UKICAgICAqIGluIGZ1dHVyZSB0byBhIHJlc291cmNlIHR5cGUgYmFzZWQgb24gbXVsdGloYXNoLgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5LgogICAgICogQHJldHVybiBUaGUgYXNzb2NpYXRlZCBjb250ZW50IGhhc2guCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRlbnQoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zIChieXRlczMyIHJldCkgewogICAgICAgIHJldCA9IHJlY29yZHNbbm9kZV0uY29udGVudDsKICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgdGhlIGNvbnRlbnQgaGFzaCBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoYXQgbm9kZSBpbiB0aGUgRU5TIHJlZ2lzdHJ5LgogICAgICogTm90ZSB0aGF0IHRoaXMgcmVzb3VyY2UgdHlwZSBpcyBub3Qgc3RhbmRhcmRpemVkLCBhbmQgd2lsbCBsaWtlbHkgY2hhbmdlCiAgICAgKiBpbiBmdXR1cmUgdG8gYSByZXNvdXJjZSB0eXBlIGJhc2VkIG9uIG11bHRpaGFzaC4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBoYXNoIFRoZSBjb250ZW50IGhhc2ggdG8gc2V0CiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldENvbnRlbnQoYnl0ZXMzMiBub2RlLCBieXRlczMyIGhhc2gpIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIHJlY29yZHNbbm9kZV0uY29udGVudCA9IGhhc2g7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgQUJJIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIERlZmluZWQgaW4gRUlQMjA1LgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5CiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVzIEEgYml0d2lzZSBPUiBvZiB0aGUgQUJJIGZvcm1hdHMgYWNjZXB0ZWQgYnkgdGhlIGNhbGxlci4KICAgICAqIEByZXR1cm4gY29udGVudFR5cGUgVGhlIGNvbnRlbnQgdHlwZSBvZiB0aGUgcmV0dXJuIHZhbHVlCiAgICAgKiBAcmV0dXJuIGRhdGEgVGhlIEFCSSBkYXRhCiAgICAgKi8KICAgIGZ1bmN0aW9uIEFCSShieXRlczMyIG5vZGUsIHVpbnQyNTYgY29udGVudFR5cGVzKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGNvbnRlbnRUeXBlLCBieXRlcyBkYXRhKSB7CiAgICAgICAgdmFyIHJlY29yZCA9IHJlY29yZHNbbm9kZV07CiAgICAgICAgZm9yKGNvbnRlbnRUeXBlID0gMTsgY29udGVudFR5cGUgPD0gY29udGVudFR5cGVzOyBjb250ZW50VHlwZSA8PD0gMSkgewogICAgICAgICAgICBpZigoY29udGVudFR5cGUgJiBjb250ZW50VHlwZXMpICE9IDAgJiYgcmVjb3JkLmFiaXNbY29udGVudFR5cGVdLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGRhdGEgPSByZWNvcmQuYWJpc1tjb250ZW50VHlwZV07CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29udGVudFR5cGUgPSAwOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgQUJJIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIE5vZGVzIG1heSBoYXZlIG9uZSBBQkkgb2YgZWFjaCBjb250ZW50IHR5cGUuIFRvIHJlbW92ZSBhbiBBQkksIHNldCBpdCB0bwogICAgICogdGhlIGVtcHR5IHN0cmluZy4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBjb250ZW50VHlwZSBUaGUgY29udGVudCB0eXBlIG9mIHRoZSBBQkkKICAgICAqIEBwYXJhbSBkYXRhIFRoZSBBQkkgZGF0YS4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QUJJKGJ5dGVzMzIgbm9kZSwgdWludDI1NiBjb250ZW50VHlwZSwgYnl0ZXMgZGF0YSkgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgLy8gQ29udGVudCB0eXBlcyBtdXN0IGJlIHBvd2VycyBvZiAyCiAgICAgICAgaWYoKChjb250ZW50VHlwZSAtIDEpICYgY29udGVudFR5cGUpICE9IDApIHRocm93OwogICAgICAgIAogICAgICAgIHJlY29yZHNbbm9kZV0uYWJpc1tjb250ZW50VHlwZV0gPSBkYXRhOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIFNFQ1AyNTZrMSBwdWJsaWMga2V5IGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIERlZmluZWQgaW4gRUlQIDYxOS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBFTlMgbm9kZSB0byBxdWVyeQogICAgICogQHJldHVybiB4LCB5IHRoZSBYIGFuZCBZIGNvb3JkaW5hdGVzIG9mIHRoZSBjdXJ2ZSBwb2ludCBmb3IgdGhlIHB1YmxpYyBrZXkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHB1YmtleShieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgeCwgYnl0ZXMzMiB5KSB7CiAgICAgICAgcmV0dXJuIChyZWNvcmRzW25vZGVdLnB1YmtleS54LCByZWNvcmRzW25vZGVdLnB1YmtleS55KTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBTZXRzIHRoZSBTRUNQMjU2azEgcHVibGljIGtleSBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkKICAgICAqIEBwYXJhbSB4IHRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIGN1cnZlIHBvaW50IGZvciB0aGUgcHVibGljIGtleS4KICAgICAqIEBwYXJhbSB5IHRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIGN1cnZlIHBvaW50IGZvciB0aGUgcHVibGljIGtleS4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0UHVia2V5KGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiB4LCBieXRlczMyIHkpIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIHJlY29yZHNbbm9kZV0ucHVia2V5ID0gUHVibGljS2V5KHgsIHkpOwogICAgfQp9'.
	

]
