Class {
	#name : #SRT604e244d5157c3ae734642364ace6c633fb1f278,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT604e244d5157c3ae734642364ace6c633fb1f278 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLy8gRXRoZXJuaXR5RmluYW5jaWFsT3JhY2xlIHYwLjIKLy8gQGV0aGVybml0eS5saXZlCgoKY29udHJhY3QgQ2FsbGVyIHsKICAgIGZ1bmN0aW9uIEVGT2NhbGxCYWNrKHN0cmluZyBfcmVzcG9uc2UpOwp9CgoKY29udHJhY3QgRXRoZXJuaXR5RmluYW5jaWFsT3JhY2xlewogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgcHVibGljIG9yYWNsZUFkZHJlc3M7CiAgICB1aW50IHB1YmxpYyBjb2xsZWN0ZWRGZWU7IAogICAgdWludCBwdWJsaWMgZmVlUHJpY2UgPSAwLjAwMDUgZXRoZXI7CiAgICB1aW50IHB1YmxpYyBnYXNMaW1pdCA9IDUwMDAwOwogICAgdWludCBwdWJsaWMgZ2FzUHJpY2UgPSA0MDAwMDAwMDAwMCB3ZWk7CiAgICAKICAgIHN0cnVjdCBVc2VyIHsKICAgIAlzdHJpbmcgcmVzcG9uc2U7CiAgICAJYm9vbCBjYWxsQmFjazsKICAgIAlib29sIGFza2VkOwogICAgCXVpbnQgYmFsYW5jZTsKICAgIAlib29sIGJhbm5lZDsKICAgIH0KCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gVXNlcikgcHVibGljIHVzZXJzOwoKICAgIAogICAgbW9kaWZpZXIgb25seU93bmVyewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3JhY2xlewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvcmFjbGVBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lck9yT3JhY2xlIHsKICAgIAlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBvcmFjbGVBZGRyZXNzKTsKICAgIAlfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdEJhbm5lZCB7CiAgICAgICAgcmVxdWlyZSggdXNlcnNbbXNnLnNlbmRlcl0uYmFubmVkID09IGZhbHNlICk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciByZWNlaXZlUGF5bWVudCB7CiAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0uYmFsYW5jZSA9IHVzZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgKyBtc2cudmFsdWU7CiAgICAgICAgXzsKICAgIH0KCiAgICBldmVudCBSZXF1ZXN0IChzdHJpbmcgX2NvaW4gLCBzdHJpbmcgX2FnYWluc3RDb2luICwgYWRkcmVzcyBfYWRkcmVzcyAsIHVpbnQgX2dhc1ByaWNlICwgdWludCBfZ2FzTGltaXQgKTsKICAgIGV2ZW50IFJlc3BvbnNlIChhZGRyZXNzIF9hZGRyZXNzICwgc3RyaW5nIF9yZXNwb25zZSk7CiAgICBldmVudCBFcnJvciAoc3RyaW5nIF9lcnJvcik7CiAgICAKCiAgICAvLyBNYWluIGNvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBFdGhlcm5pdHlGaW5hbmNpYWxPcmFjbGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG9yYWNsZUFkZHJlc3MgPSBtc2cuc2VuZGVyOyAvLyAweGZiNTA5ZjY5MDBkMDMyNjUyMGM4Zjg4ZThmMTJjODM0NTlhMTk5ZWM7CiAgICB9ICAgCgogICAgLy8gUGF5YWJsZSB0byByZWNlaXZlIHBheW1lbnRzIGFuZCBzdG9yZXMgaW50byB0aGUgbWFwcGluZyB0aHJvdWdoIG1vZGlmaWVyCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHJlY2VpdmVQYXltZW50IHsKICAgIH0KCiAgICAvLyBSRVFVRVNUUwogICAgCiAgICBmdW5jdGlvbiByZXF1ZXN0RXRoZXJUb1VTRChib29sIF9jYWxsQmFjayAsIHVpbnQgX2dhc1ByaWNlICwgdWludCBfZ2FzTGltaXQpIHBheWFibGUgcmVjZWl2ZVBheW1lbnQgbm90QmFubmVkIHsKICAgICAgICAoX2dhc1ByaWNlICwgX2dhc0xpbWl0KSA9IHBheVRvT3JhY2xlIChfZ2FzUHJpY2UgLCBfZ2FzTGltaXQpOwogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmNhbGxCYWNrID0gX2NhbGxCYWNrOwogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmFza2VkID0gdHJ1ZTsKICAgICAgICBSZXF1ZXN0ICgnRVRIJywgJ1VTRCcsIG1zZy5zZW5kZXIgLCBfZ2FzUHJpY2UgLCBfZ2FzTGltaXQgKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVxdWVzdENvaW5Ub1VTRChzdHJpbmcgX2NvaW4gLCBib29sIF9jYWxsQmFjayAsIHVpbnQgX2dhc1ByaWNlICwgdWludCBfZ2FzTGltaXQpIHBheWFibGUgcmVjZWl2ZVBheW1lbnQgbm90QmFubmVkIHsKICAgIAkoX2dhc1ByaWNlICwgX2dhc0xpbWl0KSA9IHBheVRvT3JhY2xlIChfZ2FzUHJpY2UgLCBfZ2FzTGltaXQpOwogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmNhbGxCYWNrID0gX2NhbGxCYWNrOwogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmFza2VkID0gdHJ1ZTsKICAgICAgICBSZXF1ZXN0IChfY29pbiwgJ1VTRCcsIG1zZy5zZW5kZXIgLCBfZ2FzUHJpY2UgLCBfZ2FzTGltaXQgKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVxdWVzdFJhdGUoc3RyaW5nIF9jb2luLCBzdHJpbmcgX2FnYWluc3RDb2luICwgYm9vbCBfY2FsbEJhY2sgLCB1aW50IF9nYXNQcmljZSAsIHVpbnQgX2dhc0xpbWl0KSBwYXlhYmxlIHJlY2VpdmVQYXltZW50IG5vdEJhbm5lZCB7CiAgICAJKF9nYXNQcmljZSAsIF9nYXNMaW1pdCkgPSBwYXlUb09yYWNsZSAoX2dhc1ByaWNlICwgX2dhc0xpbWl0KTsKICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5jYWxsQmFjayA9IF9jYWxsQmFjazsKICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5hc2tlZCA9IHRydWU7CiAgICAgICAgUmVxdWVzdCAoX2NvaW4sIF9hZ2FpbnN0Q29pbiwgbXNnLnNlbmRlciAsIF9nYXNQcmljZSAsIF9nYXNMaW1pdCApOwogICAgfQoKCiAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgdWludCBhID0gY29sbGVjdGVkRmVlOwogICAgICAgICAgICBjb2xsZWN0ZWRGZWUgPSAwOyAKICAgICAgICAgICAgcmVxdWlyZShvd25lci5zZW5kKGEpKTsKICAgICAgICB9IGVsc2UgewoJICAgICAgICB1aW50IGIgPSB1c2Vyc1ttc2cuc2VuZGVyXS5iYWxhbmNlOwoJICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5iYWxhbmNlID0gMDsKCSAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyLnNlbmQoYikpOwoJICAgIAl9CiAgICB9CgoKICAgIC8vIEdFVFRFUlMKCiAgICBmdW5jdGlvbiBnZXRSZXNwb25zZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHN0cmluZyBfcmVzcG9uc2UpewogICAgICAgIHJldHVybiB1c2Vyc1ttc2cuc2VuZGVyXS5yZXNwb25zZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcmljZSh1aW50IF9nYXNQcmljZSAsIHVpbnQgX2dhc0xpbWl0KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50IF9wcmljZSkgewogICAgICAgIGlmIChfZ2FzUHJpY2UgPT0gMCkgX2dhc1ByaWNlID0gZ2FzUHJpY2U7CiAgICAgICAgaWYgKF9nYXNMaW1pdCA9PSAwKSBfZ2FzTGltaXQgPSBnYXNMaW1pdDsKICAgIAlhc3NlcnQoX2dhc0xpbWl0ICogX2dhc1ByaWNlIC8gX2dhc0xpbWl0ID09IF9nYXNQcmljZSk7IC8vIFRvIGF2b2lkIG92ZXJmbG93IGV4cGxvaXRhdGlvbgogICAgCXJldHVybiBmZWVQcmljZSArIF9nYXNMaW1pdCAqIF9nYXNQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBfYmFsYW5jZSkgewogICAgCXJldHVybiB1c2Vyc1ttc2cuc2VuZGVyXS5iYWxhbmNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJhbGFuY2UoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBfYmFsYW5jZSkgewoJCXJldHVybiB1c2Vyc1tfYWRkcmVzc10uYmFsYW5jZTsKICAgIH0KCgoKICAgIC8vIFNFVCBSRVNQT05TRSBGUk9NIE9SQUNMRQogICAgZnVuY3Rpb24gc2V0UmVzcG9uc2UgKGFkZHJlc3MgX3VzZXIsIHN0cmluZyBfcmVzdWx0KSBvbmx5T3JhY2xlIHsKCgkJcmVxdWlyZSggdXNlcnNbX3VzZXJdLmFza2VkICk7CgkJdXNlcnNbX3VzZXJdLmFza2VkID0gZmFsc2U7CgogICAgCWlmICggdXNlcnNbX3VzZXJdLmNhbGxCYWNrICkgewogICAgCQkvLyBDYWxsYmFjayBmdW5jdGlvbjogcGFzc2l2ZSwgZXhwZW5zaXZlLCBzb21ld2hhdCBwcml2YXRlCiAgICAgICAgCUNhbGxlciBfY2FsbGVyID0gQ2FsbGVyKF91c2VyKTsKICAgICAgICAJX2NhbGxlci5FRk9jYWxsQmFjayhfcmVzdWx0KTsKICAgIAkJfSBlbHNlIHsKICAgIAkvLyBNYXBwaW5nOiBhY3RpdmUsIGNoZWFwLCBwdWJsaWMKICAgICAgICB1c2Vyc1tfdXNlcl0ucmVzcG9uc2UgPSBfcmVzdWx0OwogICAgICAgIFJlc3BvbnNlKCBfdXNlciAsIF9yZXN1bHQgKTsKICAgIAl9CgogICAgfQoKCiAgICAvLyBJTlRFUk5BTCBGVU5DVElPTlMKCiAgICBmdW5jdGlvbiBwYXlUb09yYWNsZSAodWludCBfZ2FzUHJpY2UgLCB1aW50IF9nYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyh1aW50IF9wcmljZSAsIHVpbnQgX2xpbWl0KSB7CiAgICAgICAgaWYgKF9nYXNQcmljZSA9PSAwKSBfZ2FzUHJpY2UgPSBnYXNQcmljZTsKICAgICAgICBpZiAoX2dhc0xpbWl0ID09IDApIF9nYXNMaW1pdCA9IGdhc0xpbWl0OwoKICAgICAgICB1aW50IGdwID0gZ2V0UHJpY2UoX2dhc1ByaWNlLF9nYXNMaW1pdCk7CgogICAgICAgIHJlcXVpcmUgKHVzZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgPj0gZ3AgKTsKCiAgICAgICAgY29sbGVjdGVkRmVlICs9IGZlZVByaWNlOwogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgLT0gZ3A7CgogICAgICAgIHJlcXVpcmUob3JhY2xlQWRkcmVzcy5zZW5kKGdwIC0gZmVlUHJpY2UpKTsKICAgICAgICByZXR1cm4oX2dhc1ByaWNlLF9nYXNMaW1pdCk7CiAgICB9CgoKICAgIC8vIEFETUlOIEZVTkNUSU9OUwogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VPcmFjbGVBZGQoYWRkcmVzcyBfbmV3T3JhY2xlQWRkKSBvbmx5T3duZXIgewogICAgICAgIG9yYWNsZUFkZHJlc3MgPSBfbmV3T3JhY2xlQWRkOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEZlZVByaWNlKHVpbnQgX2ZlZVByaWNlKSBvbmx5T3duZXIgewogICAgICAgIGZlZVByaWNlID0gX2ZlZVByaWNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKSBvbmx5T3duZXJPck9yYWNsZSB7CiAgICAJZ2FzUHJpY2UgPSBfZ2FzUHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0R2FzTGltaXQodWludCBfZ2FzTGltaXQpIG9ubHlPd25lck9yT3JhY2xlIHsKICAgIAlnYXNMaW1pdCA9IF9nYXNMaW1pdDsKICAgIH0KCiAgICBmdW5jdGlvbiBlbWVyZ2VuY3lGbHVzaCgpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShvd25lci5zZW5kKHRoaXMuYmFsYW5jZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbihhZGRyZXNzIF91c2VyKSBvbmx5T3duZXJ7CiAgICAgICAgdXNlcnNbX3VzZXJdLmJhbm5lZCA9IHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGRlc0JhbihhZGRyZXNzIF91c2VyKSBvbmx5T3duZXJ7CiAgICAgICAgdXNlcnNbX3VzZXJdLmJhbm5lZCA9IGZhbHNlOwogICAgfQp9'.
	

]
