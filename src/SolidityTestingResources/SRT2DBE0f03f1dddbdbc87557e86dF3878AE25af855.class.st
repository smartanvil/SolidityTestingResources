Class {
	#name : #SRT2DBE0f03f1dddbdbc87557e86dF3878AE25af855,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2DBE0f03f1dddbdbc87557e86dF3878AE25af855 >> base64 [
	^ ''.
	

]
