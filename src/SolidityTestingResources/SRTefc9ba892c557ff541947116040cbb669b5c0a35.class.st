Class {
	#name : #SRTefc9ba892c557ff541947116040cbb669b5c0a35,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTefc9ba892c557ff541947116040cbb669b5c0a35 >> base64 [
	^ ''.
	

]
