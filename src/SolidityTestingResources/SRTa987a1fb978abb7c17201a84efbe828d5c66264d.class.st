Class {
	#name : #SRTa987a1fb978abb7c17201a84efbe828d5c66264d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa987a1fb978abb7c17201a84efbe828d5c66264d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIAogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCmNvbnRyYWN0IERyYWdvblRva2VuewogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKfQoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZS4KICogQ3Jvd2RzYWxlcyBoYXZlIGEgc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzLCB3aGVyZSBpbnZlc3RvcnMgY2FuIG1ha2UKICogdG9rZW4gcHVyY2hhc2VzIGFuZCB0aGUgY3Jvd2RzYWxlIHdpbGwgYXNzaWduIHRoZW0gdG9rZW5zIGJhc2VkCiAqIG9uIGEgdG9rZW4gcGVyIEVUSCByYXRlLiBGdW5kcyBjb2xsZWN0ZWQgYXJlIGZvcndhcmRlZCB0byBhIHdhbGxldAogKiBhcyB0aGV5IGFycml2ZS4gVGhlIGNvbnRyYWN0IHJlcXVpcmVzIGEgTWludGFibGVUb2tlbiB0aGF0IHdpbGwgYmUKICogbWludGVkIGFzIGNvbnRyaWJ1dGlvbnMgYXJyaXZlLCBub3RlIHRoYXQgdGhlIGNyb3dkc2FsZSBjb250cmFjdAogKiBtdXN0IGJlIG93bmVyIG9mIHRoZSB0b2tlbiBpbiBvcmRlciB0byBiZSBhYmxlIHRvIG1pbnQgaXQuCiAqLwpjb250cmFjdCBDcm93ZHNhbGUgaXMgT3duYWJsZXsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBEcmFnb25Ub2tlbiBwdWJsaWMgdG9rZW47CiAgCiAgLy8gVGhlIGFkZHJlc3Mgb2YgdG9rZW4gcmVzZXJ2ZXMKICBhZGRyZXNzIHB1YmxpYyB0b2tlblJlc2VydmU7CgogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gdG9rZW4gcmF0ZSBpbiB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlOwoKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqIEBwYXJhbSByZWxlYXNlVGltZSB0b2tlbnMgdW5sb2NrIHRpbWUKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgcmVsZWFzZVRpbWUpOwogIAogIC8qKgogICAqIGV2ZW50IHVwb24gZW5kVGltZSB1cGRhdGVkCiAgICovCiAgZXZlbnQgRW5kVGltZVVwZGF0ZWQoKTsKICAKICAvKioKICAgKiBEcmFnb24gdG9rZW4gcHJpY2UgdXBkYXRlZAogICAqLwogIGV2ZW50IERyYWdvblByaWNlVXBkYXRlZCgpOwogIAogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiByZWxlYXNpbmcKICAgKiBAcGFyYW0gaG9sZGVyIHdobyBpcyByZWxlYXNpbmcgaGlzIHRva2VucwogICAqLwogIGV2ZW50IFRva2VuUmVsZWFzZWQoYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludDI1NiBhbW91bnQpOwoKCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKCkgcHVibGljIHsKICAKICAgIG93bmVyID0gMHhGNjE1QWM0NzFFMDY2YjVhZTRCRDIxMUNDNTA0NGM3YTMxRTg5QzRlOyAvLyBvdmVycmlkaW5nIG93bmVyCiAgICBzdGFydFRpbWUgPSBub3c7CiAgICBlbmRUaW1lID0gMTUyMTE4NzIwMDsKICAgIHJhdGUgPSA1MDAwMDAwMDAwMDAwMDAwOyAvLyBwcmljZSBpbiB3ZWkKICAgIHdhbGxldCA9IDB4RjYxNUFjNDcxRTA2NmI1YWU0QkQyMTFDQzUwNDRjN2EzMUU4OUM0ZTsKICAgIHRva2VuID0gRHJhZ29uVG9rZW4oMHg4MTRGNjdmQTI4NmY3NTcyQjA0MUQwNDFiMUQ5OWI0MzJjOTE1NUVlKTsKICAgIHRva2VuUmVzZXJ2ZSA9IDB4RjYxNUFjNDcxRTA2NmI1YWU0QkQyMTFDQzUwNDRjN2EzMUU4OUM0ZTsKICB9CgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICB9CgogIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgdWludDI1NiB0b2tlbnMgPSBnZXRUb2tlbkFtb3VudCh3ZWlBbW91bnQpOwoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgIHVpbnQyNTYgbG9ja2VkRm9yID0gYXNzaWduVG9rZW5zKGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMsIGxvY2tlZEZvcik7CgogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIG5vdyA+IGVuZFRpbWU7CiAgfQoKICBmdW5jdGlvbiBnZXRUb2tlbkFtb3VudCh1aW50MjU2IHdlaUFtb3VudCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYW1vdW50ID0gd2VpQW1vdW50LmRpdihyYXRlKTsKICAgIHJldHVybiBhbW91bnQubXVsKDEwMDAwMDAwMCk7IC8vIG11bHRpcGx5IHdpdGggZGVjaW1hbHMKICB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2U7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVFbmRUaW1lKHVpbnQyNTYgbmV3VGltZSkgb25seU93bmVyIGV4dGVybmFsIHsKICAgIHJlcXVpcmUobmV3VGltZSA+IHN0YXJ0VGltZSk7CiAgICBlbmRUaW1lID0gbmV3VGltZTsKICAgIEVuZFRpbWVVcGRhdGVkKCk7CiAgfQogIAogIGZ1bmN0aW9uIHVwZGF0ZURyYWdvblByaWNlKHVpbnQyNTYgd2VpQW1vdW50KSBvbmx5T3duZXIgZXh0ZXJuYWwgewogICAgcmVxdWlyZSh3ZWlBbW91bnQgPiAwKTsKICAgIHJhdGUgPSB3ZWlBbW91bnQ7CiAgICBEcmFnb25QcmljZVVwZGF0ZWQoKTsKICB9CiAgCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSByZWxlYXNlVGltZTsKICBmdW5jdGlvbiBhc3NpZ25Ub2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludDI1NiBhbW91bnQpIHByaXZhdGUgcmV0dXJucyh1aW50MjU2IGxvY2tlZEZvcil7CiAgICAgIGxvY2tlZEZvciA9IG5vdyArIDQ1IGRheXM7CiAgICAgIGJhbGFuY2VzW2JlbmVmaWNpYXJ5XSA9IGJhbGFuY2VzW2JlbmVmaWNpYXJ5XS5hZGQoYW1vdW50KTsKICAgICAgcmVsZWFzZVRpbWVbYmVuZWZpY2lhcnldID0gbG9ja2VkRm9yOwogIH0KICAKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl0uZGl2KDEwMDAwMDAwMCk7CiAgfQogIAoKICBmdW5jdGlvbiB1bmxvY2tUaW1lKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRpbWUpIHsKICAgIHJldHVybiByZWxlYXNlVGltZVtfb3duZXJdOwogIH0KCiAgLyoqCiAgICogQG5vdGljZSBUcmFuc2ZlcnMgdG9rZW5zIGhlbGQgYnkgdGltZWxvY2sgdG8gYmVuZWZpY2lhcnkuCiAgICovCiAgZnVuY3Rpb24gcmVsZWFzZURyYWdvblRva2VucygpIHB1YmxpYyB7CiAgICByZXF1aXJlKG5vdyA+PSByZWxlYXNlVGltZVttc2cuc2VuZGVyXSk7CiAgICAKICAgIHVpbnQyNTYgYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICByZXF1aXJlKGFtb3VudCA+IDApOwogICAgCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICBpZighdG9rZW4udHJhbnNmZXJGcm9tKHRva2VuUmVzZXJ2ZSxtc2cuc2VuZGVyLGFtb3VudCkpewogICAgICAgIHJldmVydCgpOwogICAgfQoKICAgIFRva2VuUmVsZWFzZWQobXNnLnNlbmRlcixhbW91bnQpOwogIH0KICAKfQ=='.
	

]
