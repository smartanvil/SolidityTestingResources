Class {
	#name : #SRTcc1067b8d16bce222b6bb44eb28fec3879d79e81,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc1067b8d16bce222b6bb44eb28fec3879d79e81 >> base64 [
	^ ''.
	

]
