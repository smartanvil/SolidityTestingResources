Class {
	#name : #SRT17355Bf21DcB9676013b945465BC5EBE60Bce32f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17355Bf21DcB9676013b945465BC5EBE60Bce32f >> base64 [
	^ ''.
	

]
