Class {
	#name : #SRTc6b3136dabeed22a06ece83dc3e8d638a735c843,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc6b3136dabeed22a06ece83dc3e8d638a735c843 >> base64 [
	^ ''.
	

]
