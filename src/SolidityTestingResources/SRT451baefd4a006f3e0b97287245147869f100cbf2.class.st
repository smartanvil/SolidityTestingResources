Class {
	#name : #SRT451baefd4a006f3e0b97287245147869f100cbf2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT451baefd4a006f3e0b97287245147869f100cbf2 >> base64 [
	^ ''.
	

]
