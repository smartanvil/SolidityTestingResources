Class {
	#name : #SRT13eee73a10679af072055af1566d0a6903b42b67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13eee73a10679af072055af1566d0a6903b42b67 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKiAKICogSUdOSVRFIFJBVElOR1MgIlNPRlQgQ0FQIiBDUk9XRFNBTEUgQ09OVFJBQ1QuIENPUFlSSUdIVCAyMDE4IFRSVVNUSUMgSE9MRElORyBJTkMuIEF1dGhvciAtIERhbW9uIEJhcm5hcmQgKDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI3ZDE5MWMxMDEyMTMzZDE0MWExMzE0MDkxODBmMWMwOTE0MTMxYTBlNTMxZTEyMTAiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+KQogKiBDT05UUkFDVCBJTklUSUFURVMgQSBMSU1JVEVEIFNVUFBMWSBTT0ZUIENBUCBQRVJJT0QgRk9SIFRIRSBGSVJTVCAyNCBIT1VSUywgT1IgVU5USUwgVE9UQUwgU09GVCBDQVAgVE9LRU4gU1VQUExZIElTIFJFQUNIRUQsIFdISUNIRVZFUiBJUyBTT09ORVIuCiAqLwoKaW50ZXJmYWNlIHRva2VuIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBwdWJsaWM7Cn0KCi8qCiAqIENvbnRyYWN0IHBlcm1pdHMgSWduaXRlIHRvIHJlY2xhaW0gdW5zb2xkIElHTlQgdG8gcGFzcyB0byB0aGUgbWFpbiBjcm93ZHNhbGUgY29udHJhY3QKICovCmNvbnRyYWN0IHdpdGhkcmF3VG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOwp9CgovKgogKiBTYWZlTWF0aCAtIG1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoKICogQ3Jvd2RzYWxlIGNvbnRyYWN0IGNvbnN0cnVjdG9yCiAqLwpjb250cmFjdCBDcm93ZHNhbGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7IC8qIENPTlRSQUNUIE9XTkVSICovCiAgICBhZGRyZXNzIHB1YmxpYyBvcGVyYXRpb25zOyAvKiBPUEVSQVRJT05TIE1VTFRJU0lHIFdBTExFVCAqLwogICAgYWRkcmVzcyBwdWJsaWMgaW5kZXg7IC8qIElHTklURSBJTkRFWCBXQUxMRVQgKi8KICAgIHVpbnQyNTYgcHVibGljIGFtb3VudFJhaXNlZDsgLyogVE9UQUwgRVRIIENPTlRSSUJVVElPTlMqLwogICAgdWludDI1NiBwdWJsaWMgYW1vdW50UmFpc2VkUGhhc2U7IC8qIEVUSCBDT05UUklCVVRJT05TIFNJTkNFIExBU1QgV0lUSERSQVdBTCBFVkVOVCAqLwogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZDsgLyogVE9UQUwgVE9LRU5TIFNPTEQgKi8KICAgIHVpbnQyNTYgcHJpdmF0ZSBzb2Z0Q2FwOyAvKiBOVU1CRVIgT0YgVE9LRU5TIEFWQUlMQUJMRSBEVVJJTkcgVEhFIFNPRlQgQ0FQIFBFUklPRCAqLwogICAgdWludDI1NiBwcml2YXRlIHNvZnRDYXBMaW1pdDsgLyogTUFYSU1VTSBBTU9VTlQgT0YgRVRIIFRPIEJFIFJBSVNFRCBEVVJJTkcgU09GVCBDQVAgUEVSSU9EICovCiAgICB1aW50MjU2IHB1YmxpYyBkaXNjb3VudFByaWNlOyAvKiBTT0ZUIENBUCBQRVJJT0QgVE9LRU4gUFJJQ0UgKi8KICAgIHVpbnQyNTYgcHVibGljIGZ1bGxQcmljZTsgLyogU1RBTkRBUkQgVE9LRU4gUFJJQ0UgKi8KICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsgLyogQ1JPV0RTQUxFIFNUQVJUIFRJTUUgKi8KICAgIHRva2VuIHB1YmxpYyB0b2tlblJld2FyZDsgLyogSUdOVCAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBjb250cmlidXRpb25CeUFkZHJlc3M7CgogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBDcm93ZHNhbGUoCiAgICAgICAgdWludCBzYWxlU3RhcnRUaW1lLAogICAgICAgIGFkZHJlc3Mgb3duZXJBZGRyZXNzLAogICAgICAgIGFkZHJlc3Mgb3BlcmF0aW9uc0FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBpbmRleEFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyByZXdhcmRUb2tlbkFkZHJlc3MsCiAgICAgICAgdWludDI1NiB0b3RhbERpc2NvdW50VG9rZW5zCgogICAgKSBwdWJsaWMgewogICAgICAgIHN0YXJ0VGltZSA9IHNhbGVTdGFydFRpbWU7IC8qIFNFVFMgU1RBUlQgVElNRSAqLwogICAgICAgIG93bmVyID0gb3duZXJBZGRyZXNzOyAvKiBTRVRTIE9XTkVSICovCiAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnNBZGRyZXNzOyAvKiBTRVRTIE9QRVJBVElPTlMgTVVMVElTSUcgV0FMTEVUICovCiAgICAgICAgaW5kZXggPSBpbmRleEFkZHJlc3M7IC8qIFNFVFMgSUdOSVRFIElOREVYIFdBTExFVCAqLwogICAgICAgIHNvZnRDYXAgPSB0b3RhbERpc2NvdW50VG9rZW5zOyAvKiBTRVRTIE5VTUJFUiBPRiBUT0tFTlMgQVZBSUxBQkxFIEFUIERJU0NPVU5UIFBSSUNFIERVUklORyBTT0ZUIENBUCBQRVJJT0QgKi8KICAgICAgICBzb2Z0Q2FwTGltaXQgPSA0NTAwIGV0aGVyOyAvKiBTRVRTIEZVTkRJTkcgVEFSR0VUIEZPUiBTT0ZUIENBUCBQRVJJT0QgKi8KICAgICAgICBkaXNjb3VudFByaWNlID0gMC4wMDYgZXRoZXI7IC8qIFNFVFMgRElTQ09VTlRFRCBTT0ZUIENBUCBUT0tFTiBQUklDRSAqLwogICAgICAgIGZ1bGxQcmljZSA9IDAuMDA2NjcgZXRoZXI7IC8qIFNFVFMgU1RBTkRBUkQgVE9LRU4gUFJJQ0UgKi8KICAgICAgICB0b2tlblJld2FyZCA9IHRva2VuKHJld2FyZFRva2VuQWRkcmVzcyk7IC8qIFNFVFMgSUdOVCBBUyBDT05UUkFDVCBSRVdBUkQgKi8KICAgIH0KCiAgICAvKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gZm9yIEVUSCBjb250cmlidXRpb25zCiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICByZXF1aXJlKG5vdyA+IHN0YXJ0VGltZSk7CgogICAgICAgIGlmKG5vdyA8IHN0YXJ0VGltZS5hZGQoMjQgaG91cnMpICYmIGFtb3VudFJhaXNlZCA8IHNvZnRDYXBMaW1pdCkgeyAvKiBDSEVDS1MgSUYgU09GVCBDQVAgUEVSSU9EIFNUSUxMIElOIEVGRkVDVCAqLwogICAgICAgICAgICByZXF1aXJlKGFtb3VudC5hZGQoY29udHJpYnV0aW9uQnlBZGRyZXNzW21zZy5zZW5kZXJdKSA+IDEgZXRoZXIgJiYgYW1vdW50LmFkZChjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0pIDw9IDUgZXRoZXIpOyAvKiBTT0ZUIENBUCBNSU5JTVVNIENPTlRSSUJVVElPTiBJUyAxIEVUSCwgTUFYSU1VTSBDT05UUklCVVRJT04gSVMgNSBFVEggUEVSIENPTlRSSUJVVE9SICovCiAgICAgICAgICAgIHJlcXVpcmUoYW1vdW50Lm11bCgxMCoqMTgpLmRpdihkaXNjb3VudFByaWNlKSA8PSBzb2Z0Q2FwLnN1Yih0b2tlbnNTb2xkKSk7IC8qIFJFUVVJUkVTIFNVRkZJQ0lFTlQgRElTQ09VTlQgVE9LRU5TIFJFTUFJTklORyBUTyBDT01QTEVURSBQVVJDSEFTRSAqLwogICAgICAgICAgICBjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0gPSBjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0uYWRkKGFtb3VudCk7CiAgICAgICAgICAgIGFtb3VudFJhaXNlZCA9IGFtb3VudFJhaXNlZC5hZGQoYW1vdW50KTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkUGhhc2UgPSBhbW91bnRSYWlzZWRQaGFzZS5hZGQoYW1vdW50KTsKICAgICAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudC5tdWwoMTAqKjE4KS5kaXYoZGlzY291bnRQcmljZSkpOwogICAgICAgICAgICB0b2tlblJld2FyZC50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQubXVsKDEwKioxOCkuZGl2KGRpc2NvdW50UHJpY2UpKTsKICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CgogICAgICAgIH0KCiAgICAgICAgZWxzZSB7IC8qIElNUE9TRVMgREVGQVVMVCBDUk9XRFNBTEUgVEVSTVMgSUYgU09GVCBDQVAgUEVSSU9EIE5PIExPTkdFUiBJTiBFRkZFQ1QgKi8KICAgICAgICAgICAgcmVxdWlyZShhbW91bnQgPD0gMTAwMCBldGhlcik7CiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbkJ5QWRkcmVzc1ttc2cuc2VuZGVyXSA9IGNvbnRyaWJ1dGlvbkJ5QWRkcmVzc1ttc2cuc2VuZGVyXS5hZGQoYW1vdW50KTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkID0gYW1vdW50UmFpc2VkLmFkZChhbW91bnQpOwogICAgICAgICAgICBhbW91bnRSYWlzZWRQaGFzZSA9IGFtb3VudFJhaXNlZFBoYXNlLmFkZChhbW91bnQpOwogICAgICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQoYW1vdW50Lm11bCgxMCoqMTgpLmRpdihmdWxsUHJpY2UpKTsKICAgICAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50Lm11bCgxMCoqMTgpLmRpdihmdWxsUHJpY2UpKTsKICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CiAgICAgICAgfQoKICAgIH0KCiAgICAvKgogICAgICogQUxMT1cgSUdOSVRFIFRPIFJFQ0xBSU0gVU5TT0xEIElHTlQKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoYWRkcmVzcyB0b2tlbkNvbnRyYWN0KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHdpdGhkcmF3VG9rZW4gdGMgPSB3aXRoZHJhd1Rva2VuKHRva2VuQ29udHJhY3QpOwoKICAgICAgICB0Yy50cmFuc2Zlcihvd25lciwgdGMuYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KICAgIAogICAgLyoKICAgICAqIEFMTE9XIElHTklURSBUTyBXSVRIRFJBVyBDUk9XRFNBTEUgUFJPQ0VFRFMgVE8gT1BFUkFUSU9OUyBBTkQgSU5ERVggV0FMTEVUUwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICB1aW50MjU2IHRvdGFsID0gdGhpcy5iYWxhbmNlOwogICAgICAgIHVpbnQyNTYgb3BlcmF0aW9uc1NwbGl0ID0gNDA7CiAgICAgICAgdWludDI1NiBpbmRleFNwbGl0ID0gNjA7CiAgICAgICAgb3BlcmF0aW9ucy50cmFuc2Zlcih0b3RhbCAqIG9wZXJhdGlvbnNTcGxpdCAvIDEwMCk7CiAgICAgICAgaW5kZXgudHJhbnNmZXIodG90YWwgKiBpbmRleFNwbGl0IC8gMTAwKTsKICAgIH0KfQ=='.
	

]
