Class {
	#name : #SRT6998657c7aa7af80c51f6589a158055c334ede7f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6998657c7aa7af80c51f6589a158055c334ede7f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgcmVxdWlyZShhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgLy8gICByZXF1aXJlKGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vICAgcmVxdWlyZShhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9Cgpjb250cmFjdCBHb3Zlcm5hYmxlIHsKCiAgLy8gbGlzdCBvZiBhZG1pbnMKICBhZGRyZXNzW10gcHVibGljIGFkbWluczsKCiAgZnVuY3Rpb24gR292ZXJuYWJsZSgpIHsKICAgIGFkbWlucy5sZW5ndGggPSAxOwogICAgYWRtaW5zWzBdID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlBZG1pbnMoKSB7CiAgICBib29sIGlzQWRtaW4gPSBmYWxzZTsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGFkbWlucy5sZW5ndGg7IGkrKykgewogICAgICBpZiAobXNnLnNlbmRlciA9PSBhZG1pbnNbaV0pIHsKICAgICAgICBpc0FkbWluID0gdHJ1ZTsKICAgICAgfQogICAgfQogICAgcmVxdWlyZShpc0FkbWluID09IHRydWUpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIGFkZEFkbWluKGFkZHJlc3MgX2FkbWluKSBwdWJsaWMgb25seUFkbWlucyB7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBhZG1pbnMubGVuZ3RoOyBpKyspIHsKICAgICAgcmVxdWlyZShfYWRtaW4gIT0gYWRtaW5zW2ldKTsKICAgIH0KICAgIHJlcXVpcmUoYWRtaW5zLmxlbmd0aCA8IDEwKTsKICAgIGFkbWluc1thZG1pbnMubGVuZ3RoKytdID0gX2FkbWluOwogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlQWRtaW4oYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyBvbmx5QWRtaW5zIHsKICAgIHVpbnQyNTYgcG9zID0gYWRtaW5zLmxlbmd0aDsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGFkbWlucy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoX2FkbWluID09IGFkbWluc1tpXSkgewogICAgICAgIHBvcyA9IGk7CiAgICAgIH0KICAgIH0KICAgIHJlcXVpcmUocG9zIDwgYWRtaW5zLmxlbmd0aCk7CiAgICAvLyBpZiBub3QgbGFzdCBlbGVtZW50LCBzd2l0Y2ggd2l0aCBsYXN0CiAgICBpZiAocG9zIDwgYWRtaW5zLmxlbmd0aCAtIDEpIHsKICAgICAgYWRtaW5zW3Bvc10gPSBhZG1pbnNbYWRtaW5zLmxlbmd0aCAtIDFdOwogICAgfQogICAgLy8gdGhlbiBjdXQgb2ZmIHRoZSB0YWlsCiAgICBhZG1pbnMubGVuZ3RoLS07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBHb3Zlcm5hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gdHJ1ZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seUFkbWlucyB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5QWRtaW5zIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKY29udHJhY3QgRGF0YUNlbnRyZSBpcyBPd25hYmxlIHsKICAgIHN0cnVjdCBDb250YWluZXIgewogICAgICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiB1aW50MjU2KSB2YWx1ZXM7CiAgICAgICAgbWFwcGluZyhieXRlczMyID0+IGFkZHJlc3MpIGFkZHJlc3NlczsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYm9vbCkgc3dpdGNoZXM7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBjb25zdHJhaW50czsKICAgIH0KCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gQ29udGFpbmVyKSBjb250YWluZXJzOwoKICAgIC8vIE93bmVyIEZ1bmN0aW9ucwogICAgZnVuY3Rpb24gc2V0VmFsdWUoYnl0ZXMzMiBfY29udGFpbmVyLCBieXRlczMyIF9rZXksIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgIGNvbnRhaW5lcnNbX2NvbnRhaW5lcl0udmFsdWVzW19rZXldID0gX3ZhbHVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEFkZHJlc3MoYnl0ZXMzMiBfY29udGFpbmVyLCBieXRlczMyIF9rZXksIGFkZHJlc3MgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgIGNvbnRhaW5lcnNbX2NvbnRhaW5lcl0uYWRkcmVzc2VzW19rZXldID0gX3ZhbHVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEJvb2woYnl0ZXMzMiBfY29udGFpbmVyLCBieXRlczMyIF9rZXksIGJvb2wgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgIGNvbnRhaW5lcnNbX2NvbnRhaW5lcl0uc3dpdGNoZXNbX2tleV0gPSBfdmFsdWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QmFsYW5hY2UoYnl0ZXMzMiBfY29udGFpbmVyLCBhZGRyZXNzIF9rZXksIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgIGNvbnRhaW5lcnNbX2NvbnRhaW5lcl0uYmFsYW5jZXNbX2tleV0gPSBfdmFsdWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHNldENvbnN0cmFpbnQoYnl0ZXMzMiBfY29udGFpbmVyLCBhZGRyZXNzIF9zb3VyY2UsIGFkZHJlc3MgX2tleSwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciB7CiAgICAgICAgY29udGFpbmVyc1tfY29udGFpbmVyXS5jb25zdHJhaW50c1tfc291cmNlXVtfa2V5XSA9IF92YWx1ZTsKICAgIH0KCiAgICAvLyBDb25zdGFudCBGdW5jdGlvbnMKICAgIGZ1bmN0aW9uIGdldFZhbHVlKGJ5dGVzMzIgX2NvbnRhaW5lciwgYnl0ZXMzMiBfa2V5KSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gY29udGFpbmVyc1tfY29udGFpbmVyXS52YWx1ZXNbX2tleV07CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcyhieXRlczMyIF9jb250YWluZXIsIGJ5dGVzMzIgX2tleSkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcnNbX2NvbnRhaW5lcl0uYWRkcmVzc2VzW19rZXldOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvb2woYnl0ZXMzMiBfY29udGFpbmVyLCBieXRlczMyIF9rZXkpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBjb250YWluZXJzW19jb250YWluZXJdLnN3aXRjaGVzW19rZXldOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJhbGFuYWNlKGJ5dGVzMzIgX2NvbnRhaW5lciwgYWRkcmVzcyBfa2V5KSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gY29udGFpbmVyc1tfY29udGFpbmVyXS5iYWxhbmNlc1tfa2V5XTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb25zdHJhaW50KGJ5dGVzMzIgX2NvbnRhaW5lciwgYWRkcmVzcyBfc291cmNlLCBhZGRyZXNzIF9rZXkpIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBjb250YWluZXJzW19jb250YWluZXJdLmNvbnN0cmFpbnRzW19zb3VyY2VdW19rZXldOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCB7CiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSk7Cn0KCgovKgogKiBFUkMyMEJhc2ljCiAqIFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7Cn0KCmNvbnRyYWN0IEVSQzIyM0Jhc2ljIGlzIEVSQzIwQmFzaWMgewogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkgcmV0dXJucyAoYm9vbCk7Cn0KCi8qCiAqIEVSQzIwIGludGVyZmFjZQogKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMjNCYXNpYyB7CiAgLy8gYWN0aXZlIHN1cHBseSBvZiB0b2tlbnMKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBDb250cm9sbGVySW50ZXJmYWNlIHsKCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBvd25lciwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50LCBieXRlcyBkYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSAgcHVibGljIHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBUb2tlbiBpcyBPd25hYmxlLCBFUkMyMCB7CgogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludFRvZ2dsZShib29sIHN0YXR1cyk7CgogIC8vIENvbnN0YW50IEZ1bmN0aW9ucwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIENvbnRyb2xsZXJJbnRlcmZhY2Uob3duZXIpLmJhbGFuY2VPZihfb3duZXIpOwogIH0KCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gQ29udHJvbGxlckludGVyZmFjZShvd25lcikudG90YWxTdXBwbHkoKTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIENvbnRyb2xsZXJJbnRlcmZhY2Uob3duZXIpLmFsbG93YW5jZShfb3duZXIsIF9zcGVuZGVyKTsKICB9CgogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBtaW50VG9nZ2xlKGJvb2wgc3RhdHVzKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIE1pbnRUb2dnbGUoc3RhdHVzKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gcHVibGljIGZ1bmN0aW9ucwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBDb250cm9sbGVySW50ZXJmYWNlKG93bmVyKS5hcHByb3ZlKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsKICAgIHJldHVybiB0cmFuc2ZlcihfdG8sIF92YWx1ZSwgZW1wdHkpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIENvbnRyb2xsZXJJbnRlcmZhY2Uob3duZXIpLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZGF0YSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOwogICAgX2NoZWNrRGVzdGluYXRpb24obXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsKICAgIHJldHVybiB0cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlLCBlbXB0eSk7CiAgfQoKCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgQ29udHJvbGxlckludGVyZmFjZShvd25lcikudHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIF9mcm9tLCBfdG8sIF9hbW91bnQsIF9kYXRhKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgX2NoZWNrRGVzdGluYXRpb24oX2Zyb20sIF90bywgX2Ftb3VudCwgX2RhdGEpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBJbnRlcm5hbCBGdW5jdGlvbnMKICBmdW5jdGlvbiBfY2hlY2tEZXN0aW5hdGlvbihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBpbnRlcm5hbCB7CgogICAgdWludDI1NiBjb2RlTGVuZ3RoOwogICAgYXNzZW1ibHkgewogICAgICBjb2RlTGVuZ3RoIDo9IGV4dGNvZGVzaXplKF90bykKICAgIH0KICAgIGlmKGNvZGVMZW5ndGg+MCkgewogICAgICBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCB1bnRydXN0ZWRSZWNlaXZlciA9IEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0KF90byk7CiAgICAgIC8vIHVudHJ1c3RlZCBjb250cmFjdCBjYWxsCiAgICAgIHVudHJ1c3RlZFJlY2VpdmVyLnRva2VuRmFsbGJhY2soX2Zyb20sIF92YWx1ZSwgX2RhdGEpOwogICAgfQogIH0KfQoKLyoqCiBTaW1wbGUgVG9rZW4gYmFzZWQgb24gT3BlblplcHBlbGluIHRva2VuIGNvbnRyYWN0CiAqLwpjb250cmFjdCBTR1BheSBpcyBUb2tlbiB7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJTR1BheSBUb2tlbiI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiU0dQIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCn0KCmNvbnRyYWN0IENyb3dkc2FsZUludGVyZmFjZSB7CiAgZnVuY3Rpb24gY2hhbmdlUmF0ZSh1aW50MjU2IF9uZXdWYWx1ZSkgcHVibGljOwp9Cgpjb250cmFjdCBEYXRhTWFuYWdlciBpcyBQYXVzYWJsZSB7CgogIC8vIGRhdGFDZW50cmUgY29udHJhY3QgYWRkcmVzc2VzCiAgYWRkcmVzcyBwdWJsaWMgZGF0YUNlbnRyZUFkZHI7CgogIGZ1bmN0aW9uIERhdGFNYW5hZ2VyKGFkZHJlc3MgX2RhdGFDZW50cmVBZGRyKSB7CiAgICBkYXRhQ2VudHJlQWRkciA9IF9kYXRhQ2VudHJlQWRkcjsKICB9CgogIC8vIENvbnN0YW50IEZ1bmN0aW9ucwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIERhdGFDZW50cmUoZGF0YUNlbnRyZUFkZHIpLmdldEJhbGFuYWNlKCdTVEsnLCBfb3duZXIpOwogIH0KCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gRGF0YUNlbnRyZShkYXRhQ2VudHJlQWRkcikuZ2V0VmFsdWUoJ1NUSycsICd0b3RhbFN1cHBseScpOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gRGF0YUNlbnRyZShkYXRhQ2VudHJlQWRkcikuZ2V0Q29uc3RyYWludCgnU1RLJywgX293bmVyLCBfc3BlbmRlcik7CiAgfQoKICBmdW5jdGlvbiBfc2V0VG90YWxTdXBwbHkodWludDI1NiBfbmV3VG90YWxTdXBwbHkpIGludGVybmFsIHsKICAgIERhdGFDZW50cmUoZGF0YUNlbnRyZUFkZHIpLnNldFZhbHVlKCdTVEsnLCAndG90YWxTdXBwbHknLCBfbmV3VG90YWxTdXBwbHkpOwogIH0KCiAgZnVuY3Rpb24gX3NldEJhbGFuY2VPZihhZGRyZXNzIF9vd25lciwgdWludDI1NiBfbmV3VmFsdWUpIGludGVybmFsIHsKICAgIERhdGFDZW50cmUoZGF0YUNlbnRyZUFkZHIpLnNldEJhbGFuYWNlKCdTVEsnLCBfb3duZXIsIF9uZXdWYWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBfc2V0QWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9uZXdWYWx1ZSkgaW50ZXJuYWwgewogICAgcmVxdWlyZShiYWxhbmNlT2YoX293bmVyKSA+PSBfbmV3VmFsdWUpOwogICAgRGF0YUNlbnRyZShkYXRhQ2VudHJlQWRkcikuc2V0Q29uc3RyYWludCgnU1RLJywgX293bmVyLCBfc3BlbmRlciwgX25ld1ZhbHVlKTsKICB9Cgp9Cgpjb250cmFjdCBTaW1wbGVDb250cm9sIGlzIERhdGFNYW5hZ2VyIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgLy8gdG9rZW4gc2F0ZWxsaXRlIGFkZHJlc3MKICBhZGRyZXNzIHB1YmxpYyBzYXRlbGxpdGU7CgogIG1vZGlmaWVyIG9ubHlUb2tlbiB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gc2F0ZWxsaXRlKTsKICAgIF87CiAgfQoKCiAgZnVuY3Rpb24gU2ltcGxlQ29udHJvbChhZGRyZXNzIF9zYXRlbGxpdGUsIGFkZHJlc3MgX2RhdGFDZW50cmVBZGRyKQogICAgRGF0YU1hbmFnZXIoX2RhdGFDZW50cmVBZGRyKQogIHsKICAgIHNhdGVsbGl0ZSA9IF9zYXRlbGxpdGU7CiAgfQoKICAvLyBwdWJsaWMgZnVuY3Rpb25zCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5VG9rZW4gd2hlbk5vdFBhdXNlZCB7CiAgICByZXF1aXJlKF9vd25lciAhPSBfc3BlbmRlcik7CiAgICBfc2V0QWxsb3dhbmNlKF9vd25lciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgfQoKCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9kYXRhKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKHRoaXMpKTsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICByZXF1aXJlKF9mcm9tICE9IF90byk7CiAgICBfc2V0QmFsYW5jZU9mKF9mcm9tLCBiYWxhbmNlT2YoX2Zyb20pLnN1YihfYW1vdW50KSk7CiAgICBfc2V0QmFsYW5jZU9mKF90bywgYmFsYW5jZU9mKF90bykuYWRkKF9hbW91bnQpKTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgb25seVRva2VuIHdoZW5Ob3RQYXVzZWQgewogICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQsIF9kYXRhKTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9zZW5kZXIsIGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgb25seVRva2VuIHdoZW5Ob3RQYXVzZWQgewogICAgX3NldEFsbG93YW5jZShfZnJvbSwgX3RvLCBhbGxvd2FuY2UoX2Zyb20sIF90bykuc3ViKF9hbW91bnQpKTsKICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50LCBfZGF0YSk7CiAgfQp9Cgpjb250cmFjdCBDcm93ZHNhbGVDb250cm9sIGlzIFNpbXBsZUNvbnRyb2wgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAvLyBub3QgbmVjZXNzYXJ5IHRvIHN0b3JlIGluIGRhdGEgY2VudHJlCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogIG1vZGlmaWVyIGNhbk1pbnQoYm9vbCBzdGF0dXMpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCA9PSBzdGF0dXMpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIENyb3dkc2FsZUNvbnRyb2woYWRkcmVzcyBfc2F0ZWxsaXRlLCBhZGRyZXNzIF9kYXRhQ2VudHJlQWRkcikKICAgIFNpbXBsZUNvbnRyb2woX3NhdGVsbGl0ZSwgX2RhdGFDZW50cmVBZGRyKQogIHsKCiAgfQoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHdoZW5Ob3RQYXVzZWQgY2FuTWludCh0cnVlKSBvbmx5QWRtaW5zIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBieXRlcyBtZW1vcnkgZW1wdHk7CiAgICBfc2V0VG90YWxTdXBwbHkodG90YWxTdXBwbHkoKS5hZGQoX2Ftb3VudCkpOwogICAgX3NldEJhbGFuY2VPZihfdG8sIGJhbGFuY2VPZihfdG8pLmFkZChfYW1vdW50KSk7CiAgICBUb2tlbihzYXRlbGxpdGUpLm1pbnQoX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gc3RhcnRNaW50aW5nKCkgb25seUFkbWlucyBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CiAgICBUb2tlbihzYXRlbGxpdGUpLm1pbnRUb2dnbGUobWludGluZ0ZpbmlzaGVkKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlBZG1pbnMgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBUb2tlbihzYXRlbGxpdGUpLm1pbnRUb2dnbGUobWludGluZ0ZpbmlzaGVkKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlUmF0ZSh1aW50MjU2IF9uZXdWYWx1ZSkgb25seUFkbWlucyBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgQ3Jvd2RzYWxlSW50ZXJmYWNlKGFkbWluc1sxXSkuY2hhbmdlUmF0ZShfbmV3VmFsdWUpOwogIH0KfQoKLyoqCiBDb250cm9sbGVyIHRvIGludGVyZmFjZSBiZXR3ZWVuIERhdGFDZW50cmUgYW5kIFRva2VuIHNhdGVsbGl0ZQogKi8KY29udHJhY3QgQ29udHJvbGxlciBpcyBDcm93ZHNhbGVDb250cm9sIHsKCiAgZnVuY3Rpb24gQ29udHJvbGxlcihhZGRyZXNzIF9zYXRlbGxpdGUsIGFkZHJlc3MgX2RhdGFDZW50cmVBZGRyKQogICAgQ3Jvd2RzYWxlQ29udHJvbChfc2F0ZWxsaXRlLCBfZGF0YUNlbnRyZUFkZHIpCiAgewoKICB9CgogIC8vIE93bmVyIEZ1bmN0aW9ucwogIGZ1bmN0aW9uIHNldENvbnRyYWN0cyhhZGRyZXNzIF9zYXRlbGxpdGUsIGFkZHJlc3MgX2RhdGFDZW50cmVBZGRyKSBwdWJsaWMgb25seUFkbWlucyB3aGVuUGF1c2VkIHsKICAgIGRhdGFDZW50cmVBZGRyID0gX2RhdGFDZW50cmVBZGRyOwogICAgc2F0ZWxsaXRlID0gX3NhdGVsbGl0ZTsKICB9CgogIGZ1bmN0aW9uIGtpbGwoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgcHVibGljIG9ubHlBZG1pbnMgd2hlblBhdXNlZCB7CiAgICBpZiAoZGF0YUNlbnRyZUFkZHIgIT0gYWRkcmVzcygwKSkgeyBPd25hYmxlKGRhdGFDZW50cmVBZGRyKS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsgfQogICAgaWYgKHNhdGVsbGl0ZSAhPSBhZGRyZXNzKDApKSB7IE93bmFibGUoc2F0ZWxsaXRlKS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsgfQogICAgc2VsZmRlc3RydWN0KF9uZXdDb250cm9sbGVyKTsKICB9Cgp9'.
	

]
