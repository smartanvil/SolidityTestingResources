Class {
	#name : #SRT56ba2Ee7890461f463F7be02aAC3099f6d5811A8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT56ba2Ee7890461f463F7be02aAC3099f6d5811A8 >> base64 [
	^ ''.
	

]
