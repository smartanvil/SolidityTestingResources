Class {
	#name : #SRTccd202c2e1ad96704cc27bc9c187b681f8fc7d63,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTccd202c2e1ad96704cc27bc9c187b681f8fc7d63 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Ci8vTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9CgovL2NyZWF0b3IKY29udHJhY3Qgb3duZWR7CiAgICBhZGRyZXNzIHB1YmxpYyBBZG1pbjsKICAgIGZ1bmN0aW9uIG93bmVkKCkgcHVibGljIHsKICAgICAgICBBZG1pbiA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICBtb2RpZmllciBvbmx5QWRtaW57CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IEFkbWluKTsKICAgICAgICBfOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXJBZG1pbihhZGRyZXNzIE5ld0FkbWluKSBvbmx5QWRtaW4gcHVibGljIHsKICAgICAgICBBZG1pbiA9IE5ld0FkbWluOwogICAgfQp9CgovL3B1YmxpYwpjb250cmFjdCBFcmN7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsKICAgIAogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOwogICAgdWludDI1NiBwdWJsaWMgYnV5UHJpY2U7CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9pbikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiBkaXNxdWFsaWZpZWQoYWRkcmVzcyBfZnJvbSx1aW50IHZhbHVlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvICwgdWludCB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sYWRkcmVzcyB0byAsdWludCB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgICAKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20gLCBhZGRyZXNzIGluZGV4ZWQgdG8gLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7CiAgICBldmVudCBEaXNxdWFsaWZpZWQoYWRkcmVzcyB0YXJnZXRBRCwgdWludCB2YWx1ZSk7CiAgICAgCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkge3Rocm93O31fOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSAsYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKCFmcm96ZW5BY2NvdW50W19mcm9tXSk7ICAgICAgICAgICAgICAgICAgICAgCiAgICByZXF1aXJlKCFmcm96ZW5BY2NvdW50W190b10pOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQp9CgovL2Z1bmN0aW9uCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRXJjLG93bmVkewogICAgLy9jaGVjayBpZiB1c2VyIGlsbGljaXQgYWN0aXZpdHksZnJlZXplQWNjb3VudCBhbmQgYmFjayB0byB0b3RhbFN1cHBseQogICAgZnVuY3Rpb24gZGlzcXVhbGlmaWVkKGFkZHJlc3MgdGFyZ2V0QUQsIHVpbnQgX3ZhbHVlKSBvbmx5QWRtaW4gcHVibGljIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW3RhcmdldEFEXSA+PSBfdmFsdWUpOyAgCiAgICAgICAgYmFsYW5jZXNbdGFyZ2V0QURdIC09IF92YWx1ZTsgICAgICAgICAgIAogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgIAogICAgICAgIERpc3F1YWxpZmllZChtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seUFkbWluIHB1YmxpYyB7CiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOwogICAgICAgIEZyb3plbkZ1bmRzKHRhcmdldCwgZnJlZXplKTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMyAqIDMyKSB7CiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSB7CiAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93OwogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgb25seUFkbWluIHB1YmxpYyB7CiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlOwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1eSgpIHBheWFibGUgcHVibGljIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlcyB0aGUgYW1vdW50CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgIC8vIG1ha2VzIHRoZSB0cmFuc2ZlcnMKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IGFtb3VudCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBhbW91bnQgKiBzZWxsUHJpY2UpOyAgICAgLy8gY2hlY2tzIGlmIHRoZSBjb250cmFjdCBoYXMgZW5vdWdoIGV0aGVyIHRvIGJ1eQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7ICAgICAgICAgICAgICAvLyBtYWtlcyB0aGUgdHJhbnNmZXJzCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQgKiBzZWxsUHJpY2UpOyAgICAgICAgIC8vIHNlbmRzIGV0aGVyIHRvIHRoZSBzZWxsZXIuIEl0J3MgaW1wb3J0YW50IHRvIGRvIHRoaXMgbGFzdCB0byBhdm9pZCByZWN1cnNpb24gYXR0YWNrcwogICAgfQp9CgovL2NvbnRyYWN0CmNvbnRyYWN0IFNPQyBpcyBTdGFuZGFyZFRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJDQURUIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkNBRFQiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSA4OwogICAgdWludCBwdWJsaWMgSU5JVElBTF9TVVBQTFkgPSA1MDAwMDAwMDAwMDAwMDAwMDsgLy8gSW5pdGlhbCBzdXBwbHkgaXMgNTAwLDAwMCwwMDAgU09DCgogICAgZnVuY3Rpb24gU09DKCl7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwogICAgfQp9'.
	

]
