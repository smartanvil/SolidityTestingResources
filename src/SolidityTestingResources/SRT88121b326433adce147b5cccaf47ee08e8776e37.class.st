Class {
	#name : #SRT88121b326433adce147b5cccaf47ee08e8776e37,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88121b326433adce147b5cccaf47ee08e8776e37 >> base64 [
	^ ''.
	

]
