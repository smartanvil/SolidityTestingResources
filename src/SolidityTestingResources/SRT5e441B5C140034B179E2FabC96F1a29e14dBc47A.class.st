Class {
	#name : #SRT5e441B5C140034B179E2FabC96F1a29e14dBc47A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e441B5C140034B179E2FabC96F1a29e14dBc47A >> base64 [
	^ ''.
	

]
