Class {
	#name : #SRT9e3319636e2126e3c0bc9e3134aec5e1508a46c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e3319636e2126e3c0bc9e3134aec5e1508a46c7 >> base64 [
	^ ''.
	

]
