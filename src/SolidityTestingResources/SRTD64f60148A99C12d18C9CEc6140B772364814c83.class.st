Class {
	#name : #SRTD64f60148A99C12d18C9CEc6140B772364814c83,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTD64f60148A99C12d18C9CEc6140B772364814c83 >> base64 [
	^ ''.
	

]
