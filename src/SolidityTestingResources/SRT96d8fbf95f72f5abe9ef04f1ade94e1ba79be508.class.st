Class {
	#name : #SRT96d8fbf95f72f5abe9ef04f1ade94e1ba79be508,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96d8fbf95f72f5abe9ef04f1ade94e1ba79be508 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpwcmFnbWEgc29saWRpdHkgXjAuNC4xODsKCmNvbnRyYWN0IEV0aGVyZWFsRm91bmRhdGlvbk93bmVkIHsKCWFkZHJlc3MgcHJpdmF0ZSBPd25lcjsKICAgIAoJZnVuY3Rpb24gSXNPd25lcihhZGRyZXNzIGFkZHIpIHZpZXcgcHVibGljIHJldHVybnMoYm9vbCkKCXsKCSAgICByZXR1cm4gT3duZXIgPT0gYWRkcjsKCX0KCQoJZnVuY3Rpb24gVHJhbnNmZXJPd25lcihhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyCgl7CgkgICAgT3duZXIgPSBuZXdPd25lcjsKCX0KCQoJZnVuY3Rpb24gRXRoZXJlYWxGb3VuZGF0aW9uT3duZWQoKSBwdWJsaWMKCXsKCSAgICBPd25lciA9IG1zZy5zZW5kZXI7Cgl9CgkKCWZ1bmN0aW9uIFRlcm1pbmF0ZSgpIHB1YmxpYyBvbmx5T3duZXIKCXsKCSAgICBzZWxmZGVzdHJ1Y3QoT3duZXIpOwoJfQoJCgltb2RpZmllciBvbmx5T3duZXIoKXsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gT3duZXIpOwogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IEdpZnR6TmV0d29ya1Rva2VuIGlzIEV0aGVyZWFsRm91bmRhdGlvbk93bmVkIHsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgQ09OVFJBQ1RfTkFNRSA9ICJHaWZ0ek5ldHdvcmtUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IENPTlRSQUNUX1ZFUlNJT04gPSAiQSI7CiAgICAKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJpdENvaW4mIzE3NDsgQmxhY2siOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiSVRDIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7ICAvLyAxOCBpcyB0aGUgbW9zdCBjb21tb24gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzCiAgICBib29sIHByaXZhdGUgdHJhZGVhYmxlOwogICAgdWludDI1NiBwcml2YXRlIGN1cnJlbnRTdXBwbHk7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3M9PiB1aW50MjU2KSkgcHJpdmF0ZSBhbGxvd2VkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgbG9ja2VkQWNjb3VudHM7ICAKCQoJLyoKCQlJbmNvbW1pbmcgRXRoZXIKCSovCQogICAgZXZlbnQgUmVjaWV2ZWRFdGgoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CgkvL3RoaXMgaXMgdGhlIGZhbGxiYWNrCglmdW5jdGlvbiAoKSBwYXlhYmxlIHB1YmxpYyB7CgkJUmVjaWV2ZWRFdGgobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsJCQoJfQoJCglldmVudCBUcmFuc2ZlcmVkRXRoKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCWZ1bmN0aW9uIEZvdW5kYXRpb25UcmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBhbXRFdGgsIHVpbnQyNTYgYW10VG9rZW4pIHB1YmxpYyBvbmx5T3duZXIKCXsKCQlyZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBhbXRFdGggJiYgYmFsYW5jZXNbdGhpc10gPj0gYW10VG9rZW4gKTsKCQkKCQlpZihhbXRFdGggPjApCgkJewoJCQlfdG8udHJhbnNmZXIoYW10RXRoKTsKCQkJVHJhbnNmZXJlZEV0aChfdG8sIGFtdEV0aCk7CgkJfQoJCQoJCWlmKGFtdFRva2VuID4gMCkKCQl7CgkJCXJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIGFtdFRva2VuID4gYmFsYW5jZXNbX3RvXSk7CgkJCWJhbGFuY2VzW3RoaXNdIC09IGFtdFRva2VuOwoJCQliYWxhbmNlc1tfdG9dICs9IGFtdFRva2VuOwoJCQlUcmFuc2Zlcih0aGlzLCBfdG8sIGFtdFRva2VuKTsKCQl9CgkJCgkJCgl9CQoJLyoKCQlFbmQgSW5jb21taW5nIEV0aGVyCgkqLwoJCgkKCQogICAgZnVuY3Rpb24gR2lmdHpOZXR3b3JrVG9rZW4oCgkJdWludDI1NiBpbml0aWFsVG90YWxTdXBwbHksIAoJCWFkZHJlc3NbXSBhZGRyZXNzZXMsIAoJCXVpbnQyNTZbXSBpbml0aWFsQmFsYW5jZXMsIAoJCWJvb2wgaW5pdGlhbEJhbGFuY2VzTG9ja2VkCgkJKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3Nlcy5sZW5ndGggPT0gaW5pdGlhbEJhbGFuY2VzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgY3VycmVudFN1cHBseSA9IGluaXRpYWxUb3RhbFN1cHBseSAqICgxMCoqZGVjaW1hbHMpOwogICAgICAgIHVpbnQyNTYgdG90YWxDcmVhdGVkOwogICAgICAgIGZvcih1aW50OCBpID0wOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgaWYoaW5pdGlhbEJhbGFuY2VzTG9ja2VkKXsKICAgICAgICAgICAgICAgIGxvY2tlZEFjY291bnRzW2FkZHJlc3Nlc1tpXV0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJhbGFuY2VzW2FkZHJlc3Nlc1tpXV0gPSBpbml0aWFsQmFsYW5jZXNbaV0qICgxMCoqZGVjaW1hbHMpOwogICAgICAgICAgICB0b3RhbENyZWF0ZWQgKz0gaW5pdGlhbEJhbGFuY2VzW2ldKiAoMTAqKmRlY2ltYWxzKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYoY3VycmVudFN1cHBseSA8IHRvdGFsQ3JlYXRlZCkKICAgICAgICB7CiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBjdXJyZW50U3VwcGx5IC0gdG90YWxDcmVhdGVkOwogICAgICAgIH0KICAgIH0KICAgIAoJCiAgICBldmVudCBTb2xkVG9rZW4oYWRkcmVzcyBfYnV5ZXIsIHVpbnQyNTYgX3ZhbHVlLCBzdHJpbmcgbm90ZSk7CiAgICBmdW5jdGlvbiBCdXlUb2tlbihhZGRyZXNzIF9idXllciwgdWludDI1NiBfdmFsdWUsIHN0cmluZyBub3RlKSBwdWJsaWMgb25seU93bmVyCiAgICB7CgkJcmVxdWlyZShiYWxhbmNlc1t0aGlzXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX2J1eWVyXSArIF92YWx1ZSA+IGJhbGFuY2VzW19idXllcl0pOwoJCQogICAgICAgIFNvbGRUb2tlbiggX2J1eWVyLCAgX3ZhbHVlLCAgbm90ZSk7CiAgICAgICAgYmFsYW5jZXNbdGhpc10gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19idXllcl0gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIF9idXllciwgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gTG9ja0FjY291bnQoYWRkcmVzcyB0b0xvY2spIHB1YmxpYyBvbmx5T3duZXIKICAgIHsKICAgICAgICBsb2NrZWRBY2NvdW50c1t0b0xvY2tdID0gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIFVubG9ja0FjY291bnQoYWRkcmVzcyB0b1VubG9jaykgcHVibGljIG9ubHlPd25lcgogICAgewogICAgICAgIGRlbGV0ZSBsb2NrZWRBY2NvdW50c1t0b1VubG9ja107CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFNldFRyYWRlYWJsZShib29sIHQpIHB1YmxpYyBvbmx5T3duZXIKICAgIHsKICAgICAgICB0cmFkZWFibGUgPSB0OwogICAgfQogICAgZnVuY3Rpb24gSXNUcmFkZWFibGUoKSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHRyYWRlYWJsZTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBjdXJyZW50U3VwcGx5OwogICAgfQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKQogICAgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgbm90TG9ja2VkIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUodHJhZGVhYmxlKTsKICAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgICBUcmFuc2ZlciggbXNnLnNlbmRlciwgX3RvLCAgX3ZhbHVlKTsKICAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgIH0KICAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKXB1YmxpYyBub3RMb2NrZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSghbG9ja2VkQWNjb3VudHNbX2Zyb21dICYmICFsb2NrZWRBY2NvdW50c1tfdG9dKTsKCQlyZXF1aXJlKHRyYWRlYWJsZSk7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUKICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlCiAgICAgICAgICAgICYmIF92YWx1ZSA+IDAKICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBUcmFuc2ZlciggX2Zyb20sIF90bywgIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsICBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQgcmVtYWluaW5nKXsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7CiAgIAogICBtb2RpZmllciBub3RMb2NrZWQoKXsKICAgICAgIHJlcXVpcmUgKCFsb2NrZWRBY2NvdW50c1ttc2cuc2VuZGVyXSk7CiAgICAgICBfOwogICB9Cn0='.
	

]
