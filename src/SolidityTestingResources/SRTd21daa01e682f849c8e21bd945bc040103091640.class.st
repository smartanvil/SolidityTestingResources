Class {
	#name : #SRTd21daa01e682f849c8e21bd945bc040103091640,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd21daa01e682f849c8e21bd945bc040103091640 >> base64 [
	^ ''.
	

]
