Class {
	#name : #SRTE1a6b457841eC3201a541E823b916BBd0885e1Db,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE1a6b457841eC3201a541E823b916BBd0885e1Db >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCi8vLyBJbXBsZW1lbnRzIEVSQyAyMCBUb2tlbiBzdGFuZGFyZDogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi8vLyBAdGl0bGUgQWJzdHJhY3QgdG9rZW4gY29udHJhY3QgLSBGdW5jdGlvbnMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgdG9rZW4gY29udHJhY3RzLgpjb250cmFjdCBUb2tlbiB7CiAgICAvLyBUaGlzIGlzIG5vdCBhbiBhYnN0cmFjdCBmdW5jdGlvbiwgYmVjYXVzZSBzb2xjIHdvbid0IHJlY29nbml6ZSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgcHVibGljIHZhcmlhYmxlcyBhcyBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHt9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBvd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgSHVtYW5pcVRva2VuIGlzIFRva2VuIHsKICAgIGZ1bmN0aW9uIGlzc3VlVG9rZW5zKGFkZHJlc3MgX2ZvciwgdWludCB0b2tlbkNvdW50KSBwYXlhYmxlIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gY2hhbmdlRW1pc3Npb25Db250cmFjdEFkZHJlc3MoYWRkcmVzcyBuZXdBZGRyZXNzKSByZXR1cm5zIChib29sKTsKfQoKLy8vIEB0aXRsZSBIdW1hbmlxSUNPIGNvbnRyYWN0IC0gVGFrZXMgZnVuZHMgZnJvbSB1c2VycyBhbmQgaXNzdWVzIHRva2Vucy4KLy8vIEBhdXRob3IgRXZnZW55IFl1cnRhZXYgLSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjZjMDkxYTBiMDkwMjE1MmMwOTE4MDQwOTFlMDUwMzAyMDAwZDBlNDIwZjAzMDEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+Pgpjb250cmFjdCBIdW1hbmlxSUNPIHsKCiAgICAvKgogICAgICogRXh0ZXJuYWwgY29udHJhY3RzCiAgICAgKi8KICAgIEh1bWFuaXFUb2tlbiBwdWJsaWMgaHVtYW5pcVRva2VuID0gSHVtYW5pcVRva2VuKDB4OTczNGMxMzZGNWM2MzUzMWI2MEQwMjU0OEJjYTczYTNkNzJFMDI0RCk7CgogICAgLyoKICAgICAqIENyb3dkZnVuZGluZyBwYXJhbWV0ZXJzCiAgICAgKi8KICAgIHVpbnQgY29uc3RhbnQgcHVibGljIENST1dERlVORElOR19QRVJJT0QgPSAxMiBkYXlzOwogICAgLy8gR29hbCB0aHJlc2hvbGQsIDEwMDAwIEVUSAogICAgdWludCBjb25zdGFudCBwdWJsaWMgQ1JPV0RTQUxFX1RBUkdFVCA9IDEwMDAwIGV0aGVyOwoKICAgIC8qCiAgICAgKiAgU3RvcmFnZQogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyOwogICAgYWRkcmVzcyBwdWJsaWMgbXVsdGlzaWc7CiAgICB1aW50IHB1YmxpYyBzdGFydERhdGUgPSAwOwogICAgdWludCBwdWJsaWMgaWNvQmFsYW5jZSA9IDA7CiAgICB1aW50IHB1YmxpYyBiYXNlVG9rZW5QcmljZSA9IDY2NiBzemFibzsgLy8gMC4wMDA2NjYgRVRICiAgICB1aW50IHB1YmxpYyBkaXNjb3VudGVkUHJpY2UgPSBiYXNlVG9rZW5QcmljZTsKICAgIGJvb2wgcHVibGljIGlzSUNPQWN0aXZlID0gZmFsc2U7CgogICAgLy8gcGFydGljaXBhbnQgYWRkcmVzcyA9PiB2YWx1ZSBpbiBXZWkKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGludmVzdG1lbnRzOwoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlGb3VuZGVyKCkgewogICAgICAgIC8vIE9ubHkgZm91bmRlciBpcyBhbGxvd2VkIHRvIGRvIHRoaXMgYWN0aW9uLgogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGZvdW5kZXIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbWluSW52ZXN0bWVudCgpIHsKICAgICAgICAvLyBVc2VyIGhhcyB0byBzZW5kIGF0IGxlYXN0IHRoZSBldGhlciB2YWx1ZSBvZiBvbmUgdG9rZW4uCiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IGJhc2VUb2tlblByaWNlKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGljb0FjdGl2ZSgpIHsKICAgICAgICBpZiAoaXNJQ09BY3RpdmUgPT0gZmFsc2UpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgYXBwbHlCb251cygpIHsKICAgICAgICB1aW50IGljb0R1cmF0aW9uID0gbm93IC0gc3RhcnREYXRlOwogICAgICAgIGlmIChpY29EdXJhdGlvbiA+PSAyNDggaG91cnMpIHsKICAgICAgICAgICAgZGlzY291bnRlZFByaWNlID0gYmFzZVRva2VuUHJpY2U7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGljb0R1cmF0aW9uID49IDE3NiBob3VycykgewogICAgICAgICAgICBkaXNjb3VudGVkUHJpY2UgPSAoYmFzZVRva2VuUHJpY2UgKiAxMDApIC8gMTA3OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChpY29EdXJhdGlvbiA+PSAxMDQgaG91cnMpIHsKICAgICAgICAgICAgZGlzY291bnRlZFByaWNlID0gKGJhc2VUb2tlblByaWNlICogMTAwKSAvIDEyMDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoaWNvRHVyYXRpb24gPj0gMzIgaG91cnMpIHsKICAgICAgICAgICAgZGlzY291bnRlZFByaWNlID0gKGJhc2VUb2tlblByaWNlICogMTAwKSAvIDE0MjsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoaWNvRHVyYXRpb24gPj0gMTIgaG91cnMpIHsKICAgICAgICAgICAgZGlzY291bnRlZFByaWNlID0gKGJhc2VUb2tlblByaWNlICogMTAwKSAvIDE1MDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGRpc2NvdW50ZWRQcmljZSA9IChiYXNlVG9rZW5QcmljZSAqIDEwMCkgLyAxNzA7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIHVzZXIgdG8gY3JlYXRlIHRva2VucyBpZiB0b2tlbiBjcmVhdGlvbiBpcyBzdGlsbCBnb2luZwogICAgLy8vIGFuZCBjYXAgd2FzIG5vdCByZWFjaGVkLiBSZXR1cm5zIHRva2VuIGNvdW50LgogICAgZnVuY3Rpb24gZnVuZCgpCiAgICAgICAgcHVibGljCiAgICAgICAgYXBwbHlCb251cwogICAgICAgIGljb0FjdGl2ZQogICAgICAgIG1pbkludmVzdG1lbnQKICAgICAgICBwYXlhYmxlCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICAvLyBUb2tlbiBjb3VudCBpcyByb3VuZGVkIGRvd24uIFNlbnQgRVRIIHNob3VsZCBiZSBtdWx0aXBsZXMgb2YgYmFzZVRva2VuUHJpY2UuCiAgICAgICAgdWludCB0b2tlbkNvdW50ID0gbXNnLnZhbHVlIC8gZGlzY291bnRlZFByaWNlOwogICAgICAgIC8vIEV0aGVyIHNwZW50IGJ5IHVzZXIuCiAgICAgICAgdWludCBpbnZlc3RtZW50ID0gdG9rZW5Db3VudCAqIGRpc2NvdW50ZWRQcmljZTsKICAgICAgICAvLyBTZW5kIGNoYW5nZSBiYWNrIHRvIHVzZXIuCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IGludmVzdG1lbnQgJiYgIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUgLSBpbnZlc3RtZW50KSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgLy8gVXBkYXRlIGZ1bmQncyBhbmQgdXNlcidzIGJhbGFuY2UgYW5kIHRvdGFsIHN1cHBseSBvZiB0b2tlbnMuCiAgICAgICAgaWNvQmFsYW5jZSArPSBpbnZlc3RtZW50OwogICAgICAgIGludmVzdG1lbnRzW21zZy5zZW5kZXJdICs9IGludmVzdG1lbnQ7CiAgICAgICAgLy8gU2VuZCBmdW5kcyB0byBmb3VuZGVycy4KICAgICAgICBpZiAoIW11bHRpc2lnLnNlbmQoaW52ZXN0bWVudCkpIHsKICAgICAgICAgICAgLy8gQ291bGQgbm90IHNlbmQgbW9uZXkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmICghaHVtYW5pcVRva2VuLmlzc3VlVG9rZW5zKG1zZy5zZW5kZXIsIHRva2VuQ291bnQpKSB7CiAgICAgICAgICAgIC8vIFRva2VucyBjb3VsZCBub3QgYmUgaXNzdWVkLgogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRva2VuQ291bnQ7CiAgICB9CgogICAgLy8vIEBkZXYgSXNzdWVzIHRva2VucyBmb3IgdXNlcnMgd2hvIG1hZGUgQlRDIHB1cmNoYXNlcy4KICAgIC8vLyBAcGFyYW0gYmVuZWZpY2lhcnkgQWRkcmVzcyB0aGUgdG9rZW5zIHdpbGwgYmUgaXNzdWVkIHRvLgogICAgLy8vIEBwYXJhbSBfdG9rZW5Db3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIGlzc3VlLgogICAgZnVuY3Rpb24gZnVuZEJUQyhhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IF90b2tlbkNvdW50KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgYXBwbHlCb251cwogICAgICAgIGljb0FjdGl2ZQogICAgICAgIG9ubHlGb3VuZGVyCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICAvLyBBcHByb3hpbWF0ZSBldGhlciBzcGVudC4KICAgICAgICB1aW50IGludmVzdG1lbnQgPSBfdG9rZW5Db3VudCAqIGRpc2NvdW50ZWRQcmljZTsKICAgICAgICAvLyBVcGRhdGUgZnVuZCdzIGFuZCB1c2VyJ3MgYmFsYW5jZSBhbmQgdG90YWwgc3VwcGx5IG9mIHRva2Vucy4KICAgICAgICBpY29CYWxhbmNlICs9IGludmVzdG1lbnQ7CiAgICAgICAgaW52ZXN0bWVudHNbYmVuZWZpY2lhcnldICs9IGludmVzdG1lbnQ7CiAgICAgICAgaWYgKCFodW1hbmlxVG9rZW4uaXNzdWVUb2tlbnMoYmVuZWZpY2lhcnksIF90b2tlbkNvdW50KSkgewogICAgICAgICAgICAvLyBUb2tlbnMgY291bGQgbm90IGJlIGlzc3VlZC4KICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHJldHVybiBfdG9rZW5Db3VudDsKICAgIH0KCiAgICAvLy8gQGRldiBJZiBJQ08gaGFzIHN1Y2Nlc3NmdWxseSBmaW5pc2hlZCBzZW5kcyB0aGUgbW9uZXkgdG8gbXVsdGlzaWcKICAgIC8vLyB3YWxsZXQuCiAgICBmdW5jdGlvbiBmaW5pc2hDcm93ZHNhbGUoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUZvdW5kZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChpc0lDT0FjdGl2ZSA9PSB0cnVlKSB7CiAgICAgICAgICAgIGlzSUNPQWN0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIC8vIEZvdW5kZXJzIHJlY2VpdmUgMTQlIG9mIGFsbCBjcmVhdGVkIHRva2Vucy4KICAgICAgICAgICAgdWludCBmb3VuZGVyQm9udXMgPSAoKGljb0JhbGFuY2UgLyBiYXNlVG9rZW5QcmljZSkgKiAxMTQpIC8gMTAwOwogICAgICAgICAgICBpZiAoIWh1bWFuaXFUb2tlbi5pc3N1ZVRva2VucyhtdWx0aXNpZywgZm91bmRlckJvbnVzKSkgewogICAgICAgICAgICAgICAgLy8gVG9rZW5zIGNvdWxkIG5vdCBiZSBpc3N1ZWQuCiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBTZXRzIHRva2VuIHZhbHVlIGluIFdlaS4KICAgIC8vLyBAcGFyYW0gdmFsdWVJbldlaSBOZXcgdmFsdWUuCiAgICBmdW5jdGlvbiBjaGFuZ2VCYXNlVG9rZW5QcmljZSh1aW50IHZhbHVlSW5XZWkpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5Rm91bmRlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYmFzZVRva2VuUHJpY2UgPSB2YWx1ZUluV2VpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRoYXQgYWN0aXZhdGVzIElDTy4KICAgIGZ1bmN0aW9uIHN0YXJ0SUNPKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlGb3VuZGVyCiAgICB7CiAgICAgICAgaWYgKGlzSUNPQWN0aXZlID09IGZhbHNlICYmIHN0YXJ0RGF0ZSA9PSAwKSB7CiAgICAgICAgICAvLyBTdGFydCBJQ08KICAgICAgICAgIGlzSUNPQWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIC8vIFNldCBzdGFydC1kYXRlIG9mIHRva2VuIGNyZWF0aW9uCiAgICAgICAgICBzdGFydERhdGUgPSBub3c7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHNldHMgZm91bmRlciBhbmQgbXVsdGlzaWcgYWRkcmVzc2VzLgogICAgZnVuY3Rpb24gSHVtYW5pcUlDTyhhZGRyZXNzIF9tdWx0aXNpZykgewogICAgICAgIC8vIFNldCBmb3VuZGVyIGFkZHJlc3MKICAgICAgICBmb3VuZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAvLyBTZXQgbXVsdGlzaWcgYWRkcmVzcwogICAgICAgIG11bHRpc2lnID0gX211bHRpc2lnOwogICAgfQoKICAgIC8vLyBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uLiBDYWxscyBmdW5kKCkgZnVuY3Rpb24gdG8gY3JlYXRlIHRva2Vucy4KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGZ1bmQoKTsKICAgIH0KfQ=='.
	

]
