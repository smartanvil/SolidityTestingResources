Class {
	#name : #SRT303f942c01f3ecb52b60b0a609b853b067d839c0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT303f942c01f3ecb52b60b0a609b853b067d839c0 >> base64 [
	^ ''.
	

]
