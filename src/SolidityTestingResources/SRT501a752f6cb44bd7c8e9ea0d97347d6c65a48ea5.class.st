Class {
	#name : #SRT501a752f6cb44bd7c8e9ea0d97347d6c65a48ea5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT501a752f6cb44bd7c8e9ea0d97347d6c65a48ea5 >> base64 [
	^ ''.
	

]
