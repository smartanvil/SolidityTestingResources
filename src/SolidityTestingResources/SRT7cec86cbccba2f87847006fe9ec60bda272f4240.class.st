Class {
	#name : #SRT7cec86cbccba2f87847006fe9ec60bda272f4240,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7cec86cbccba2f87847006fe9ec60bda272f4240 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBUb2tlbiB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAqLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKCmNvbnRyYWN0IEFic3RyYWN0U2luZ3VsYXJEVFZUb2tlbiBpcyBUb2tlbiB7Cgp9CgoKLy8vIEB0aXRsZSBGdW5kIGNvbnRyYWN0IC0gSW1wbGVtZW50cyByZXdhcmQgZGlzdHJpYnV0aW9uLgovLy8gQGF1dGhvciBTdGVmYW4gR2VvcmdlIC0gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZDZhNWEyYjNiMGI3YjhmOGIxYjNiOWE0YjFiMzk2YjViOWI4YTViM2I4YTVhZmE1ZjhiOGIzYTIiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgovLy8gQGF1dGhvciBNaWxhZCBNb3N0YXZpIC0gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNjcwYTBlMGIwNjAzNDkwYTA4MTQxMzA2MTEwZTI3MDQwODA5MTQwMjA5MTQxZTE0NDkwOTAyMTMiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+Pgpjb250cmFjdCBTaW5ndWxhckRUVkZ1bmQgewogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gIjAuMS4wIjsKCiAgICAvKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFNpbmd1bGFyRFRWVG9rZW4gcHVibGljIHNpbmd1bGFyRFRWVG9rZW47CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgdWludCBwdWJsaWMgdG90YWxSZXdhcmQ7CgogICAgLy8gVXNlcidzIGFkZHJlc3MgPT4gUmV3YXJkIGF0IHRpbWUgb2Ygd2l0aGRyYXcKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHJld2FyZEF0VGltZU9mV2l0aGRyYXc7CgogICAgLy8gVXNlcidzIGFkZHJlc3MgPT4gUmV3YXJkIHdoaWNoIGNhbiBiZSB3aXRoZHJhd24KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIG93ZWQ7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIC8vIE9ubHkgZ3VhcmQgaXMgYWxsb3dlZCB0byBkbyB0aGlzIGFjdGlvbi4KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvKgogICAgICogIENvbnRyYWN0IGZ1bmN0aW9ucwogICAgICovCiAgICAvLy8gQGRldiBEZXBvc2l0cyByZXdhcmQuIFJldHVybnMgc3VjY2Vzcy4KICAgIGZ1bmN0aW9uIGRlcG9zaXRSZXdhcmQoKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHRvdGFsUmV3YXJkICs9IG1zZy52YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBXaXRoZHJhd3MgcmV3YXJkIGZvciB1c2VyLiBSZXR1cm5zIHJld2FyZC4KICAgIC8vLyBAcGFyYW0gZm9yQWRkcmVzcyB1c2VyJ3MgYWRkcmVzcy4KICAgIGZ1bmN0aW9uIGNhbGNSZXdhcmQoYWRkcmVzcyBmb3JBZGRyZXNzKSBwcml2YXRlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2luZ3VsYXJEVFZUb2tlbi5iYWxhbmNlT2YoZm9yQWRkcmVzcykgKiAodG90YWxSZXdhcmQgLSByZXdhcmRBdFRpbWVPZldpdGhkcmF3W2ZvckFkZHJlc3NdKSAvIHNpbmd1bGFyRFRWVG9rZW4udG90YWxTdXBwbHkoKTsKICAgIH0KCiAgICAvLy8gQGRldiBXaXRoZHJhd3MgcmV3YXJkIGZvciB1c2VyLiBSZXR1cm5zIHJld2FyZC4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3UmV3YXJkKCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHVpbnQgdmFsdWUgPSBjYWxjUmV3YXJkKG1zZy5zZW5kZXIpICsgb3dlZFttc2cuc2VuZGVyXTsKICAgICAgICByZXdhcmRBdFRpbWVPZldpdGhkcmF3W21zZy5zZW5kZXJdID0gdG90YWxSZXdhcmQ7CiAgICAgICAgb3dlZFttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgaWYgKHZhbHVlID4gMCAmJiAhbXNnLnNlbmRlci5zZW5kKHZhbHVlKSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWRpdHMgcmV3YXJkIHRvIG93ZWQgYmFsYW5jZS4KICAgIC8vLyBAcGFyYW0gZm9yQWRkcmVzcyB1c2VyJ3MgYWRkcmVzcy4KICAgIGZ1bmN0aW9uIHNvZnRXaXRoZHJhd1Jld2FyZEZvcihhZGRyZXNzIGZvckFkZHJlc3MpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHVpbnQgdmFsdWUgPSBjYWxjUmV3YXJkKGZvckFkZHJlc3MpOwogICAgICAgIHJld2FyZEF0VGltZU9mV2l0aGRyYXdbZm9yQWRkcmVzc10gPSB0b3RhbFJld2FyZDsKICAgICAgICBvd2VkW2ZvckFkZHJlc3NdICs9IHZhbHVlOwogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIHRva2VuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIHNpbmd1bGFyRFRWVG9rZW5BZGRyZXNzIFRva2VuIGFkZHJlc3MuCiAgICBmdW5jdGlvbiBzZXR1cChhZGRyZXNzIHNpbmd1bGFyRFRWVG9rZW5BZGRyZXNzKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAoYWRkcmVzcyhzaW5ndWxhckRUVlRva2VuKSA9PSAwKSB7CiAgICAgICAgICAgIHNpbmd1bGFyRFRWVG9rZW4gPSBBYnN0cmFjdFNpbmd1bGFyRFRWVG9rZW4oc2luZ3VsYXJEVFZUb2tlbkFkZHJlc3MpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHNldHMgZ3VhcmQgYWRkcmVzcy4KICAgIGZ1bmN0aW9uIFNpbmd1bGFyRFRWRnVuZCgpIHsKICAgICAgICAvLyBTZXQgb3duZXIgYWRkcmVzcwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiBhY3RzIGFzIGRlcG9zaXRSZXdhcmQoKQogICAgZnVuY3Rpb24gKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7CiAgICAgICAgICAgIHdpdGhkcmF3UmV3YXJkKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZGVwb3NpdFJld2FyZCgpOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
