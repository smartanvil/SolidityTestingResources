Class {
	#name : #SRTb90e64082d00437e65a76d4c8187596bc213480a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb90e64082d00437e65a76d4c8187596bc213480a >> base64 [
	^ ''.
	

]
