Class {
	#name : #SRT61d0407edb149dc453c47fe31139fae9c1472da6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61d0407edb149dc453c47fe31139fae9c1472da6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE1OwoKLyoqCipsaWJyYXJ5IG5hbWUgOiBTYWZlTWF0aAoqcHVycG9zZSA6IGJlIHRoZSBsaWJyYXJ5IGZvciB0aGUgc21hcnQgY29udHJhY3QgZm9yIHRoZSBzd2FwIGJldHdlZW4gdGhlIGdvZHogYW5kIGV0aGVyCipnb2FsIDogdG8gYWNoaWV2ZSB0aGUgc2VjdXJlIGJhc2ljIG1hdGggb3BlcmF0aW9ucwoqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLypmdW5jdGlvbiBuYW1lIDogbXVsKi8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBtdWx0aXBsaWNhdGUqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAvKmFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7Ki8KICAgIHJldHVybiBjOwogIH0KCiAgLypmdW5jdGlvbiBuYW1lIDogZGl2Ki8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBkaXZpc2lvbiovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KCiAgLypmdW5jdGlvbiBuYW1lIDogc3ViKi8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBzdWJzdHJhY3QqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLyphc3NlcnQoYiA8PSBhKTsqLwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgLypmdW5jdGlvbiBuYW1lIDogYWRkKi8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBzdW0qLwogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICAvKmFzc2VydChjID49IGEpOyovCiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgoqY29udHJhY3QgbmFtZSA6IHRva2VuUmVjaXBpZW50CiovCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0KCi8qKgoqY29udHJhY3QgbmFtZSA6IFRva2VuCiovCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qdXNpbmcgdGhlIHNlY3VyZSBtYXRoIGxpYnJhcnkgZm9yIGJhc2ljIG1hdGggb3BlcmF0aW9ucyovCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdEU0NTLkdPRFouVE9LRU4nOwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gVG9rZW4oCiAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbAogICAgICAgICkgewogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgLyogR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMqLwogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogVXBkYXRlIHRvdGFsIHN1cHBseSovCiAgICAgICAgbmFtZSA9IHRva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMqLwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMqLwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzKi8KICAgIH0KCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZCovCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAvKiBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gqLwogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSByZXZlcnQoKTsgLyogQ2hlY2sgZm9yIG92ZXJmbG93cyovCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlciovCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQqLwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgLyogTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UqLwogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zIGJ1dCB0cmFuc2ZlciBmcm9tIHRoZSBvcmlnaW4qLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tT3JpZ2luKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFkZHJlc3Mgb3JpZ2luID0gdHgub3JpZ2luOwogICAgICAgIGlmIChvcmlnaW4gPT0gMHgwKSByZXZlcnQoKTsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiovCiAgICAgICAgaWYgKGJhbGFuY2VPZltvcmlnaW5dIDwgX3ZhbHVlKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7ICAvKiBDaGVjayBmb3Igb3ZlcmZsb3dzKi8KICAgICAgICBiYWxhbmNlT2Zbb3JpZ2luXSA9IGJhbGFuY2VPZltvcmlnaW5dLnN1YihfdmFsdWUpOyAgICAgICAvKiBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIqLwogICAgICAgIGJhbGFuY2VPZltfdG9dID0gYmFsYW5jZU9mW190b10uYWRkKF92YWx1ZSk7ICAgICAgICAgICAgIC8qIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50Ki8KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChfdG8gPT0gMHgwKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAvKiBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gqLwogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSByZXZlcnQoKTsgIC8qIENoZWNrIGZvciBvdmVyZmxvd3MqLwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXZlcnQoKTsgICAgIC8qIENoZWNrIGFsbG93YW5jZSovCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSA9IGJhbGFuY2VPZltfZnJvbV0uc3ViKF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyKi8KICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQqLwogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cgp9'.
	

]
