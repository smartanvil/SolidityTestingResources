Class {
	#name : #SRT971822dcd2852e3f65918f3571dace0abfe98d14,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT971822dcd2852e3f65918f3571dace0abfe98d14 >> base64 [
	^ ''.
	

]
