Class {
	#name : #SRTfec0cf7fe078a500abf15f1284958f22049c2c7e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfec0cf7fe078a500abf15f1284958f22049c2c7e >> base64 [
	^ ''.
	

]
