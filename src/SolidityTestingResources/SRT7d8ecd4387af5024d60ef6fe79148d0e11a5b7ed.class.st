Class {
	#name : #SRT7d8ecd4387af5024d60ef6fe79148d0e11a5b7ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7d8ecd4387af5024d60ef6fe79148d0e11a5b7ed >> base64 [
	^ ''.
	

]
