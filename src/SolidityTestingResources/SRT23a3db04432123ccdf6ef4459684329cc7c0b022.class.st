Class {
	#name : #SRT23a3db04432123ccdf6ef4459684329cc7c0b022,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23a3db04432123ccdf6ef4459684329cc7c0b022 >> base64 [
	^ ''.
	

]
