Class {
	#name : #SRTae4f56f072c34c0a65b3ae3e4db797d831439d93,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTae4f56f072c34c0a65b3ae3e4db797d831439d93 >> base64 [
	^ ''.
	

]
