Class {
	#name : #SRT98ca85c59dee34dbc26667eac04f13e39f5f765a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT98ca85c59dee34dbc26667eac04f13e39f5f765a >> base64 [
	^ ''.
	

]
