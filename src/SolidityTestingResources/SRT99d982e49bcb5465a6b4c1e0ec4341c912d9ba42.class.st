Class {
	#name : #SRT99d982e49bcb5465a6b4c1e0ec4341c912d9ba42,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99d982e49bcb5465a6b4c1e0ec4341c912d9ba42 >> base64 [
	^ ''.
	

]
