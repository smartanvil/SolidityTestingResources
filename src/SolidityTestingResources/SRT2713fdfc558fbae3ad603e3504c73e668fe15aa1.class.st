Class {
	#name : #SRT2713fdfc558fbae3ad603e3504c73e668fe15aa1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2713fdfc558fbae3ad603e3504c73e668fe15aa1 >> base64 [
	^ ''.
	

]
