Class {
	#name : #SRT53325828EdDECdC4378acB9d2d116ba6B38BD35a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53325828EdDECdC4378acB9d2d116ba6B38BD35a >> base64 [
	^ ''.
	

]
