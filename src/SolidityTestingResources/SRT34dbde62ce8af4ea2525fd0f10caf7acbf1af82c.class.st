Class {
	#name : #SRT34dbde62ce8af4ea2525fd0f10caf7acbf1af82c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT34dbde62ce8af4ea2525fd0f10caf7acbf1af82c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICAKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KICAKfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIAogICAgLy8gUHVibGljIHZhcmlhYmxlIHdpdGggYWRkcmVzcyBvZiBvd25lcgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICAKICAgIC8qKgogICAgICogTG9nIG93bmVyc2hpcCB0cmFuc2ZlcmVuY2UKICAgICAqLwogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoCiAgICBhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwKICAgIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgICAgIC8vIFNldCB0aGUgY29udHJhY3QgY3JlYXRvciBhcyB0aGUgb3duZXIKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICAvLyBDaGVjayB0aGF0IHNlbmRlciBpcyBvd25lcgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICAvLyBDaGVjayBmb3IgYSBub24tbnVsbCBvd25lcgogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgLy8gTG9nIG93bmVyc2hpcCB0cmFuc2ZlcmVuY2UKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgICAgIC8vIFNldCBuZXcgb3duZXIKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogICAgCn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cgp9CgoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBFUkMyMEJhc2ljLCBPd25hYmxlIHsKCiAgICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpOwoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAKfQoKCi8qKgogKiBAdGl0bGUgRXh0ZW5kZWQgRVJDMjAgVG9rZW4gY29udHJhY3QKICogQGRldiBDdXN0b20gVG9rZW4gKEVSQzIwIFRva2VuKSB0cmFuc2FjdGlvbnMuCiAqLwpjb250cmFjdCBTdHlyYXNUb2tlbiBpcyBNaW50YWJsZVRva2VuIHsKICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJTdHlyYXMiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiU1RZIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludDI1NiBwdWJsaWMgcmVzZXJ2ZWRTdXBwbHk7CgogICAgdWludDI1NiBwdWJsaWMgcHVibGljTG9ja0VuZCA9IDE1MTYwNjA4MDA7IC8vIEdNVDogVHVlc2RheSwgSmFudWFyeSAxNiwgMjAxOCAwOjAwOjAwCiAgICB1aW50MjU2IHB1YmxpYyBwYXJ0bmVyc0xvY2tFbmQgPSAxNTMwMjMwNDAwOyAvLyBHTVQ6IEZyaWRheSwgSnVuZSAyOSwgMjAxOCAwOjAwOjAwCiAgICB1aW50MjU2IHB1YmxpYyBwYXJ0bmVyc01pbnRMb2NrRW5kID0gMTUxNDY3ODQwMDsgLy8gR01UOiBTdW5kYXksIERlY2VtYmVyIDMxLCAyMDE3IDA6MDA6MDAKCiAgICBhZGRyZXNzIHB1YmxpYyBwYXJ0bmVyc1dhbGxldDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBTdHlyYXNUb2tlbihhZGRyZXNzIHBhcnRuZXJzLCB1aW50MjU2IHJlc2VydmVkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUocGFydG5lcnMgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcGFydG5lcnNXYWxsZXQgPSBwYXJ0bmVyczsKICAgICAgICByZXNlcnZlZFN1cHBseSA9IHJlc2VydmVkOwogICAgICAgIGFzc2VydChwdWJsaWNMb2NrRW5kIDw9IHBhcnRuZXJzTG9ja0VuZCk7CiAgICAgICAgYXNzZXJ0KHBhcnRuZXJzTWludExvY2tFbmQgPCBwYXJ0bmVyc0xvY2tFbmQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSBpbnZlc3RvciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBpbnZlc3RvcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZU9mSW52ZXN0b3IpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbaW52ZXN0b3JdOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSgobXNnLnNlbmRlciAhPSBwYXJ0bmVyc1dhbGxldCAmJiBub3cgPj0gcHVibGljTG9ja0VuZCkgfHwgbm93ID49IHBhcnRuZXJzTG9ja0VuZCk7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCAmJiBfYW1vdW50IDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAKICAgIC8qKgogICAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgICAqIEBwYXJhbSBfYW1vdW50IHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSgoX2Zyb20gIT0gcGFydG5lcnNXYWxsZXQgJiYgbm93ID49IHB1YmxpY0xvY2tFbmQpIHx8IG5vdyA+PSBwYXJ0bmVyc0xvY2tFbmQpOwogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDAgJiYgX2Ftb3VudCA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgICAqCiAgICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgICAqLwogICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgICAgICB9CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQnVybnMgYSBzcGVjaWZpYyBhbW91bnQgb2YgdG9rZW5zLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIGJ1cm5lZC4KICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKChtc2cuc2VuZGVyICE9IHBhcnRuZXJzV2FsbGV0ICYmIG5vdyA+PSBwdWJsaWNMb2NrRW5kKSB8fCBub3cgPj0gcGFydG5lcnNMb2NrRW5kKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDAgJiYgX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgICAqLwogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RvICE9IHBhcnRuZXJzV2FsbGV0KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgTWludChfdG8sIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgcmVzZXJ2ZWQgdG9rZW5zIHRvIHBhcnRuZXJzCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50UGFydG5lcnModWludDI1NiBhbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gcGFydG5lcnNNaW50TG9ja0VuZCk7CiAgICAgICAgcmVxdWlyZShyZXNlcnZlZFN1cHBseSA+IDApOwogICAgICAgIHJlcXVpcmUoYW1vdW50IDw9IHJlc2VydmVkU3VwcGx5KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChhbW91bnQpOwogICAgICAgIHJlc2VydmVkU3VwcGx5ID0gcmVzZXJ2ZWRTdXBwbHkuc3ViKGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbcGFydG5lcnNXYWxsZXRdID0gYmFsYW5jZXNbcGFydG5lcnNXYWxsZXRdLmFkZChhbW91bnQpOwogICAgICAgIE1pbnQocGFydG5lcnNXYWxsZXQsIGFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgcGFydG5lcnNXYWxsZXQsIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgCn0KCgovKioKICogQHRpdGxlIFJlZnVuZFZhdWx0CiAqIEBkZXYgVGhpcyBjb250cmFjdCBpcyB1c2VkIGZvciBzdG9yaW5nIGZ1bmRzIHdoaWxlIGEgY3Jvd2RzYWxlCiAqIGlzIGluIHByb2dyZXNzLiBTdXBwb3J0cyByZWZ1bmRpbmcgdGhlIG1vbmV5IGlmIGNyb3dkc2FsZSBmYWlscywKICogYW5kIGZvcndhcmRpbmcgaXQgaWYgY3Jvd2RzYWxlIGlzIHN1Y2Nlc3NmdWwuCiAqLwpjb250cmFjdCBSZWZ1bmRWYXVsdCBpcyBPd25hYmxlIHsKICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGVudW0gU3RhdGUgeyBBY3RpdmUsIFJlZnVuZGluZywgQ2xvc2VkIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBkZXBvc2l0ZWQ7CiAgICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CiAgICBTdGF0ZSBwdWJsaWMgc3RhdGU7CgogICAgZXZlbnQgQ2xvc2VkKCk7CiAgICBldmVudCBSZWZ1bmRzRW5hYmxlZCgpOwogICAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHdlaUFtb3VudCk7CgogICAgZnVuY3Rpb24gUmVmdW5kVmF1bHQoYWRkcmVzcyBfdG8pIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgd2FsbGV0ID0gX3RvOwogICAgICAgIHN0YXRlID0gU3RhdGUuQWN0aXZlOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlcG9zaXQoYWRkcmVzcyBpbnZlc3Rvcikgb25seU93bmVyIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLkFjdGl2ZSk7CiAgICAgICAgZGVwb3NpdGVkW2ludmVzdG9yXSA9IGRlcG9zaXRlZFtpbnZlc3Rvcl0uYWRkKG1zZy52YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gY2xvc2UoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLkFjdGl2ZSk7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7CiAgICAgICAgQ2xvc2VkKCk7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZW5hYmxlUmVmdW5kcygpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQWN0aXZlKTsKICAgICAgICBzdGF0ZSA9IFN0YXRlLlJlZnVuZGluZzsKICAgICAgICBSZWZ1bmRzRW5hYmxlZCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZChhZGRyZXNzIGludmVzdG9yKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuUmVmdW5kaW5nKTsKICAgICAgICByZXF1aXJlKGRlcG9zaXRlZFtpbnZlc3Rvcl0gPiAwKTsKICAgICAgICB1aW50MjU2IGRlcG9zaXRlZFZhbHVlID0gZGVwb3NpdGVkW2ludmVzdG9yXTsKICAgICAgICBkZXBvc2l0ZWRbaW52ZXN0b3JdID0gMDsKICAgICAgICBpbnZlc3Rvci50cmFuc2ZlcihkZXBvc2l0ZWRWYWx1ZSk7CiAgICAgICAgUmVmdW5kZWQoaW52ZXN0b3IsIGRlcG9zaXRlZFZhbHVlKTsKICAgIH0KICAKfQoKCmNvbnRyYWN0IFdpdGhkcmF3YWJsZSBpcyBPd25hYmxlIHsKCiAgICBib29sIHB1YmxpYyB3aXRoZHJhd0VuYWJsZWQgPSBmYWxzZTsKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgICBldmVudCBXaXRoZHJhd2VkKHVpbnQyNTYgd2VpQW1vdW50KTsKICAKICAgIGZ1bmN0aW9uIFdpdGhkcmF3YWJsZShhZGRyZXNzIF90bykgcHVibGljIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICB3YWxsZXQgPSBfdG87CiAgICB9CgogICAgbW9kaWZpZXIgY2FuV2l0aGRyYXcoKSB7CiAgICAgICAgcmVxdWlyZSh3aXRoZHJhd0VuYWJsZWQpOwogICAgICAgIF87CiAgICB9CiAgCiAgICBmdW5jdGlvbiBlbmFibGVXaXRoZHJhdygpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHdpdGhkcmF3RW5hYmxlZCA9IHRydWU7CiAgICB9CiAgCiAgICAvLyBvd25lciBjYW4gd2l0aGRyYXcgZXRoZXIgaGVyZQogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiB3ZWlBbW91bnQpIG9ubHlPd25lciBjYW5XaXRoZHJhdyBwdWJsaWMgewogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IHdlaUFtb3VudCk7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKHdlaUFtb3VudCk7CiAgICAgICAgV2l0aGRyYXdlZCh3ZWlBbW91bnQpOwogICAgfQoKfQoKCmNvbnRyYWN0IFN0eXJhc1ZhdWx0IGlzIFdpdGhkcmF3YWJsZSwgUmVmdW5kVmF1bHQgewogIAogICAgZnVuY3Rpb24gU3R5cmFzVmF1bHQoYWRkcmVzcyB3YWxsZXQpIHB1YmxpYwogICAgICAgIFdpdGhkcmF3YWJsZSh3YWxsZXQpCiAgICAgICAgUmVmdW5kVmF1bHQod2FsbGV0KSB7CiAgICAgICAgLy8gTk9PUAogICAgfQogIAogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgaW52ZXN0b3IpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGRlcG9zaXRlZEJ5SW52ZXN0b3IpIHsKICAgICAgICByZXR1cm4gZGVwb3NpdGVkW2ludmVzdG9yXTsKICAgIH0KICAKICAgIGZ1bmN0aW9uIGVuYWJsZVdpdGhkcmF3KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgICAgIHdpdGhkcmF3RW5hYmxlZCA9IHRydWU7CiAgICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBTdHlyYXNDcm93ZHNhbGUKICogQGRldiBUaGlzIGlzIGEgY2FwcGVkIGFuZCByZWZ1bmRhYmxlIGNyb3dkc2FsZS4KICovCmNvbnRyYWN0IFN0eXJhc0Nyb3dkc2FsZSBpcyBPd25hYmxlIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAKICAgIGVudW0gU3RhdGUgeyBwcmVTYWxlLCBwdWJsaWNTYWxlLCBoYXNGaW5hbGl6ZWQgfQoKICAgIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgZXRoZXIKICAgIC8vIG1pbmltdW0gYW1vdW50IG9mIGZ1bmRzIChzb2Z0LWNhcCkgdG8gYmUgcmFpc2VkIGluIHdlaXMKICAgIC8vIG1heGltdW0gYW1vdW50IG9mIGZ1bmRzIChoYXJkLWNhcCkgdG8gYmUgcmFpc2VkIGluIHdlaXMKICAgIC8vIG1pbmltdW0gYW1vdW50IG9mIHdlaXMgdG8gaW52ZXN0IHBlciBpbnZlc3RvcgogICAgdWludDI1NiBwdWJsaWMgcmF0ZTsKICAgIHVpbnQyNTYgcHVibGljIGdvYWw7CiAgICB1aW50MjU2IHB1YmxpYyBjYXA7CiAgICB1aW50MjU2IHB1YmxpYyBtaW5JbnZlc3QgPSAxMDAwMDAwMDAwMDAwMDAwMDA7IC8vIDAuMSBFVEgKCiAgICAvLyBwcmVzYWxlIHRyZWF0cwogICAgdWludDI1NiBwdWJsaWMgcHJlc2FsZURlYWRsaW5lID0gMTUxMTgyNzIwMDsgLy8gR01UOiBUdWVzZGF5LCBOb3ZlbWJlciAyOCwgMjAxNyAwMDowMDowMAogICAgdWludDI1NiBwdWJsaWMgcHJlc2FsZVJhdGUgPSA0MDAwOyAvLyAxIEVUSCA9PSA0MDAwIFNUWSAzMyUgYm9udXMKICAgIHVpbnQyNTYgcHVibGljIHByZXNhbGVDYXAgPSA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsgLy8gNTAgbWlsbGlvbnMgU1RZCiAgCiAgICAvLyBwdWJzYWxlIHRyZWF0cwogICAgdWludDI1NiBwdWJsaWMgcHVic2FsZURlYWRsaW5lID0gMTUxNDY3ODQwMDsgLy8gR01UOiBTdW5kYXksIERlY2VtYmVyIDMxLCAyMDE3IDA6MDA6MDAKICAgIHVpbnQyNTYgcHVibGljIHB1YnNhbGVSYXRlID0gMzAwMDsgLy8gMSBFVEggPT0gMzAwMCBTVFkKICAgIHVpbnQyNTYgcHVibGljIHB1YnNhbGVDYXAgPSAxODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8gaGFycmQgY2FwID0gcHVic2FsZUNhcCArIHJlc2VydmVkU3VwcGx5IC0+IDIwMDAwMDAwMCBEVFkKICAgIHVpbnQyNTYgcHVibGljIHJlc2VydmVkU3VwcGx5ID0gMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7IC8vIDEwJSBtYXggdG90YWxTdXBwbHkKCiAgICB1aW50MjU2IHB1YmxpYyBzb2Z0Q2FwID0gODQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOyAvLyA4NDAgdGhvdXNhbmRzIFNUWQoKICAgIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgICAvLyBmbGFnIGZvciBpbnZlc3RtZW50cyBmaW5hbGl6YXRpb24KICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IDE1MTEyNzY0MDA7IC8vIEdNVDogVHVlc2RheSwgTm92ZW1iZXIgMjEsIDIwMTcgMTU6MDA6MDAKICAgIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogICAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICAgIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkID0gMDsKICAgIGFkZHJlc3MgcHVibGljIGVzY3Jvd1dhbGxldDsKICAgIGFkZHJlc3MgcHVibGljIHBhcnRuZXJzV2FsbGV0OwoKICAgIC8vIGNvbnRyYWN0IG9mIHRoZSB0b2tlbiBiZWluZyBzb2xkCiAgICAvLyBjb250cmFjdCBvZiB0aGUgdmF1bHQgdXNlZCB0byBob2xkIGZ1bmRzIHdoaWxlIGNyb3dkc2FsZSBpcyBydW5uaW5nCiAgICBTdHlyYXNUb2tlbiBwdWJsaWMgdG9rZW47CiAgICBTdHlyYXNWYXVsdCBwdWJsaWMgdmF1bHQ7CgogICAgU3RhdGUgcHVibGljIHN0YXRlOwoKICAgIC8qKgogICAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICAgKi8KICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBQcmVzYWxlRmluYWxpemVkKCk7CiAgICBldmVudCBGaW5hbGl6ZWQoKTsKCiAgICBmdW5jdGlvbiBTdHlyYXNDcm93ZHNhbGUoYWRkcmVzcyBlc2Nyb3csIGFkZHJlc3MgcGFydG5lcnMpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShub3cgPCBzdGFydFRpbWUpOwogICAgICAgIHJlcXVpcmUocGFydG5lcnMgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShzdGFydFRpbWUgPCBwcmVzYWxlRGVhZGxpbmUpOwogICAgICAgIHJlcXVpcmUocHJlc2FsZURlYWRsaW5lIDwgcHVic2FsZURlYWRsaW5lKTsKICAgICAgICByZXF1aXJlKHB1YnNhbGVSYXRlIDwgcHJlc2FsZVJhdGUpOwogICAgICAgIHJlcXVpcmUocHJlc2FsZUNhcCA8IHB1YnNhbGVDYXApOwogICAgICAgIHJlcXVpcmUoc29mdENhcCA8PSBwdWJzYWxlQ2FwKTsKICAgICAgICBlbmRUaW1lID0gcHJlc2FsZURlYWRsaW5lOwogICAgICAgIGVzY3Jvd1dhbGxldCA9IGVzY3JvdzsKICAgICAgICBwYXJ0bmVyc1dhbGxldCA9IHBhcnRuZXJzOwogICAgICAgIHRva2VuID0gbmV3IFN0eXJhc1Rva2VuKHBhcnRuZXJzV2FsbGV0LCByZXNlcnZlZFN1cHBseSk7CiAgICAgICAgdmF1bHQgPSBuZXcgU3R5cmFzVmF1bHQoZXNjcm93V2FsbGV0KTsKICAgICAgICByYXRlID0gcHJlc2FsZVJhdGU7CiAgICAgICAgZ29hbCA9IHNvZnRDYXAuZGl2KHJhdGUpOwogICAgICAgIGNhcCA9IHByZXNhbGVDYXAuZGl2KHJhdGUpOwogICAgICAgIHN0YXRlID0gU3RhdGUucHJlU2FsZTsKICAgICAgICBhc3NlcnQoZ29hbCA8IGNhcCk7CiAgICAgICAgYXNzZXJ0KHN0YXJ0VGltZSA8IGVuZFRpbWUpOwogICAgfQoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgICB9CiAgCiAgICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKHN0YXRlIDwgU3RhdGUuaGFzRmluYWxpemVkKTsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICAgICAgdWludDI1NiB0b2tlbkFtb3VudCA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwogICAgICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2VuQW1vdW50KTsKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2VuQW1vdW50KTsKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KCiAgICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgdmF1bHQuZGVwb3NpdC52YWx1ZShtc2cudmFsdWUpKG1zZy5zZW5kZXIpOwogICAgICAgIGFzc2VydCh2YXVsdC5iYWxhbmNlID09IHdlaVJhaXNlZCk7CiAgICB9CgogICAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogICAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IHN0YXJ0VGltZSA8PSBub3cgJiYgbm93IDw9IGVuZFRpbWU7CiAgICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgPiAwOwogICAgICAgIGJvb2wgd2l0aGluQ2FwID0gd2VpUmFpc2VkIDwgY2FwOwogICAgICAgIGJvb2wgb3Zlck1pbkludmVzdCA9IG1zZy52YWx1ZSA+PSBtaW5JbnZlc3QgfHwgdmF1bHQuYmFsYW5jZU9mKG1zZy5zZW5kZXIpID49IG1pbkludmVzdDsKICAgICAgICByZXR1cm4gd2l0aGluUGVyaW9kICYmIG5vblplcm9QdXJjaGFzZSAmJiB3aXRoaW5DYXAgJiYgb3Zlck1pbkludmVzdDsKICAgIH0KCiAgICBmdW5jdGlvbiBoYXJkQ2FwKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gcHVic2FsZUNhcCArIHJlc2VydmVkU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIGdvYWxSZWFjaGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gd2VpUmFpc2VkID49IGdvYWw7CiAgICB9CgogICAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICAgIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIGFmdGVyUGVyaW9kID0gbm93ID4gZW5kVGltZTsKICAgICAgICBib29sIGNhcFJlYWNoZWQgPSB3ZWlSYWlzZWQgPj0gY2FwOwogICAgICAgIHJldHVybiBhZnRlclBlcmlvZCB8fCBjYXBSZWFjaGVkOwogICAgfQoKICAgIC8vIGlmIGNyb3dkc2FsZSBpcyB1bnN1Y2Nlc3NmdWwsIGludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kcyBoZXJlCiAgICBmdW5jdGlvbiBjbGFpbVJlZnVuZCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5oYXNGaW5hbGl6ZWQpOwogICAgICAgIHJlcXVpcmUoIWdvYWxSZWFjaGVkKCkpOwogICAgICAgIHZhdWx0LnJlZnVuZChtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVXaXRoZHJhdygpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoZ29hbFJlYWNoZWQoKSk7CiAgICAgICAgdmF1bHQuZW5hYmxlV2l0aGRyYXcoKTsKICAgIH0KICAKICAgIC8vIGlmIGNyb3dkc2FsZSBpcyBzdWNjZXNzZnVsLCBvd25lciBjYW4gd2l0aGRyYXcgZXRoZXIgaGVyZQogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfd2VpQW1vdW50VG9XaXRoZHJhdykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShnb2FsUmVhY2hlZCgpKTsKICAgICAgICB2YXVsdC53aXRoZHJhdyhfd2VpQW1vdW50VG9XaXRoZHJhdyk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemVQcmVzYWxlKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5wcmVTYWxlKTsKICAgICAgICByZXF1aXJlKGhhc0VuZGVkKCkpOwogICAgICAgIHVpbnQyNTYgd2VpRGlmZiA9IDA7CiAgICAgICAgdWludDI1NiByYWlzZWRUb2tlbnMgPSB0b2tlbi50b3RhbFN1cHBseSgpOwogICAgICAgIHJhdGUgPSBwdWJzYWxlUmF0ZTsKICAgICAgICBpZiAoIWdvYWxSZWFjaGVkKCkpIHsKICAgICAgICAgICAgd2VpRGlmZiA9IChzb2Z0Q2FwLnN1YihyYWlzZWRUb2tlbnMpKS5kaXYocmF0ZSk7CiAgICAgICAgICAgIGdvYWwgPSB3ZWlSYWlzZWQuYWRkKHdlaURpZmYpOwogICAgICAgIH0KICAgICAgICB3ZWlEaWZmID0gKHB1YnNhbGVDYXAuc3ViKHJhaXNlZFRva2VucykpLmRpdihyYXRlKTsKICAgICAgICBjYXAgPSB3ZWlSYWlzZWQuYWRkKHdlaURpZmYpOwogICAgICAgIGVuZFRpbWUgPSBwdWJzYWxlRGVhZGxpbmU7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5wdWJsaWNTYWxlOwogICAgICAgIGFzc2VydChnb2FsIDwgY2FwKTsKICAgICAgICBhc3NlcnQoc3RhcnRUaW1lIDwgZW5kVGltZSk7CiAgICAgICAgUHJlc2FsZUZpbmFsaXplZCgpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBNdXN0IGJlIGNhbGxlZCBhZnRlciBjcm93ZHNhbGUgZW5kcywgdG8gZG8gc29tZSBleHRyYSBmaW5hbGl6YXRpb24KICAgICAqIHdvcmsuIENhbGxzIHRoZSBjb250cmFjdCdzIGZpbmFsaXphdGlvbiBmdW5jdGlvbi4KICAgICAqLwogICAgZnVuY3Rpb24gZmluYWxpemUoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLnB1YmxpY1NhbGUpOwogICAgICAgIHJlcXVpcmUoaGFzRW5kZWQoKSk7CiAgICAgICAgZmluYWxpemF0aW9uKCk7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5oYXNGaW5hbGl6ZWQ7CiAgICAgICAgRmluYWxpemVkKCk7CiAgICB9CgogICAgLy8gdmF1bHQgZmluYWxpemF0aW9uIHRhc2ssIGNhbGxlZCB3aGVuIG93bmVyIGNhbGxzIGZpbmFsaXplKCkKICAgIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICAgICAgICBpZiAoZ29hbFJlYWNoZWQoKSkgewogICAgICAgICAgICB2YXVsdC5jbG9zZSgpOwogICAgICAgICAgICB0b2tlbi5taW50UGFydG5lcnMocmVzZXJ2ZWRTdXBwbHkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhdWx0LmVuYWJsZVJlZnVuZHMoKTsKICAgICAgICB9CiAgICAgICAgdmF1bHQudHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICAgIH0KCn0='.
	

]
