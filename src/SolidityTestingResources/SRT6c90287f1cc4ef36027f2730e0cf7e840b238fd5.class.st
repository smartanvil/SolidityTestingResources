Class {
	#name : #SRT6c90287f1cc4ef36027f2730e0cf7e840b238fd5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6c90287f1cc4ef36027f2730e0cf7e840b238fd5 >> base64 [
	^ ''.
	

]
