Class {
	#name : #SRTf485c5e679238f9304d986bb2fc28fe3379200e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf485c5e679238f9304d986bb2fc28fe3379200e5 >> base64 [
	^ ''.
	

]
