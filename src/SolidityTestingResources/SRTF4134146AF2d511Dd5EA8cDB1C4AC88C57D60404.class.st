Class {
	#name : #SRTF4134146AF2d511Dd5EA8cDB1C4AC88C57D60404,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF4134146AF2d511Dd5EA8cDB1C4AC88C57D60404 >> base64 [
	^ ''.
	

]
