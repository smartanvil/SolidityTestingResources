Class {
	#name : #SRT922bcf2a9bd398a3ca942bc66436d8c4de57b83d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT922bcf2a9bd398a3ca942bc66436d8c4de57b83d >> base64 [
	^ ''.
	

]
