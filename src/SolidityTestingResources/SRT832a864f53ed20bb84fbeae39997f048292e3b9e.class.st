Class {
	#name : #SRT832a864f53ed20bb84fbeae39997f048292e3b9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT832a864f53ed20bb84fbeae39997f048292e3b9e >> base64 [
	^ ''.
	

]
