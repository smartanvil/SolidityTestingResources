Class {
	#name : #SRTd29bba42464530351859fbf80b0528dcd9ccc30e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd29bba42464530351859fbf80b0528dcd9ccc30e >> base64 [
	^ ''.
	

]
