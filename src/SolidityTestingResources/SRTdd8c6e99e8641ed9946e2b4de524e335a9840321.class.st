Class {
	#name : #SRTdd8c6e99e8641ed9946e2b4de524e335a9840321,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd8c6e99e8641ed9946e2b4de524e335a9840321 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiID4gMCk7CiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgcmV0dXJuIGM7CiAgfQogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cn0KCi8qCiAqIFBhdXNhYmxlCiAqIEFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbgogKiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwoKY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgYm9vbCBwdWJsaWMgc3RvcHBlZDsKCiAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgIGlmIChzdG9wcGVkKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CiAgCiAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGlmICghc3RvcHBlZCkgewogICAgICB0aHJvdzsKICAgIH0KICAgIF87CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogIGZ1bmN0aW9uIGVtZXJnZW5jeVN0b3AoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgc3RvcHBlZCA9IHRydWU7CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgZnVuY3Rpb24gcmVsZWFzZSgpIGV4dGVybmFsIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgc3RvcHBlZCA9IGZhbHNlOwogIH0KCn0KCgpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwp9Cgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCi8qCiAqIFB1bGxQYXltZW50CiAqIEJhc2UgY29udHJhY3Qgc3VwcG9ydGluZyBhc3luYyBzZW5kIGZvciBwdWxsIHBheW1lbnRzLgogKiBJbmhlcml0IGZyb20gdGhpcyBjb250cmFjdCBhbmQgdXNlIGFzeW5jU2VuZCBpbnN0ZWFkIG9mIHNlbmQuCiAqLwpjb250cmFjdCBQdWxsUGF5bWVudCB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogIAogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgcGF5bWVudHM7CgogIGV2ZW50IExvZ1JlZnVuZEVUSChhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKCgogIC8qKgogICogIFN0b3JlIHNlbnQgYW1vdW50IGFzIGNyZWRpdCB0byBiZSBwdWxsZWQsIGNhbGxlZCBieSBwYXllciAKICAqKi8KICBmdW5jdGlvbiBhc3luY1NlbmQoYWRkcmVzcyBkZXN0LCB1aW50IGFtb3VudCkgaW50ZXJuYWwgewogICAgcGF5bWVudHNbZGVzdF0gPSBwYXltZW50c1tkZXN0XS5hZGQoYW1vdW50KTsKICB9CgogIC8vIHdpdGhkcmF3IGFjY3VtdWxhdGVkIGJhbGFuY2UsIGNhbGxlZCBieSBwYXllZQogIGZ1bmN0aW9uIHdpdGhkcmF3UGF5bWVudHMoKSB7CiAgICBhZGRyZXNzIHBheWVlID0gbXNnLnNlbmRlcjsKICAgIHVpbnQgcGF5bWVudCA9IHBheW1lbnRzW3BheWVlXTsKICAgIAogICAgaWYgKHBheW1lbnQgPT0gMCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBpZiAodGhpcy5iYWxhbmNlIDwgcGF5bWVudCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBwYXltZW50c1twYXllZV0gPSAwOwoKICAgIGlmICghcGF5ZWUuc2VuZChwYXltZW50KSkgewogICAgICB0aHJvdzsKICAgIH0KICAgIExvZ1JlZnVuZEVUSChwYXllZSxwYXltZW50KTsKICB9Cn0KCgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIAogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogIAogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKICAKICAvKgogICAqIEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrICAKICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkgewogICAgICAgdGhyb3c7CiAgICAgfQogICAgIF87CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cn0KCgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEJhc2ljVG9rZW4sIEVSQzIwIHsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHsKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIGlmICgoX3ZhbHVlICE9IDApICYmIChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSAhPSAwKSkgdGhyb3c7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQp9CgoKCgovKioKICogIFJlZCBQaWxsIFRva2VuIHRva2VuIGNvbnRyYWN0LiBJbXBsZW1lbnRzCiAqLwpjb250cmFjdCBSZWRQaWxsVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlJlZFBpbGwiOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlJQSUwiOwogIHVpbnQgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gODsKCgogIC8vIENvbnN0cnVjdG9yCiAgZnVuY3Rpb24gUmVkUGlsbFRva2VuKCkgewogICAgICB0b3RhbFN1cHBseSA9IDIwMDAwMDAwMDAwMDAwMDAwOwogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAvLyBTZW5kIGFsbCB0b2tlbnMgdG8gb3duZXIKICB9CgogIC8qKgogICAqICBCdXJuIGF3YXkgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgUmVkIFBpbGwgVG9rZW4gdG9rZW5zCiAgICovCiAgZnVuY3Rpb24gYnVybih1aW50IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLyoKICBDcm93ZHNhbGUgU21hcnQgQ29udHJhY3QgZm9yIHRoZSBSZWRQaWxsVG9rZW4ub3JnIHByb2plY3QKICBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvbGxlY3RzIEVUSCwgYW5kIGluIHJldHVybiBlbWl0cyBSZWRQaWxsVG9rZW4gdG9rZW5zIHRvIHRoZSBiYWNrZXJzCiovCmNvbnRyYWN0IENyb3dkc2FsZSBpcyBQYXVzYWJsZSwgUHVsbFBheW1lbnQgewogICAgCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgCXN0cnVjdCBCYWNrZXIgewoJCXVpbnQgd2VpUmVjZWl2ZWQ7IC8vIEFtb3VudCBvZiBFdGhlciBnaXZlbgoJCXVpbnQgY29pblNlbnQ7Cgl9CgoJLyoKCSogQ29uc3RhbnRzCgkqLwoJLyogTWluaW11bSBudW1iZXIgb2YgUmVkUGlsbFRva2VuIHRvIHNlbGwgKi8KCS8qdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0NBUCA9IDEwMDAwMDAwMDAwMDAwMDA7IC8vIDEwLDAwMCwwMDAgUmVkUGlsbFRva2VucyAoMTAgbWlsbGlvbnMpKi8KIHVpbnQgcHVibGljIGNvbnN0YW50IE1JTl9DQVAgPSAwOyAvLyBubyBtaW5pbXVtIGNhcAoJLyogTWF4aW11bSBudW1iZXIgb2YgUmVkUGlsbFRva2VuIHRvIHNlbGwgKi8KCXVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9DQVAgPSAxMDAwMDAwMDAwMDAwMDAwMDsgLy8gMTAwLDAwMCwwMDAgUmVkUGlsbFRva2VucyAoMTAwIG1pbGxpb25zKQoJLyogTWluaW11bSBhbW91bnQgdG8gaW52ZXN0ICovCgl1aW50IHB1YmxpYyBjb25zdGFudCBNSU5fSU5WRVNUX0VUSEVSID0gNDAgZmlubmV5OyAvLzAuMDQgZXRoZXIKCS8qIENyb3dkc2FsZSBwZXJpb2QgKi8KCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBDUk9XRFNBTEVfUEVSSU9EID0gMzQgZGF5czsKIC8qdWludCBwcml2YXRlIGNvbnN0YW50IENST1dEU0FMRV9QRVJJT0QgPSAxIHNlY29uZHM7Ki8KCS8qIE51bWJlciBvZiBSZWRQaWxsVG9rZW5zIHBlciBFdGhlciAqLwoJdWludCBwdWJsaWMgY29uc3RhbnQgQ09JTl9QRVJfRVRIRVIgPSA1MzYxMDAwMDAwMDA7IC8vIDUsMzYxIFJlZFBpbGxUb2tlbnMgIDEgZXRoPTUzNjEgUmVkUGlsbFRva2VucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgoJLyoKCSogVmFyaWFibGVzCgkqLwoJLyogUmVkUGlsbFRva2VuIGNvbnRyYWN0IHJlZmVyZW5jZSAqLwoJUmVkUGlsbFRva2VuIHB1YmxpYyBjb2luOwogICAgLyogTXVsdGlzaWcgY29udHJhY3QgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIEV0aGVyICovCglhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ0V0aGVyOwoJLyogTnVtYmVyIG9mIEV0aGVyIHJlY2VpdmVkICovCgl1aW50IHB1YmxpYyBldGhlclJlY2VpdmVkOwoJLyogTnVtYmVyIG9mIFJlZFBpbGxUb2tlbnMgc2VudCB0byBFdGhlciBjb250cmlidXRvcnMgKi8KCXVpbnQgcHVibGljIGNvaW5TZW50VG9FdGhlcjsKCS8qIENyb3dkc2FsZSBzdGFydCB0aW1lICovCgl1aW50IHB1YmxpYyBzdGFydFRpbWU7CgkvKiBDcm93ZHNhbGUgZW5kIHRpbWUgKi8KCXVpbnQgcHVibGljIGVuZFRpbWU7CiAJLyogSXMgY3Jvd2RzYWxlIHN0aWxsIG9uIGdvaW5nICovCglib29sIHB1YmxpYyBjcm93ZHNhbGVDbG9zZWQ7CgoJLyogQmFja2VycyBFdGhlciBpbmRleGVkIGJ5IHRoZWlyIEV0aGVyZXVtIGFkZHJlc3MgKi8KCW1hcHBpbmcoYWRkcmVzcyA9PiBCYWNrZXIpIHB1YmxpYyBiYWNrZXJzOwoKCgkvKgoJKiBNb2RpZmllcnMKCSovCgltb2RpZmllciBtaW5DYXBOb3RSZWFjaGVkKCkgewoJCWlmICgobm93IDwgZW5kVGltZSkgfHwgY29pblNlbnRUb0V0aGVyID49IE1JTl9DQVAgKSB0aHJvdzsKCQlfOwoJfQoKCW1vZGlmaWVyIHJlc3BlY3RUaW1lRnJhbWUoKSB7CgkJaWYgKChub3cgPCBzdGFydFRpbWUpIHx8IChub3cgPiBlbmRUaW1lICkpIHRocm93OwoJCV87Cgl9CgoJLyoKCSAqIEV2ZW50CgkqLwoJZXZlbnQgTG9nUmVjZWl2ZWRFVEgoYWRkcmVzcyBhZGRyLCB1aW50IHZhbHVlKTsKCWV2ZW50IExvZ0NvaW5zRW1pdGVkKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50IGFtb3VudCk7CgoJLyoKCSAqIENvbnN0cnVjdG9yCgkqLwoJZnVuY3Rpb24gQ3Jvd2RzYWxlKGFkZHJlc3MgX1JlZFBpbGxUb2tlbkFkZHJlc3MsIGFkZHJlc3MgX3RvKSB7CgkJY29pbiA9IFJlZFBpbGxUb2tlbihfUmVkUGlsbFRva2VuQWRkcmVzcyk7CgkJbXVsdGlzaWdFdGhlciA9IF90bzsKCX0KCgkvKiAKCSAqIFRoZSBmYWxsYmFjayBmdW5jdGlvbiBjb3JyZXNwb25kcyB0byBhIGRvbmF0aW9uIGluIEVUSAoJICovCglmdW5jdGlvbigpIHN0b3BJbkVtZXJnZW5jeSByZXNwZWN0VGltZUZyYW1lIHBheWFibGUgewoJCXJlY2VpdmVFVEgobXNnLnNlbmRlcik7Cgl9CgoJLyogCgkgKiBUbyBjYWxsIHRvIHN0YXJ0IHRoZSBjcm93ZHNhbGUKCSAqLwoJZnVuY3Rpb24gc3RhcnQoKSBvbmx5T3duZXIgewoJCWlmIChzdGFydFRpbWUgIT0gMCkgdGhyb3c7IC8vIENyb3dkc2FsZSB3YXMgYWxyZWFkeSBzdGFydGVkCgoJCS8qc3RhcnRUaW1lID0gbm93IDsqLyAgICAgICAgICAgCgkJLyplbmRUaW1lID0gIG5vdyArIENST1dEU0FMRV9QRVJJT0Q7ICovICAgCiAgIAogIHN0YXJ0VGltZSA9IDE1MDY0ODQ4MDA7ICAgICAgICAgICAgCiAgZW5kVGltZSA9ICAxNTA2NDg0ODAwICsgQ1JPV0RTQUxFX1BFUklPRDsgICAKICAgCgl9CgoJLyoKCSAqCVJlY2VpdmVzIGEgZG9uYXRpb24gaW4gRXRoZXIKCSovCglmdW5jdGlvbiByZWNlaXZlRVRIKGFkZHJlc3MgYmVuZWZpY2lhcnkpIGludGVybmFsIHsKCQlpZiAobXNnLnZhbHVlIDwgTUlOX0lOVkVTVF9FVEhFUikgdGhyb3c7IC8vIERvbid0IGFjY2VwdCBmdW5kaW5nIHVuZGVyIGEgcHJlZGVmaW5lZCB0aHJlc2hvbGQKCQkKCQl1aW50IGNvaW5Ub1NlbmQgPSBib251cyhtc2cudmFsdWUubXVsKENPSU5fUEVSX0VUSEVSKS5kaXYoMSBldGhlcikpOyAvLyBDb21wdXRlIHRoZSBudW1iZXIgb2YgUmVkUGlsbFRva2VuIHRvIHNlbmQKCQlpZiAoY29pblRvU2VuZC5hZGQoY29pblNlbnRUb0V0aGVyKSA+IE1BWF9DQVApIHRocm93OwkKCgkJQmFja2VyIGJhY2tlciA9IGJhY2tlcnNbYmVuZWZpY2lhcnldOwoJCWNvaW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIGNvaW5Ub1NlbmQpOyAvLyBUcmFuc2ZlciBSZWRQaWxsVG9rZW5zIHJpZ2h0IG5vdyAKCgkJYmFja2VyLmNvaW5TZW50ID0gYmFja2VyLmNvaW5TZW50LmFkZChjb2luVG9TZW5kKTsKCQliYWNrZXIud2VpUmVjZWl2ZWQgPSBiYWNrZXIud2VpUmVjZWl2ZWQuYWRkKG1zZy52YWx1ZSk7IC8vIFVwZGF0ZSB0aGUgdG90YWwgd2VpIGNvbGxlY3RlZCBkdXJpbmcgdGhlIGNyb3dkZnVuZGluZyBmb3IgdGhpcyBiYWNrZXIgICAgCgoJCWV0aGVyUmVjZWl2ZWQgPSBldGhlclJlY2VpdmVkLmFkZChtc2cudmFsdWUpOyAvLyBVcGRhdGUgdGhlIHRvdGFsIHdlaSBjb2xsZWN0ZWQgZHVyaW5nIHRoZSBjcm93ZGZ1bmRpbmcKCQljb2luU2VudFRvRXRoZXIgPSBjb2luU2VudFRvRXRoZXIuYWRkKGNvaW5Ub1NlbmQpOwoKCQkvLyBTZW5kIGV2ZW50cwoJCUxvZ0NvaW5zRW1pdGVkKG1zZy5zZW5kZXIgLGNvaW5Ub1NlbmQpOwoJCUxvZ1JlY2VpdmVkRVRIKGJlbmVmaWNpYXJ5LCBldGhlclJlY2VpdmVkKTsgCgl9CgkKCgkvKgoJICpDb21wdXRlIHRoZSBSZWRQaWxsVG9rZW4gYm9udXMgYWNjb3JkaW5nIHRvIHRoZSBpbnZlc3RtZW50IHBlcmlvZAoJICovCglmdW5jdGlvbiBib251cyh1aW50IGFtb3VudCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewoJCS8qaWYgKG5vdyA8IHN0YXJ0VGltZS5hZGQoMiBkYXlzKSkgcmV0dXJuIGFtb3VudC5hZGQoYW1vdW50LmRpdig1KSk7ICovICAgLy8gYm9udXMgMjAlCgkJcmV0dXJuIGFtb3VudDsKCX0KCgkvKgkKCSAqIEZpbmFsaXplIHRoZSBjcm93ZHNhbGUsIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIHJlZnVuZCBwZXJpb2QKCSovCglmdW5jdGlvbiBmaW5hbGl6ZSgpIG9ubHlPd25lciBwdWJsaWMgewoKCQlpZiAobm93IDwgZW5kVGltZSkgeyAvLyBDYW5ub3QgZmluYWxpc2UgYmVmb3JlIENST1dEU0FMRV9QRVJJT0Qgb3IgYmVmb3JlIHNlbGxpbmcgYWxsIGNvaW5zCgkJCWlmIChjb2luU2VudFRvRXRoZXIgPT0gTUFYX0NBUCkgewoJCQl9IGVsc2UgewoJCQkJdGhyb3c7CgkJCX0KCQl9CgoJCWlmIChjb2luU2VudFRvRXRoZXIgPCBNSU5fQ0FQICYmIG5vdyA8IGVuZFRpbWUgKyAxNSBkYXlzKSB0aHJvdzsgLy8gSWYgTUlOX0NBUCBpcyBub3QgcmVhY2hlZCBkb25vcnMgaGF2ZSAxNWRheXMgdG8gZ2V0IHJlZnVuZCBiZWZvcmUgd2UgY2FuIGZpbmFsaXNlCgoJCWlmICghbXVsdGlzaWdFdGhlci5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93OyAvLyBNb3ZlIHRoZSByZW1haW5pbmcgRXRoZXIgdG8gdGhlIG11bHRpc2lnIGFkZHJlc3MKCQkKCQl1aW50IHJlbWFpbnMgPSBjb2luLmJhbGFuY2VPZih0aGlzKTsKCQlpZiAocmVtYWlucyA+IDApIHsgLy8gQnVybiB0aGUgcmVzdCBvZiBSZWRQaWxsVG9rZW5zCgkJCWlmICghY29pbi5idXJuKHJlbWFpbnMpKSB0aHJvdyA7CgkJfQoJCWNyb3dkc2FsZUNsb3NlZCA9IHRydWU7Cgl9CgoJLyoJCgkqIEZhaWxzYWZlIGRyYWluCgkqLwoJZnVuY3Rpb24gZHJhaW4oKSBvbmx5T3duZXIgewoJCWlmICghb3duZXIuc2VuZCh0aGlzLmJhbGFuY2UpKSB0aHJvdzsKCX0KCgkvKioKCSAqIEFsbG93IHRvIGNoYW5nZSB0aGUgdGVhbSBtdWx0aXNpZyBhZGRyZXNzIGluIHRoZSBjYXNlIG9mIGVtZXJnZW5jeS4KCSAqLwoJZnVuY3Rpb24gc2V0TXVsdGlzaWcoYWRkcmVzcyBhZGRyKSBvbmx5T3duZXIgcHVibGljIHsKCQlpZiAoYWRkciA9PSBhZGRyZXNzKDApKSB0aHJvdzsKCQltdWx0aXNpZ0V0aGVyID0gYWRkcjsKCX0KCgkvKioKCSAqIE1hbnVhbGx5IGJhY2sgUmVkUGlsbFRva2VuIG93bmVyIGFkZHJlc3MuCgkgKi8KCWZ1bmN0aW9uIGJhY2tSZWRQaWxsVG9rZW5Pd25lcigpIG9ubHlPd25lciBwdWJsaWMgewoJCWNvaW4udHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwoJfQoKCS8qKgoJICogVHJhbnNmZXIgcmVtYWlucyB0byBvd25lciBpbiBjYXNlIGlmIGltcG9zc2libGUgdG8gZG8gbWluIGludmVzdAoJICovCglmdW5jdGlvbiBnZXRSZW1haW5Db2lucygpIG9ubHlPd25lciBwdWJsaWMgewoJCXZhciByZW1haW5zID0gTUFYX0NBUCAtIGNvaW5TZW50VG9FdGhlcjsKCQl1aW50IG1pbkNvaW5zVG9TZWxsID0gYm9udXMoTUlOX0lOVkVTVF9FVEhFUi5tdWwoQ09JTl9QRVJfRVRIRVIpIC8gKDEgZXRoZXIpKTsKCgkJaWYocmVtYWlucyA+IG1pbkNvaW5zVG9TZWxsKSB0aHJvdzsKCgkJQmFja2VyIGJhY2tlciA9IGJhY2tlcnNbb3duZXJdOwoJCWNvaW4udHJhbnNmZXIob3duZXIsIHJlbWFpbnMpOyAvLyBUcmFuc2ZlciBSZWRQaWxsVG9rZW5zIHJpZ2h0IG5vdyAKCgkJYmFja2VyLmNvaW5TZW50ID0gYmFja2VyLmNvaW5TZW50LmFkZChyZW1haW5zKTsKCgkJY29pblNlbnRUb0V0aGVyID0gY29pblNlbnRUb0V0aGVyLmFkZChyZW1haW5zKTsKCgkJLy8gU2VuZCBldmVudHMKCQlMb2dDb2luc0VtaXRlZCh0aGlzICxyZW1haW5zKTsKCQlMb2dSZWNlaXZlZEVUSChvd25lciwgZXRoZXJSZWNlaXZlZCk7IAoJfQoKCgkvKiAKICAJICogV2hlbiBNSU5fQ0FQIGlzIG5vdCByZWFjaDoKICAJICogMSkgYmFja2VyIGNhbGwgdGhlICJhcHByb3ZlIiBmdW5jdGlvbiBvZiB0aGUgUmVkUGlsbFRva2VuIHRva2VuIGNvbnRyYWN0IHdpdGggdGhlIGFtb3VudCBvZiBhbGwgUmVkUGlsbFRva2VucyB0aGV5IGdvdCBpbiBvcmRlciB0byBiZSByZWZ1bmQKICAJICogMikgYmFja2VyIGNhbGwgdGhlICJyZWZ1bmQiIGZ1bmN0aW9uIG9mIHRoZSBDcm93ZHNhbGUgY29udHJhY3Qgd2l0aCB0aGUgc2FtZSBhbW91bnQgb2YgUmVkUGlsbFRva2VucwogICAJICogMykgYmFja2VyIGNhbGwgdGhlICJ3aXRoZHJhd1BheW1lbnRzIiBmdW5jdGlvbiBvZiB0aGUgQ3Jvd2RzYWxlIGNvbnRyYWN0IHRvIGdldCBhIHJlZnVuZCBpbiBFVEgKICAgCSAqLwoJZnVuY3Rpb24gcmVmdW5kKHVpbnQgX3ZhbHVlKSBtaW5DYXBOb3RSZWFjaGVkIHB1YmxpYyB7CgkJCgkJaWYgKF92YWx1ZSAhPSBiYWNrZXJzW21zZy5zZW5kZXJdLmNvaW5TZW50KSB0aHJvdzsgLy8gY29tcGFyZSB2YWx1ZSBmcm9tIGJhY2tlciBiYWxhbmNlCgoJCWNvaW4udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIGFkZHJlc3ModGhpcyksIF92YWx1ZSk7IC8vIGdldCB0aGUgdG9rZW4gYmFjayB0byB0aGUgY3Jvd2RzYWxlIGNvbnRyYWN0CgoJCWlmICghY29pbi5idXJuKF92YWx1ZSkpIHRocm93IDsgLy8gdG9rZW4gc2VudCBmb3IgcmVmdW5kIGFyZSBidXJudAoKCQl1aW50IEVUSFRvU2VuZCA9IGJhY2tlcnNbbXNnLnNlbmRlcl0ud2VpUmVjZWl2ZWQ7CgkJYmFja2Vyc1ttc2cuc2VuZGVyXS53ZWlSZWNlaXZlZD0wOwoKCQlpZiAoRVRIVG9TZW5kID4gMCkgewoJCQlhc3luY1NlbmQobXNnLnNlbmRlciwgRVRIVG9TZW5kKTsgLy8gcHVsbCBwYXltZW50IHRvIGdldCByZWZ1bmQgaW4gRVRICgkJfQoJfQoKfQ=='.
	

]
