Class {
	#name : #SRT5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3 >> base64 [
	^ ''.
	

]
