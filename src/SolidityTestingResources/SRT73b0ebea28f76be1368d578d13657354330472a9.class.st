Class {
	#name : #SRT73b0ebea28f76be1368d578d13657354330472a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73b0ebea28f76be1368d578d13657354330472a9 >> base64 [
	^ ''.
	

]
