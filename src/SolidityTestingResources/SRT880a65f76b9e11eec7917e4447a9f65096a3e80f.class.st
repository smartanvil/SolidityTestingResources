Class {
	#name : #SRT880a65f76b9e11eec7917e4447a9f65096a3e80f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT880a65f76b9e11eec7917e4447a9f65096a3e80f >> base64 [
	^ ''.
	

]
