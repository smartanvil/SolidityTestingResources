Class {
	#name : #SRT5d818363b3f083d0262d5a213725636110e89f5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d818363b3f083d0262d5a213725636110e89f5d >> base64 [
	^ ''.
	

]
