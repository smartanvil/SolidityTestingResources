Class {
	#name : #SRTfcb675830e4c10438ce4a4091be45bf3b2c3d06f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfcb675830e4c10438ce4a4091be45bf3b2c3d06f >> base64 [
	^ ''.
	

]
