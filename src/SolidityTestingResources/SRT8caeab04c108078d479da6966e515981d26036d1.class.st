Class {
	#name : #SRT8caeab04c108078d479da6966e515981d26036d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8caeab04c108078d479da6966e515981d26036d1 >> base64 [
	^ 'LyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKCi8qKgogKiBTYWZlIHVuc2lnbmVkIHNhZmUgbWF0aC4KICoKICogaHR0cHM6Ly9ibG9nLmFyYWdvbi5vbmUvbGlicmFyeS1kcml2ZW4tZGV2ZWxvcG1lbnQtaW4tc29saWRpdHktMmJlYmNhZjg4NzM2Iy43NTBnd3R3bGkKICoKICogT3JpZ2luYWxseSBmcm9tIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BcmFnb25PbmUvemVwcGVsaW4tc29saWRpdHkvbWFzdGVyL2NvbnRyYWN0cy9TYWZlTWF0aExpYi5zb2wKICoKICogTWFpbnRhaW5lZCBoZXJlIHVudGlsIG1lcmdlZCB0byBtYWlubGluZSB6ZXBwZWxpbi1zb2xpZGl0eS4KICoKICovCmxpYnJhcnkgU01hdGhMaWIgewoKICAgIGZ1bmN0aW9uIHRpbWVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXZpZGVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgICB1aW50IGMgPSBhIC8gYjsKICAgICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW51cyh1aW50IGEsIHVpbnQgYikgcmV0dXJucyAodWludCkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBwbHVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGM+PWEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKfQoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA+IDApOwogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKfQovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCn0KCgovLyBDcmVhdGVkIHVzaW5nIElDTyBXaXphcmQgaHR0cHM6Ly9naXRodWIuY29tL29yYWNsZXNvcmcvaWNvLXdpemFyZCBieSBPcmFjbGVzIE5ldHdvcmsKCi8qCiAqIEhhbHRhYmxlCiAqCiAqIEFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbgogKiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uIERpZmZlcnMgZnJvbSBQYXVzYWJsZSBieSBjYXVzaW5nIGEgdGhyb3cgd2hlbiBpbiBoYWx0IG1vZGUuCiAqCiAqCiAqIE9yaWdpbmFsbHkgZW52aXNpb25lZCBpbiBGaXJzdEJsb29kIElDTyBjb250cmFjdC4KICovCmNvbnRyYWN0IEhhbHRhYmxlIGlzIE93bmFibGUgewogICAgYm9vbCBwdWJsaWMgaGFsdGVkOwoKICAgIG1vZGlmaWVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICAgICAgaWYgKGhhbHRlZCkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBzdG9wTm9uT3duZXJzSW5FbWVyZ2VuY3kgewogICAgICAgIGlmIChoYWx0ZWQgJiYgbXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5SW5FbWVyZ2VuY3kgewogICAgICAgIGlmICghaGFsdGVkKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW1lcmdlbmN5LCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICBmdW5jdGlvbiBoYWx0KCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICBoYWx0ZWQgPSB0cnVlOwogICAgfQoKICAgIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgIGZ1bmN0aW9uIHVuaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgICAgIGhhbHRlZCA9IGZhbHNlOwogICAgfQoKfQoKCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKi8KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKCi8qKgogKiBTdGFuZGFyZCBFUkMyMCB0b2tlbiB3aXRoIFNob3J0IEhhbmQgQXR0YWNrIGFuZCBhcHByb3ZlKCkgcmFjZSBjb25kaXRpb24gbWl0aWdhdGlvbi4KICoKICogQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOgogKiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIFNhZmVNYXRoIHsKCiAgICAvKiBUb2tlbiBzdXBwbHkgZ290IGluY3JlYXNlZCBhbmQgYSBuZXcgb3duZXIgcmVjZWl2ZWQgdGhlc2UgdG9rZW5zICovCiAgICBldmVudCBNaW50ZWQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwoKICAgIC8qIEFjdHVhbCBiYWxhbmNlcyBvZiB0b2tlbiBob2xkZXJzICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogICAgLyogYXBwcm92ZSgpIGFsbG93YW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgICAvKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24gKi8KICAgIGZ1bmN0aW9uIGlzVG9rZW4oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCB3ZUFyZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHVpbnQgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihfYWxsb3dhbmNlLCBfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgICAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKfQoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCgoKCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKi8KCgoKLyoqCiAqIFVwZ3JhZGUgYWdlbnQgaW50ZXJmYWNlIGluc3BpcmVkIGJ5IEx1bnlyLgogKgogKiBVcGdyYWRlIGFnZW50IHRyYW5zZmVycyB0b2tlbnMgdG8gYSBuZXcgY29udHJhY3QuCiAqIFVwZ3JhZGUgYWdlbnQgaXRzZWxmIGNhbiBiZSB0aGUgdG9rZW4gY29udHJhY3QsIG9yIGp1c3QgYSBtaWRkbGUgbWFuIGNvbnRyYWN0IGRvaW5nIHRoZSBoZWF2eSBsaWZ0aW5nLgogKi8KY29udHJhY3QgVXBncmFkZUFnZW50IHsKCiAgICB1aW50IHB1YmxpYyBvcmlnaW5hbFN1cHBseTsKCiAgICAvKiogSW50ZXJmYWNlIG1hcmtlciAqLwogICAgZnVuY3Rpb24gaXNVcGdyYWRlQWdlbnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZ3JhZGVGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7Cgp9CgoKLyoqCiAqIEEgdG9rZW4gdXBncmFkZSBtZWNoYW5pc20gd2hlcmUgdXNlcnMgY2FuIG9wdC1pbiBhbW91bnQgb2YgdG9rZW5zIHRvIHRoZSBuZXh0IHNtYXJ0IGNvbnRyYWN0IHJldmlzaW9uLgogKgogKiBGaXJzdCBlbnZpc2lvbmVkIGJ5IEdvbGVtIGFuZCBMdW55ciBwcm9qZWN0cy4KICovCmNvbnRyYWN0IFVwZ3JhZGVhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgLyoqIENvbnRyYWN0IC8gcGVyc29uIHdobyBjYW4gc2V0IHRoZSB1cGdyYWRlIHBhdGguIFRoaXMgY2FuIGJlIHRoZSBzYW1lIGFzIHRlYW0gbXVsdGlzaWcgd2FsbGV0LCBhcyB3aGF0IGl0IGlzIHdpdGggaXRzIGRlZmF1bHQgdmFsdWUuICovCiAgICBhZGRyZXNzIHB1YmxpYyB1cGdyYWRlTWFzdGVyOwoKICAgIC8qKiBUaGUgbmV4dCBjb250cmFjdCB3aGVyZSB0aGUgdG9rZW5zIHdpbGwgYmUgbWlncmF0ZWQuICovCiAgICBVcGdyYWRlQWdlbnQgcHVibGljIHVwZ3JhZGVBZ2VudDsKCiAgICAvKiogSG93IG1hbnkgdG9rZW5zIHdlIGhhdmUgdXBncmFkZWQgYnkgbm93LiAqLwogICAgdWludDI1NiBwdWJsaWMgdG90YWxVcGdyYWRlZDsKCiAgICAvKioKICAgICAqIFVwZ3JhZGUgc3RhdGVzLgogICAgICoKICAgICAqIC0gTm90QWxsb3dlZDogVGhlIGNoaWxkIGNvbnRyYWN0IGhhcyBub3QgcmVhY2hlZCBhIGNvbmRpdGlvbiB3aGVyZSB0aGUgdXBncmFkZSBjYW4gYmd1bgogICAgICogLSBXYWl0aW5nRm9yQWdlbnQ6IFRva2VuIGFsbG93cyB1cGdyYWRlLCBidXQgd2UgZG9uJ3QgaGF2ZSBhIG5ldyBhZ2VudCB5ZXQKICAgICAqIC0gUmVhZHlUb1VwZ3JhZGU6IFRoZSBhZ2VudCBpcyBzZXQsIGJ1dCBub3QgYSBzaW5nbGUgdG9rZW4gaGFzIGJlZW4gdXBncmFkZWQgeWV0CiAgICAgKiAtIFVwZ3JhZGluZzogVXBncmFkZSBhZ2VudCBpcyBzZXQgYW5kIHRoZSBiYWxhbmNlIGhvbGRlcnMgY2FuIHVwZ3JhZGUgdGhlaXIgdG9rZW5zCiAgICAgKgogICAgICovCiAgICBlbnVtIFVwZ3JhZGVTdGF0ZSB7VW5rbm93biwgTm90QWxsb3dlZCwgV2FpdGluZ0ZvckFnZW50LCBSZWFkeVRvVXBncmFkZSwgVXBncmFkaW5nfQoKICAgIC8qKgogICAgICogU29tZWJvZHkgaGFzIHVwZ3JhZGVkIHNvbWUgb2YgaGlzIHRva2Vucy4KICAgICAqLwogICAgZXZlbnQgVXBncmFkZShhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvKioKICAgICAqIE5ldyB1cGdyYWRlIGFnZW50IGF2YWlsYWJsZS4KICAgICAqLwogICAgZXZlbnQgVXBncmFkZUFnZW50U2V0KGFkZHJlc3MgYWdlbnQpOwoKICAgIC8qKgogICAgICogRG8gbm90IGFsbG93IGNvbnN0cnVjdGlvbiB3aXRob3V0IHVwZ3JhZGUgbWFzdGVyIHNldC4KICAgICAqLwogICAgZnVuY3Rpb24gVXBncmFkZWFibGVUb2tlbihhZGRyZXNzIF91cGdyYWRlTWFzdGVyKSB7CiAgICAgICAgdXBncmFkZU1hc3RlciA9IF91cGdyYWRlTWFzdGVyOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3cgdGhlIHRva2VuIGhvbGRlciB0byB1cGdyYWRlIHNvbWUgb2YgdGhlaXIgdG9rZW5zIHRvIGEgbmV3IGNvbnRyYWN0LgogICAgICovCiAgICBmdW5jdGlvbiB1cGdyYWRlKHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CgogICAgICAgIFVwZ3JhZGVTdGF0ZSBzdGF0ZSA9IGdldFVwZ3JhZGVTdGF0ZSgpOwogICAgICAgIHJlcXVpcmUoIShzdGF0ZSA9PSBVcGdyYWRlU3RhdGUuUmVhZHlUb1VwZ3JhZGUgfHwgc3RhdGUgPT0gVXBncmFkZVN0YXRlLlVwZ3JhZGluZykpOwoKICAgICAgICAvLyBWYWxpZGF0ZSBpbnB1dCB2YWx1ZS4KICAgICAgICByZXF1aXJlICh2YWx1ZSA9PSAwKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCB2YWx1ZSk7CgogICAgICAgIC8vIFRha2UgdG9rZW5zIG91dCBmcm9tIGNpcmN1bGF0aW9uCiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3ViKHRvdGFsU3VwcGx5LCB2YWx1ZSk7CiAgICAgICAgdG90YWxVcGdyYWRlZCA9IHNhZmVBZGQodG90YWxVcGdyYWRlZCwgdmFsdWUpOwoKICAgICAgICAvLyBVcGdyYWRlIGFnZW50IHJlaXNzdWVzIHRoZSB0b2tlbnMKICAgICAgICB1cGdyYWRlQWdlbnQudXBncmFkZUZyb20obXNnLnNlbmRlciwgdmFsdWUpOwogICAgICAgIFVwZ3JhZGUobXNnLnNlbmRlciwgdXBncmFkZUFnZW50LCB2YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgYW4gdXBncmFkZSBhZ2VudCB0aGF0IGhhbmRsZXMKICAgICAqLwogICAgZnVuY3Rpb24gc2V0VXBncmFkZUFnZW50KGFkZHJlc3MgYWdlbnQpIGV4dGVybmFsIHsKCiAgICAgICAgcmVxdWlyZSghY2FuVXBncmFkZSgpKTsgLy8gVGhlIHRva2VuIGlzIG5vdCB5ZXQgaW4gYSBzdGF0ZSB0aGF0IHdlIGNvdWxkIHRoaW5rIHVwZ3JhZGluZzsKCiAgICAgICAgcmVxdWlyZShhZ2VudCA9PSAweDApOwogICAgICAgIC8vIE9ubHkgYSBtYXN0ZXIgY2FuIGRlc2lnbmF0ZSB0aGUgbmV4dCBhZ2VudAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSB1cGdyYWRlTWFzdGVyKTsKICAgICAgICAvLyBVcGdyYWRlIGhhcyBhbHJlYWR5IGJlZ3VuIGZvciBhbiBhZ2VudAogICAgICAgIHJlcXVpcmUoZ2V0VXBncmFkZVN0YXRlKCkgPT0gVXBncmFkZVN0YXRlLlVwZ3JhZGluZyk7CgogICAgICAgIHVwZ3JhZGVBZ2VudCA9IFVwZ3JhZGVBZ2VudChhZ2VudCk7CgogICAgICAgIC8vIEJhZCBpbnRlcmZhY2UKICAgICAgICByZXF1aXJlKCF1cGdyYWRlQWdlbnQuaXNVcGdyYWRlQWdlbnQoKSk7CiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdG9rZW4gc3VwcGxpZXMgbWF0Y2ggaW4gc291cmNlIGFuZCB0YXJnZXQKICAgICAgICByZXF1aXJlKHVwZ3JhZGVBZ2VudC5vcmlnaW5hbFN1cHBseSgpICE9IHRvdGFsU3VwcGx5KTsKCiAgICAgICAgVXBncmFkZUFnZW50U2V0KHVwZ3JhZGVBZ2VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHN0YXRlIG9mIHRoZSB0b2tlbiB1cGdyYWRlLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRVcGdyYWRlU3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhVcGdyYWRlU3RhdGUpIHsKICAgICAgICBpZighY2FuVXBncmFkZSgpKSByZXR1cm4gVXBncmFkZVN0YXRlLk5vdEFsbG93ZWQ7CiAgICAgICAgZWxzZSBpZihhZGRyZXNzKHVwZ3JhZGVBZ2VudCkgPT0gMHgwMCkgcmV0dXJuIFVwZ3JhZGVTdGF0ZS5XYWl0aW5nRm9yQWdlbnQ7CiAgICAgICAgZWxzZSBpZih0b3RhbFVwZ3JhZGVkID09IDApIHJldHVybiBVcGdyYWRlU3RhdGUuUmVhZHlUb1VwZ3JhZGU7CiAgICAgICAgZWxzZSByZXR1cm4gVXBncmFkZVN0YXRlLlVwZ3JhZGluZzsKICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSB0aGUgdXBncmFkZSBtYXN0ZXIuCiAgICAgKgogICAgICogVGhpcyBhbGxvd3MgdXMgdG8gc2V0IGEgbmV3IG93bmVyIGZvciB0aGUgdXBncmFkZSBtZWNoYW5pc20uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFVwZ3JhZGVNYXN0ZXIoYWRkcmVzcyBtYXN0ZXIpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtYXN0ZXIgPT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gdXBncmFkZU1hc3Rlcik7CiAgICAgICAgdXBncmFkZU1hc3RlciA9IG1hc3RlcjsKICAgIH0KCiAgICAvKioKICAgICAqIENoaWxkIGNvbnRyYWN0IGNhbiBlbmFibGUgdG8gcHJvdmlkZSB0aGUgY29uZGl0aW9uIHdoZW4gdGhlIHVwZ3JhZGUgY2FuIGJlZ3VuLgogICAgICovCiAgICBmdW5jdGlvbiBjYW5VcGdyYWRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCgoKLyoqCiAqIEEgdG9rZW4gdGhhdCBjYW4gaW5jcmVhc2UgaXRzIHN1cHBseSBieSBhbm90aGVyIGNvbnRyYWN0LgogKgogKiBUaGlzIGFsbG93cyB1bmNhcHBlZCBjcm93ZHNhbGUgYnkgZHluYW1pY2FsbHkgaW5jcmVhc2luZyB0aGUgc3VwcGx5IHdoZW4gbW9uZXkgcG91cnMgaW4uCiAqIE9ubHkgbWludCBhZ2VudHMsIGNvbnRyYWN0cyB3aGl0ZWxpc3RlZCBieSBvd25lciwgY2FuIG1pbnQgbmV3IHRva2Vucy4KICoKICovCmNvbnRyYWN0IE1pbnRhYmxlVG9rZW5FeHQgaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CgogICAgdXNpbmcgU01hdGhMaWIgZm9yIHVpbnQ7CgogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogICAgLyoqIExpc3Qgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY3JlYXRlIG5ldyB0b2tlbnMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIG1pbnRBZ2VudHM7CgogICAgZXZlbnQgTWludGluZ0FnZW50Q2hhbmdlZChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUgICk7CgogICAgLyoqIGluUGVyY2VudGFnZVVuaXQgaXMgcGVyY2VudHMgb2YgdG9rZW5zIG11bHRpcGxpZWQgdG8gMTAgdXAgdG8gcGVyY2VudHMgZGVjaW1hbHMuCiAgICAqIEZvciBleGFtcGxlLCBmb3IgcmVzZXJ2ZWQgdG9rZW5zIGluIHBlcmNlbnRzIDIuNTQlCiAgICAqIGluUGVyY2VudGFnZVVuaXQgPSAyNTQKICAgICogaW5QZXJjZW50YWdlRGVjaW1hbHMgPSAyCiAgICAqLwogICAgc3RydWN0IFJlc2VydmVkVG9rZW5zRGF0YSB7CiAgICAgICAgdWludCBpblRva2VuczsKICAgICAgICB1aW50IGluUGVyY2VudGFnZVVuaXQ7CiAgICAgICAgdWludCBpblBlcmNlbnRhZ2VEZWNpbWFsczsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IFJlc2VydmVkVG9rZW5zRGF0YSkgcHVibGljIHJlc2VydmVkVG9rZW5zTGlzdDsKICAgIGFkZHJlc3NbXSBwdWJsaWMgcmVzZXJ2ZWRUb2tlbnNEZXN0aW5hdGlvbnM7CiAgICB1aW50IHB1YmxpYyByZXNlcnZlZFRva2Vuc0Rlc3RpbmF0aW9uc0xlbiA9IDA7CgogICAgZnVuY3Rpb24gc2V0UmVzZXJ2ZWRUb2tlbnNMaXN0KGFkZHJlc3MgYWRkciwgdWludCBpblRva2VucywgdWludCBpblBlcmNlbnRhZ2VVbml0LCB1aW50IGluUGVyY2VudGFnZURlY2ltYWxzKSBvbmx5T3duZXIgewogICAgICAgIHJlc2VydmVkVG9rZW5zRGVzdGluYXRpb25zLnB1c2goYWRkcik7CiAgICAgICAgcmVzZXJ2ZWRUb2tlbnNEZXN0aW5hdGlvbnNMZW4rKzsKICAgICAgICByZXNlcnZlZFRva2Vuc0xpc3RbYWRkcl0gPSBSZXNlcnZlZFRva2Vuc0RhdGEoe2luVG9rZW5zOmluVG9rZW5zLCBpblBlcmNlbnRhZ2VVbml0OmluUGVyY2VudGFnZVVuaXQsIGluUGVyY2VudGFnZURlY2ltYWxzOiBpblBlcmNlbnRhZ2VEZWNpbWFsc30pOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJlc2VydmVkVG9rZW5zTGlzdFZhbEluVG9rZW5zKGFkZHJlc3MgYWRkcikgY29uc3RhbnQgcmV0dXJucyAodWludCBpblRva2VucykgewogICAgICAgIHJldHVybiByZXNlcnZlZFRva2Vuc0xpc3RbYWRkcl0uaW5Ub2tlbnM7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmVzZXJ2ZWRUb2tlbnNMaXN0VmFsSW5QZXJjZW50YWdlVW5pdChhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgaW5QZXJjZW50YWdlVW5pdCkgewogICAgICAgIHJldHVybiByZXNlcnZlZFRva2Vuc0xpc3RbYWRkcl0uaW5QZXJjZW50YWdlVW5pdDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSZXNlcnZlZFRva2Vuc0xpc3RWYWxJblBlcmNlbnRhZ2VEZWNpbWFscyhhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgaW5QZXJjZW50YWdlRGVjaW1hbHMpIHsKICAgICAgICByZXR1cm4gcmVzZXJ2ZWRUb2tlbnNMaXN0W2FkZHJdLmluUGVyY2VudGFnZURlY2ltYWxzOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJlc2VydmVkVG9rZW5zTGlzdE11bHRpcGxlKGFkZHJlc3NbXSBhZGRycywgdWludFtdIGluVG9rZW5zLCB1aW50W10gaW5QZXJjZW50YWdlVW5pdCwgdWludFtdIGluUGVyY2VudGFnZURlY2ltYWxzKSBvbmx5T3duZXIgewogICAgICAgIGZvciAodWludCBpdGVyYXRvciA9IDA7IGl0ZXJhdG9yIDwgYWRkcnMubGVuZ3RoOyBpdGVyYXRvcisrKSB7CiAgICAgICAgICAgIHNldFJlc2VydmVkVG9rZW5zTGlzdChhZGRyc1tpdGVyYXRvcl0sIGluVG9rZW5zW2l0ZXJhdG9yXSwgaW5QZXJjZW50YWdlVW5pdFtpdGVyYXRvcl0sIGluUGVyY2VudGFnZURlY2ltYWxzW2l0ZXJhdG9yXSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIG5ldyB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gYW4gYWRkcmVzcy4uCiAgICAgKgogICAgICogT25seSBjYWxsYWJseSBieSBhIGNyb3dkc2FsZSBjb250cmFjdCAobWludCBhZ2VudCkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpIG9ubHlNaW50QWdlbnQgY2FuTWludCBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkucGx1cyhhbW91bnQpOwogICAgICAgIGJhbGFuY2VzW3JlY2VpdmVyXSA9IGJhbGFuY2VzW3JlY2VpdmVyXS5wbHVzKGFtb3VudCk7CgogICAgICAgIC8vIFRoaXMgd2lsbCBtYWtlIHRoZSBtaW50IHRyYW5zYWN0aW9uIGFwcGVyIGluIEV0aGVyU2Nhbi5pbwogICAgICAgIC8vIFdlIGNhbiByZW1vdmUgdGhpcyBhZnRlciB0aGVyZSBpcyBhIHN0YW5kYXJkaXplZCBtaW50aW5nIGV2ZW50CiAgICAgICAgVHJhbnNmZXIoMCwgcmVjZWl2ZXIsIGFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBPd25lciBjYW4gYWxsb3cgYSBjcm93ZHNhbGUgY29udHJhY3QgdG8gbWludCBuZXcgdG9rZW5zLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRNaW50QWdlbnQoYWRkcmVzcyBhZGRyLCBib29sIHN0YXRlKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgewogICAgICAgIG1pbnRBZ2VudHNbYWRkcl0gPSBzdGF0ZTsKICAgICAgICBNaW50aW5nQWdlbnRDaGFuZ2VkKGFkZHIsIHN0YXRlKTsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5TWludEFnZW50KCkgewogICAgICAgIC8vIE9ubHkgY3Jvd2RzYWxlIGNvbnRyYWN0cyBhcmUgYWxsb3dlZCB0byBtaW50IG5ldyB0b2tlbnMKICAgICAgICBpZighbWludEFnZW50c1ttc2cuc2VuZGVyXSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvKiogTWFrZSBzdXJlIHdlIGFyZSBub3QgZG9uZSB5ZXQuICovCiAgICBtb2RpZmllciBjYW5NaW50KCkgewogICAgICAgIGlmKG1pbnRpbmdGaW5pc2hlZCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KfQovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKCi8qKgogKiBEZWZpbmUgaW50ZXJmYWNlIGZvciByZWxlYXNpbmcgdGhlIHRva2VuIHRyYW5zZmVyIGFmdGVyIGEgc3VjY2Vzc2Z1bCBjcm93ZHNhbGUuCiAqLwpjb250cmFjdCBSZWxlYXNhYmxlVG9rZW4gaXMgRVJDMjAsIE93bmFibGUgewoKICAgIC8qIFRoZSBmaW5hbGl6ZXIgY29udHJhY3QgdGhhdCBhbGxvd3MgdW5saWZ0IHRoZSB0cmFuc2ZlciBsaW1pdHMgb24gdGhpcyB0b2tlbiAqLwogICAgYWRkcmVzcyBwdWJsaWMgcmVsZWFzZUFnZW50OwoKICAgIC8qKiBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4qLwogICAgYm9vbCBwdWJsaWMgcmVsZWFzZWQgPSBmYWxzZTsKCiAgICAvKiogTWFwIG9mIGFnZW50cyB0aGF0IGFyZSBhbGxvd2VkIHRvIHRyYW5zZmVyIHRva2VucyByZWdhcmRsZXNzIG9mIHRoZSBsb2NrIGRvd24gcGVyaW9kLiBUaGVzZSBhcmUgY3Jvd2RzYWxlIGNvbnRyYWN0cyBhbmQgcG9zc2libGUgdGhlIHRlYW0gbXVsdGlzaWcgaXRzZWxmLiAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgdHJhbnNmZXJBZ2VudHM7CgogICAgLyoqCiAgICAgKiBMaW1pdCB0b2tlbiB0cmFuc2ZlciB1bnRpbCB0aGUgY3Jvd2RzYWxlIGlzIG92ZXIuCiAgICAgKgogICAgICovCiAgICBtb2RpZmllciBjYW5UcmFuc2ZlcihhZGRyZXNzIF9zZW5kZXIpIHsKCiAgICAgICAgaWYoIXJlbGVhc2VkKSB7CiAgICAgICAgICAgIGlmKCF0cmFuc2ZlckFnZW50c1tfc2VuZGVyXSkgewogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIGNvbnRyYWN0IHRoYXQgY2FuIGNhbGwgcmVsZWFzZSBhbmQgbWFrZSB0aGUgdG9rZW4gdHJhbnNmZXJhYmxlLgogICAgICoKICAgICAqIERlc2lnbiBjaG9pY2UuIEFsbG93IHJlc2V0IHRoZSByZWxlYXNlIGFnZW50IHRvIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRSZWxlYXNlQWdlbnQoYWRkcmVzcyBhZGRyKSBvbmx5T3duZXIgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CgogICAgICAgIC8vIFdlIGRvbid0IGRvIGludGVyZmFjZSBjaGVjayBoZXJlIGFzIHdlIG1pZ2h0IHdhbnQgdG8gYSBub3JtYWwgd2FsbGV0IGFkZHJlc3MgdG8gYWN0IGFzIGEgcmVsZWFzZSBhZ2VudAogICAgICAgIHJlbGVhc2VBZ2VudCA9IGFkZHI7CiAgICB9CgogICAgLyoqCiAgICAgKiBPd25lciBjYW4gYWxsb3cgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKGEgY3Jvd2RzYWxlIGNvbnRyYWN0KSB0byB0cmFuc2ZlciB0b2tlbnMgZGVzcGl0ZSB0aGUgbG9jayB1cCBwZXJpb2QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFRyYW5zZmVyQWdlbnQoYWRkcmVzcyBhZGRyLCBib29sIHN0YXRlKSBvbmx5T3duZXIgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CiAgICAgICAgdHJhbnNmZXJBZ2VudHNbYWRkcl0gPSBzdGF0ZTsKICAgIH0KCiAgICAvKioKICAgICAqIE9uZSB3YXkgZnVuY3Rpb24gdG8gcmVsZWFzZSB0aGUgdG9rZW5zIHRvIHRoZSB3aWxkLgogICAgICoKICAgICAqIENhbiBiZSBjYWxsZWQgb25seSBmcm9tIHRoZSByZWxlYXNlIGFnZW50IHRoYXQgaXMgdGhlIGZpbmFsIElDTyBjb250cmFjdC4gSXQgaXMgb25seSBjYWxsZWQgaWYgdGhlIGNyb3dkc2FsZSBoYXMgYmVlbiBzdWNjZXNzIChmaXJzdCBtaWxlc3RvbmUgcmVhY2hlZCkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2VUb2tlblRyYW5zZmVyKCkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgewogICAgICAgIHJlbGVhc2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHRva2VucyBoYXZlIGJlZW4gcmVsZWFzZXNkICovCiAgICBtb2RpZmllciBpblJlbGVhc2VTdGF0ZShib29sIHJlbGVhc2VTdGF0ZSkgewogICAgICAgIGlmKHJlbGVhc2VTdGF0ZSAhPSByZWxlYXNlZCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSBhIHdoaXRlbGlzdGVkIHJlbGVhc2UgYWdlbnQuICovCiAgICBtb2RpZmllciBvbmx5UmVsZWFzZUFnZW50KCkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gcmVsZWFzZUFnZW50KSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gQ2FsbCBTdGFuZGFyZFRva2VuLnRyYW5zZmVyKCkKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGNhblRyYW5zZmVyKF9mcm9tKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBDYWxsIFN0YW5kYXJkVG9rZW4udHJhbnNmZXJGb3JtKCkKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9Cgp9CgovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKCgoKCmNvbnRyYWN0IEJ1cm5hYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgdXNpbmcgU01hdGhMaWIgZm9yIHVpbnQ7CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgYnVybmVkLgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0ubWludXMoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5Lm1pbnVzKF92YWx1ZSk7CiAgICAgICAgQnVybihidXJuZXIsIF92YWx1ZSk7CiAgICB9Cn0KCgoKCi8qKgogKiBBIGNyb3dkc2FsZWQgdG9rZW4uCiAqCiAqIEFuIEVSQy0yMCB0b2tlbiBkZXNpZ25lZCBzcGVjaWZpY2FsbHkgZm9yIGNyb3dkc2FsZXMgd2l0aCBpbnZlc3RvciBwcm90ZWN0aW9uIGFuZCBmdXJ0aGVyIGRldmVsb3BtZW50IHBhdGguCiAqCiAqIC0gVGhlIHRva2VuIHRyYW5zZmVyKCkgaXMgZGlzYWJsZWQgdW50aWwgdGhlIGNyb3dkc2FsZSBpcyBvdmVyCiAqIC0gVGhlIHRva2VuIGNvbnRyYWN0IGdpdmVzIGFuIG9wdC1pbiB1cGdyYWRlIHBhdGggdG8gYSBuZXcgY29udHJhY3QKICogLSBUaGUgc2FtZSB0b2tlbiBjYW4gYmUgcGFydCBvZiBzZXZlcmFsIGNyb3dkc2FsZXMgdGhyb3VnaCBhcHByb3ZlKCkgbWVjaGFuaXNtCiAqIC0gVGhlIHRva2VuIGNhbiBiZSBjYXBwZWQgKHN1cHBseSBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yKSBvciB1bmNhcHBlZCAoY3Jvd2RzYWxlIGNvbnRyYWN0IGNhbiBtaW50IG5ldyB0b2tlbnMpCiAqCiAqLwpjb250cmFjdCBDcm93ZHNhbGVUb2tlbkV4dCBpcyBSZWxlYXNhYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW5FeHQsIEJ1cm5hYmxlVG9rZW4sIFVwZ3JhZGVhYmxlVG9rZW4gewoKICAgIC8qKiBOYW1lIGFuZCBzeW1ib2wgd2VyZSB1cGRhdGVkLiAqLwogICAgZXZlbnQgVXBkYXRlZFRva2VuSW5mb3JtYXRpb24oc3RyaW5nIG5ld05hbWUsIHN0cmluZyBuZXdTeW1ib2wpOwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKCiAgICB1aW50IHB1YmxpYyBkZWNpbWFsczsKCiAgICAvKiBNaW5pbXVtIGFtbW91bnQgb2YgdG9rZW5zIGV2ZXJ5IGJ1eWVyIGNhbiBidXkuICovCiAgICB1aW50IHB1YmxpYyBtaW5DYXA7CgoKICAgIC8qKgogICAgICogQ29uc3RydWN0IHRoZSB0b2tlbi4KICAgICAqCiAgICAgKiBUaGlzIHRva2VuIG11c3QgYmUgY3JlYXRlZCB0aHJvdWdoIGEgdGVhbSBtdWx0aXNpZyB3YWxsZXQsIHNvIHRoYXQgaXQgaXMgb3duZWQgYnkgdGhhdCB3YWxsZXQuCiAgICAgKgogICAgICogQHBhcmFtIF9uYW1lIFRva2VuIG5hbWUKICAgICAqIEBwYXJhbSBfc3ltYm9sIFRva2VuIHN5bWJvbCAtIHNob3VsZCBiZSBhbGwgY2FwcwogICAgICogQHBhcmFtIF9pbml0aWFsU3VwcGx5IEhvdyBtYW55IHRva2VucyB3ZSBzdGFydCB3aXRoCiAgICAgKiBAcGFyYW0gX2RlY2ltYWxzIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcwogICAgICogQHBhcmFtIF9taW50YWJsZSBBcmUgbmV3IHRva2VucyBjcmVhdGVkIG92ZXIgdGhlIGNyb3dkc2FsZSBvciBkbyB3ZSBkaXN0cmlidXRlIG9ubHkgdGhlIGluaXRpYWwgc3VwcGx5PyBOb3RlIHRoYXQgd2hlbiB0aGUgdG9rZW4gYmVjb21lcyB0cmFuc2ZlcmFibGUgdGhlIG1pbnRpbmcgYWx3YXlzIGVuZHMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIENyb3dkc2FsZVRva2VuRXh0KHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2luaXRpYWxTdXBwbHksIHVpbnQgX2RlY2ltYWxzLCBib29sIF9taW50YWJsZSwgdWludCBfZ2xvYmFsTWluQ2FwKQogICAgVXBncmFkZWFibGVUb2tlbihtc2cuc2VuZGVyKSB7CgogICAgICAgIC8vIENyZWF0ZSBhbnkgYWRkcmVzcywgY2FuIGJlIHRyYW5zZmVycmVkCiAgICAgICAgLy8gdG8gdGVhbSBtdWx0aXNpZyB2aWEgY2hhbmdlT3duZXIoKSwKICAgICAgICAvLyBhbHNvIHJlbWVtYmVyIHRvIGNhbGwgc2V0VXBncmFkZU1hc3RlcigpCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKCiAgICAgICAgdG90YWxTdXBwbHkgPSBfaW5pdGlhbFN1cHBseTsKCiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7CgogICAgICAgIG1pbkNhcCA9IF9nbG9iYWxNaW5DYXA7CgogICAgICAgIC8vIENyZWF0ZSBpbml0aWFsbHkgYWxsIGJhbGFuY2Ugb24gdGhlIHRlYW0gbXVsdGlzaWcKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSB0b3RhbFN1cHBseTsKCiAgICAgICAgaWYodG90YWxTdXBwbHkgPiAwKSB7CiAgICAgICAgICAgIE1pbnRlZChvd25lciwgdG90YWxTdXBwbHkpOwogICAgICAgIH0KCiAgICAgICAgLy8gTm8gbW9yZSBuZXcgc3VwcGx5IGFsbG93ZWQgYWZ0ZXIgdGhlIHRva2VuIGNyZWF0aW9uCiAgICAgICAgaWYoIV9taW50YWJsZSkgewogICAgICAgICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgICAgICAgICBpZih0b3RhbFN1cHBseSA9PSAwKSB7CiAgICAgICAgICAgICAgICByZXZlcnQoKTsgLy8gQ2Fubm90IGNyZWF0ZSBhIHRva2VuIHdpdGhvdXQgc3VwcGx5IGFuZCBubyBtaW50aW5nCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBXaGVuIHRva2VuIGlzIHJlbGVhc2VkIHRvIGJlIHRyYW5zZmVyYWJsZSwgZW5mb3JjZSBubyBuZXcgdG9rZW5zIGNhbiBiZSBjcmVhdGVkLgogICAgICovCiAgICBmdW5jdGlvbiByZWxlYXNlVG9rZW5UcmFuc2ZlcigpIHB1YmxpYyBvbmx5UmVsZWFzZUFnZW50IHsKICAgICAgICBzdXBlci5yZWxlYXNlVG9rZW5UcmFuc2ZlcigpOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3cgdXBncmFkZSBhZ2VudCBmdW5jdGlvbmFsaXR5IGtpY2sgaW4gb25seSBpZiB0aGUgY3Jvd2RzYWxlIHdhcyBzdWNjZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBjYW5VcGdyYWRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiByZWxlYXNlZCAmJiBzdXBlci5jYW5VcGdyYWRlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBPd25lciBjYW4gdXBkYXRlIHRva2VuIGluZm9ybWF0aW9uIGhlcmUuCiAgICAgKgogICAgICogSXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGNvbmNlYWwgdGhlIGFjdHVhbCB0b2tlbiBhc3NvY2lhdGlvbiwgdW50aWwKICAgICAqIHRoZSB0b2tlbiBvcGVyYXRpb25zLCBsaWtlIGNlbnRyYWwgaXNzdWFuY2Ugb3IgcmVpc3N1YW5jZSBoYXZlIGJlZW4gY29tcGxldGVkLgogICAgICoKICAgICAqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHRoZSB0b2tlbiBvd25lciB0byByZW5hbWUgdGhlIHRva2VuIGFmdGVyIHRoZSBvcGVyYXRpb25zCiAgICAgKiBoYXZlIGJlZW4gY29tcGxldGVkIGFuZCB0aGVuIHBvaW50IHRoZSBhdWRpZW5jZSB0byB1c2UgdGhlIHRva2VuIGNvbnRyYWN0LgogICAgICovCiAgICBmdW5jdGlvbiBzZXRUb2tlbkluZm9ybWF0aW9uKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wpIG9ubHlPd25lciB7CiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CgogICAgICAgIFVwZGF0ZWRUb2tlbkluZm9ybWF0aW9uKG5hbWUsIHN5bWJvbCk7CiAgICB9Cgp9CgoKY29udHJhY3QgTWp0VG9rZW4gaXMgQ3Jvd2RzYWxlVG9rZW5FeHQgewoKICAgIHVpbnQgcHVibGljIG93bmVyc1Byb2R1Y3RDb21taXNzaW9uSW5QZXJjID0gNTsKCiAgICB1aW50IHB1YmxpYyBvcGVyYXRvclByb2R1Y3RDb21taXNzaW9uSW5QZXJjID0gMjU7CgogICAgZXZlbnQgSW5kZXBlbmRlbnRTZWxsZXJKb2luZWQoYWRkcmVzcyBzZWxsZXJXYWxsZXQsIHVpbnQgYW1vdW50T2ZUb2tlbnMsIGFkZHJlc3Mgb3BlcmF0b3JXYWxsZXQpOwogICAgZXZlbnQgT3duZXJzUHJvZHVjdEFkZGVkKGFkZHJlc3Mgb3duZXJzV2FsbGV0LCB1aW50IGFtb3VudE9mVG9rZW5zLCBhZGRyZXNzIG9wZXJhdG9yV2FsbGV0KTsKICAgIGV2ZW50IE9wZXJhdG9yUHJvZHVjdENvbW1pc3Npb25DaGFuZ2VkKHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IE93bmVyc1Byb2R1Y3RDb21taXNzaW9uQ2hhbmdlZCh1aW50IF92YWx1ZSk7CgoKICAgIGZ1bmN0aW9uIHNldE9wZXJhdG9yQ29tbWlzc2lvbih1aW50IF92YWx1ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPj0gMCk7CiAgICAgICAgb3BlcmF0b3JQcm9kdWN0Q29tbWlzc2lvbkluUGVyYyA9IF92YWx1ZTsKICAgICAgICBPcGVyYXRvclByb2R1Y3RDb21taXNzaW9uQ2hhbmdlZChfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE93bmVyc0NvbW1pc3Npb24odWludCBfdmFsdWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID49IDApOwogICAgICAgIG93bmVyc1Byb2R1Y3RDb21taXNzaW9uSW5QZXJjID0gX3ZhbHVlOwogICAgICAgIE93bmVyc1Byb2R1Y3RDb21taXNzaW9uQ2hhbmdlZChfdmFsdWUpOwogICAgfQoKCiAgICAvKioKICAgICAqIE1ldGhvZCBjYWxsZWQgd2hlbiBuZXcgc2VsbGVyIGpvaW5lZCB0aGUgcHJvZ3JhbQogICAgICogVG8gYXZvaWQgdmFsdWUgbG9zdCBhZnRlciBkaXZpc2lvbiwgYW1vdW50T2ZUb2tlbnMgbXVzdCBiZSBtdWx0aXBsZSBvZiAxMDAKICAgICAqLwogICAgZnVuY3Rpb24gaW5kZXBlbmRlbnRTZWxsZXJKb2luZWQoYWRkcmVzcyBzZWxsZXJXYWxsZXQsIHVpbnQgYW1vdW50T2ZUb2tlbnMsIGFkZHJlc3Mgb3BlcmF0b3JXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgY2FuTWludCB7CiAgICAgICAgcmVxdWlyZShhbW91bnRPZlRva2VucyA+IDEwMCk7CiAgICAgICAgcmVxdWlyZShzZWxsZXJXYWxsZXQgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShvcGVyYXRvcldhbGxldCAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdWludCBvcGVyYXRvckNvbW1pc3Npb24gPSBhbW91bnRPZlRva2Vucy5kaXZpZGVzKDEwMCkudGltZXMob3BlcmF0b3JQcm9kdWN0Q29tbWlzc2lvbkluUGVyYyk7CiAgICAgICAgdWludCBzZWxsZXJBbW91bnQgPSBhbW91bnRPZlRva2Vucy5taW51cyhvcGVyYXRvckNvbW1pc3Npb24pOwoKICAgICAgICBpZiAob3BlcmF0b3JDb21taXNzaW9uID4gMCkgewogICAgICAgICAgICBtaW50KG9wZXJhdG9yV2FsbGV0LCBvcGVyYXRvckNvbW1pc3Npb24pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNlbGxlckFtb3VudCA+IDApIHsKICAgICAgICAgICAgbWludChzZWxsZXJXYWxsZXQsIHNlbGxlckFtb3VudCk7CiAgICAgICAgfQogICAgICAgIEluZGVwZW5kZW50U2VsbGVySm9pbmVkKHNlbGxlcldhbGxldCwgYW1vdW50T2ZUb2tlbnMsIG9wZXJhdG9yV2FsbGV0KTsKICAgIH0KCgogICAgLyoqCiAgICAqIE1ldGhvZCBjYWxsZWQgd2hlbiBvd25lcnMgYWRkIHRoZWlyIG93biBwcm9kdWN0CiAgICAqIFRvIGF2b2lkIHZhbHVlIGxvc3QgYWZ0ZXIgZGl2aXNpb24sIGFtb3VudE9mVG9rZW5zIG11c3QgYmUgbXVsdGlwbGUgb2YgMTAwCiAgICAqLwogICAgZnVuY3Rpb24gb3duZXJzUHJvZHVjdEFkZGVkKGFkZHJlc3Mgb3duZXJzV2FsbGV0LCB1aW50IGFtb3VudE9mVG9rZW5zLCBhZGRyZXNzIG9wZXJhdG9yV2FsbGV0KSBwdWJsaWMgb25seU93bmVyIGNhbk1pbnQgewogICAgICAgIHJlcXVpcmUoYW1vdW50T2ZUb2tlbnMgPiAxMDApOwogICAgICAgIHJlcXVpcmUob3duZXJzV2FsbGV0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUob3BlcmF0b3JXYWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHVpbnQgb3duZXJzQ29taXNzaW9uID0gYW1vdW50T2ZUb2tlbnMuZGl2aWRlcygxMDApLnRpbWVzKG93bmVyc1Byb2R1Y3RDb21taXNzaW9uSW5QZXJjKTsKICAgICAgICB1aW50IG9wZXJhdG9yQW1vdW50ID0gYW1vdW50T2ZUb2tlbnMubWludXMob3duZXJzQ29taXNzaW9uKTsKCgogICAgICAgIGlmIChvd25lcnNDb21pc3Npb24gPiAwKSB7CiAgICAgICAgICAgIG1pbnQob3duZXJzV2FsbGV0LCBvd25lcnNDb21pc3Npb24pOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9wZXJhdG9yQW1vdW50ID4gMCkgewogICAgICAgICAgICBtaW50KG9wZXJhdG9yV2FsbGV0LCBvcGVyYXRvckFtb3VudCk7CiAgICAgICAgfQoKICAgICAgICBPd25lcnNQcm9kdWN0QWRkZWQob3duZXJzV2FsbGV0LCBhbW91bnRPZlRva2Vucywgb3BlcmF0b3JXYWxsZXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIE1qdFRva2VuKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2luaXRpYWxTdXBwbHksIHVpbnQgX2RlY2ltYWxzLCBib29sIF9taW50YWJsZSwgdWludCBfZ2xvYmFsTWluQ2FwKQogICAgQ3Jvd2RzYWxlVG9rZW5FeHQoX25hbWUsIF9zeW1ib2wsIF9pbml0aWFsU3VwcGx5LCBfZGVjaW1hbHMsIF9taW50YWJsZSwgX2dsb2JhbE1pbkNhcCkge30KCn0KCgoKCi8qKgogKiBGaW5hbGl6ZSBhZ2VudCBkZWZpbmVzIHdoYXQgaGFwcGVucyBhdCB0aGUgZW5kIG9mIHN1Y2Nlc2VmdWwgY3Jvd2RzYWxlLgogKgogKiAtIEFsbG9jYXRlIHRva2VucyBmb3IgZm91bmRlcnMsIGJvdW50aWVzIGFuZCBjb21tdW5pdHkKICogLSBNYWtlIHRva2VucyB0cmFuc2ZlcmFibGUKICogLSBldGMuCiAqLwpjb250cmFjdCBGaW5hbGl6ZUFnZW50IHsKCiAgICBmdW5jdGlvbiBpc0ZpbmFsaXplQWdlbnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqIFJldHVybiB0cnVlIGlmIHdlIGNhbiBydW4gZmluYWxpemVDcm93ZHNhbGUoKSBwcm9wZXJseS4KICAgICAqCiAgICAgKiBUaGlzIGlzIGEgc2FmZXR5IGNoZWNrIGZ1bmN0aW9uIHRoYXQgZG9lc24ndCBhbGxvdyBjcm93ZHNhbGUgdG8gYmVnaW4KICAgICAqIHVubGVzcyB0aGUgZmluYWxpemVyIGhhcyBiZWVuIHNldCB1cCBwcm9wZXJseS4KICAgICAqLwogICAgZnVuY3Rpb24gaXNTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKICAgIC8qKiBDYWxsZWQgb25jZSBieSBjcm93ZHNhbGUgZmluYWxpemUoKSBpZiB0aGUgc2FsZSB3YXMgc3VjY2Vzcy4gKi8KICAgIGZ1bmN0aW9uIGZpbmFsaXplQ3Jvd2RzYWxlKCk7Cgp9CgovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKLyoqCiAqIEludGVyZmFjZSBmb3IgZGVmaW5pbmcgY3Jvd2RzYWxlIHByaWNpbmcuCiAqLwpjb250cmFjdCBQcmljaW5nU3RyYXRlZ3kgewoKICAgIC8qKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24uICovCiAgICBmdW5jdGlvbiBpc1ByaWNpbmdTdHJhdGVneSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqIFNlbGYgY2hlY2sgaWYgYWxsIHJlZmVyZW5jZXMgYXJlIGNvcnJlY3RseSBzZXQuCiAgICAgKgogICAgICogQ2hlY2tzIHRoYXQgcHJpY2luZyBzdHJhdGVneSBtYXRjaGVzIGNyb3dkc2FsZSBwYXJhbWV0ZXJzLgogICAgICovCiAgICBmdW5jdGlvbiBpc1NhbmUoYWRkcmVzcyBjcm93ZHNhbGUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFByaWNpbmcgdGVsbHMgaWYgdGhpcyBpcyBhIHByZXNhbGUgcHVyY2hhc2Ugb3Igbm90LgogICAgICAgQHBhcmFtIHB1cmNoYXNlciBBZGRyZXNzIG9mIHRoZSBwdXJjaGFzZXIKICAgICAgIEByZXR1cm4gRmFsc2UgYnkgZGVmYXVsdCwgdHJ1ZSBpZiBhIHByZXNhbGUgcHVyY2hhc2VyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzUHJlc2FsZVB1cmNoYXNlKGFkZHJlc3MgcHVyY2hhc2VyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFdoZW4gc29tZWJvZHkgdHJpZXMgdG8gYnV5IHRva2VucyBmb3IgWCBldGgsIGNhbGN1bGF0ZSBob3cgbWFueSB0b2tlbnMgdGhleSBnZXQuCiAgICAgKgogICAgICoKICAgICAqIEBwYXJhbSB2YWx1ZSAtIFdoYXQgaXMgdGhlIHZhbHVlIG9mIHRoZSB0cmFuc2FjdGlvbiBzZW5kIGluIGFzIHdlaQogICAgICogQHBhcmFtIHRva2Vuc1NvbGQgLSBob3cgbXVjaCB0b2tlbnMgaGF2ZSBiZWVuIHNvbGQgdGhpcyBmYXIKICAgICAqIEBwYXJhbSB3ZWlSYWlzZWQgLSBob3cgbXVjaCBtb25leSBoYXMgYmVlbiByYWlzZWQgdGhpcyBmYXIgaW4gdGhlIG1haW4gdG9rZW4gc2FsZSAtIHRoaXMgbnVtYmVyIGV4Y2x1ZGVzIHByZXNhbGUKICAgICAqIEBwYXJhbSBtc2dTZW5kZXIgLSB3aG8gaXMgdGhlIGludmVzdG9yIG9mIHRoaXMgdHJhbnNhY3Rpb24KICAgICAqIEBwYXJhbSBkZWNpbWFscyAtIGhvdyBtYW55IGRlY2ltYWwgdW5pdHMgdGhlIHRva2VuIGhhcwogICAgICogQHJldHVybiBBbW91bnQgb2YgdG9rZW5zIHRoZSBpbnZlc3RvciByZWNlaXZlcwogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQcmljZSh1aW50IHZhbHVlLCB1aW50IHdlaVJhaXNlZCwgdWludCB0b2tlbnNTb2xkLCBhZGRyZXNzIG1zZ1NlbmRlciwgdWludCBkZWNpbWFscykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG9rZW5BbW91bnQpOwp9CgoKCi8vLyBAZGV2IFRpbWUgbWlsZXN0b25lIGJhc2VkIHByaWNpbmcgd2l0aCBzcGVjaWFsIHN1cHBvcnQgZm9yIHByZS1pY28gZGVhbHMuCmNvbnRyYWN0IE1pbGVzdG9uZVByaWNpbmcgaXMgUHJpY2luZ1N0cmF0ZWd5LCBPd25hYmxlIHsKCiAgICB1c2luZyBTTWF0aExpYiBmb3IgdWludDsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNQVhfTUlMRVNUT05FID0gMTA7CgogICAgLy8gVGhpcyBjb250YWlucyBhbGwgcHJlLUlDTyBhZGRyZXNzZXMsIGFuZCB0aGVpciBwcmljZXMgKHdlaXMgcGVyIHRva2VuKQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgcHJlaWNvQWRkcmVzc2VzOwoKICAgIC8qKgogICAgKiBEZWZpbmUgcHJpY2luZyBzY2hlZHVsZSB1c2luZyBtaWxlc3RvbmVzLgogICAgKi8KICAgIHN0cnVjdCBNaWxlc3RvbmUgewoKICAgICAgICAvLyBVTklYIHRpbWVzdGFtcCB3aGVuIHRoaXMgbWlsZXN0b25lIGtpY2tzIGluCiAgICAgICAgdWludCB0aW1lOwoKICAgICAgICAvLyBIb3cgbWFueSB0b2tlbnMgcGVyIHNhdG9zaGkgeW91IHdpbGwgZ2V0IGFmdGVyIHRoaXMgbWlsZXN0b25lIGhhcyBiZWVuIHBhc3NlZAogICAgICAgIHVpbnQgcHJpY2U7CiAgICB9CgogICAgLy8gU3RvcmUgbWlsZXN0b25lcyBpbiBhIGZpeGVkIGFycmF5LCBzbyB0aGF0IGl0IGNhbiBiZSBzZWVuIGluIGEgYmxvY2tjaGFpbiBleHBsb3JlcgogICAgLy8gTWlsZXN0b25lIDAgaXMgYWx3YXlzICgwLCAwKQogICAgLy8gKFRPRE86IGNoYW5nZSB0aGlzIHdoZW4gd2UgY29uZmlybSBkeW5hbWljIGFycmF5cyBhcmUgZXhwbG9yYWJsZSkKICAgIE1pbGVzdG9uZVsxMF0gcHVibGljIG1pbGVzdG9uZXM7CgogICAgLy8gSG93IG1hbnkgYWN0aXZlIG1pbGVzdG9uZXMgd2UgaGF2ZQogICAgdWludCBwdWJsaWMgbWlsZXN0b25lQ291bnQ7CgogICAgLy8vIEBkZXYgQ29udHJ1Y3Rpb24sIGNyZWF0aW5nIGEgbGlzdCBvZiBtaWxlc3RvbmVzCiAgICAvLy8gQHBhcmFtIF9taWxlc3RvbmVzIHVpbnRbXSBtaWxlc3RvbmVzIFBhaXJzIG9mICh0aW1lLCBwcmljZSkKICAgIGZ1bmN0aW9uIE1pbGVzdG9uZVByaWNpbmcodWludFtdIF9taWxlc3RvbmVzKSB7CiAgICAgICAgLy8gTmVlZCB0byBoYXZlIHR1cGxlcywgbGVuZ3RoIGNoZWNrCiAgICAgICAgaWYoX21pbGVzdG9uZXMubGVuZ3RoICUgMiA9PSAxIHx8IF9taWxlc3RvbmVzLmxlbmd0aCA+PSBNQVhfTUlMRVNUT05FKjIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBtaWxlc3RvbmVDb3VudCA9IF9taWxlc3RvbmVzLmxlbmd0aCAvIDI7CgogICAgICAgIHVpbnQgbGFzdFRpbWVzdGFtcCA9IDA7CgogICAgICAgIGZvcih1aW50IGk9MDsgaTxfbWlsZXN0b25lcy5sZW5ndGgvMjsgaSsrKSB7CiAgICAgICAgICAgIG1pbGVzdG9uZXNbaV0udGltZSA9IF9taWxlc3RvbmVzW2kqMl07CiAgICAgICAgICAgIG1pbGVzdG9uZXNbaV0ucHJpY2UgPSBfbWlsZXN0b25lc1tpKjIrMV07CgogICAgICAgICAgICAvLyBObyBpbnZhbGlkIHN0ZXBzCiAgICAgICAgICAgIGlmKChsYXN0VGltZXN0YW1wICE9IDApICYmIChtaWxlc3RvbmVzW2ldLnRpbWUgPD0gbGFzdFRpbWVzdGFtcCkpIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CgogICAgICAgICAgICBsYXN0VGltZXN0YW1wID0gbWlsZXN0b25lc1tpXS50aW1lOwogICAgICAgIH0KCiAgICAgICAgLy8gTGFzdCBtaWxlc3RvbmUgcHJpY2UgbXVzdCBiZSB6ZXJvLCB0ZXJtaW5hdGluZyB0aGUgY3Jvd2RhbGUKICAgICAgICBpZihtaWxlc3RvbmVzW21pbGVzdG9uZUNvdW50LTFdLnByaWNlICE9IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgaXMgaW52b2tlZCBvbmNlIGZvciBldmVyeSBwcmUtSUNPIGFkZHJlc3MsIHNldCBwcmljZVBlclRva2VuCiAgICAvLy8gICAgICB0byAwIHRvIGRpc2FibGUKICAgIC8vLyBAcGFyYW0gcHJlaWNvQWRkcmVzcyBQcmVzYWxlRnVuZENvbGxlY3RvciBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIHByaWNlUGVyVG9rZW4gSG93IG1hbnkgd2VpcyBvbmUgdG9rZW4gY29zdCBmb3IgcHJlLWljbyBpbnZlc3RvcnMKICAgIGZ1bmN0aW9uIHNldFByZWljb0FkZHJlc3MoYWRkcmVzcyBwcmVpY29BZGRyZXNzLCB1aW50IHByaWNlUGVyVG9rZW4pCiAgICBwdWJsaWMKICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHByZWljb0FkZHJlc3Nlc1twcmVpY29BZGRyZXNzXSA9IHByaWNlUGVyVG9rZW47CiAgICB9CgogICAgLy8vIEBkZXYgSXRlcmF0ZSB0aHJvdWdoIG1pbGVzdG9uZXMuIFlvdSByZWFjaCBlbmQgb2YgbWlsZXN0b25lcyB3aGVuIHByaWNlID0gMAogICAgLy8vIEByZXR1cm4gdHVwbGUgKHRpbWUsIHByaWNlKQogICAgZnVuY3Rpb24gZ2V0TWlsZXN0b25lKHVpbnQgbikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQsIHVpbnQpIHsKICAgICAgICByZXR1cm4gKG1pbGVzdG9uZXNbbl0udGltZSwgbWlsZXN0b25lc1tuXS5wcmljZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Rmlyc3RNaWxlc3RvbmUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKE1pbGVzdG9uZSkgewogICAgICAgIHJldHVybiBtaWxlc3RvbmVzWzBdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldExhc3RNaWxlc3RvbmUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKE1pbGVzdG9uZSkgewogICAgICAgIHJldHVybiBtaWxlc3RvbmVzW21pbGVzdG9uZUNvdW50LTFdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFByaWNpbmdTdGFydHNBdCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGdldEZpcnN0TWlsZXN0b25lKCkudGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcmljaW5nRW5kc0F0KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZ2V0TGFzdE1pbGVzdG9uZSgpLnRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gaXNTYW5lKGFkZHJlc3MgX2Nyb3dkc2FsZSkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIENyb3dkc2FsZUV4dCBjcm93ZHNhbGUgPSBDcm93ZHNhbGVFeHQoX2Nyb3dkc2FsZSk7CiAgICAgICAgcmV0dXJuIGNyb3dkc2FsZS5zdGFydHNBdCgpID09IGdldFByaWNpbmdTdGFydHNBdCgpICYmIGNyb3dkc2FsZS5lbmRzQXQoKSA9PSBnZXRQcmljaW5nRW5kc0F0KCk7CiAgICB9CgogICAgLy8vIEBkZXYgR2V0IHRoZSBjdXJyZW50IG1pbGVzdG9uZSBvciBiYWlsIG91dCBpZiB3ZSBhcmUgbm90IGluIHRoZSBtaWxlc3RvbmUgcGVyaW9kcy4KICAgIC8vLyBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl0KICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRNaWxlc3RvbmUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKE1pbGVzdG9uZSkgewogICAgICAgIHVpbnQgaTsKCiAgICAgICAgZm9yKGk9MDsgaTxtaWxlc3RvbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmKG5vdyA8IG1pbGVzdG9uZXNbaV0udGltZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG1pbGVzdG9uZXNbaS0xXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBHZXQgdGhlIGN1cnJlbnQgcHJpY2UuCiAgICAvLy8gQHJldHVybiBUaGUgY3VycmVudCBwcmljZSBvciAwIGlmIHdlIGFyZSBvdXRzaWRlIG1pbGVzdG9uZSBwZXJpb2QKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQcmljZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHJlc3VsdCkgewogICAgICAgIHJldHVybiBnZXRDdXJyZW50TWlsZXN0b25lKCkucHJpY2U7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlIHRoZSBjdXJyZW50IHByaWNlIGZvciBidXkgaW4gYW1vdW50LgogICAgZnVuY3Rpb24gY2FsY3VsYXRlUHJpY2UodWludCB2YWx1ZSwgdWludCB3ZWlSYWlzZWQsIHVpbnQgdG9rZW5zU29sZCwgYWRkcmVzcyBtc2dTZW5kZXIsIHVpbnQgZGVjaW1hbHMpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CgogICAgICAgIHVpbnQgbXVsdGlwbGllciA9IDEwICoqIGRlY2ltYWxzOwoKICAgICAgICAvLyBUaGlzIGludmVzdG9yIGlzIGNvbWluZyB0aHJvdWdoIHByZS1pY28KICAgICAgICBpZihwcmVpY29BZGRyZXNzZXNbbXNnU2VuZGVyXSA+IDApIHsKICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRpbWVzKG11bHRpcGxpZXIpIC8gcHJlaWNvQWRkcmVzc2VzW21zZ1NlbmRlcl07CiAgICAgICAgfQoKICAgICAgICB1aW50IHByaWNlID0gZ2V0Q3VycmVudFByaWNlKCk7CiAgICAgICAgcmV0dXJuIHZhbHVlLnRpbWVzKG11bHRpcGxpZXIpIC8gcHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gaXNQcmVzYWxlUHVyY2hhc2UoYWRkcmVzcyBwdXJjaGFzZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYocHJlaWNvQWRkcmVzc2VzW3B1cmNoYXNlcl0gPiAwKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIHRocm93OyAvLyBObyBtb25leSBvbiB0aGlzIGNvbnRyYWN0CiAgICB9Cgp9CgoKCi8qKgogKiBBIHRva2VuIHRoYXQgZGVmaW5lcyBmcmFjdGlvbmFsIHVuaXRzIGFzIGRlY2ltYWxzLgogKi8KY29udHJhY3QgRnJhY3Rpb25hbEVSQzIwRXh0IGlzIEVSQzIwIHsKCiAgICB1aW50IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQgcHVibGljIG1pbkNhcDsKCn0KCgoKLyoqCiAqIEFic3RyYWN0IGJhc2UgY29udHJhY3QgZm9yIHRva2VuIHNhbGVzLgogKgogKiBIYW5kbGUKICogLSBzdGFydCBhbmQgZW5kIGRhdGVzCiAqIC0gYWNjZXB0aW5nIGludmVzdG1lbnRzCiAqIC0gbWluaW11bSBmdW5kaW5nIGdvYWwgYW5kIHJlZnVuZAogKiAtIHZhcmlvdXMgc3RhdGlzdGljcyBkdXJpbmcgdGhlIGNyb3dkZnVuZAogKiAtIGRpZmZlcmVudCBwcmljaW5nIHN0cmF0ZWdpZXMKICogLSBkaWZmZXJlbnQgaW52ZXN0bWVudCBwb2xpY2llcyAocmVxdWlyZSBzZXJ2ZXIgc2lkZSBjdXN0b21lciBpZCwgYWxsb3cgb25seSB3aGl0ZWxpc3RlZCBhZGRyZXNzZXMpCiAqCiAqLwpjb250cmFjdCBDcm93ZHNhbGVFeHQgaXMgSGFsdGFibGUgewoKICAgIC8qIE1heCBpbnZlc3RtZW50IGNvdW50IHdoZW4gd2UgYXJlIHN0aWxsIGFsbG93ZWQgdG8gY2hhbmdlIHRoZSBtdWx0aXNpZyBhZGRyZXNzICovCiAgICB1aW50IHB1YmxpYyBNQVhfSU5WRVNUTUVOVFNfQkVGT1JFX01VTFRJU0lHX0NIQU5HRSA9IDU7CgogICAgdXNpbmcgU01hdGhMaWIgZm9yIHVpbnQ7CgogICAgLyogVGhlIHRva2VuIHdlIGFyZSBzZWxsaW5nICovCiAgICBGcmFjdGlvbmFsRVJDMjBFeHQgcHVibGljIHRva2VuOwoKICAgIC8qIEhvdyB3ZSBhcmUgZ29pbmcgdG8gcHJpY2Ugb3VyIG9mZmVyaW5nICovCiAgICBNaWxlc3RvbmVQcmljaW5nIHB1YmxpYyBwcmljaW5nU3RyYXRlZ3k7CgogICAgLyogUG9zdC1zdWNjZXNzIGNhbGxiYWNrICovCiAgICBGaW5hbGl6ZUFnZW50IHB1YmxpYyBmaW5hbGl6ZUFnZW50OwoKICAgIC8qIHRva2VucyB3aWxsIGJlIHRyYW5zZmVyZWQgZnJvbSB0aGlzIGFkZHJlc3MgKi8KICAgIGFkZHJlc3MgcHVibGljIG11bHRpc2lnV2FsbGV0OwoKICAgIC8qIGlmIHRoZSBmdW5kaW5nIGdvYWwgaXMgbm90IHJlYWNoZWQsIGludmVzdG9ycyBtYXkgd2l0aGRyYXcgdGhlaXIgZnVuZHMgKi8KICAgIHVpbnQgcHVibGljIG1pbmltdW1GdW5kaW5nR29hbDsKCiAgICAvKiB0aGUgVU5JWCB0aW1lc3RhbXAgc3RhcnQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlICovCiAgICB1aW50IHB1YmxpYyBzdGFydHNBdDsKCiAgICAvKiB0aGUgVU5JWCB0aW1lc3RhbXAgZW5kIGRhdGUgb2YgdGhlIGNyb3dkc2FsZSAqLwogICAgdWludCBwdWJsaWMgZW5kc0F0OwoKICAgIC8qIHRoZSBudW1iZXIgb2YgdG9rZW5zIGFscmVhZHkgc29sZCB0aHJvdWdoIHRoaXMgY29udHJhY3QqLwogICAgdWludCBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogICAgLyogSG93IG1hbnkgd2VpIG9mIGZ1bmRpbmcgd2UgaGF2ZSByYWlzZWQgKi8KICAgIHVpbnQgcHVibGljIHdlaVJhaXNlZCA9IDA7CgogICAgLyogQ2FsY3VsYXRlIGluY29taW5nIGZ1bmRzIGZyb20gcHJlc2FsZSBjb250cmFjdHMgYW5kIGFkZHJlc3NlcyAqLwogICAgdWludCBwdWJsaWMgcHJlc2FsZVdlaVJhaXNlZCA9IDA7CgogICAgLyogSG93IG1hbnkgZGlzdGluY3QgYWRkcmVzc2VzIGhhdmUgaW52ZXN0ZWQgKi8KICAgIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQgPSAwOwoKICAgIC8qIEhvdyBtdWNoIHdlaSB3ZSBoYXZlIHJldHVybmVkIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFmdGVyIGEgZmFpbGVkIGNyb3dkZnVuZC4gKi8KICAgIHVpbnQgcHVibGljIGxvYWRlZFJlZnVuZCA9IDA7CgogICAgLyogSG93IG11Y2ggd2VpIHdlIGhhdmUgZ2l2ZW4gYmFjayB0byBpbnZlc3RvcnMuKi8KICAgIHVpbnQgcHVibGljIHdlaVJlZnVuZGVkID0gMDsKCiAgICAvKiBIYXMgdGhpcyBjcm93ZHNhbGUgYmVlbiBmaW5hbGl6ZWQgKi8KICAgIGJvb2wgcHVibGljIGZpbmFsaXplZDsKCiAgICAvKiBEbyB3ZSBuZWVkIHRvIGhhdmUgdW5pcXVlIGNvbnRyaWJ1dG9yIGlkIGZvciBlYWNoIGN1c3RvbWVyICovCiAgICBib29sIHB1YmxpYyByZXF1aXJlQ3VzdG9tZXJJZDsKCiAgICBib29sIHB1YmxpYyBpc1doaXRlTGlzdGVkOwoKICAgIGFkZHJlc3NbXSBwdWJsaWMgam9pbmVkQ3Jvd2RzYWxlczsKICAgIHVpbnQgcHVibGljIGpvaW5lZENyb3dkc2FsZXNMZW4gPSAwOwoKICAgIGFkZHJlc3MgcHVibGljIGxhc3RDcm93ZHNhbGU7CgogICAgLyoqCiAgICAgICogRG8gd2UgdmVyaWZ5IHRoYXQgY29udHJpYnV0b3IgaGFzIGJlZW4gY2xlYXJlZCBvbiB0aGUgc2VydmVyIHNpZGUgKGFjY3JlZGl0ZWQgaW52ZXN0b3JzIG9ubHkpLgogICAgICAqIFRoaXMgbWV0aG9kIHdhcyBmaXJzdCB1c2VkIGluIEZpcnN0Qmxvb2QgY3Jvd2RzYWxlIHRvIGVuc3VyZSBhbGwgY29udHJpYnV0b3JzIGhhdmUgYWNjZXB0ZWQgdGVybXMgb24gc2FsZSAob24gdGhlIHdlYikuCiAgICAgICovCiAgICBib29sIHB1YmxpYyByZXF1aXJlZFNpZ25lZEFkZHJlc3M7CgogICAgLyogU2VydmVyIHNpZGUgYWRkcmVzcyB0aGF0IHNpZ25lZCBhbGxvd2VkIGNvbnRyaWJ1dG9ycyAoRXRoZXJldW0gYWRkcmVzc2VzKSB0aGF0IGNhbiBwYXJ0aWNpcGF0ZSB0aGUgY3Jvd2RzYWxlICovCiAgICBhZGRyZXNzIHB1YmxpYyBzaWduZXJBZGRyZXNzOwoKICAgIC8qKiBIb3cgbXVjaCBFVEggZWFjaCBhZGRyZXNzIGhhcyBpbnZlc3RlZCB0byB0aGlzIGNyb3dkc2FsZSAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgaW52ZXN0ZWRBbW91bnRPZjsKCiAgICAvKiogSG93IG11Y2ggdG9rZW5zIHRoaXMgY3Jvd2RzYWxlIGhhcyBjcmVkaXRlZCBmb3IgZWFjaCBpbnZlc3RvciBhZGRyZXNzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyB0b2tlbkFtb3VudE9mOwoKICAgIHN0cnVjdCBXaGl0ZUxpc3REYXRhIHsKICAgICAgICBib29sIHN0YXR1czsKICAgICAgICB1aW50IG1pbkNhcDsKICAgICAgICB1aW50IG1heENhcDsKICAgIH0KCiAgICAvL2lzIGNyb3dkc2FsZSB1cGRhdGFibGUKICAgIGJvb2wgcHVibGljIGlzVXBkYXRhYmxlOwoKICAgIC8qKiBBZGRyZXNzZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBpbnZlc3QgZXZlbiBiZWZvcmUgSUNPIG9mZmljYWwgb3BlbnMuIEZvciB0ZXN0aW5nLCBmb3IgSUNPIHBhcnRuZXJzLCBldGMuICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IFdoaXRlTGlzdERhdGEpIHB1YmxpYyBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0OwoKICAgIC8qKiBUaGlzIGlzIGZvciBtYW51bCB0ZXN0aW5nIGZvciB0aGUgaW50ZXJhY3Rpb24gZnJvbSBvd25lciB3YWxsZXQuIFlvdSBjYW4gc2V0IGl0IHRvIGFueSB2YWx1ZSBhbmQgaW5zcGVjdCB0aGlzIGluIGJsb2NrY2hhaW4gZXhwbG9yZXIgdG8gc2VlIHRoYXQgY3Jvd2RzYWxlIGludGVyYWN0aW9uIHdvcmtzLiAqLwogICAgdWludCBwdWJsaWMgb3duZXJUZXN0VmFsdWU7CgogICAgLyoqIFN0YXRlIG1hY2hpbmUKICAgICAqCiAgICAgKiAtIFByZXBhcmluZzogQWxsIGNvbnRyYWN0IGluaXRpYWxpemF0aW9uIGNhbGxzIGFuZCB2YXJpYWJsZXMgaGF2ZSBub3QgYmVlbiBzZXQgeWV0CiAgICAgKiAtIFByZWZ1bmRpbmc6IFdlIGhhdmUgbm90IHBhc3NlZCBzdGFydCB0aW1lIHlldAogICAgICogLSBGdW5kaW5nOiBBY3RpdmUgY3Jvd2RzYWxlCiAgICAgKiAtIFN1Y2Nlc3M6IE1pbmltdW0gZnVuZGluZyBnb2FsIHJlYWNoZWQKICAgICAqIC0gRmFpbHVyZTogTWluaW11bSBmdW5kaW5nIGdvYWwgbm90IHJlYWNoZWQgYmVmb3JlIGVuZGluZyB0aW1lCiAgICAgKiAtIEZpbmFsaXplZDogVGhlIGZpbmFsaXplZCBoYXMgYmVlbiBjYWxsZWQgYW5kIHN1Y2Nlc2Z1bGx5IGV4ZWN1dGVkCiAgICAgKiAtIFJlZnVuZGluZzogUmVmdW5kcyBhcmUgbG9hZGVkIG9uIHRoZSBjb250cmFjdCBmb3IgcmVjbGFpbS4KICAgICAqLwogICAgZW51bSBTdGF0ZXtVbmtub3duLCBQcmVwYXJpbmcsIFByZUZ1bmRpbmcsIEZ1bmRpbmcsIFN1Y2Nlc3MsIEZhaWx1cmUsIEZpbmFsaXplZCwgUmVmdW5kaW5nfQoKICAgIC8vIEEgbmV3IGludmVzdG1lbnQgd2FzIG1hZGUKICAgIGV2ZW50IEludmVzdGVkKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgd2VpQW1vdW50LCB1aW50IHRva2VuQW1vdW50LCB1aW50MTI4IGN1c3RvbWVySWQpOwoKICAgIC8vIFJlZnVuZCB3YXMgcHJvY2Vzc2VkIGZvciBhIGNvbnRyaWJ1dG9yCiAgICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQpOwoKICAgIC8vIFRoZSBydWxlcyB3ZXJlIGNoYW5nZWQgd2hhdCBraW5kIG9mIGludmVzdG1lbnRzIHdlIGFjY2VwdAogICAgZXZlbnQgSW52ZXN0bWVudFBvbGljeUNoYW5nZWQoYm9vbCBuZXdSZXF1aXJlQ3VzdG9tZXJJZCwgYm9vbCBuZXdSZXF1aXJlZFNpZ25lZEFkZHJlc3MsIGFkZHJlc3MgbmV3U2lnbmVyQWRkcmVzcyk7CgogICAgLy8gQWRkcmVzcyBlYXJseSBwYXJ0aWNpcGF0aW9uIHdoaXRlbGlzdCBzdGF0dXMgY2hhbmdlZAogICAgZXZlbnQgV2hpdGVsaXN0ZWQoYWRkcmVzcyBhZGRyLCBib29sIHN0YXR1cyk7CgogICAgLy8gQ3Jvd2RzYWxlIHN0YXJ0IHRpbWUgaGFzIGJlZW4gY2hhbmdlZAogICAgZXZlbnQgU3RhcnRzQXRDaGFuZ2VkKHVpbnQgbmV3U3RhcnRzQXQpOwoKICAgIC8vIENyb3dkc2FsZSBlbmQgdGltZSBoYXMgYmVlbiBjaGFuZ2VkCiAgICBldmVudCBFbmRzQXRDaGFuZ2VkKHVpbnQgbmV3RW5kc0F0KTsKCiAgICBmdW5jdGlvbiBDcm93ZHNhbGVFeHQoYWRkcmVzcyBfdG9rZW4sIE1pbGVzdG9uZVByaWNpbmcgX3ByaWNpbmdTdHJhdGVneSwgYWRkcmVzcyBfbXVsdGlzaWdXYWxsZXQsIHVpbnQgX3N0YXJ0LCB1aW50IF9lbmQsIHVpbnQgX21pbmltdW1GdW5kaW5nR29hbCwgYm9vbCBfaXNVcGRhdGFibGUsIGJvb2wgX2lzV2hpdGVMaXN0ZWQpIHsKCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgICAgICB0b2tlbiA9IEZyYWN0aW9uYWxFUkMyMEV4dChfdG9rZW4pOwoKICAgICAgICBzZXRQcmljaW5nU3RyYXRlZ3koX3ByaWNpbmdTdHJhdGVneSk7CgogICAgICAgIG11bHRpc2lnV2FsbGV0ID0gX211bHRpc2lnV2FsbGV0OwogICAgICAgIGlmKG11bHRpc2lnV2FsbGV0ID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBpZihfc3RhcnQgPT0gMCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIHN0YXJ0c0F0ID0gX3N0YXJ0OwoKICAgICAgICBpZihfZW5kID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBlbmRzQXQgPSBfZW5kOwoKICAgICAgICAvLyBEb24ndCBtZXNzIHRoZSBkYXRlcwogICAgICAgIGlmKHN0YXJ0c0F0ID49IGVuZHNBdCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIC8vIE1pbmltdW0gZnVuZGluZyBnb2FsIGNhbiBiZSB6ZXJvCiAgICAgICAgbWluaW11bUZ1bmRpbmdHb2FsID0gX21pbmltdW1GdW5kaW5nR29hbDsKCiAgICAgICAgaXNVcGRhdGFibGUgPSBfaXNVcGRhdGFibGU7CgogICAgICAgIGlzV2hpdGVMaXN0ZWQgPSBfaXNXaGl0ZUxpc3RlZDsKICAgIH0KCgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBpbnZlc3QobXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBNYWtlIGFuIGludmVzdG1lbnQuCiAgICAgKgogICAgICogQ3Jvd2RzYWxlIG11c3QgYmUgcnVubmluZyBmb3Igb25lIHRvIGludmVzdC4KICAgICAqIFdlIG11c3QgaGF2ZSBub3QgcHJlc3NlZCB0aGUgZW1lcmdlbmN5IGJyYWtlLgogICAgICoKICAgICAqIEBwYXJhbSByZWNlaXZlciBUaGUgRXRoZXJldW0gYWRkcmVzcyB3aG8gcmVjZWl2ZXMgdGhlIHRva2VucwogICAgICogQHBhcmFtIGN1c3RvbWVySWQgKG9wdGlvbmFsKSBVVUlEIHY0IHRvIHRyYWNrIHRoZSBzdWNjZXNzZnVsIHBheW1lbnRzIG9uIHRoZSBzZXJ2ZXIgc2lkZQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gaW52ZXN0SW50ZXJuYWwoYWRkcmVzcyByZWNlaXZlciwgdWludDEyOCBjdXN0b21lcklkKSBzdG9wSW5FbWVyZ2VuY3kgcHJpdmF0ZSB7CgogICAgICAgIC8vIERldGVybWluZSBpZiBpdCdzIGEgZ29vZCB0aW1lIHRvIGFjY2VwdCBpbnZlc3RtZW50IGZyb20gdGhpcyBwYXJ0aWNpcGFudAogICAgICAgIGlmKGdldFN0YXRlKCkgPT0gU3RhdGUuUHJlRnVuZGluZykgewogICAgICAgICAgICAvLyBBcmUgd2Ugd2hpdGVsaXN0ZWQgZm9yIGVhcmx5IGRlcG9zaXQKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfSBlbHNlIGlmKGdldFN0YXRlKCkgPT0gU3RhdGUuRnVuZGluZykgewogICAgICAgICAgICAvLyBSZXRhaWwgcGFydGljaXBhbnRzIGNhbiBvbmx5IGNvbWUgaW4gd2hlbiB0aGUgY3Jvd2RzYWxlIGlzIHJ1bm5pbmcKICAgICAgICAgICAgLy8gcGFzcwogICAgICAgICAgICBpZihpc1doaXRlTGlzdGVkKSB7CiAgICAgICAgICAgICAgICBpZighZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdFtyZWNlaXZlcl0uc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBVbndhbnRlZCBzdGF0ZQogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIHVpbnQgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBBY2NvdW50IHByZXNhbGUgc2FsZXMgc2VwYXJhdGVseSwgc28gdGhhdCB0aGV5IGRvIG5vdCBjb3VudCBhZ2FpbnN0IHByaWNpbmcgdHJhbmNoZXMKICAgICAgICB1aW50IHRva2VuQW1vdW50ID0gcHJpY2luZ1N0cmF0ZWd5LmNhbGN1bGF0ZVByaWNlKHdlaUFtb3VudCwgd2VpUmFpc2VkIC0gcHJlc2FsZVdlaVJhaXNlZCwgdG9rZW5zU29sZCwgbXNnLnNlbmRlciwgdG9rZW4uZGVjaW1hbHMoKSk7CgogICAgICAgIGlmKHRva2VuQW1vdW50ID09IDApIHsKICAgICAgICAgICAgLy8gRHVzdCB0cmFuc2FjdGlvbgogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIGlmKGlzV2hpdGVMaXN0ZWQpIHsKICAgICAgICAgICAgaWYodG9rZW5BbW91bnQgPCBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W3JlY2VpdmVyXS5taW5DYXAgJiYgdG9rZW5BbW91bnRPZltyZWNlaXZlcl0gPT0gMCkgewogICAgICAgICAgICAgICAgLy8gdG9rZW5BbW91bnQgPCBtaW5DYXAgZm9yIGludmVzdG9yCiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih0b2tlbkFtb3VudCA+IGVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbcmVjZWl2ZXJdLm1heENhcCkgewogICAgICAgICAgICAgICAgLy8gdG9rZW5BbW91bnQgPiBtYXhDYXAgZm9yIGludmVzdG9yCiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWQgbm90IGJ1c3QgdGhlIGludmVzdG9yJ3MgY2FwCiAgICAgICAgICAgIGlmIChpc0JyZWFraW5nSW52ZXN0b3JDYXAocmVjZWl2ZXIsIHRva2VuQW1vdW50KSkgewogICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZih0b2tlbkFtb3VudCA8IHRva2VuLm1pbkNhcCgpICYmIHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdID09IDApIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZihpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9PSAwKSB7CiAgICAgICAgICAgIC8vIEEgbmV3IGludmVzdG9yCiAgICAgICAgICAgIGludmVzdG9yQ291bnQrKzsKICAgICAgICB9CgogICAgICAgIC8vIFVwZGF0ZSBpbnZlc3RvcgogICAgICAgIGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID0gaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0ucGx1cyh3ZWlBbW91bnQpOwogICAgICAgIHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdID0gdG9rZW5BbW91bnRPZltyZWNlaXZlcl0ucGx1cyh0b2tlbkFtb3VudCk7CgogICAgICAgIC8vIFVwZGF0ZSB0b3RhbHMKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQucGx1cyh3ZWlBbW91bnQpOwogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLnBsdXModG9rZW5BbW91bnQpOwoKICAgICAgICBpZihwcmljaW5nU3RyYXRlZ3kuaXNQcmVzYWxlUHVyY2hhc2UocmVjZWl2ZXIpKSB7CiAgICAgICAgICAgIHByZXNhbGVXZWlSYWlzZWQgPSBwcmVzYWxlV2VpUmFpc2VkLnBsdXMod2VpQW1vdW50KTsKICAgICAgICB9CgogICAgICAgIC8vIENoZWNrIHRoYXQgd2UgZGlkIG5vdCBidXN0IHRoZSBjYXAKICAgICAgICBpZihpc0JyZWFraW5nQ2FwKHdlaUFtb3VudCwgdG9rZW5BbW91bnQsIHdlaVJhaXNlZCwgdG9rZW5zU29sZCkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsKCiAgICAgICAgLy8gUG9ja2V0IHRoZSBtb25leQogICAgICAgIGlmKCFtdWx0aXNpZ1dhbGxldC5zZW5kKHdlaUFtb3VudCkpIHRocm93OwoKICAgICAgICBpZiAoaXNXaGl0ZUxpc3RlZCkgewogICAgICAgICAgICB1aW50IG51bSA9IDA7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgam9pbmVkQ3Jvd2RzYWxlc0xlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSBqb2luZWRDcm93ZHNhbGVzW2ldKQogICAgICAgICAgICAgICAgICAgIG51bSA9IGk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChudW0gKyAxIDwgam9pbmVkQ3Jvd2RzYWxlc0xlbikgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IG51bSArIDE7IGogPCBqb2luZWRDcm93ZHNhbGVzTGVuOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBDcm93ZHNhbGVFeHQgY3Jvd2RzYWxlID0gQ3Jvd2RzYWxlRXh0KGpvaW5lZENyb3dkc2FsZXNbal0pOwogICAgICAgICAgICAgICAgICAgIGNyb3dkc2FsZS51cGRhdGVFYXJseVBhcmljaXBhbnRXaGl0ZWxpc3QobXNnLnNlbmRlciwgdGhpcywgdG9rZW5BbW91bnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBUZWxsIHVzIGludmVzdCB3YXMgc3VjY2VzcwogICAgICAgIEludmVzdGVkKHJlY2VpdmVyLCB3ZWlBbW91bnQsIHRva2VuQW1vdW50LCBjdXN0b21lcklkKTsKICAgIH0KCiAgICAvKioKICAgICAqIFByZWFsbG9jYXRlIHRva2VucyBmb3IgdGhlIGVhcmx5IGludmVzdG9ycy4KICAgICAqCiAgICAgKiBQcmVhbGxvY2F0ZWQgdG9rZW5zIGhhdmUgYmVlbiBzb2xkIGJlZm9yZSB0aGUgYWN0dWFsIGNyb3dkc2FsZSBvcGVucy4KICAgICAqIFRoaXMgZnVuY3Rpb24gbWludHMgdGhlIHRva2VucyBhbmQgbW92ZXMgdGhlIGNyb3dkc2FsZSBuZWVkbGUuCiAgICAgKgogICAgICogSW52ZXN0b3IgY291bnQgaXMgbm90IGhhbmRsZWQ7IGl0IGlzIGFzc3VtZWQgdGhpcyBnb2VzIGZvciBtdWx0aXBsZSBpbnZlc3RvcnMKICAgICAqIGFuZCB0aGUgdG9rZW4gZGlzdHJpYnV0aW9uIGhhcHBlbnMgb3V0c2lkZSB0aGUgc21hcnQgY29udHJhY3QgZmxvdy4KICAgICAqCiAgICAgKiBObyBtb25leSBpcyBleGNoYW5nZWQsIGFzIHRoZSBjcm93ZHNhbGUgdGVhbSBhbHJlYWR5IGhhdmUgcmVjZWl2ZWQgdGhlIHBheW1lbnQuCiAgICAgKgogICAgICogQHBhcmFtIGZ1bGxUb2tlbnMgdG9rZW5zIGFzIGZ1bGwgdG9rZW5zIC0gZGVjaW1hbCBwbGFjZXMgYWRkZWQgaW50ZXJuYWxseQogICAgICogQHBhcmFtIHdlaVByaWNlIFByaWNlIG9mIGEgc2luZ2xlIGZ1bGwgdG9rZW4gaW4gd2VpCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBwcmVhbGxvY2F0ZShhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGZ1bGxUb2tlbnMsIHVpbnQgd2VpUHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewoKICAgICAgICB1aW50IHRva2VuQW1vdW50ID0gZnVsbFRva2VucyAqIDEwKip0b2tlbi5kZWNpbWFscygpOwogICAgICAgIHVpbnQgd2VpQW1vdW50ID0gd2VpUHJpY2UgKiBmdWxsVG9rZW5zOyAvLyBUaGlzIGNhbiBiZSBhbHNvIDAsIHdlIGdpdmUgb3V0IHRva2VucyBmb3IgZnJlZQoKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQucGx1cyh3ZWlBbW91bnQpOwogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLnBsdXModG9rZW5BbW91bnQpOwoKICAgICAgICBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9IGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXMod2VpQW1vdW50KTsKICAgICAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXModG9rZW5BbW91bnQpOwoKICAgICAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsKCiAgICAgICAgLy8gVGVsbCB1cyBpbnZlc3Qgd2FzIHN1Y2Nlc3MKICAgICAgICBJbnZlc3RlZChyZWNlaXZlciwgd2VpQW1vdW50LCB0b2tlbkFtb3VudCwgMCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBbGxvdyBhbm9ueW1vdXMgY29udHJpYnV0aW9ucyB0byB0aGlzIGNyb3dkc2FsZS4KICAgICAqLwogICAgZnVuY3Rpb24gaW52ZXN0V2l0aFNpZ25lZEFkZHJlc3MoYWRkcmVzcyBhZGRyLCB1aW50MTI4IGN1c3RvbWVySWQsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnl0ZXMzMiBoYXNoID0gc2hhMjU2KGFkZHIpOwogICAgICAgIGlmIChlY3JlY292ZXIoaGFzaCwgdiwgciwgcykgIT0gc2lnbmVyQWRkcmVzcykgdGhyb3c7CiAgICAgICAgaWYoY3VzdG9tZXJJZCA9PSAwKSB0aHJvdzsgIC8vIFVVSUR2NCBzYW5pdHkgY2hlY2sKICAgICAgICBpbnZlc3RJbnRlcm5hbChhZGRyLCBjdXN0b21lcklkKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYWNrIHdobyBpcyB0aGUgY3VzdG9tZXIgbWFraW5nIHRoZSBwYXltZW50IHNvIHdlIGNhbiBzZW5kIHRoYW5rIHlvdSBlbWFpbC4KICAgICAqLwogICAgZnVuY3Rpb24gaW52ZXN0V2l0aEN1c3RvbWVySWQoYWRkcmVzcyBhZGRyLCB1aW50MTI4IGN1c3RvbWVySWQpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpZihyZXF1aXJlZFNpZ25lZEFkZHJlc3MpIHRocm93OyAvLyBDcm93ZHNhbGUgYWxsb3dzIG9ubHkgc2VydmVyLXNpZGUgc2lnbmVkIHBhcnRpY2lwYW50cwogICAgICAgIGlmKGN1c3RvbWVySWQgPT0gMCkgdGhyb3c7ICAvLyBVVUlEdjQgc2FuaXR5IGNoZWNrCiAgICAgICAgaW52ZXN0SW50ZXJuYWwoYWRkciwgY3VzdG9tZXJJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBbGxvdyBhbm9ueW1vdXMgY29udHJpYnV0aW9ucyB0byB0aGlzIGNyb3dkc2FsZS4KICAgICAqLwogICAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgYWRkcikgcHVibGljIHBheWFibGUgewogICAgICAgIGlmKHJlcXVpcmVDdXN0b21lcklkKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIG5lZWRzIHRvIHRyYWNrIHBhcnRpY2lwYW50cyBmb3IgdGhhbmsgeW91IGVtYWlsCiAgICAgICAgaWYocmVxdWlyZWRTaWduZWRBZGRyZXNzKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIGFsbG93cyBvbmx5IHNlcnZlci1zaWRlIHNpZ25lZCBwYXJ0aWNpcGFudHMKICAgICAgICBpbnZlc3RJbnRlcm5hbChhZGRyLCAwKTsKICAgIH0KCiAgICAvKioKICAgICAqIEludmVzdCB0byB0b2tlbnMsIHJlY29nbml6ZSB0aGUgcGF5ZXIgYW5kIGNsZWFyIGhpcyBhZGRyZXNzLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gYnV5V2l0aFNpZ25lZEFkZHJlc3ModWludDEyOCBjdXN0b21lcklkLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgcHVibGljIHBheWFibGUgewogICAgICAgIGludmVzdFdpdGhTaWduZWRBZGRyZXNzKG1zZy5zZW5kZXIsIGN1c3RvbWVySWQsIHYsIHIsIHMpOwogICAgfQoKICAgIC8qKgogICAgICogSW52ZXN0IHRvIHRva2VucywgcmVjb2duaXplIHRoZSBwYXllci4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eVdpdGhDdXN0b21lcklkKHVpbnQxMjggY3VzdG9tZXJJZCkgcHVibGljIHBheWFibGUgewogICAgICAgIGludmVzdFdpdGhDdXN0b21lcklkKG1zZy5zZW5kZXIsIGN1c3RvbWVySWQpOwogICAgfQoKICAgIC8qKgogICAgICogVGhlIGJhc2ljIGVudHJ5IHBvaW50IHRvIHBhcnRpY2lwYXRlIHRoZSBjcm93ZHNhbGUgcHJvY2Vzcy4KICAgICAqCiAgICAgKiBQYXkgZm9yIGZ1bmRpbmcsIGdldCBpbnZlc3RlZCB0b2tlbnMgYmFjayBpbiB0aGUgc2VuZGVyIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpbnZlc3QobXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBGaW5hbGl6ZSBhIHN1Y2NjZXNmdWwgY3Jvd2RzYWxlLgogICAgICoKICAgICAqIFRoZSBvd25lciBjYW4gdHJpZ2dyZSBhIGNhbGwgdGhlIGNvbnRyYWN0IHRoYXQgcHJvdmlkZXMgcG9zdC1jcm93ZHNhbGUgYWN0aW9ucywgbGlrZSByZWxlYXNpbmcgdGhlIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzKSBvbmx5T3duZXIgc3RvcEluRW1lcmdlbmN5IHsKCiAgICAgICAgLy8gQWxyZWFkeSBmaW5hbGl6ZWQKICAgICAgICBpZihmaW5hbGl6ZWQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICAvLyBGaW5hbGl6aW5nIGlzIG9wdGlvbmFsLiBXZSBvbmx5IGNhbGwgaXQgaWYgd2UgYXJlIGdpdmVuIGEgZmluYWxpemluZyBhZ2VudC4KICAgICAgICBpZihhZGRyZXNzKGZpbmFsaXplQWdlbnQpICE9IDApIHsKICAgICAgICAgICAgZmluYWxpemVBZ2VudC5maW5hbGl6ZUNyb3dkc2FsZSgpOwogICAgICAgIH0KCiAgICAgICAgZmluYWxpemVkID0gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEFsbG93IHRvIChyZSlzZXQgZmluYWxpemUgYWdlbnQuCiAgICAgKgogICAgICogRGVzaWduIGNob2ljZTogbm8gc3RhdGUgcmVzdHJpY3Rpb25zIG9uIHNldHRpbmcgdGhpcywgc28gdGhhdCB3ZSBjYW4gZml4IGZhdCBmaW5nZXIgbWlzdGFrZXMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEZpbmFsaXplQWdlbnQoRmluYWxpemVBZ2VudCBhZGRyKSBvbmx5T3duZXIgewogICAgICAgIGZpbmFsaXplQWdlbnQgPSBhZGRyOwoKICAgICAgICAvLyBEb24ndCBhbGxvdyBzZXR0aW5nIGJhZCBhZ2VudAogICAgICAgIGlmKCFmaW5hbGl6ZUFnZW50LmlzRmluYWxpemVBZ2VudCgpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNldCBwb2xpY3kgZG8gd2UgbmVlZCB0byBoYXZlIHNlcnZlci1zaWRlIGN1c3RvbWVyIGlkcyBmb3IgdGhlIGludmVzdG1lbnRzLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gc2V0UmVxdWlyZUN1c3RvbWVySWQoYm9vbCB2YWx1ZSkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlQ3VzdG9tZXJJZCA9IHZhbHVlOwogICAgICAgIEludmVzdG1lbnRQb2xpY3lDaGFuZ2VkKHJlcXVpcmVDdXN0b21lcklkLCByZXF1aXJlZFNpZ25lZEFkZHJlc3MsIHNpZ25lckFkZHJlc3MpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHBvbGljeSBpZiBhbGwgaW52ZXN0b3JzIG11c3QgYmUgY2xlYXJlZCBvbiB0aGUgc2VydmVyIHNpZGUgZmlyc3QuCiAgICAgKgogICAgICogVGhpcyBpcyBlLmcuIGZvciB0aGUgYWNjcmVkaXRlZCBpbnZlc3RvciBjbGVhcmluZy4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFJlcXVpcmVTaWduZWRBZGRyZXNzKGJvb2wgdmFsdWUsIGFkZHJlc3MgX3NpZ25lckFkZHJlc3MpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZWRTaWduZWRBZGRyZXNzID0gdmFsdWU7CiAgICAgICAgc2lnbmVyQWRkcmVzcyA9IF9zaWduZXJBZGRyZXNzOwogICAgICAgIEludmVzdG1lbnRQb2xpY3lDaGFuZ2VkKHJlcXVpcmVDdXN0b21lcklkLCByZXF1aXJlZFNpZ25lZEFkZHJlc3MsIHNpZ25lckFkZHJlc3MpOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3cgYWRkcmVzc2VzIHRvIGRvIGVhcmx5IHBhcnRpY2lwYXRpb24uCiAgICAgKgogICAgICogVE9ETzogRml4IHNwZWxsaW5nIGVycm9yIGluIHRoZSBuYW1lCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEVhcmx5UGFyaWNpcGFudFdoaXRlbGlzdChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdHVzLCB1aW50IG1pbkNhcCwgdWludCBtYXhDYXApIG9ubHlPd25lciB7CiAgICAgICAgaWYgKCFpc1doaXRlTGlzdGVkKSB0aHJvdzsKICAgICAgICBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W2FkZHJdID0gV2hpdGVMaXN0RGF0YSh7c3RhdHVzOnN0YXR1cywgbWluQ2FwOm1pbkNhcCwgbWF4Q2FwOm1heENhcH0pOwogICAgICAgIFdoaXRlbGlzdGVkKGFkZHIsIHN0YXR1cyk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RWFybHlQYXJpY2lwYW50c1doaXRlbGlzdChhZGRyZXNzW10gYWRkcnMsIGJvb2xbXSBzdGF0dXNlcywgdWludFtdIG1pbkNhcHMsIHVpbnRbXSBtYXhDYXBzKSBvbmx5T3duZXIgewogICAgICAgIGlmICghaXNXaGl0ZUxpc3RlZCkgdGhyb3c7CiAgICAgICAgZm9yICh1aW50IGl0ZXJhdG9yID0gMDsgaXRlcmF0b3IgPCBhZGRycy5sZW5ndGg7IGl0ZXJhdG9yKyspIHsKICAgICAgICAgICAgc2V0RWFybHlQYXJpY2lwYW50V2hpdGVsaXN0KGFkZHJzW2l0ZXJhdG9yXSwgc3RhdHVzZXNbaXRlcmF0b3JdLCBtaW5DYXBzW2l0ZXJhdG9yXSwgbWF4Q2Fwc1tpdGVyYXRvcl0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVFYXJseVBhcmljaXBhbnRXaGl0ZWxpc3QoYWRkcmVzcyBhZGRyLCBhZGRyZXNzIGNvbnRyYWN0QWRkciwgdWludCB0b2tlbnNCb3VnaHQpIHsKICAgICAgICBpZiAodG9rZW5zQm91Z2h0IDwgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdFthZGRyXS5taW5DYXApIHRocm93OwogICAgICAgIGlmICghaXNXaGl0ZUxpc3RlZCkgdGhyb3c7CiAgICAgICAgaWYgKGFkZHIgIT0gbXNnLnNlbmRlciAmJiBjb250cmFjdEFkZHIgIT0gbXNnLnNlbmRlcikgdGhyb3c7CiAgICAgICAgdWludCBuZXdNYXhDYXAgPSBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W2FkZHJdLm1heENhcDsKICAgICAgICBuZXdNYXhDYXAgPSBuZXdNYXhDYXAubWludXModG9rZW5zQm91Z2h0KTsKICAgICAgICBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W2FkZHJdID0gV2hpdGVMaXN0RGF0YSh7c3RhdHVzOmVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbYWRkcl0uc3RhdHVzLCBtaW5DYXA6MCwgbWF4Q2FwOm5ld01heENhcH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUpvaW5lZENyb3dkc2FsZXMoYWRkcmVzcyBhZGRyKSBvbmx5T3duZXIgewogICAgICAgIGpvaW5lZENyb3dkc2FsZXNbam9pbmVkQ3Jvd2RzYWxlc0xlbisrXSA9IGFkZHI7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TGFzdENyb3dkc2FsZShhZGRyZXNzIGFkZHIpIG9ubHlPd25lciB7CiAgICAgICAgbGFzdENyb3dkc2FsZSA9IGFkZHI7CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJKb2luZWRDcm93ZHNhbGVzKCkgb25seU93bmVyIHsKICAgICAgICBqb2luZWRDcm93ZHNhbGVzTGVuID0gMDsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVKb2luZWRDcm93ZHNhbGVzTXVsdGlwbGUoYWRkcmVzc1tdIGFkZHJzKSBvbmx5T3duZXIgewogICAgICAgIGNsZWFySm9pbmVkQ3Jvd2RzYWxlcygpOwogICAgICAgIGZvciAodWludCBpdGVyID0gMDsgaXRlciA8IGFkZHJzLmxlbmd0aDsgaXRlcisrKSB7CiAgICAgICAgICAgIGlmKGpvaW5lZENyb3dkc2FsZXNMZW4gPT0gam9pbmVkQ3Jvd2RzYWxlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGpvaW5lZENyb3dkc2FsZXMubGVuZ3RoICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgam9pbmVkQ3Jvd2RzYWxlc1tqb2luZWRDcm93ZHNhbGVzTGVuKytdID0gYWRkcnNbaXRlcl07CiAgICAgICAgICAgIGlmIChpdGVyID09IGFkZHJzLmxlbmd0aCAtIDEpCiAgICAgICAgICAgICAgICBzZXRMYXN0Q3Jvd2RzYWxlKGFkZHJzW2l0ZXJdKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U3RhcnRzQXQodWludCB0aW1lKSBvbmx5T3duZXIgewogICAgICAgIGlmIChmaW5hbGl6ZWQpIHRocm93OwoKICAgICAgICBpZiAoIWlzVXBkYXRhYmxlKSB0aHJvdzsKCiAgICAgICAgaWYobm93ID4gdGltZSkgewogICAgICAgICAgICB0aHJvdzsgLy8gRG9uJ3QgY2hhbmdlIHBhc3QKICAgICAgICB9CgogICAgICAgIGlmKHRpbWUgPiBlbmRzQXQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBDcm93ZHNhbGVFeHQgbGFzdENyb3dkc2FsZUNudHJjdCA9IENyb3dkc2FsZUV4dChsYXN0Q3Jvd2RzYWxlKTsKICAgICAgICBpZiAobGFzdENyb3dkc2FsZUNudHJjdC5maW5hbGl6ZWQoKSkgdGhyb3c7CgogICAgICAgIHN0YXJ0c0F0ID0gdGltZTsKICAgICAgICBTdGFydHNBdENoYW5nZWQoc3RhcnRzQXQpOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3cgY3Jvd2RzYWxlIG93bmVyIHRvIGNsb3NlIGVhcmx5IG9yIGV4dGVuZCB0aGUgY3Jvd2RzYWxlLgogICAgICoKICAgICAqIFRoaXMgaXMgdXNlZnVsIGUuZy4gZm9yIGEgbWFudWFsIHNvZnQgY2FwIGltcGxlbWVudGF0aW9uOgogICAgICogLSBhZnRlciBYIGFtb3VudCBpcyByZWFjaGVkIGRldGVybWluZSBtYW51YWwgY2xvc2luZwogICAgICoKICAgICAqIFRoaXMgbWF5IHB1dCB0aGUgY3Jvd2RzYWxlIHRvIGFuIGludmFsaWQgc3RhdGUsCiAgICAgKiBidXQgd2UgdHJ1c3Qgb3duZXJzIGtub3cgd2hhdCB0aGV5IGFyZSBkb2luZy4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEVuZHNBdCh1aW50IHRpbWUpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKGZpbmFsaXplZCkgdGhyb3c7CgogICAgICAgIGlmICghaXNVcGRhdGFibGUpIHRocm93OwoKICAgICAgICBpZihub3cgPiB0aW1lKSB7CiAgICAgICAgICAgIHRocm93OyAvLyBEb24ndCBjaGFuZ2UgcGFzdAogICAgICAgIH0KCiAgICAgICAgaWYoc3RhcnRzQXQgPiB0aW1lKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgQ3Jvd2RzYWxlRXh0IGxhc3RDcm93ZHNhbGVDbnRyY3QgPSBDcm93ZHNhbGVFeHQobGFzdENyb3dkc2FsZSk7CiAgICAgICAgaWYgKGxhc3RDcm93ZHNhbGVDbnRyY3QuZmluYWxpemVkKCkpIHRocm93OwoKICAgICAgICB1aW50IG51bSA9IDA7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqb2luZWRDcm93ZHNhbGVzTGVuOyBpKyspIHsKICAgICAgICAgICAgaWYgKHRoaXMgPT0gam9pbmVkQ3Jvd2RzYWxlc1tpXSkKICAgICAgICAgICAgICAgIG51bSA9IGk7CiAgICAgICAgfQoKICAgICAgICBpZiAobnVtICsgMSA8IGpvaW5lZENyb3dkc2FsZXNMZW4pIHsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IG51bSArIDE7IGogPCBqb2luZWRDcm93ZHNhbGVzTGVuOyBqKyspIHsKICAgICAgICAgICAgICAgIENyb3dkc2FsZUV4dCBjcm93ZHNhbGUgPSBDcm93ZHNhbGVFeHQoam9pbmVkQ3Jvd2RzYWxlc1tqXSk7CiAgICAgICAgICAgICAgICBpZiAodGltZSA+IGNyb3dkc2FsZS5zdGFydHNBdCgpKSB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZW5kc0F0ID0gdGltZTsKICAgICAgICBFbmRzQXRDaGFuZ2VkKGVuZHNBdCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBbGxvdyB0byAocmUpc2V0IHByaWNpbmcgc3RyYXRlZ3kuCiAgICAgKgogICAgICogRGVzaWduIGNob2ljZTogbm8gc3RhdGUgcmVzdHJpY3Rpb25zIG9uIHRoZSBzZXQsIHNvIHRoYXQgd2UgY2FuIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRQcmljaW5nU3RyYXRlZ3koTWlsZXN0b25lUHJpY2luZyBfcHJpY2luZ1N0cmF0ZWd5KSBvbmx5T3duZXIgewogICAgICAgIHByaWNpbmdTdHJhdGVneSA9IF9wcmljaW5nU3RyYXRlZ3k7CgogICAgICAgIC8vIERvbid0IGFsbG93IHNldHRpbmcgYmFkIGFnZW50CiAgICAgICAgaWYoIXByaWNpbmdTdHJhdGVneS5pc1ByaWNpbmdTdHJhdGVneSgpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEFsbG93IHRvIGNoYW5nZSB0aGUgdGVhbSBtdWx0aXNpZyBhZGRyZXNzIGluIHRoZSBjYXNlIG9mIGVtZXJnZW5jeS4KICAgICAqCiAgICAgKiBUaGlzIGFsbG93cyB0byBzYXZlIGEgZGVwbG95ZWQgY3Jvd2RzYWxlIHdhbGxldCBpbiB0aGUgY2FzZSB0aGUgY3Jvd2RzYWxlIGhhcyBub3QgeWV0IGJlZ3VuCiAgICAgKiAod2UgaGF2ZSBkb25lIG9ubHkgZmV3IHRlc3QgdHJhbnNhY3Rpb25zKS4gQWZ0ZXIgdGhlIGNyb3dkc2FsZSBpcyBnb2luZwogICAgICogdGhlbiBtdWx0aXNpZyBhZGRyZXNzIHN0YXlzIGxvY2tlZCBmb3IgdGhlIHNhZmV0eSByZWFzb25zLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRNdWx0aXNpZyhhZGRyZXNzIGFkZHIpIHB1YmxpYyBvbmx5T3duZXIgewoKICAgICAgICAvLyBDaGFuZ2UKICAgICAgICBpZihpbnZlc3RvckNvdW50ID4gTUFYX0lOVkVTVE1FTlRTX0JFRk9SRV9NVUxUSVNJR19DSEFOR0UpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBtdWx0aXNpZ1dhbGxldCA9IGFkZHI7CiAgICB9CgogICAgLyoqCiAgICAgKiBBbGxvdyBsb2FkIHJlZnVuZHMgYmFjayBvbiB0aGUgY29udHJhY3QgZm9yIHRoZSByZWZ1bmRpbmcuCiAgICAgKgogICAgICogVGhlIHRlYW0gY2FuIHRyYW5zZmVyIHRoZSBmdW5kcyBiYWNrIG9uIHRoZSBzbWFydCBjb250cmFjdCBpbiB0aGUgY2FzZSB0aGUgbWluaW11bSBnb2FsIHdhcyBub3QgcmVhY2hlZC4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvYWRSZWZ1bmQoKSBwdWJsaWMgcGF5YWJsZSBpblN0YXRlKFN0YXRlLkZhaWx1cmUpIHsKICAgICAgICBpZihtc2cudmFsdWUgPT0gMCkgdGhyb3c7CiAgICAgICAgbG9hZGVkUmVmdW5kID0gbG9hZGVkUmVmdW5kLnBsdXMobXNnLnZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kLgogICAgICoKICAgICAqIE5vdGUgdGhhdCBhbnkgcmVmdW5kcyBmcm9tIHByb3h5IGJ1eWVycyBzaG91bGQgYmUgaGFuZGxlZCBzZXBhcmF0ZWx5LAogICAgICogYW5kIG5vdCB0aHJvdWdoIHRoaXMgY29udHJhY3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZnVuZCgpIHB1YmxpYyBpblN0YXRlKFN0YXRlLlJlZnVuZGluZykgewogICAgICAgIHVpbnQyNTYgd2VpVmFsdWUgPSBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdOwogICAgICAgIGlmICh3ZWlWYWx1ZSA9PSAwKSB0aHJvdzsKICAgICAgICBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdID0gMDsKICAgICAgICB3ZWlSZWZ1bmRlZCA9IHdlaVJlZnVuZGVkLnBsdXMod2VpVmFsdWUpOwogICAgICAgIFJlZnVuZChtc2cuc2VuZGVyLCB3ZWlWYWx1ZSk7CiAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQod2VpVmFsdWUpKSB0aHJvdzsKICAgIH0KCiAgICAvKioKICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgY3Jvd2RzYWxlIGhhcyByYWlzZWQgZW5vdWdoIG1vbmV5IHRvIGJlIGEgc3VjY2Vzc2Z1bC4KICAgICAqLwogICAgZnVuY3Rpb24gaXNNaW5pbXVtR29hbFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCByZWFjaGVkKSB7CiAgICAgICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBtaW5pbXVtRnVuZGluZ0dvYWw7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGUgY29udHJhY3QgcmVsYXRpb25zaGlwIGxvb2tzIGdvb2QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRmluYWxpemVyU2FuZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHNhbmUpIHsKICAgICAgICByZXR1cm4gZmluYWxpemVBZ2VudC5pc1NhbmUoKTsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrIGlmIHRoZSBjb250cmFjdCByZWxhdGlvbnNoaXAgbG9va3MgZ29vZC4KICAgICAqLwogICAgZnVuY3Rpb24gaXNQcmljaW5nU2FuZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHNhbmUpIHsKICAgICAgICByZXR1cm4gcHJpY2luZ1N0cmF0ZWd5LmlzU2FuZShhZGRyZXNzKHRoaXMpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyb3dkZnVuZCBzdGF0ZSBtYWNoaW5lIG1hbmFnZW1lbnQuCiAgICAgKgogICAgICogV2UgbWFrZSBpdCBhIGZ1bmN0aW9uIGFuZCBkbyBub3QgYXNzaWduIHRoZSByZXN1bHQgdG8gYSB2YXJpYWJsZSwgc28gdGhlcmUgaXMgbm8gY2hhbmNlIG9mIHRoZSB2YXJpYWJsZSBiZWluZyBzdGFsZS4KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoU3RhdGUpIHsKICAgICAgICBpZihmaW5hbGl6ZWQpIHJldHVybiBTdGF0ZS5GaW5hbGl6ZWQ7CiAgICAgICAgZWxzZSBpZiAoYWRkcmVzcyhmaW5hbGl6ZUFnZW50KSA9PSAwKSByZXR1cm4gU3RhdGUuUHJlcGFyaW5nOwogICAgICAgIGVsc2UgaWYgKCFmaW5hbGl6ZUFnZW50LmlzU2FuZSgpKSByZXR1cm4gU3RhdGUuUHJlcGFyaW5nOwogICAgICAgIGVsc2UgaWYgKCFwcmljaW5nU3RyYXRlZ3kuaXNTYW5lKGFkZHJlc3ModGhpcykpKSByZXR1cm4gU3RhdGUuUHJlcGFyaW5nOwogICAgICAgIGVsc2UgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IHN0YXJ0c0F0KSByZXR1cm4gU3RhdGUuUHJlRnVuZGluZzsKICAgICAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPD0gZW5kc0F0ICYmICFpc0Nyb3dkc2FsZUZ1bGwoKSkgcmV0dXJuIFN0YXRlLkZ1bmRpbmc7CiAgICAgICAgZWxzZSBpZiAoaXNNaW5pbXVtR29hbFJlYWNoZWQoKSkgcmV0dXJuIFN0YXRlLlN1Y2Nlc3M7CiAgICAgICAgZWxzZSBpZiAoIWlzTWluaW11bUdvYWxSZWFjaGVkKCkgJiYgd2VpUmFpc2VkID4gMCAmJiBsb2FkZWRSZWZ1bmQgPj0gd2VpUmFpc2VkKSByZXR1cm4gU3RhdGUuUmVmdW5kaW5nOwogICAgICAgIGVsc2UgcmV0dXJuIFN0YXRlLkZhaWx1cmU7CiAgICB9CgogICAgLyoqIFRoaXMgaXMgZm9yIG1hbnVhbCB0ZXN0aW5nIG9mIG11bHRpc2lnIHdhbGxldCBpbnRlcmFjdGlvbiAqLwogICAgZnVuY3Rpb24gc2V0T3duZXJUZXN0VmFsdWUodWludCB2YWwpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXJUZXN0VmFsdWUgPSB2YWw7CiAgICB9CgogICAgLyoqIEludGVyZmFjZSBtYXJrZXIuICovCiAgICBmdW5jdGlvbiBpc0Nyb3dkc2FsZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8KICAgIC8vIE1vZGlmaWVycwogICAgLy8KCiAgICAvKiogTW9kaWZpZWQgYWxsb3dpbmcgZXhlY3V0aW9uIG9ubHkgaWYgdGhlIGNyb3dkc2FsZSBpcyBjdXJyZW50bHkgcnVubmluZy4gICovCiAgICBtb2RpZmllciBpblN0YXRlKFN0YXRlIHN0YXRlKSB7CiAgICAgICAgaWYoZ2V0U3RhdGUoKSAhPSBzdGF0ZSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy8KICAgIC8vIEFic3RyYWN0IGZ1bmN0aW9ucwogICAgLy8KCiAgICAvKioKICAgICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGludmVzdGVkIGJyZWFrcyBvdXIgY2FwIHJ1bGVzLgogICAgICoKICAgICAqCiAgICAgKiBUaGUgY2hpbGQgY29udHJhY3QgbXVzdCBkZWZpbmUgdGhlaXIgb3duIGNhcCBzZXR0aW5nIHJ1bGVzLgogICAgICogV2UgYWxsb3cgYSBsb3Qgb2YgZmxleGliaWxpdHkgdGhyb3VnaCBkaWZmZXJlbnQgY2FwcGluZyBzdHJhdGVnaWVzIChFVEgsIHRva2VuIGNvdW50KQogICAgICogQ2FsbGVkIGZyb20gaW52ZXN0KCkuCiAgICAgKgogICAgICogQHBhcmFtIHdlaUFtb3VudCBUaGUgYW1vdW50IG9mIHdlaSB0aGUgaW52ZXN0b3IgdHJpZXMgdG8gaW52ZXN0IGluIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uCiAgICAgKiBAcGFyYW0gdG9rZW5BbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgd2UgdHJ5IHRvIGdpdmUgdG8gdGhlIGludmVzdG9yIGluIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uCiAgICAgKiBAcGFyYW0gd2VpUmFpc2VkVG90YWwgV2hhdCB3b3VsZCBiZSBvdXIgdG90YWwgcmFpc2VkIGJhbGFuY2UgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbgogICAgICogQHBhcmFtIHRva2Vuc1NvbGRUb3RhbCBXaGF0IHdvdWxkIGJlIG91ciB0b3RhbCBzb2xkIHRva2VucyBjb3VudCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICAgKgogICAgICogQHJldHVybiB0cnVlIGlmIHRha2luZyB0aGlzIGludmVzdG1lbnQgd291bGQgYnJlYWsgb3VyIGNhcCBydWxlcwogICAgICovCiAgICBmdW5jdGlvbiBpc0JyZWFraW5nQ2FwKHVpbnQgd2VpQW1vdW50LCB1aW50IHRva2VuQW1vdW50LCB1aW50IHdlaVJhaXNlZFRvdGFsLCB1aW50IHRva2Vuc1NvbGRUb3RhbCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBsaW1pdEJyb2tlbik7CgogICAgZnVuY3Rpb24gaXNCcmVha2luZ0ludmVzdG9yQ2FwKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgdG9rZW5BbW91bnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgbGltaXRCcm9rZW4pOwoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgY3Jvd2RzYWxlIGlzIGZ1bGwgYW5kIHdlIGNhbiBubyBsb25nZXIgc2VsbCBhbnkgdG9rZW5zLgogICAgICovCiAgICBmdW5jdGlvbiBpc0Nyb3dkc2FsZUZ1bGwoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7CgogICAgLyoqCiAgICAgKiBDcmVhdGUgbmV3IHRva2VucyBvciB0cmFuc2ZlciBpc3N1ZWQgdG9rZW5zIHRvIHRoZSBpbnZlc3RvciBkZXBlbmRpbmcgb24gdGhlIGNhcCBtb2RlbC4KICAgICAqLwogICAgZnVuY3Rpb24gYXNzaWduVG9rZW5zKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgdG9rZW5BbW91bnQpIHByaXZhdGU7Cn0KCgovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKY29udHJhY3QgTWludGVkVG9rZW5DYXBwZWRDcm93ZHNhbGVFeHQgaXMgQ3Jvd2RzYWxlRXh0IHsKCiAgICAvKiBNYXhpbXVtIGFtb3VudCBvZiB0b2tlbnMgdGhpcyBjcm93ZHNhbGUgY2FuIHNlbGwuICovCiAgICB1aW50IHB1YmxpYyBtYXhpbXVtU2VsbGFibGVUb2tlbnM7CgogICAgZnVuY3Rpb24gTWludGVkVG9rZW5DYXBwZWRDcm93ZHNhbGVFeHQoYWRkcmVzcyBfdG9rZW4sIE1pbGVzdG9uZVByaWNpbmcgX3ByaWNpbmdTdHJhdGVneSwgYWRkcmVzcyBfbXVsdGlzaWdXYWxsZXQsIHVpbnQgX3N0YXJ0LCB1aW50IF9lbmQsIHVpbnQgX21pbmltdW1GdW5kaW5nR29hbCwgdWludCBfbWF4aW11bVNlbGxhYmxlVG9rZW5zLCBib29sIF9pc1VwZGF0YWJsZSwgYm9vbCBfaXNXaGl0ZUxpc3RlZCkgQ3Jvd2RzYWxlRXh0KF90b2tlbiwgX3ByaWNpbmdTdHJhdGVneSwgX211bHRpc2lnV2FsbGV0LCBfc3RhcnQsIF9lbmQsIF9taW5pbXVtRnVuZGluZ0dvYWwsIF9pc1VwZGF0YWJsZSwgX2lzV2hpdGVMaXN0ZWQpIHsKICAgICAgICBtYXhpbXVtU2VsbGFibGVUb2tlbnMgPSBfbWF4aW11bVNlbGxhYmxlVG9rZW5zOwogICAgfQoKICAgIC8vIENyb3dkc2FsZSBtYXhpbXVtU2VsbGFibGVUb2tlbnMgaGFzIGJlZW4gY2hhbmdlZAogICAgZXZlbnQgTWF4aW11bVNlbGxhYmxlVG9rZW5zQ2hhbmdlZCh1aW50IG5ld01heGltdW1TZWxsYWJsZVRva2Vucyk7CgogICAgLyoqCiAgICAgKiBDYWxsZWQgZnJvbSBpbnZlc3QoKSB0byBjb25maXJtIGlmIHRoZSBjdXJyZXQgaW52ZXN0bWVudCBkb2VzIG5vdCBicmVhayBvdXIgY2FwIHJ1bGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzQnJlYWtpbmdDYXAodWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQsIHVpbnQgd2VpUmFpc2VkVG90YWwsIHVpbnQgdG9rZW5zU29sZFRvdGFsKSBjb25zdGFudCByZXR1cm5zIChib29sIGxpbWl0QnJva2VuKSB7CiAgICAgICAgcmV0dXJuIHRva2Vuc1NvbGRUb3RhbCA+IG1heGltdW1TZWxsYWJsZVRva2VuczsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0JyZWFraW5nSW52ZXN0b3JDYXAoYWRkcmVzcyBhZGRyLCB1aW50IHRva2VuQW1vdW50KSBjb25zdGFudCByZXR1cm5zIChib29sIGxpbWl0QnJva2VuKSB7CiAgICAgICAgaWYgKCFpc1doaXRlTGlzdGVkKSB0aHJvdzsKICAgICAgICB1aW50IG1heENhcCA9IGVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbYWRkcl0ubWF4Q2FwOwogICAgICAgIHJldHVybiAodG9rZW5BbW91bnRPZlthZGRyXS5wbHVzKHRva2VuQW1vdW50KSkgPiBtYXhDYXA7CiAgICB9CgogICAgZnVuY3Rpb24gaXNDcm93ZHNhbGVGdWxsKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gdG9rZW5zU29sZCA+PSBtYXhpbXVtU2VsbGFibGVUb2tlbnM7CiAgICB9CgogICAgLyoqCiAgICAgKiBEeW5hbWljYWxseSBjcmVhdGUgdG9rZW5zIGFuZCBhc3NpZ24gdGhlbSB0byB0aGUgaW52ZXN0b3IuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFzc2lnblRva2VucyhhZGRyZXNzIHJlY2VpdmVyLCB1aW50IHRva2VuQW1vdW50KSBwcml2YXRlIHsKICAgICAgICBDcm93ZHNhbGVUb2tlbkV4dCBtaW50YWJsZVRva2VuID0gQ3Jvd2RzYWxlVG9rZW5FeHQodG9rZW4pOwogICAgICAgIG1pbnRhYmxlVG9rZW4ubWludChyZWNlaXZlciwgdG9rZW5BbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1heGltdW1TZWxsYWJsZVRva2Vucyh1aW50IHRva2Vucykgb25seU93bmVyIHsKICAgICAgICBpZiAoZmluYWxpemVkKSB0aHJvdzsKCiAgICAgICAgaWYgKCFpc1VwZGF0YWJsZSkgdGhyb3c7CgogICAgICAgIENyb3dkc2FsZUV4dCBsYXN0Q3Jvd2RzYWxlQ250cmN0ID0gQ3Jvd2RzYWxlRXh0KGxhc3RDcm93ZHNhbGUpOwogICAgICAgIGlmIChsYXN0Q3Jvd2RzYWxlQ250cmN0LmZpbmFsaXplZCgpKSB0aHJvdzsKCiAgICAgICAgbWF4aW11bVNlbGxhYmxlVG9rZW5zID0gdG9rZW5zOwogICAgICAgIE1heGltdW1TZWxsYWJsZVRva2Vuc0NoYW5nZWQobWF4aW11bVNlbGxhYmxlVG9rZW5zKTsKICAgIH0KfQoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLw=='.
	

]
