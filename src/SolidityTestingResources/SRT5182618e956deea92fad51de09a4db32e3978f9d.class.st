Class {
	#name : #SRT5182618e956deea92fad51de09a4db32e3978f9d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5182618e956deea92fad51de09a4db32e3978f9d >> base64 [
	^ ''.
	

]
