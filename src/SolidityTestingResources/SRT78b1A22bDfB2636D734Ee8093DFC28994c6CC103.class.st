Class {
	#name : #SRT78b1A22bDfB2636D734Ee8093DFC28994c6CC103,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT78b1A22bDfB2636D734Ee8093DFC28994c6CC103 >> base64 [
	^ ''.
	

]
