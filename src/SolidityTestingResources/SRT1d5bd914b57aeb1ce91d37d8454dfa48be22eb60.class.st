Class {
	#name : #SRT1d5bd914b57aeb1ce91d37d8454dfa48be22eb60,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d5bd914b57aeb1ce91d37d8454dfa48be22eb60 >> base64 [
	^ ''.
	

]
