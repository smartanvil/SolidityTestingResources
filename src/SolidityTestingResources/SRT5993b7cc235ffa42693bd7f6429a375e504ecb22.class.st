Class {
	#name : #SRT5993b7cc235ffa42693bd7f6429a375e504ecb22,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5993b7cc235ffa42693bd7f6429a375e504ecb22 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIC8qCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucwogICAgICovCgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4IC0geSkgPD0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICogeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICB6ID0geCAvIHk7CiAgICB9CgogICAgZnVuY3Rpb24gbWluKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA8PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBtYXgodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKICAgIH0KCiAgICAvKgogICAgdWludDEyOCBmdW5jdGlvbnMgKGggaXMgZm9yIGhhbGYpCiAgICAgKi8KCgogICAgZnVuY3Rpb24gaGFkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCArIHkpID49IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhzdWIodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBobXVsKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICogeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gaGRpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IHggLyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIGhtaW4odWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIGhtYXgodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKICAgIH0KCgogICAgLyoKICAgIGludDI1NiBmdW5jdGlvbnMKICAgICAqLwoKICAgIGZ1bmN0aW9uIGltaW4oaW50MjU2IHgsIGludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zIChpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIGltYXgoaW50MjU2IHgsIGludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zIChpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKICAgIH0KCiAgICAvKgogICAgV0FEIG1hdGgKICAgICAqLwoKICAgIHVpbnQxMjggY29uc3RhbnQgV0FEID0gMTAgKiogMTg7CgogICAgZnVuY3Rpb24gd2FkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBoYWRkKHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdzdWIodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaHN1Yih4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3bXVsKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBXQUQgLyAyKSAvIFdBRCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2Rpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiBXQUQgKyB5IC8gMikgLyB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3bWluKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhtaW4oeCwgeSk7CiAgICB9CiAgICBmdW5jdGlvbiB3bWF4KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhtYXgoeCwgeSk7CiAgICB9CgogICAgLyoKICAgIFJBWSBtYXRoCiAgICAgKi8KCiAgICB1aW50MTI4IGNvbnN0YW50IFJBWSA9IDEwICoqIDI3OwoKICAgIGZ1bmN0aW9uIHJhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiByc3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhzdWIoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gcm11bCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiB5ICsgUkFZIC8gMikgLyBSQVkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogUkFZICsgeSAvIDIpIC8geSk7CiAgICB9CgogICAgZnVuY3Rpb24gcnBvdyh1aW50MTI4IHgsIHVpbnQ2NCBuKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICAvLyBUaGlzIGZhbW91cyBhbGdvcml0aG0gaXMgY2FsbGVkICJleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyIKICAgICAgICAvLyBhbmQgY2FsY3VsYXRlcyB4Xm4gd2l0aCB4IGFzIGZpeGVkLXBvaW50IGFuZCBuIGFzIHJlZ3VsYXIgdW5zaWduZWQuCiAgICAgICAgLy8KICAgICAgICAvLyBJdCdzIE8obG9nIG4pLCBpbnN0ZWFkIG9mIE8obikgZm9yIG5haXZlIHJlcGVhdGVkIG11bHRpcGxpY2F0aW9uLgogICAgICAgIC8vCiAgICAgICAgLy8gVGhlc2UgZmFjdHMgYXJlIHdoeSBpdCB3b3JrczoKICAgICAgICAvLwogICAgICAgIC8vICBJZiBuIGlzIGV2ZW4sIHRoZW4geF5uID0gKHheMileKG4vMikuCiAgICAgICAgLy8gIElmIG4gaXMgb2RkLCAgdGhlbiB4Xm4gPSB4ICogeF4obi0xKSwKICAgICAgICAvLyAgIGFuZCBhcHBseWluZyB0aGUgZXF1YXRpb24gZm9yIGV2ZW4geCBnaXZlcwogICAgICAgIC8vICAgIHhebiA9IHggKiAoeF4yKV4oKG4tMSkgLyAyKS4KICAgICAgICAvLwogICAgICAgIC8vICBBbHNvLCBFVk0gZGl2aXNpb24gaXMgZmxvb3JpbmcgYW5kCiAgICAgICAgLy8gICAgZmxvb3JbKG4tMSkgLyAyXSA9IGZsb29yW24gLyAyXS4KCiAgICAgICAgeiA9IG4gJSAyICE9IDAgPyB4IDogUkFZOwoKICAgICAgICBmb3IgKG4gLz0gMjsgbiAhPSAwOyBuIC89IDIpIHsKICAgICAgICAgICAgeCA9IHJtdWwoeCwgeCk7CgogICAgICAgICAgICBpZiAobiAlIDIgIT0gMCkgewogICAgICAgICAgICAgICAgeiA9IHJtdWwoeiwgeCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcm1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWluKHgsIHkpOwogICAgfQogICAgZnVuY3Rpb24gcm1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWF4KHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhc3QodWludDI1NiB4KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB1aW50MTI4KHgpKSA9PSB4KTsKICAgIH0KfQoKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgewogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljOwp9Cgpjb250cmFjdCBQYXVzYWJsZSBpcyBvd25lZCB7CiAgICBldmVudCBQYXVzZSgpOwogICAgZXZlbnQgVW5wYXVzZSgpOwoKICAgIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgICAvKioKICAgICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogICAgICovCiAgICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgICAqLwogICAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAgICovCiAgICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIFBhdXNlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgICAqLwogICAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgICAgICBVbnBhdXNlKCk7CiAgICB9Cn0KCgpjb250cmFjdCBUb2tlbkVSQzIwIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgLy8gUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICAvLyAxOCBkZWNpbWFscyBpcyB0aGUgc3Ryb25nbHkgc3VnZ2VzdGVkIGRlZmF1bHQsIGF2b2lkIGNoYW5naW5nIGl0CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvLyBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKCiAgICAvKioKICAgICAqIENvbnN0cmN0b3IgZnVuY3Rpb24KICAgICAqCiAgICAgKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5FUkMyMCgKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHkgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkgd2l0aCB0aGUgZGVjaW1hbCBhbW91bnQKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsgICAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCgogICAgfQoKICAgIC8qKgogICAgICogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID4gYmFsYW5jZU9mW190b10pOwogICAgICAgIC8vIFNhdmUgdGhpcyBmb3IgYW4gYXNzZXJ0aW9uIGluIHRoZSBmdXR1cmUKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSA9IGJhbGFuY2VPZltfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgLy8gQXNzZXJ0cyBhcmUgdXNlZCB0byB1c2Ugc3RhdGljIGFuYWx5c2lzIHRvIGZpbmQgYnVncyBpbiB5b3VyIGNvZGUuIFRoZXkgc2hvdWxkIG5ldmVyIGZhaWwKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCiAgICAgKgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSA9ICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzIGFuZCBub3RpZnkKICAgICAqCiAgICAgKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmLCBhbmQgdGhlbiBwaW5nIHRoZSBjb250cmFjdCBhYm91dCBpdAogICAgICoKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICAgKiBAcGFyYW0gX2V4dHJhRGF0YSBzb21lIGV4dHJhIGluZm9ybWF0aW9uIHRvIHNlbmQgdG8gdGhlIGFwcHJvdmVkIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgcHVibGljCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgU2FsZSBpcyBUb2tlbkVSQzIwIHsKCiAgICAvLyB0b3RhbCB0b2tlbiB3aGljaCBpcyBzb2xkCiAgICB1aW50MjU2IHB1YmxpYyBzb2xkVG9rZW5zOwogICAgLy8gdG90YWwgbm8gb2YgdG9rZW5zIGZvciBzYWxlCiAgICB1aW50MjU2IHB1YmxpYyBUb2tlbkZvclNhbGU7CgogICAgbW9kaWZpZXIgQ2hlY2tTYWxlU3RhdHVzKCkgewogICAgICAgIHJlcXVpcmUgKFRva2VuRm9yU2FsZSA+PSBzb2xkVG9rZW5zKTsKICAgICAgICBfOwogICAgfQoKfQoKCmNvbnRyYWN0IFNob3BpQmxvY2sgaXMgU2FsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIHVpbnQyNTYgcHVibGljIHVuaXRzT25lRXRoQ2FuQnV5OwogICAgdWludDI1NiBwdWJsaWMgbWluUHVyY2hhc2VRdHk7CiAgICB1aW50MjU2IHB1YmxpYyBtaW5Db250cmliOwoKCgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBTaG9waUJsb2NrKCkKICAgIFRva2VuRVJDMjAoMTAwMDAwMDAwMCwgJ1Nob3BpYmxvY2snLCAnU0hCJykgcHVibGljIHsKICAgICAgICB1bml0c09uZUV0aENhbkJ1eSA9IDA7CiAgICAgICAgc29sZFRva2VucyA9IDA7CiAgICAgICAgbWluUHVyY2hhc2VRdHkgPSAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgVG9rZW5Gb3JTYWxlID0gMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwogICAgICAgIG1pbkNvbnRyaWIgPSAwLjAxIGV0aGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyV2l0aFRva2VucyhhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2Zbb3duZXJdICsgYmFsYW5jZU9mW25ld093bmVyXTsKICAgICAgICBiYWxhbmNlT2ZbbmV3T3duZXJdICs9IGJhbGFuY2VPZltvd25lcl07CiAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IDA7CiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltvd25lcl0gKyBiYWxhbmNlT2ZbbmV3T3duZXJdID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlUHJpY2UodWludDI1NiBfbmV3QW1vdW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICB1bml0c09uZUV0aENhbkJ1eSA9IF9uZXdBbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gc3RhcnRTYWxlKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgc29sZFRva2VucyA9IDA7CiAgICAgICAgVW5wYXVzZSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGluY3JlYXNlU2FsZUxpbWl0KHVpbnQyNTYgVG9rZW5TYWxlKSAgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgVG9rZW5Gb3JTYWxlID0gVG9rZW5TYWxlICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5jcmVhc2VNaW5QdXJjaGFzZVF0eSh1aW50MjU2IG5ld1F0eSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgbWluUHVyY2hhc2VRdHkgPSBuZXdRdHkgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VNaW5Db250cmliKHVpbnQyNTYgbmV3UXR5KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBtaW5Db250cmliID0gbmV3UXR5OwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgd2hlbk5vdFBhdXNlZCBDaGVja1NhbGVTdGF0dXMgewogICAgICAgIHVpbnQyNTYgZXRoX2Ftb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICByZXF1aXJlKGV0aF9hbW91bnQgPj0gbWluQ29udHJpYik7CiAgICAgICAgVHJhbnNmZXIob3duZXIsIG1zZy5zZW5kZXIsIGV0aF9hbW91bnQpOwogICAgICAgIC8vVHJhbnNmZXIgZXRoZXIgdG8gZnVuZHNXYWxsZXQKICAgICAgICBvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgfQp9'.
	

]
