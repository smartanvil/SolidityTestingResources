Class {
	#name : #SRT20d7d4b07a2dcefe1bd99ac11eae2f5a8218e454,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT20d7d4b07a2dcefe1bd99ac11eae2f5a8218e454 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLiAKICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCn0KCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovKioKICogQHRpdGxlIFNsb3QgVGlja2V0IHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCiAKY29udHJhY3QgU2xvdFRpY2tldCBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKCiAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlNsb3QgVGlja2V0IjsKICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOwogIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlNMT1QiOwogIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIwLjEiOwoKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsgLy8gc28gaXQgaXMgZGlzcGxheWVkIHByb3Blcmx5IG9uIEV0aGVyU2NhbgogICAgcmV0dXJuIHRydWU7CiAgfQoKZnVuY3Rpb24gZGVzdHJveSgpIG9ubHlPd25lciB7CiAgICAvLyBUcmFuc2ZlciBFdGggdG8gb3duZXIgYW5kIHRlcm1pbmF0ZSBjb250cmFjdAogICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICB9Cgp9Cgpjb250cmFjdCBTbG90IGlzIE93bmFibGUsIFBhdXNhYmxlIHsgLy8gVE9ETzogZm9yIHByb2R1Y3Rpb24gZGlzYWJsZSB0b2tlbkRlc3RydWN0aWJsZQogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLy8gdGhpcyB0b2tlbiBpcyBqdXN0IGEgZ2ltbWljayB0byByZWNlaXZlIHdoZW4gYnV5aW5nIGEgdGlja2V0LCBpdCB3b250IGFmZmVjdCB0aGUgcHJpemUKICAgIFNsb3RUaWNrZXQgcHVibGljIHRva2VuOwoKICAgIC8vIGV2ZXJ5IHBhcnRpY2lwYW50IGhhcyBhbiBhY2NvdW50IGluZGV4LCB0aGUgd2lubmVycyBhcmUgcGlja2VkIGZyb20gaGVyZQogICAgLy8gYWxsIHdpbm5lcnMgYXJlIHBpY2tlZCBpbiBvcmRlciBmcm9tIHRoZSBzaW5nbGUgcmFuZG9tIGludCAKICAgIC8vIG5lZWRzIHRvIGJlIGNsZWFyZWQgYWZ0ZXIgZXZlcnkgZ2FtZQogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwYXJ0aWNpcGFudHM7CiAgICB1aW50MjU2W10gcHJpemVzID0gWzQgZXRoZXIsIAogICAgICAgICAgICAgICAgICAgICAgICAyIGV0aGVyLAogICAgICAgICAgICAgICAgICAgICAgICAxIGV0aGVyLCAKICAgICAgICAgICAgICAgICAgICAgICAgNTAwIGZpbm5leSwgCiAgICAgICAgICAgICAgICAgICAgICAgIDUwMCBmaW5uZXksIAogICAgICAgICAgICAgICAgICAgICAgICA1MDAgZmlubmV5LCAKICAgICAgICAgICAgICAgICAgICAgICAgNTAwIGZpbm5leSwgCiAgICAgICAgICAgICAgICAgICAgICAgIDUwMCBmaW5uZXldOwogICAgdWludDggY291bnRlciA9IDA7CgogICAgdWludDggICBjb25zdGFudCBTSVpFID0gMTAwOyAvLyBzaXplIG9mIHRoZSBsb3R0ZXJ5CiAgICB1aW50MzIgIGNvbnN0YW50IEpBQ0tQT1RfU0laRSA9IDEwMDAwMDA7IC8vIG9uZSBpbiBhIG1pbGxpb24KICAgIHVpbnQyNTYgY29uc3RhbnQgUFJJQ0UgPSAxMDAgZmlubmV5OwogICAgCiAgICB1aW50MjU2IGphY2twb3QgPSAwOwogICAgdWludDI1NiBnYW1lTnVtYmVyID0gMDsKICAgIGFkZHJlc3Mgd2FsbGV0OwoKICAgIGV2ZW50IFByaXplQXdhcmRlZCh1aW50MjU2IGdhbWUsIGFkZHJlc3Mgd2lubmVyLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBKYWNrcG90QXdhcmRlZCh1aW50MjU2IGdhbWUsIGFkZHJlc3Mgd2lubmVyLCB1aW50MjU2IGFtb3VudCk7CgogICAgZnVuY3Rpb24gU2xvdChhZGRyZXNzIF93YWxsZXQpIHsKICAgICAgICB0b2tlbiA9IG5ldyBTbG90VGlja2V0KCk7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIHRvIGJ1eSB0aWNrZXRzIGZyb20KICAgICAgICBidXlUaWNrZXRzRm9yKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRpY2tldHNGb3IoYWRkcmVzcyBiZW5lZmljaWFyeSkgd2hlbk5vdFBhdXNlZCgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBQUklDRSk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUvUFJJQ0UgPD0gMjU1KTsgLy8gbWF4aW11bSBvZiAyNTUgdGlja2V0cywgdG8gYXZvaWQgb3ZlcmZsb3cgb24gdWludDgKICAgICAgICAvLyBJIGNhbid0IHNlZSBzb21lYm9keSBzZW5kaW5nIG1vcmUgdGhhbiB0aGUgc2l6ZSBvZiB0aGUgbG90dGVyeSwgb3RoZXIgdGhhbiB0byB0cnkgdG8gd2luIHRoZSBqYWNrcG90CiAgICAgICAgCiAgICAgICAgLy8gY2FsY3VsYXRlIG51bWJlciBvZiB0aWNrZXRzLCBpc3N1ZSB0b2tlbnMgYW5kIGFkZCBwYXJ0aWNpcGFudHMKICAgICAgICAvLyBldmVyeSAxMDAgZmlubmV5IGJ1eXMgYSB0aWNrZXQsIHRoZSByZXN0IGlzIHJldHVybmVkCiAgICAgICAgdWludDggbnVtYmVyT2ZUaWNrZXRzID0gdWludDgobXNnLnZhbHVlL1BSSUNFKTsgCiAgICAgICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgbnVtYmVyT2ZUaWNrZXRzKTsKICAgICAgICBhZGRQYXJ0aWNpcGFudChiZW5lZmljaWFyeSwgbnVtYmVyT2ZUaWNrZXRzKTsKCiAgICAgICAgLy8gUmV0dXJuIGNoYW5nZSB0byBtc2cuc2VuZGVyCiAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgY2hhbmdlIGFtb3VudCBjb3JyZWN0CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUlUFJJQ0UpOwoKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRQYXJ0aWNpcGFudChhZGRyZXNzIF9wYXJ0aWNpcGFudCwgdWludDggX251bWJlck9mVGlja2V0cykgcHJpdmF0ZSB7CiAgICAgICAgLy8gVE9ETzogY2hlY2sgYWNjZXNzIG9mIHRoaXMgZnVuY3Rpb24sIGl0IHNob3VsZG4ndCBiZSB0YW1wZXJlZCB3aXRoCiAgICAgICAgLy8gYWRkIHBhcnRpY2lwYW50cyBhbmQgaW5jcmVtZW50IGNvdW50CiAgICAgICAgLy8gc2hvdWxkIGdyYWNlZnVsbHkgaGFuZGxlIG11bHRpcGxlIHRpY2tldHMgYWNjcm9zcyBnYW1lcwoKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgX251bWJlck9mVGlja2V0czsgaSsrKSB7CiAgICAgICAgICAgIHBhcnRpY2lwYW50c1tjb3VudGVyXSA9IF9wYXJ0aWNpcGFudDsKCiAgICAgICAgICAgIC8vIG1zZy5zZW5kZXIgdHJpZ2dlcnMgdGhlIGRyYXdpbmcgb2YgbG90cwogICAgICAgICAgICBpZiAoY291bnRlciAlIChTSVpFLTEpID09IDApIHsgCiAgICAgICAgICAgICAgICAvLyB0YWtlcyB0aGUgcGFydGljaXBhbnQncyBhZGRyZXNzIGFzIHRoZSBzZWVkCiAgICAgICAgICAgICAgICBhd2FyZFByaXplcyh1aW50MjU2KF9wYXJ0aWNpcGFudCkpOyAKICAgICAgICAgICAgfSAKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvdW50ZXIrKzsKCiAgICAgICAgICAgIC8vIGxvb3AgY29udGludWVzIGlmIHRoZXJlIGFyZSBtb3JlIHRpY2tldHMKICAgICAgICB9CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJhbmQodWludDMyIF9zaXplLCB1aW50MjU2IF9zZWVkKSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKHVpbnQzMiByYW5kb21OdW1iZXIpIHsKICAgICAgLy8gUHJvdmlkaW5nIHJhbmRvbSBudW1iZXJzIHdpdGhpbiBhIGRldGVybWluaXN0aWMgc3lzdGVtIGlzLCBuYXR1cmFsbHksIGFuIGltcG9zc2libGUgdGFzay4KICAgICAgLy8gSG93ZXZlciwgd2UgY2FuIGFwcHJveGltYXRlIHdpdGggcHNldWRvLXJhbmRvbSBudW1iZXJzIGJ5IHV0aWxpc2luZyBkYXRhIHdoaWNoIGlzIGdlbmVyYWxseSB1bmtub3dhYmxlCiAgICAgIC8vIGF0IHRoZSB0aW1lIG9mIHRyYW5zYWN0aW5nLiBTdWNoIGRhdGEgbWlnaHQgaW5jbHVkZSB0aGUgYmxvY2vigJlzIGhhc2guCgogICAgICAgIHJldHVybiB1aW50MzIoc2hhMyhibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpLCBfc2VlZCkpJV9zaXplOwogICAgfQoKICAgIGZ1bmN0aW9uIGF3YXJkUHJpemVzKHVpbnQyNTYgX3NlZWQpIHByaXZhdGUgewogICAgICAgIHVpbnQzMiB3aW5uaW5nTnVtYmVyID0gcmFuZChTSVpFLTEsIF9zZWVkKTsgLy8gLTEgc2luY2UgaW5kZXggc3RhcnRzIGF0IDAKICAgICAgICBib29sIGphY2twb3RXb24gPSB3aW5uaW5nTnVtYmVyID09IHJhbmQoSkFDS1BPVF9TSVpFLTEsIF9zZWVkKTsgLy8gLTEgc2luY2UgaW5kZXggc3RhcnRzIGF0IDAKCiAgICAgICAgLy8gc2NvcGUgb2YgcGFydGljaXBhbnRzCiAgICAgICAgdWludDI1NiBzdGFydCA9IGdhbWVOdW1iZXIubXVsKFNJWkUpOwogICAgICAgIHVpbnQyNTYgZW5kID0gc3RhcnQgKyBTSVpFOwoKICAgICAgICB1aW50MjU2IHdpbm5lckluZGV4ID0gc3RhcnQuYWRkKHdpbm5pbmdOdW1iZXIpOwoKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgcHJpemVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoamFja3BvdFdvbiAmJiBpPT0wKSB7IGRpc3RyaWJ1dGVKYWNrcG90KHdpbm5lckluZGV4KTsgfQoKICAgICAgICAgICAgaWYgKHdpbm5lckluZGV4K2kgPiBlbmQpIHsKICAgICAgICAgICAgICAvLyB0byBrZWVwIHdpdGhpbiB0aGUgYm91bmRzIG9mIHBhcnRpY2lwYW50cywgd3JhcCBhcm91bmQKICAgICAgICAgICAgICAgIHdpbm5lckluZGV4IC09IFNJWkU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBhcnRpY2lwYW50c1t3aW5uZXJJbmRleCtpXS50cmFuc2Zlcihwcml6ZXNbaV0pOyAvLyBtc2cuc2VuZGVyIHBheXMgdGhlIGdhcywgaGUncyByZWZ1bmRlZCBsYXRlcgogICAgICAgICAgICAKICAgICAgICAgICAgUHJpemVBd2FyZGVkKGdhbWVOdW1iZXIsICBwYXJ0aWNpcGFudHNbd2lubmVySW5kZXgraV0sIHByaXplc1tpXSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFNwbGl0IHRoZSByZXN0CiAgICAgICAgamFja3BvdCA9IGphY2twb3QuYWRkKDI0NSBmaW5uZXkpOyAgLy8gYWRkIHRvIGphY2twb3QKICAgICAgICB3YWxsZXQudHJhbnNmZXIoMjQ1IGZpbm5leSk7ICAgICAgICAvLyAqY2FzaCByZWdpc3RlciBzb3VuZCoKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKDEwIGZpbm5leSk7ICAgICAvLyByZXBheSBnYXMgdG8gbXNnLnNlbmRlciBUT0RPOiBjaGVjayBpZiBwcmljZSBpcyByaWdodAoKICAgICAgICBnYW1lTnVtYmVyKys7CiAgICB9CgogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZUphY2twb3QodWludDI1NiBfd2lubmVySW5kZXgpIHsKICAgICAgICBwYXJ0aWNpcGFudHNbX3dpbm5lckluZGV4XS50cmFuc2ZlcihqYWNrcG90KTsKICAgICAgICBKYWNrcG90QXdhcmRlZChnYW1lTnVtYmVyLCAgcGFydGljaXBhbnRzW193aW5uZXJJbmRleF0sIGphY2twb3QpOwogICAgICAgIGphY2twb3QgPSAwOyAvLyBsYXRlciBvbiBpbiB0aGUgY29kZSBtb25leSB3aWxsIGJlIGFkZGVkCiAgICB9CgogICAgZnVuY3Rpb24gZGVzdHJveSgpIG9ubHlPd25lciB7CiAgICAgICAgLy8gVHJhbnNmZXIgRXRoIHRvIG93bmVyIGFuZCB0ZXJtaW5hdGUgY29udHJhY3QKICAgICAgICB0b2tlbi5kZXN0cm95KCk7CiAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICB9CgogICAgZnVuY3Rpb24gY2hhbmdlV2FsbGV0KGFkZHJlc3MgX25ld1dhbGxldCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9uZXdXYWxsZXQgIT0gMHgwKTsKICAgICAgICB3YWxsZXQgPSBfbmV3V2FsbGV0OwogIH0KCn0='.
	

]
