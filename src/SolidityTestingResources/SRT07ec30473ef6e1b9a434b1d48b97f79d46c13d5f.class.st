Class {
	#name : #SRT07ec30473ef6e1b9a434b1d48b97f79d46c13d5f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07ec30473ef6e1b9a434b1d48b97f79d46c13d5f >> base64 [
	^ ''.
	

]
