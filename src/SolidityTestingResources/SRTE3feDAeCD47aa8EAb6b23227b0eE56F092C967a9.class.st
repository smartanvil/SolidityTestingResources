Class {
	#name : #SRTE3feDAeCD47aa8EAb6b23227b0eE56F092C967a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE3feDAeCD47aa8EAb6b23227b0eE56F092C967a9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTQ7CgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9TdGFuZGFyZGl6ZWRfQ29udHJhY3RfQVBJcyN0cmFuc2ZlcmFibGUtZnVuZ2libGVzLXNlZS1lcmMtMjAtZm9yLXRoZS1sYXRlc3QKCgpjb250cmFjdCBFUkMyMFRva2VuIHsKICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKICAgIAogICAgLy8gR2V0IHRoZSB0b3RhbCB0b2tlbiBzdXBwbHkKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgCiAgICAvLyBHZXQgdGhlIGFjY291bnQgYGJhbGFuY2VgIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgYF9vd25lcmAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLyBTZW5kIGBfdmFsdWVgIGFtb3VudCBvZiB0b2tlbnMgdG8gYWRkcmVzcyBgX3RvYAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgCiAgICAvLyBTZW5kIGBfdmFsdWVgIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIGBfZnJvbWAgdG8gYWRkcmVzcyBgX3RvYAogICAgLy8gVGhlIGB0cmFuc2ZlckZyb21gIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZCB0b2tlbnMgb24geW91ciBiZWhhbGYsIAogICAgLy8gZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IAogICAgLy8gdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBgX2Zyb21gIGFjY291bnQgaGFzIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgCiAgICAvLyB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UgdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGBhcHByb3ZhbGA6CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgCiAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgCiAgICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgd2hpY2ggX3NwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7Cn0KCmNvbnRyYWN0IFByaW1hc1Rva2VuIGlzIEVSQzIwVG9rZW4gewogICAgYWRkcmVzcyBwdWJsaWMgaW5pdGlhbE93bmVyOwogICAgdWludDI1NiBwdWJsaWMgc3VwcGx5ICAgPSAxMDAwMDAwMDAgKiAxMCAqKiAxODsgIC8vIDEwMCwgMDAwLCAwMDAKICAgIHN0cmluZyAgcHVibGljIG5hbWUgICAgID0gJ1ByaW1hcyc7CiAgICB1aW50OCAgIHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nICBwdWJsaWMgc3ltYm9sICAgPSAnUFNUJzsKICAgIHN0cmluZyAgcHVibGljIHZlcnNpb24gID0gJ3YwLjEnOwogICAgYm9vbCAgICBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZCA9IHRydWU7CiAgICB1aW50ICAgIHB1YmxpYyBjcmVhdGlvbkJsb2NrOwogICAgdWludCAgICBwdWJsaWMgY3JlYXRpb25UaW1lOwogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIG1fYWxsb3dhbmNlOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBqYWlsOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gUHJpbWFzVG9rZW4oKSB7CiAgICAgICAgaW5pdGlhbE93bmVyICAgICAgICA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZVttc2cuc2VuZGVyXSA9IHN1cHBseTsKICAgICAgICBjcmVhdGlvbkJsb2NrICAgICAgID0gYmxvY2subnVtYmVyOwogICAgICAgIGNyZWF0aW9uVGltZSAgICAgICAgPSBibG9jay50aW1lc3RhbXA7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2FjY291bnQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZVtfYWNjb3VudF07CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vIGByZXZlcnQoKWAgfCBgdGhyb3dgCiAgICAgICAgLy8gICAgICBodHRwOi8vc29saWRpdHkucmVhZHRoZWRvY3MuaW8vZW4vZGV2ZWxvcC9jb250cm9sLXN0cnVjdHVyZXMuaHRtbCNlcnJvci1oYW5kbGluZy1hc3NlcnQtcmVxdWlyZS1yZXZlcnQtYW5kLWV4Y2VwdGlvbnMKICAgICAgICAvLyAgICAgIGh0dHBzOi8vZXRoZXJldW0uc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIwOTc4L3doeS1kby10aHJvdy1hbmQtcmV2ZXJ0LWNyZWF0ZS1kaWZmZXJlbnQtYnl0ZWNvZGVzLzIwOTgxCiAgICAgICAgaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSByZXZlcnQoKTsKICAgICAgICBpZiAoIGphaWxbbXNnLnNlbmRlcl0gPj0gYmxvY2sudGltZXN0YW1wICkgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoIXRyYW5zZmVyc0VuYWJsZWQpIHJldmVydCgpOwogICAgICAgIGlmICggamFpbFttc2cuc2VuZGVyXSA+PSBibG9jay50aW1lc3RhbXAgfHwgamFpbFtfdG9dID49IGJsb2NrLnRpbWVzdGFtcCB8fCBqYWlsW19mcm9tXSA+PSBibG9jay50aW1lc3RhbXAgKSByZXZlcnQoKTsKICAgICAgICAgICAgCiAgICAgICAgaWYgKGFsbG93YW5jZShfZnJvbSwgbXNnLnNlbmRlcikgPCBfdmFsdWUpIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICBtX2FsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIAogICAgICAgIGlmICggIShkb1RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSkpICkgewogICAgICAgICAgICBtX2FsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gKz0gX3ZhbHVlOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZVtfZnJvbV0gPj0gX3ZhbHVlICYmIGJhbGFuY2VbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZVtfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoIXRyYW5zZmVyc0VuYWJsZWQpIHJldmVydCgpOwogICAgICAgIGlmICggamFpbFttc2cuc2VuZGVyXSA+PSBibG9jay50aW1lc3RhbXAgfHwgamFpbFtfc3BlbmRlcl0gPj0gYmxvY2sudGltZXN0YW1wICkgcmV2ZXJ0KCk7CgogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgICAgaWYgKCAoX3ZhbHVlICE9IDApICYmIChhbGxvd2FuY2UobXNnLnNlbmRlciwgX3NwZW5kZXIpICE9IDApICkgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgbV9hbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmICghdHJhbnNmZXJzRW5hYmxlZCkgcmV2ZXJ0KCk7CgogICAgICAgIHJldHVybiBtX2FsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZW5hYmxlVHJhbnNmZXJzKGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBpbml0aWFsT3duZXIpIHJldmVydCgpOwogICAgICAgIHRyYW5zZmVyc0VuYWJsZWQgPSBfdHJhbnNmZXJzRW5hYmxlZDsKICAgICAgICByZXR1cm4gdHJhbnNmZXJzRW5hYmxlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBjYXRjaFlvdShhZGRyZXNzIF90YXJnZXQsIHVpbnQgX3RpbWVzdGFtcCkgcmV0dXJucyAodWludCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGluaXRpYWxPd25lcikgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSByZXZlcnQoKTsKCiAgICAgICAgamFpbFtfdGFyZ2V0XSA9IF90aW1lc3RhbXA7CgogICAgICAgIHJldHVybiBqYWlsW190YXJnZXRdOwogICAgfQoKfQ=='.
	

]
