Class {
	#name : #SRTA4F902f57Fd9FFcedF4dE6cF7EbC86ea9F76B5d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA4F902f57Fd9FFcedF4dE6cF7EbC86ea9F76B5d1 >> base64 [
	^ ''.
	

]
