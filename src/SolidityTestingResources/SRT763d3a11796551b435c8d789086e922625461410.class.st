Class {
	#name : #SRT763d3a11796551b435c8d789086e922625461410,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT763d3a11796551b435c8d789086e922625461410 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgogIGNvbnRyYWN0IEVSQzIwIHsKICAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxzdXBwbHkpOwogICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogIH0KICAKICBjb250cmFjdCBUQ0FTSCBpcyBFUkMyMCB7CiAgICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVENBU0giOwogICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJUY2FzaCI7CiAgICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gODsKICAgICB1aW50MjU2IF90b3RhbFN1cHBseSA9IDg4MDAwMDAwICogMTAqKjg7CiAgICAgCgogICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogIAogICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAKICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgICAKICAKICAgICBmdW5jdGlvbiBUQ0FTSCgpIHsKICAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSA4ODAwMDAwMCAqIDEwKio4OwogICAgIH0KICAgICAKICAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgIAogICAgIAogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZVRDQVNIKGFkZHJlc3NbXSBhZGRyZXNzZXMpIG9ubHlPd25lciB7CiAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJdIC09IDI0NTcxOTkxNjAwMDsKICAgICAgICAgICAgIGJhbGFuY2VzW2FkZHJlc3Nlc1tpXV0gKz0gMjQ1NzE5OTE2MDAwOwogICAgICAgICAgICAgVHJhbnNmZXIob3duZXIsIGFkZHJlc3Nlc1tpXSwgMjQ1NzE5OTE2MDAwKTsKICAgICAgICAgfQogICAgIH0KICAgICAKICAKICAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxzdXBwbHkpIHsKICAgICAgICAgdG90YWxzdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgfQogIAoKICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgIH0KIAogICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAKICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICB9CiAgICAgfQogICAgIAogICAgIAogICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudAogICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICB9CiAgICAgfQogCiAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICB9CiAgCiAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICB9Cgpjb250cmFjdCBUY2FzaENyb3dkc2FsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyOwogICAgYWRkcmVzcyBwdWJsaWMgdGFyZ2V0OwogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwogICAgdWludDI1NiBwdWJsaWMgdG9rZW5Jc3N1ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyBjb250cmlidXRvcnM7CiAgICBUQ0FTSCBwdWJsaWMgdG9rZW5SZXdhcmQ7CiAgICB1aW50MjU2IHB1YmxpYyBwaGFzZSA9IDA7CiAgICBib29sIHB1YmxpYyBoYWx0ZWQgPSBmYWxzZTsKICAgIGJvb2wgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CgogICAgdWludDI1NlsxMF0gcHVibGljIHByaWNlVG9rZW4gPSBbCiAgICAgICAgMjYwMCwKICAgICAgICAyNTAwLAogICAgICAgIDI0MDAsCiAgICAgICAgMjMwMCwKICAgICAgICAyMjAwLAogICAgICAgIDIxMDAsCiAgICAgICAgMjAwMCwKICAgICAgICAyMDAwLAogICAgICAgIDIwMDAsCiAgICAgICAgMjAwMAogICAgXTsKCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBIQVJEQ0FQID0gMjAwMDAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBNVUxUSVBMSUVSID0gMTAgKiogMTA7CgogICAgIC8qCiAgICAgKiBNT0RJRklFUlMKICAgICAqLwogICAgIG1vZGlmaWVyIG9ubHlGb3VuZGVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBmb3VuZGVyKTsKICAgICAgICBfOwogICAgIH0KCiAgICAvKioKICAgICAqIENvbnN0cmN0b3IgZnVuY3Rpb24KICAgICAqCiAgICAgKiBTZXR1cCB0aGUgZXNjcm93IGFjY291bnQgYWRkcmVzcywgYWxsIGV0aGVycyB3aWxsIGJlIHNlbnQgdG8gdGhpcyBhZGRyZXNzLgogICAgICoKICAgICAqCiAgICAgKiBhZGRyZXNzT2ZUb2tlbiBhZGRyZXNzIE9mIFRva2VuIFVzZWQgQXMgUmV3YXJkCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBUY2FzaENyb3dkc2FsZSAoCiAgICAgICAgYWRkcmVzcyBfdGFyZ2V0LAogICAgICAgIGFkZHJlc3MgYWRkcmVzc09mVG9rZW4KICAgICkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSAweDApOwogICAgICAgIHJlcXVpcmUoYWRkcmVzc09mVG9rZW4gIT0gMHgwKTsKICAgICAgICB0YXJnZXQgPSBfdGFyZ2V0OwogICAgICAgIGZvdW5kZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHRva2VuUmV3YXJkID0gVENBU0goYWRkcmVzc09mVG9rZW4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgcmVxdWlyZShhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgLy8gcmVxdWlyZShiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgLy8gcmVxdWlyZShhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24KICAgICAqCiAgICAgKiBUaGUgZnVuY3Rpb24gd2l0aG91dCBuYW1lIGlzIHRoZSBkZWZhdWx0IGZ1bmN0aW9uIHRoYXQgaXMKICAgICAqIGNhbGxlZCB3aGVuZXZlciBhbnlvbmUgc2VuZHMgZnVuZHMgdG8gYSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgICAgICBidXlUb2tlbihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbihhZGRyZXNzIHJlY2VpdmVyKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKCFoYWx0ZWQpOwogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUNsb3NlZCk7CiAgICAgICAgcmVxdWlyZShyZWNlaXZlciAhPSAweDApOwogICAgICAgIHJlcXVpcmUocmVjZWl2ZXIgIT0gdGFyZ2V0KTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAwLjAxIGV0aGVyKTsKICAgICAgICByZXF1aXJlKHdlaVJhaXNlZCA8PSBIQVJEQ0FQKTsKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IHRva2VucyA9IGNvbXB1dGVUb2tlbkFtb3VudCh3ZWlBbW91bnQpOwogICAgICAgIGlmICh0b2tlblJld2FyZC50cmFuc2ZlcihyZWNlaXZlciwgdG9rZW5zKSkgewogICAgICAgICAgIHRva2VuSXNzdWVkID0gc2FmZUFkZCh0b2tlbklzc3VlZCwgdG9rZW5zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICB3ZWlSYWlzZWQgPSBzYWZlQWRkKHdlaVJhaXNlZCwgd2VpQW1vdW50KTsKICAgICAgICBjb250cmlidXRvcnMgPSBzYWZlQWRkKGNvbnRyaWJ1dG9ycywgMSk7CiAgICAgICAgaWYgKCF0YXJnZXQuc2VuZCh3ZWlBbW91bnQpKSB7CiAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHByaWNlKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b2tlbnMpIHsKICAgICAgICB0b2tlbnMgPSBwcmljZVRva2VuW3BoYXNlXTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21wdXRlVG9rZW5BbW91bnQodWludDI1NiB3ZWlBbW91bnQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG9rZW5zKSB7CiAgICAgICAgdG9rZW5zID0gc2FmZU11bChzYWZlRGl2KHdlaUFtb3VudCwgTVVMVElQTElFUiksIHByaWNlVG9rZW5bcGhhc2VdKTsKICAgIH0KCiAgICAvKioKICAgICAqIEVtZXJnZW5jeSBTdG9wIGNyb3dkc2FsZS4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhbHQoKSBvbmx5Rm91bmRlciB7CiAgICAgICAgaGFsdGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlc3VtZSBjcm93ZHNhbGUuCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiB1bmhhbHQoKSBvbmx5Rm91bmRlciB7CiAgICAgICAgaGFsdGVkID0gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBzZXQgY3Jvd2RzYWxlIHBoYXNlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBzZXRQaGFzZSh1aW50MjU2IG5QaGFzZSkgb25seUZvdW5kZXIgewogICAgICAgIHJlcXVpcmUoKG5QaGFzZSA8IHByaWNlVG9rZW4ubGVuZ3RoKSAmJiAoblBoYXNlID49IDApKTsKICAgICAgICBwaGFzZSA9IG5QaGFzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFdpdGhkcmF3IHVuc2FsZSBUb2tlbgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gdG9rZW5XaXRoZHJhdyhhZGRyZXNzIHJlY2VpdmVyLCB1aW50MjU2IHRva2Vucykgb25seUZvdW5kZXIgewogICAgICAgIHJlcXVpcmUocmVjZWl2ZXIgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKHRva2VucyA+IDApOwogICAgICAgIGlmICghdG9rZW5SZXdhcmQudHJhbnNmZXIocmVjZWl2ZXIsIHRva2VucykpIHsKICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBjbG9zZSBDcm93ZHNhbGUKICAgICAqCiAgICAgKiBDbG9zZSB0aGUgY3Jvd2RzYWxlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNsb3NlQ3Jvd2RzYWxlKCkgb25seUZvdW5kZXIgewogICAgICAgIGNyb3dkc2FsZUNsb3NlZCA9IHRydWU7CiAgICB9Cgp9'.
	

]
