Class {
	#name : #SRTe8b55deaced913c5c6890331d2926ea0fcbe59ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8b55deaced913c5c6890331d2926ea0fcbe59ac >> base64 [
	^ ''.
	

]
