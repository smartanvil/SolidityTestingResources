Class {
	#name : #SRT1d1ff336189f16fcb5aea6f00398c06bec5fd0cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d1ff336189f16fcb5aea6f00398c06bec5fd0cc >> base64 [
	^ ''.
	

]
