Class {
	#name : #SRT6b3f4a5f004c5935166577b61725a2bab76dadf7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b3f4a5f004c5935166577b61725a2bab76dadf7 >> base64 [
	^ ''.
	

]
