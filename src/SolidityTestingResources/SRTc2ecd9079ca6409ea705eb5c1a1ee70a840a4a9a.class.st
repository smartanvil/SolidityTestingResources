Class {
	#name : #SRTc2ecd9079ca6409ea705eb5c1a1ee70a840a4a9a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2ecd9079ca6409ea705eb5c1a1ee70a840a4a9a >> base64 [
	^ ''.
	

]
