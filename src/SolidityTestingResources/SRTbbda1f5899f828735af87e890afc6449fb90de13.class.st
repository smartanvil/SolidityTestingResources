Class {
	#name : #SRTbbda1f5899f828735af87e890afc6449fb90de13,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbbda1f5899f828735af87e890afc6449fb90de13 >> base64 [
	^ ''.
	

]
