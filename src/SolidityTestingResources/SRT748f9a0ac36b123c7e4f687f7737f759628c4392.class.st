Class {
	#name : #SRT748f9a0ac36b123c7e4f687f7737f759628c4392,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT748f9a0ac36b123c7e4f687f7737f759628c4392 >> base64 [
	^ ''.
	

]
