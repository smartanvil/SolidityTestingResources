Class {
	#name : #SRT74c2e243186fcb8c562a145c948fe9eeaf29f4c9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT74c2e243186fcb8c562a145c948fe9eeaf29f4c9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCmNvbnRyYWN0IERhdGVUaW1lIHsKICAgICAgICAvKgogICAgICAgICAqICBEYXRlIGFuZCBUaW1lIHV0aWxpdGllcyBmb3IgZXRoZXJldW0gY29udHJhY3RzCiAgICAgICAgICoKICAgICAgICAgKi8KICAgICAgICBzdHJ1Y3QgRGF0ZVRpbWUgewogICAgICAgICAgICAgICAgdWludDE2IHllYXI7CiAgICAgICAgICAgICAgICB1aW50OCBtb250aDsKICAgICAgICAgICAgICAgIHVpbnQ4IGRheTsKICAgICAgICAgICAgICAgIHVpbnQ4IGhvdXI7CiAgICAgICAgICAgICAgICB1aW50OCBtaW51dGU7CiAgICAgICAgICAgICAgICB1aW50OCBzZWNvbmQ7CiAgICAgICAgICAgICAgICB1aW50OCB3ZWVrZGF5OwogICAgICAgIH0KCiAgICAgICAgdWludCBjb25zdGFudCBEQVlfSU5fU0VDT05EUyA9IDg2NDAwOwogICAgICAgIHVpbnQgY29uc3RhbnQgWUVBUl9JTl9TRUNPTkRTID0gMzE1MzYwMDA7CiAgICAgICAgdWludCBjb25zdGFudCBMRUFQX1lFQVJfSU5fU0VDT05EUyA9IDMxNjIyNDAwOwoKICAgICAgICB1aW50IGNvbnN0YW50IEhPVVJfSU5fU0VDT05EUyA9IDM2MDA7CiAgICAgICAgdWludCBjb25zdGFudCBNSU5VVEVfSU5fU0VDT05EUyA9IDYwOwoKICAgICAgICB1aW50MTYgY29uc3RhbnQgT1JJR0lOX1lFQVIgPSAxOTcwOwoKICAgICAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHVpbnQxNiB5ZWFyKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgICAgICAgICBpZiAoeWVhciAlIDQgIT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeWVhciAlIDEwMCAhPSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHllYXIgJSA0MDAgIT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxlYXBZZWFyc0JlZm9yZSh1aW50IHllYXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICAgICAgICAgIHllYXIgLT0gMTsKICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyIC8gNCAtIHllYXIgLyAxMDAgKyB5ZWFyIC8gNDAwOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgodWludDggbW9udGgsIHVpbnQxNiB5ZWFyKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICAgICAgaWYgKG1vbnRoID09IDEgfHwgbW9udGggPT0gMyB8fCBtb250aCA9PSA1IHx8IG1vbnRoID09IDcgfHwgbW9udGggPT0gOCB8fCBtb250aCA9PSAxMCB8fCBtb250aCA9PSAxMikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb250aCA9PSA0IHx8IG1vbnRoID09IDYgfHwgbW9udGggPT0gOSB8fCBtb250aCA9PSAxMSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0xlYXBZZWFyKHllYXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyOTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXJzZVRpbWVzdGFtcCh1aW50IHRpbWVzdGFtcCkgaW50ZXJuYWwgcmV0dXJucyAoRGF0ZVRpbWUgZHQpIHsKICAgICAgICAgICAgICAgIHVpbnQgc2Vjb25kc0FjY291bnRlZEZvciA9IDA7CiAgICAgICAgICAgICAgICB1aW50IGJ1ZjsKICAgICAgICAgICAgICAgIHVpbnQ4IGk7CgogICAgICAgICAgICAgICAgLy8gWWVhcgogICAgICAgICAgICAgICAgZHQueWVhciA9IGdldFllYXIodGltZXN0YW1wKTsKICAgICAgICAgICAgICAgIGJ1ZiA9IGxlYXBZZWFyc0JlZm9yZShkdC55ZWFyKSAtIGxlYXBZZWFyc0JlZm9yZShPUklHSU5fWUVBUik7CgogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBMRUFQX1lFQVJfSU5fU0VDT05EUyAqIGJ1ZjsKICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gWUVBUl9JTl9TRUNPTkRTICogKGR0LnllYXIgLSBPUklHSU5fWUVBUiAtIGJ1Zik7CgogICAgICAgICAgICAgICAgLy8gTW9udGgKICAgICAgICAgICAgICAgIHVpbnQgc2Vjb25kc0luTW9udGg7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IDEyOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kc0luTW9udGggPSBEQVlfSU5fU0VDT05EUyAqIGdldERheXNJbk1vbnRoKGksIGR0LnllYXIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc0luTW9udGggKyBzZWNvbmRzQWNjb3VudGVkRm9yID4gdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHQubW9udGggPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gc2Vjb25kc0luTW9udGg7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gRGF5CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IGdldERheXNJbk1vbnRoKGR0Lm1vbnRoLCBkdC55ZWFyKTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEQVlfSU5fU0VDT05EUyArIHNlY29uZHNBY2NvdW50ZWRGb3IgPiB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdC5kYXkgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gREFZX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSG91cgogICAgICAgICAgICAgICAgZHQuaG91ciA9IGdldEhvdXIodGltZXN0YW1wKTsKCiAgICAgICAgICAgICAgICAvLyBNaW51dGUKICAgICAgICAgICAgICAgIGR0Lm1pbnV0ZSA9IGdldE1pbnV0ZSh0aW1lc3RhbXApOwoKICAgICAgICAgICAgICAgIC8vIFNlY29uZAogICAgICAgICAgICAgICAgZHQuc2Vjb25kID0gZ2V0U2Vjb25kKHRpbWVzdGFtcCk7CgogICAgICAgICAgICAgICAgLy8gRGF5IG9mIHdlZWsuCiAgICAgICAgICAgICAgICBkdC53ZWVrZGF5ID0gZ2V0V2Vla2RheSh0aW1lc3RhbXApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0WWVhcih1aW50IHRpbWVzdGFtcCkgY29uc3RhbnQgcmV0dXJucyAodWludDE2KSB7CiAgICAgICAgICAgICAgICB1aW50IHNlY29uZHNBY2NvdW50ZWRGb3IgPSAwOwogICAgICAgICAgICAgICAgdWludDE2IHllYXI7CiAgICAgICAgICAgICAgICB1aW50IG51bUxlYXBZZWFyczsKCiAgICAgICAgICAgICAgICAvLyBZZWFyCiAgICAgICAgICAgICAgICB5ZWFyID0gdWludDE2KE9SSUdJTl9ZRUFSICsgdGltZXN0YW1wIC8gWUVBUl9JTl9TRUNPTkRTKTsKICAgICAgICAgICAgICAgIG51bUxlYXBZZWFycyA9IGxlYXBZZWFyc0JlZm9yZSh5ZWFyKSAtIGxlYXBZZWFyc0JlZm9yZShPUklHSU5fWUVBUik7CgogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBMRUFQX1lFQVJfSU5fU0VDT05EUyAqIG51bUxlYXBZZWFyczsKICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gWUVBUl9JTl9TRUNPTkRTICogKHllYXIgLSBPUklHSU5fWUVBUiAtIG51bUxlYXBZZWFycyk7CgogICAgICAgICAgICAgICAgd2hpbGUgKHNlY29uZHNBY2NvdW50ZWRGb3IgPiB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTGVhcFllYXIodWludDE2KHllYXIgLSAxKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzQWNjb3VudGVkRm9yIC09IExFQVBfWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgLT0gWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgLT0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TW9udGgodWludCB0aW1lc3RhbXApIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lc3RhbXAodGltZXN0YW1wKS5tb250aDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldERheSh1aW50IHRpbWVzdGFtcCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRpbWVzdGFtcCh0aW1lc3RhbXApLmRheTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldEhvdXIodWludCB0aW1lc3RhbXApIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdWludDgoKHRpbWVzdGFtcCAvIDYwIC8gNjApICUgMjQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TWludXRlKHVpbnQgdGltZXN0YW1wKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KCh0aW1lc3RhbXAgLyA2MCkgJSA2MCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRTZWNvbmQodWludCB0aW1lc3RhbXApIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdWludDgodGltZXN0YW1wICUgNjApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0V2Vla2RheSh1aW50IHRpbWVzdGFtcCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OCgodGltZXN0YW1wIC8gREFZX0lOX1NFQ09ORFMgKyA0KSAlIDcpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9UaW1lc3RhbXAodWludDE2IHllYXIsIHVpbnQ4IG1vbnRoLCB1aW50OCBkYXkpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAoeWVhciwgbW9udGgsIGRheSwgMCwgMCwgMCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b1RpbWVzdGFtcCh1aW50MTYgeWVhciwgdWludDggbW9udGgsIHVpbnQ4IGRheSwgdWludDggaG91cikgY29uc3RhbnQgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0b1RpbWVzdGFtcCh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCAwLCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvVGltZXN0YW1wKHVpbnQxNiB5ZWFyLCB1aW50OCBtb250aCwgdWludDggZGF5LCB1aW50OCBob3VyLCB1aW50OCBtaW51dGUpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvVGltZXN0YW1wKHVpbnQxNiB5ZWFyLCB1aW50OCBtb250aCwgdWludDggZGF5LCB1aW50OCBob3VyLCB1aW50OCBtaW51dGUsIHVpbnQ4IHNlY29uZCkgY29uc3RhbnQgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHVpbnQxNiBpOwoKICAgICAgICAgICAgICAgIC8vIFllYXIKICAgICAgICAgICAgICAgIGZvciAoaSA9IE9SSUdJTl9ZRUFSOyBpIDwgeWVhcjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0xlYXBZZWFyKGkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IExFQVBfWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBZRUFSX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBNb250aAogICAgICAgICAgICAgICAgdWludDhbMTJdIG1lbW9yeSBtb250aERheUNvdW50czsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzBdID0gMzE7CiAgICAgICAgICAgICAgICBpZiAoaXNMZWFwWWVhcih5ZWFyKSkgewogICAgICAgICAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1sxXSA9IDI5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzFdID0gMjg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1syXSA9IDMxOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbM10gPSAzMDsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzRdID0gMzE7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s1XSA9IDMwOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbNl0gPSAzMTsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzddID0gMzE7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s4XSA9IDMwOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbOV0gPSAzMTsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzEwXSA9IDMwOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbMTFdID0gMzE7CgogICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbnRoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IERBWV9JTl9TRUNPTkRTICogbW9udGhEYXlDb3VudHNbaSAtIDFdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIERheQogICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IERBWV9JTl9TRUNPTkRTICogKGRheSAtIDEpOwoKICAgICAgICAgICAgICAgIC8vIEhvdXIKICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBIT1VSX0lOX1NFQ09ORFMgKiAoaG91cik7CgogICAgICAgICAgICAgICAgLy8gTWludXRlCiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gTUlOVVRFX0lOX1NFQ09ORFMgKiAobWludXRlKTsKCiAgICAgICAgICAgICAgICAvLyBTZWNvbmQKICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBzZWNvbmQ7CgogICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcDsKICAgICAgICB9Cn0KCi8vIENvcHlyb2JvIGNvbnRyYWN0IGZvciBub3Rhcml6YXRpb24KY29udHJhY3QgUHJvb2ZPZkV4aXN0ZW5jZSB7CiAgICAKICAgICAgLy8gc3RyaW5nOiBzaGEyNTYgb2YgZG9jdW1lbnQKICAvLyB1bml0IDogdGltZXN0YW1wIAogIG1hcHBpbmcgKHN0cmluZyA9PiB1aW50KSBwcml2YXRlIHByb29mczsKICAgIGZ1bmN0aW9uIHVpbnRUb0J5dGVzKHVpbnQgdikgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMiByZXQpIHsKICAgICAgICBpZiAodiA9PSAwKSB7CiAgICAgICAgICAgIHJldCA9ICcwJzsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHdoaWxlICh2ID4gMCkgewogICAgICAgICAgICAgICAgcmV0ID0gYnl0ZXMzMih1aW50KHJldCkgLyAoMiAqKiA4KSk7CiAgICAgICAgICAgICAgICByZXQgfD0gYnl0ZXMzMigoKHYgJSAxMCkgKyA0OCkgKiAyICoqICg4ICogMzEpKTsKICAgICAgICAgICAgICAgIHYgLz0gMTA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYnl0ZXMzMlRvU3RyaW5nKGJ5dGVzMzIgeCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJ5dGVzU3RyaW5nID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICB1aW50IGNoYXJDb3VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGogPSAwOyBqIDwgMzI7IGorKykgewogICAgICAgICAgICBieXRlIGNoYXIgPSBieXRlKGJ5dGVzMzIodWludCh4KSAqIDIgKiogKDggKiBqKSkpOwogICAgICAgICAgICBpZiAoY2hhciAhPSAwKSB7CiAgICAgICAgICAgICAgICBieXRlc1N0cmluZ1tjaGFyQ291bnRdID0gY2hhcjsKICAgICAgICAgICAgICAgIGNoYXJDb3VudCsrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGJ5dGVzIG1lbW9yeSBieXRlc1N0cmluZ1RyaW1tZWQgPSBuZXcgYnl0ZXMoY2hhckNvdW50KTsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgY2hhckNvdW50OyBqKyspIHsKICAgICAgICAgICAgYnl0ZXNTdHJpbmdUcmltbWVkW2pdID0gYnl0ZXNTdHJpbmdbal07CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJpbmcoYnl0ZXNTdHJpbmdUcmltbWVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdWludFRvU3RyaW5nKHVpbnQxNiB4KSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICBieXRlczMyIGEgPSB1aW50VG9CeXRlcyh4KTsKICAgICAgICByZXR1cm4gYnl0ZXMzMlRvU3RyaW5nKGEpOwogICAgfQogICAgCmZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QsIHN0cmluZyBfZSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKXsKICAgIGJ5dGVzIG1lbW9yeSBfYmEgPSBieXRlcyhfYSk7CiAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOwogICAgYnl0ZXMgbWVtb3J5IF9iYyA9IGJ5dGVzKF9jKTsKICAgIGJ5dGVzIG1lbW9yeSBfYmQgPSBieXRlcyhfZCk7CiAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOwogICAgc3RyaW5nIG1lbW9yeSBhYmNkZSA9IG5ldyBzdHJpbmcoX2JhLmxlbmd0aCArIF9iYi5sZW5ndGggKyBfYmMubGVuZ3RoICsgX2JkLmxlbmd0aCArIF9iZS5sZW5ndGgpOwogICAgYnl0ZXMgbWVtb3J5IGJhYmNkZSA9IGJ5dGVzKGFiY2RlKTsKICAgIHVpbnQgayA9IDA7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfYmEubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JhW2ldOwogICAgZm9yIChpID0gMDsgaSA8IF9iYi5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmJbaV07CiAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsKICAgIGZvciAoaSA9IDA7IGkgPCBfYmQubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JkW2ldOwogICAgZm9yIChpID0gMDsgaSA8IF9iZS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmVbaV07CiAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7Cn0KCmZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCBfZCwgIiIpOwp9CgpmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYykgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsICIiLCAiIik7Cn0KCmZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYikgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7Cn0KICAgCgoKICBmdW5jdGlvbiBub3Rhcml6ZShzdHJpbmcgc2hhMjU2KSB7CiAgICAvLyB2YWxpZGF0ZSBpdCBoYXMgNjQgY2hhcmFjdGVycwogICAgCiAgICBpZiAoIGJ5dGVzKHNoYTI1NikubGVuZ3RoID09IDY0ICl7CiAgICAgIC8vIGNoZWNrIGlmIGl0IGlzIGV4aXN0aW5nLCBkb24ndCBzYXZlIGl0CiAgICAgIGlmICggcHJvb2ZzW3NoYTI1Nl0gPT0gMCApewogICAgICAgIHByb29mc1tzaGEyNTZdID0gYmxvY2sudGltZXN0YW1wOwogICAgICB9CiAgICB9CiAgfQogIAogIC8vIElucHV0IHNoYTI1NiBoYXNoIHN0cmluZyB0byBjaGVjawogIGZ1bmN0aW9uIHZlcmlmeShzdHJpbmcgc2hhMjU2KSBjb25zdGFudCByZXR1cm5zICh1aW50LHVpbnQxNix1aW50MTYsdWludDE2LHVpbnQxNix1aW50MTYpIHsKICAgIHZhciB0aW1lc3RhbXAgPSAgcHJvb2ZzW3NoYTI1Nl07CiAgICBpZiAoIHRpbWVzdGFtcCA9PSAwICl7CiAgICAgICAgcmV0dXJuICh0aW1lc3RhbXAsMCwwLDAsMCwwKTsKICAgIH1lbHNlewogICAgICAgIERhdGVUaW1lIGR0ID0gRGF0ZVRpbWUobXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgdWludDE2IHllYXIgPSBkdC5nZXRZZWFyKHRpbWVzdGFtcCk7CiAgICAgICAgdWludDE2IG1vbnRoID0gZHQuZ2V0TW9udGgodGltZXN0YW1wKTsKICAgICAgICB1aW50MTYgZGF5ID0gZHQuZ2V0RGF5KHRpbWVzdGFtcCk7CiAgICAgICAgdWludDE2IGhvdXIgPSBkdC5nZXRIb3VyKHRpbWVzdGFtcCk7CiAgICAgICAgdWludDE2IG1pbnV0ZSA9IGR0LmdldE1pbnV0ZSh0aW1lc3RhbXApOwogICAgICAgIHVpbnQxNiBzZWNvbmQgPSBkdC5nZXRTZWNvbmQodGltZXN0YW1wKTsKICAgICAgICByZXR1cm4gICh0aW1lc3RhbXAseWVhciwgbW9udGgsZGF5LGhvdXIsbWludXRlKTsKICAgICAgICAKICAgICAgICAvLyBzdHJpbmcgIG1lbW9yeSByZXN1bHQgPSBzdHJDb25jYXQoYnl0ZXMzMlRvU3RyaW5nKHllYXIpICwgIi0iICwgYnl0ZXMzMlRvU3RyaW5nKG1vbnRoKSwiLSIsYnl0ZXMzMlRvU3RyaW5nKGRheSkpOwogICAgICAgIC8vIHJlc3VsdCA9IHN0ckNvbmNhdChyZXN1bHQsIiAiKTsKICAgICAgICAvLyByZXN1bHQgPSBzdHJDb25jYXQoIGJ5dGVzMzJUb1N0cmluZyhob3VyKSAsICI6IiAsIGJ5dGVzMzJUb1N0cmluZyhtaW51dGUpLCI6IixieXRlczMyVG9TdHJpbmcoc2Vjb25kKSk7CiAgICAgICAgLy8gcmVzdWx0ID0gc3RyQ29uY2F0KHJlc3VsdCwiIFVUQyIpIDsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCgogICAgICAgIC8vIC8vVVRDIEZvcm1hdDogMjAxMy0xMC0yNiAxNDozNzo0OCBVVEMKCiAgICAgICAgLy8gcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9CiAgCiAgZnVuY3Rpb24gZ2V0WWVhciggdWludCB0aW1lc3RhbXAgKSBjb25zdGFudCByZXR1cm5zICh1aW50MTYpewogICAgICBEYXRlVGltZSBkdCA9IERhdGVUaW1lKG1zZy5zZW5kZXIpOwogICAgICByZXR1cm4gZHQuZ2V0WWVhciggdGltZXN0YW1wICk7CiAgfQogIAp9'.
	

]
