Class {
	#name : #SRT69b794ec295d665fc527230523f7012eea1dc03e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69b794ec295d665fc527230523f7012eea1dc03e >> base64 [
	^ ''.
	

]
