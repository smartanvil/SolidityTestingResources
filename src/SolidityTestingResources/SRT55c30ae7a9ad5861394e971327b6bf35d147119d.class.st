Class {
	#name : #SRT55c30ae7a9ad5861394e971327b6bf35d147119d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55c30ae7a9ad5861394e971327b6bf35d147119d >> base64 [
	^ ''.
	

]
