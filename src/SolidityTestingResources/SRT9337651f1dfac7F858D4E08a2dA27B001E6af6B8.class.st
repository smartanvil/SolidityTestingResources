Class {
	#name : #SRT9337651f1dfac7F858D4E08a2dA27B001E6af6B8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9337651f1dfac7F858D4E08a2dA27B001E6af6B8 >> base64 [
	^ ''.
	

]
