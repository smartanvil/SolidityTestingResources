Class {
	#name : #SRTed3572df7d22c6af7c6a40f907224e9acdc1a6bf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed3572df7d22c6af7c6a40f907224e9acdc1a6bf >> base64 [
	^ ''.
	

]
