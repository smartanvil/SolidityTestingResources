Class {
	#name : #SRT51036b0029e95ecbce4784df0a87987d1092ec7d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51036b0029e95ecbce4784df0a87987d1092ec7d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IG51bXdvcmRzKSB7CiAgICAgICAgYXNzZXJ0KG1zZy5kYXRhLmxlbmd0aCA9PSBudW13b3JkcyAqIDMyICsgNCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID09IDAgfHwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCk7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgb25seVBheWxvYWRTaXplKDIpIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IFNvbGFyRWNsaXBzZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnU29sYXIgRWNsaXBzZSBUb2tlbic7CiAgICBhZGRyZXNzIG93bmVyOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnU0VUJzsKCiAgICB1aW50IHN0YXJ0VGltZSA9IDE1MDMzMzA0MTA7IC8vIEF1ZyAyMSwgMjAxNyBhdCAxNTo0Njo1MCBVVEMKICAgIHVpbnQgZW5kVGltZSA9IDE1MDMzNDk0NjE7IC8vIEF1ZyAyMSwgMjAxNyBhdCAyMTowNDoyMSBVVEMKCiAgICB1aW50IG1ldGVyc0luQXN0cm9ub21pY2FsVW5pdCA9IDE0OTU5Nzg3MDcwMDsKICAgIHVpbnQgbWlsZXNJbkFzdHJvbm9taWNhbFVuaXQgPSA5Mjk1NTgwNzsKICAgIHVpbnQgc3BlZWRPZkxpZ2h0SW5NZXRlcnNQZXJTZWNvbmQgPSAyOTk3OTI0NTg7CgogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHlDYXAgPSBtZXRlcnNJbkFzdHJvbm9taWNhbFVuaXQgKiAxIGV0aGVyOwogICAgdWludCBwdWJsaWMgdG9rZW5zUGVyRVRIID0gbWlsZXNJbkFzdHJvbm9taWNhbFVuaXQ7CgogICAgdWludCBwdWJsaWMgb3duZXJUb2tlbnMgPSBzcGVlZE9mTGlnaHRJbk1ldGVyc1BlclNlY29uZCAqIDEwIGV0aGVyOwoKICAgIGZ1bmN0aW9uIG93bmVyV2l0aGRyYXcoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHJldmVydCgpOyAvLyByZXZlcnQgaWYgbm90IG93bmVyCgogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7IC8vIHNlbmQgY29udHJhY3QgYmFsYW5jZSB0byBvd25lcgogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUpIHJldmVydCgpOyAvLyByZXZlcnQgaWYgc29sYXIgZWNsaXBzZSBoYXMgbm90IHN0YXJ0ZWQKICAgICAgICBpZiAobm93ID4gZW5kVGltZSkgcmV2ZXJ0KCk7IC8vIHJldmVydCBpZiBzb2xhciBlY2xpcHNlIGhhcyBlbmRlZAogICAgICAgIGlmICh0b3RhbFN1cHBseSA+PSB0b3RhbFN1cHBseUNhcCkgcmV2ZXJ0KCk7IC8vIHJldmVydCBpZiB0b3RhbFN1cHBseUNhcCBoYXMgYmVlbiBleGhhdXN0ZWQKCiAgICAgICAgdWludCB0b2tlbnNJc3N1ZWQgPSBtc2cudmFsdWUgKiB0b2tlbnNQZXJFVEg7CgogICAgICAgIGlmICh0b3RhbFN1cHBseSArIHRva2Vuc0lzc3VlZCA+IHRvdGFsU3VwcGx5Q2FwKSB7CiAgICAgICAgICAgIHRva2Vuc0lzc3VlZCA9IHRvdGFsU3VwcGx5Q2FwIC0gdG90YWxTdXBwbHk7IC8vIGVuc3VyZSBzdXBwbHkgaXMgY2FwcGVkCiAgICAgICAgfQoKICAgICAgICB0b3RhbFN1cHBseSArPSB0b2tlbnNJc3N1ZWQ7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zSXNzdWVkOyAvLyB0cmFuc2ZlciB0b2tlbnMgdG8gY29udHJpYnV0b3IKICAgIH0KCiAgICBmdW5jdGlvbiBTb2xhckVjbGlwc2VUb2tlbigpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG90YWxTdXBwbHkgPSBvd25lclRva2VuczsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBvd25lclRva2VuczsKICAgIH0KfQ=='.
	

]
