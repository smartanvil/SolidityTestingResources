Class {
	#name : #SRT08aa638f04c9658fc9a5712e794e27a4c6b561e8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08aa638f04c9658fc9a5712e794e27a4c6b561e8 >> base64 [
	^ ''.
	

]
