Class {
	#name : #SRT6dd5b09acda78b05d0356483fe05eb0768352945,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6dd5b09acda78b05d0356483fe05eb0768352945 >> base64 [
	^ ''.
	

]
