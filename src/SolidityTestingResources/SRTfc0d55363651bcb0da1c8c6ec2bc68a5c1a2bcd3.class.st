Class {
	#name : #SRTfc0d55363651bcb0da1c8c6ec2bc68a5c1a2bcd3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc0d55363651bcb0da1c8c6ec2bc68a5c1a2bcd3 >> base64 [
	^ 'Y29udHJhY3QgRXRoZXJlYWxGb3VuZGF0aW9uT3duZWQgewoJYWRkcmVzcyBwcml2YXRlIE93bmVyOwogICAgCglmdW5jdGlvbiBJc093bmVyKGFkZHJlc3MgYWRkcikgdmlldyBwdWJsaWMgcmV0dXJucyhib29sKQoJewoJICAgIHJldHVybiBPd25lciA9PSBhZGRyOwoJfQoJCglmdW5jdGlvbiBUcmFuc2Zlck93bmVyKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIKCXsKCSAgICBPd25lciA9IG5ld093bmVyOwoJfQoJCglmdW5jdGlvbiBFdGhlcmVhbEZvdW5kYXRpb25Pd25lZCgpIHB1YmxpYwoJewoJICAgIE93bmVyID0gbXNnLnNlbmRlcjsKCX0KCQoJZnVuY3Rpb24gVGVybWluYXRlKCkgcHVibGljIG9ubHlPd25lcgoJewoJICAgIHNlbGZkZXN0cnVjdChPd25lcik7Cgl9CgkKCW1vZGlmaWVyIG9ubHlPd25lcigpewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBPd25lcik7CiAgICAgICAgXzsKICAgIH0KfQoKY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBCYXNzZHJvcHMgaXMgRXRoZXJlYWxGb3VuZGF0aW9uT3duZWQgewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBDT05UUkFDVF9OQU1FID0gIkJhc3Nkcm9wcyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IENPTlRSQUNUX1ZFUlNJT04gPSAiQSI7CglzdHJpbmcgcHVibGljIGNvbnN0YW50IFFVT1RFID0gIkl04oCZcyBhIHBlcm1hbmVudCwgcGVyZmVjdCBTSU1VTFRBTkVPVVMgZGljaG90b215IG9mIHRvdGFsIGluc2lnbmlmaWNhbmNlIGFuZCB0b3RhbCBzaWduaWZpY2FuY2UgbWVyZ2VkIGFzIG9uZSBpbnRvIGV2ZXJ5IHNpbmdsZSBmbGFzaGluZyBzZWNvbmQuIjsKICAgIAogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkJhc3Nkcm9wcywgYSBDdXJyZW5jeSBvZiBPbW5pdGVtcG8gTWF4aW1hbGlzbSI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJCQVNTIjsKCQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxMTsgIAoJCiAgICBib29sIHByaXZhdGUgdHJhZGVhYmxlOwogICAgdWludDI1NiBwcml2YXRlIGN1cnJlbnRTdXBwbHk7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3M9PiB1aW50MjU2KSkgcHJpdmF0ZSBhbGxvd2VkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgbG9ja2VkQWNjb3VudHM7ICAKCQoKCS8qCgkJSW5jb21taW5nIEV0aGVyIGFuZCBFUkMyMAoJKi8JCiAgICBldmVudCBSZWNpZXZlZEV0aChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IHRpbWVTdGFtcCk7CgkvL3RoaXMgaXMgdGhlIGZhbGxiYWNrCglmdW5jdGlvbiAoKSBwYXlhYmxlIHB1YmxpYyB7CgkJUmVjaWV2ZWRFdGgobXNnLnNlbmRlciwgbXNnLnZhbHVlLCBub3cpOwkJCgl9CgkKCWV2ZW50IFRyYW5zZmVyZWRFdGgoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoJZnVuY3Rpb24gRm91bmRhdGlvblRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IGFtdEV0aCwgdWludDI1NiBhbXRUb2tlbikgcHVibGljIG9ubHlPd25lcgoJewoJCXJlcXVpcmUodGhpcy5iYWxhbmNlID49IGFtdEV0aCAmJiBiYWxhbmNlc1t0aGlzXSA+PSBhbXRUb2tlbiApOwoJCQoJCWlmKGFtdEV0aCA+MCkKCQl7CgkJCV90by50cmFuc2ZlcihhbXRFdGgpOwoJCQlUcmFuc2ZlcmVkRXRoKF90bywgYW10RXRoKTsKCQl9CgkJCgkJaWYoYW10VG9rZW4gPiAwKQoJCXsKCQkJcmVxdWlyZShiYWxhbmNlc1tfdG9dICsgYW10VG9rZW4gPiBiYWxhbmNlc1tfdG9dKTsKCQkJYmFsYW5jZXNbdGhpc10gLT0gYW10VG9rZW47CgkJCWJhbGFuY2VzW190b10gKz0gYW10VG9rZW47CgkJCVRyYW5zZmVyKHRoaXMsIF90bywgYW10VG9rZW4pOwoJCX0KCX0JCQoJCglldmVudCBUcmFuc2ZlcmVkRVJDMjAoYWRkcmVzcyBpbmRleGVkIF90bywgYWRkcmVzcyBpbmRleGVkIHRva2VuQ29udHJhY3QsIHVpbnQyNTYgYW10VG9rZW4pOwoJZnVuY3Rpb24gVHJhbnNmZXJFUkMyMFRva2VuKGFkZHJlc3MgX3RvLCBhZGRyZXNzIHRva2VuQ29udHJhY3QsIHVpbnQyNTYgYW10VG9rZW4pIGludGVybmFsIG9ubHlPd25lcnsKCQkJRVJDMjBCYXNpYyB0b2tlbiA9IEVSQzIwQmFzaWModG9rZW5Db250cmFjdCk7CgkJCXJlcXVpcmUodG9rZW4udHJhbnNmZXIoIF90bywgYW10VG9rZW4pKTsKCQkJVHJhbnNmZXJlZEVSQzIwKF90bywgdG9rZW5Db250cmFjdCwgYW10VG9rZW4pOwoJfQoJCgkKCS8qCgkJRW5kIEluY29tbWluZyBFdGhlcgoJKi8KCQoJCgkKICAgIGZ1bmN0aW9uIEJhc3Nkcm9wcygKCQl1aW50MjU2IGluaXRpYWxUb3RhbFN1cHBseSwKCQl1aW50MjU2IGluaXRpYWxUb2tlbnNQZXJFdGgKCQkpIHB1YmxpYwogICAgewogICAgICAgIGN1cnJlbnRTdXBwbHkgPSBpbml0aWFsVG90YWxTdXBwbHkgKiAoMTAqKmRlY2ltYWxzKTsKICAgICAgICBiYWxhbmNlc1t0aGlzXSA9ICBpbml0aWFsVG90YWxTdXBwbHkgKiAoMTAqKmRlY2ltYWxzKTsKICAgICAgICBfdG9rZW5QZXJFdGggPSBpbml0aWFsVG9rZW5zUGVyRXRoOwogICAgICAgIHRyYWRlYWJsZSA9IHRydWU7CiAgICAgICAgCiAgICB9CiAgICAKICAgIHVpbnQyNTYgcHJpdmF0ZSBfdG9rZW5QZXJFdGg7CiAgICBmdW5jdGlvbiBUb2tlbnNQZXJXZWkoKSB2aWV3IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpewogICAgICAgIHJldHVybiBfdG9rZW5QZXJFdGg7CiAgICB9CiAgICBmdW5jdGlvbiBTZXRUb2tlbnNQZXJXZWkodWludDI1NiB0cGUpIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgICAgX3Rva2VuUGVyRXRoID0gdHBlOwogICAgfQoJCiAgICBldmVudCBTb2xkVG9rZW4oYWRkcmVzcyBpbmRleGVkIF9idXllciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzMzIgbm90ZSk7CiAgICBmdW5jdGlvbiBCdXlUb2tlbihieXRlczMyIG5vdGUpIHB1YmxpYyBwYXlhYmxlCiAgICB7CgkJcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKCQkKCQkvL2NhbGN1bGF0ZSB2YWx1ZQoJCXVpbnQyNTYgdG9rZW5zVG9CdXkgPSAoKF90b2tlblBlckV0aCAqICgxMCoqZGVjaW1hbHMpKSAqIG1zZy52YWx1ZSkgLyAoMTAqKjE4KTsKCQkKCQlyZXF1aXJlKGJhbGFuY2VzW3RoaXNdICsgdG9rZW5zVG9CdXkgPiBiYWxhbmNlc1t0aGlzXSk7CgkJU29sZFRva2VuKG1zZy5zZW5kZXIsIHRva2Vuc1RvQnV5LCBub3RlKTsKCQlUcmFuc2Zlcih0aGlzLG1zZy5zZW5kZXIsdG9rZW5zVG9CdXkpOwoJCWN1cnJlbnRTdXBwbHkgKz0gdG9rZW5zVG9CdXk7CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zVG9CdXk7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIExvY2tBY2NvdW50KGFkZHJlc3MgdG9Mb2NrKSBwdWJsaWMgb25seU93bmVyCiAgICB7CiAgICAgICAgbG9ja2VkQWNjb3VudHNbdG9Mb2NrXSA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBVbmxvY2tBY2NvdW50KGFkZHJlc3MgdG9VbmxvY2spIHB1YmxpYyBvbmx5T3duZXIKICAgIHsKICAgICAgICBkZWxldGUgbG9ja2VkQWNjb3VudHNbdG9VbmxvY2tdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBTZXRUcmFkZWFibGUoYm9vbCB0KSBwdWJsaWMgb25seU93bmVyCiAgICB7CiAgICAgICAgdHJhZGVhYmxlID0gdDsKICAgIH0KICAgIGZ1bmN0aW9uIElzVHJhZGVhYmxlKCkgcHVibGljIHZpZXcgcmV0dXJucyhib29sKQogICAgewogICAgICAgIHJldHVybiB0cmFkZWFibGU7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gY3VycmVudFN1cHBseTsKICAgIH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG5vdExvY2tlZCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRyYWRlYWJsZSk7CiAgICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgVHJhbnNmZXIoIG1zZy5zZW5kZXIsIF90bywgIF92YWx1ZSk7CiAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICB9CiAgICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSlwdWJsaWMgbm90TG9ja2VkIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoIWxvY2tlZEFjY291bnRzW19mcm9tXSAmJiAhbG9ja2VkQWNjb3VudHNbX3RvXSk7CgkJcmVxdWlyZSh0cmFkZWFibGUpOwogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlCiAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZQogICAgICAgICAgICAmJiBfdmFsdWUgPiAwCiAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIoIF9mcm9tLCBfdG8sICBfdmFsdWUpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCAgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50IHJlbWFpbmluZyl7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwogICAKICAgbW9kaWZpZXIgbm90TG9ja2VkKCl7CiAgICAgICByZXF1aXJlICghbG9ja2VkQWNjb3VudHNbbXNnLnNlbmRlcl0pOwogICAgICAgXzsKICAgfQp9'.
	

]
