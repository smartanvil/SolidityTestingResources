Class {
	#name : #SRT8fd3121013A07C57f0D69646E86E7a4880b467b7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fd3121013A07C57f0D69646E86E7a4880b467b7 >> base64 [
	^ ''.
	

]
