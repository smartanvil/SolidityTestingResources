Class {
	#name : #SRT551d599a55b9080601c8f911e2327403014ca1ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT551d599a55b9080601c8f911e2327403014ca1ed >> base64 [
	^ ''.
	

]
