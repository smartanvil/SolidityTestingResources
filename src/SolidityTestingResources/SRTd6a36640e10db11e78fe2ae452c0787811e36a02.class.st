Class {
	#name : #SRTd6a36640e10db11e78fe2ae452c0787811e36a02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6a36640e10db11e78fe2ae452c0787811e36a02 >> base64 [
	^ ''.
	

]
