Class {
	#name : #SRT17f0badcdf99b0a94429478d2e9ddb1ff13174f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17f0badcdf99b0a94429478d2e9ddb1ff13174f7 >> base64 [
	^ ''.
	

]
