Class {
	#name : #SRTf030b8fbe57c4498298449fc78a0f7054a5ef76d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf030b8fbe57c4498298449fc78a0f7054a5ef76d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIEVSQzcyMSBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2VpcHMvaXNzdWVzLzcyMQogKi8KY29udHJhY3QgRVJDNzIxIHsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2JhbGFuY2UpOwogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljOwp9CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGFkbWluczsKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgYWRtaW5zW293bmVyXSA9IHRydWU7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KICAKICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICByZXF1aXJlKGFkbWluc1ttc2cuc2VuZGVyXSk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlQWRtaW4oYWRkcmVzcyBfbmV3QWRtaW4sIGJvb2wgX2FwcHJvdmVkKSBvbmx5T3duZXIgcHVibGljIHsKICAgIGFkbWluc1tfbmV3QWRtaW5dID0gX2FwcHJvdmVkOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KICAKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBFUkM3MjFUb2tlbgogKiBHZW5lcmljIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcmVxdWlyZWQgZnVuY3Rpb25hbGl0eSBvZiB0aGUgRVJDNzIxIHN0YW5kYXJkCiAqLwpjb250cmFjdCBBcmtUb2tlbiBpcyBFUkM3MjEsIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUb3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgdWludDI1NiBwcml2YXRlIHRvdGFsVG9rZW5zOwogIHVpbnQyNTYgcHVibGljIGRldmVsb3BlckN1dDsKCiAgLy8gQW5pbWFsIERhdGEKICBtYXBwaW5nICh1aW50MjU2ID0+IEFuaW1hbCkgcHVibGljIGFya0RhdGE7CgogIC8vIE1hcHBpbmcgZnJvbSB0b2tlbiBJRCB0byBvd25lcgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHJpdmF0ZSB0b2tlbk93bmVyOwoKICAvLyBtb20gSUQgPT4gYmFieSBJRAogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHVibGljIGJhYmllczsKICAKICAvLyBiYWJ5IElEID0+IHBhcmVudHMKICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTZbMl0pIHB1YmxpYyBiYWJ5TW9tbWFzOwogIAogIC8vIHRva2VuIElEID0+IHRoZWlyIGJhYnktbWFraW4nIHBhcnRuZXIKICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHB1YmxpYyBtYXRlczsKCiAgLy8gYmFieSBJRCA9PiBzdW0gcHJpY2Ugb2YgbW9tIGFuZCBkYWQgbmVlZGVkIHRvIG1ha2UgdGhpcyBiYWJieQogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHVibGljIGJhYnlNYWtpblByaWNlOwoKICAvLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gYXBwcm92ZWQgYWRkcmVzcwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHJpdmF0ZSB0b2tlbkFwcHJvdmFsczsKCiAgLy8gTWFwcGluZyBmcm9tIG93bmVyIHRvIGxpc3Qgb2Ygb3duZWQgdG9rZW4gSURzCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2W10pIHByaXZhdGUgb3duZWRUb2tlbnM7CgogIC8vIE1hcHBpbmcgZnJvbSB0b2tlbiBJRCB0byBpbmRleCBvZiB0aGUgb3duZXIgdG9rZW5zIGxpc3QKICBtYXBwaW5nKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBvd25lZFRva2Vuc0luZGV4OwoKICAvLyBCYWxhbmNlcyBmcm9tICUgcGF5b3V0cy4KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiaXJ0aGVyQmFsYW5jZXM7IAoKICAvLyBFdmVudHMKICBldmVudCBQdXJjaGFzZSh1aW50MjU2IGluZGV4ZWQgX3Rva2VuSWQsIGFkZHJlc3MgaW5kZXhlZCBfYnV5ZXIsIGFkZHJlc3MgaW5kZXhlZCBfc2VsbGVyLCB1aW50MjU2IF9wdXJjaGFzZVByaWNlKTsKICBldmVudCBCaXJ0aChhZGRyZXNzIGluZGV4ZWQgX2JpcnRoZXIsIHVpbnQyNTYgaW5kZXhlZCBfbW9tLCB1aW50MjU2IF9kYWQsIHVpbnQyNTYgaW5kZXhlZCBfYmFieSk7CgogIC8vIFB1cmNoYXNpbmcgQ2FwcyBmb3IgRGV0ZXJtaW5pbmcgTmV4dCBQb29sIEN1dAogIHVpbnQyNTYgcHJpdmF0ZSBmaXJzdENhcCAgPSAwLjUgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIHNlY29uZENhcCA9IDEuMCBldGhlcjsKICB1aW50MjU2IHByaXZhdGUgdGhpcmRDYXAgID0gMS41IGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBmaW5hbENhcCAgPSAzLjAgZXRoZXI7CgogIC8vIFN0cnVjdCB0byBzdG9yZSBBbmltYWwgRGF0YQogIHN0cnVjdCBBbmltYWwgewogICAgdWludDI1NiBwcmljZTsgICAgICAgICAvLyBDdXJyZW50IHByaWNlIG9mIHRoZSBpdGVtLgogICAgdWludDI1NiBsYXN0UHJpY2U7ICAgICAvLyBMYXN0IHByaWNlIG5lZWRlZCB0byBjYWxjdWxhdGUgd2hldGhlciBiYWJ5LW1ha2luJyBsaW1pdCBoYXMgbWFkZSBpdAogICAgYWRkcmVzcyBvd25lcjsgICAgICAgICAvLyBDdXJyZW50IG93bmVyIG9mIHRoZSBpdGVtLgogICAgYWRkcmVzcyBiaXJ0aGVyOyAgICAgICAvLyBBZGRyZXNzIHRoYXQgYmlydGhlZCB0aGUgYW5pbWFsLgogICAgdWludDI1NiBiaXJ0aGVyUGN0OyAgICAvLyBQZXJjZW50IHRoYXQgYmlydGhlciB3aWxsIGdldCBmb3Igc2FsZXMuIFRoZSBhY3R1YWwgcGVyY2VudCBpcyB0aGlzIC8gMTAuCiAgICB1aW50OCBnZW5kZXI7ICAgICAgICAgIC8vIEdlbmRlciBvZiB0aGlzIGFuaW1hbDogMCBmb3IgbWFsZSwgMSBmb3IgZmVtYWxlLgogIH0KCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW4odWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBfc3RhcnRpbmdQcmljZSwgdWludDI1NiBfY3V0LCBhZGRyZXNzIF9vd25lciwgdWludDggX2dlbmRlcikgb25seUFkbWluKCkgcHVibGljIHsKICAgIC8vIG1ha2Ugc3VyZSBwcmljZSA+IDAKICAgIHJlcXVpcmUoX3N0YXJ0aW5nUHJpY2UgPiAwKTsKICAgIC8vIG1ha2Ugc3VyZSB0b2tlbiBoYXNuJ3QgYmVlbiB1c2VkIHlldAogICAgcmVxdWlyZShhcmtEYXRhW190b2tlbklkXS5wcmljZSA9PSAwKTsKICAgIAogICAgLy8gY3JlYXRlIG5ldyB0b2tlbgogICAgQW5pbWFsIHN0b3JhZ2UgY3VyQW5pbWFsID0gYXJrRGF0YVtfdG9rZW5JZF07CgogICAgY3VyQW5pbWFsLm93bmVyID0gX293bmVyOwogICAgY3VyQW5pbWFsLnByaWNlID0gX3N0YXJ0aW5nUHJpY2U7CiAgICBjdXJBbmltYWwubGFzdFByaWNlID0gX3N0YXJ0aW5nUHJpY2U7CiAgICBjdXJBbmltYWwuZ2VuZGVyID0gX2dlbmRlcjsKICAgIGN1ckFuaW1hbC5iaXJ0aGVyID0gX293bmVyOwogICAgY3VyQW5pbWFsLmJpcnRoZXJQY3QgPSBfY3V0OwoKICAgIC8vIG1pbnQgbmV3IHRva2VuCiAgICBfbWludChfb3duZXIsIF90b2tlbklkKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZU11bHRpcGxlICh1aW50MjU2W10gX2l0ZW1JZHMsIHVpbnQyNTZbXSBfcHJpY2VzLCB1aW50MjU2W10gX2N1dHMsIGFkZHJlc3NbXSBfb3duZXJzLCB1aW50OFtdIF9nZW5kZXJzKSBvbmx5QWRtaW4oKSBleHRlcm5hbCB7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBfaXRlbUlkcy5sZW5ndGg7IGkrKykgewogICAgICBjcmVhdGVUb2tlbihfaXRlbUlkc1tpXSwgX3ByaWNlc1tpXSwgX2N1dHNbaV0sIF9vd25lcnNbaV0sIF9nZW5kZXJzW2ldKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUJhYnkodWludDI1NiBfZGFkLCB1aW50MjU2IF9tb20sIHVpbnQyNTYgX2JhYnksIHVpbnQyNTYgX3ByaWNlKSBwdWJsaWMgb25seUFkbWluKCkgCiAgewogICAgICBtYXRlc1tfbW9tXSA9IF9kYWQ7CiAgICAgIG1hdGVzW19kYWRdID0gX21vbTsKICAgICAgYmFiaWVzW19tb21dID0gX2JhYnk7CiAgICAgIGJhYnlNb21tYXNbX2JhYnldID0gW19tb20sIF9kYWRdOwogICAgICBiYWJ5TWFraW5QcmljZVtfYmFieV0gPSBfcHJpY2U7CiAgfQogIAogIGZ1bmN0aW9uIGNyZWF0ZUJhYmllcyh1aW50MjU2W10gX2RhZHMsIHVpbnQyNTZbXSBfbW9tcywgdWludDI1NltdIF9iYWJpZXMsIHVpbnQyNTZbXSBfcHJpY2VzKSBleHRlcm5hbCBvbmx5QWRtaW4oKSB7CiAgICAgIHJlcXVpcmUoX21vbXMubGVuZ3RoID09IF9iYWJpZXMubGVuZ3RoICYmIF9iYWJpZXMubGVuZ3RoID09IF9kYWRzLmxlbmd0aCk7CiAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF9tb21zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjcmVhdGVCYWJ5KF9kYWRzW2ldLCBfbW9tc1tpXSwgX2JhYmllc1tpXSwgX3ByaWNlc1tpXSk7CiAgICAgIH0KICB9CgogIC8qKgogICogQGRldiBEZXRlcm1pbmVzIG5leHQgcHJpY2Ugb2YgdG9rZW4KICAqIEBwYXJhbSBfcHJpY2UgdWludDI1NiBJRCBvZiBjdXJyZW50IHByaWNlCiAgKi8KICBmdW5jdGlvbiBnZXROZXh0UHJpY2UgKHVpbnQyNTYgX3ByaWNlKSBwcml2YXRlIHZpZXcgcmV0dXJucyAodWludDI1NiBfbmV4dFByaWNlKSB7CiAgICBpZiAoX3ByaWNlIDwgZmlyc3RDYXApIHsKICAgICAgcmV0dXJuIF9wcmljZS5tdWwoMTUwKS5kaXYoOTUpOwogICAgfSBlbHNlIGlmIChfcHJpY2UgPCBzZWNvbmRDYXApIHsKICAgICAgcmV0dXJuIF9wcmljZS5tdWwoMTM1KS5kaXYoOTYpOwogICAgfSBlbHNlIGlmIChfcHJpY2UgPCB0aGlyZENhcCkgewogICAgICByZXR1cm4gX3ByaWNlLm11bCgxMjUpLmRpdig5Nyk7CiAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGZpbmFsQ2FwKSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDExNykuZGl2KDk3KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDExNSkuZGl2KDk4KTsKICAgIH0KICB9CgogIC8qKgogICogQGRldiBQdXJjaGFzZSBhbmltYWwgZnJvbSBwcmV2aW91cyBvd25lcgogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgb2YgdG9rZW4KICAqLwogIGZ1bmN0aW9uIGJ1eVRva2VuKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyAKICAgIHBheWFibGUKICAgIGlzTm90Q29udHJhY3QobXNnLnNlbmRlcikKICB7CgogICAgLy8gZ2V0IGRhdGEgZnJvbSBzdG9yYWdlCiAgICBBbmltYWwgc3RvcmFnZSBhbmltYWwgPSBhcmtEYXRhW190b2tlbklkXTsKICAgIHVpbnQyNTYgcHJpY2UgPSBhbmltYWwucHJpY2U7CiAgICBhZGRyZXNzIG9sZE93bmVyID0gYW5pbWFsLm93bmVyOwogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICB1aW50MjU2IGV4Y2VzcyA9IG1zZy52YWx1ZS5zdWIocHJpY2UpOwoKICAgIC8vIHJldmVydCBjaGVja3MKICAgIHJlcXVpcmUocHJpY2UgPiAwKTsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHByaWNlKTsKICAgIHJlcXVpcmUob2xkT3duZXIgIT0gbXNnLnNlbmRlcik7CiAgICByZXF1aXJlKG9sZE93bmVyICE9IGFkZHJlc3MoMCkgJiYgb2xkT3duZXIgIT0gYWRkcmVzcygxKSk7IC8vIFdlJ3JlIGdvbm5hIHB1dCB1bmJpcnRoZWQgYmFiYmllcyBhdCAweDEKICAgIAogICAgdWludDI1NiB0b3RhbEN1dCA9IHByaWNlLm11bCg0KS5kaXYoMTAwKTsKICAgIAogICAgdWludDI1NiBiaXJ0aGVyQ3V0ID0gcHJpY2UubXVsKGFuaW1hbC5iaXJ0aGVyUGN0KS5kaXYoMTAwMCk7IC8vIGJpcnRoZXJQY3QgaXMgJSAqIDEwIHNvIHdlIC8gMTAwMAogICAgYmlydGhlckJhbGFuY2VzW2FuaW1hbC5iaXJ0aGVyXSA9IGJpcnRoZXJCYWxhbmNlc1thbmltYWwuYmlydGhlcl0uYWRkKGJpcnRoZXJDdXQpOwogICAgCiAgICB1aW50MjU2IGRldkN1dCA9IHRvdGFsQ3V0LnN1YihiaXJ0aGVyQ3V0KTsKICAgIGRldmVsb3BlckN1dCA9IGRldmVsb3BlckN1dC5hZGQoZGV2Q3V0KTsKCiAgICB0cmFuc2ZlclRva2VuKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwoKICAgIC8vIHJhaXNlIGV2ZW50CiAgICBQdXJjaGFzZShfdG9rZW5JZCwgbmV3T3duZXIsIG9sZE93bmVyLCBwcmljZSk7CgogICAgLy8gc2V0IG5ldyBwcmljZXMKICAgIGFuaW1hbC5wcmljZSA9IGdldE5leHRQcmljZShwcmljZSk7CiAgICBhbmltYWwubGFzdFByaWNlID0gcHJpY2U7CgogICAgLy8gVHJhbnNmZXIgcGF5bWVudCB0byBvbGQgb3duZXIgbWludXMgdGhlIGRldmVsb3BlcidzIGFuZCBiaXJ0aGVyJ3MgY3V0LgogICAgb2xkT3duZXIudHJhbnNmZXIocHJpY2Uuc3ViKHRvdGFsQ3V0KSk7CiAgICAvLyBTZW5kIHJlZnVuZCB0byBvd25lciBpZiBuZWVkZWQKICAgIGlmIChleGNlc3MgPiAwKSB7CiAgICAgIG5ld093bmVyLnRyYW5zZmVyKGV4Y2Vzcyk7CiAgICB9CiAgICAKICAgIGNoZWNrQmlydGgoX3Rva2VuSWQpOwogIH0KICAKICAvKioKICAgKiBAZGV2IENoZWNrIHRvIHNlZSB3aGV0aGVyIGEgbmV3bHkgcHVyY2hhc2VkIGFuaW1hbCBzaG91bGQgZ2l2ZSBiaXJ0aC4KICAgKiBAcGFyYW0gX3Rva2VuSWQgVW5pcXVlIElEIG9mIHRoZSBuZXdseSB0cmFuc2ZlcnJlZCBhbmltYWwuCiAgKi8KICBmdW5jdGlvbiBjaGVja0JpcnRoKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBpbnRlcm5hbAogIHsKICAgIHVpbnQyNTYgbW9tID0gMDsKICAgIAogICAgLy8gZ2VuZGVyIDAgPSBtYWxlLCAxID0gZmVtYWxlCiAgICBpZiAoYXJrRGF0YVtfdG9rZW5JZF0uZ2VuZGVyID09IDApIHsKICAgICAgbW9tID0gbWF0ZXNbX3Rva2VuSWRdOwogICAgfSBlbHNlIHsKICAgICAgbW9tID0gX3Rva2VuSWQ7CiAgICB9CiAgICAKICAgIGlmIChiYWJpZXNbbW9tXSA+IDApIHsKICAgICAgaWYgKHRva2VuT3duZXJbbWF0ZXNbX3Rva2VuSWRdXSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN1bSBwcmljZSB0byBtYWtlIGEgYmFieSBmb3IgdGhlc2UgbWF0ZXMgaGFzIGJlZW4gcGFzc2VkLgogICAgICAgIHVpbnQyNTYgc3VtUHJpY2UgPSBhcmtEYXRhW190b2tlbklkXS5sYXN0UHJpY2UgKyBhcmtEYXRhW21hdGVzW190b2tlbklkXV0ubGFzdFByaWNlOwogICAgICAgIGlmIChzdW1QcmljZSA+PSBiYWJ5TWFraW5QcmljZVtiYWJpZXNbbW9tXV0pIHsKICAgICAgICAgIGF1dG9CaXJ0aChiYWJpZXNbbW9tXSk7CiAgICAgICAgICAKICAgICAgICAgIEJpcnRoKG1zZy5zZW5kZXIsIG1vbSwgbWF0ZXNbbW9tXSwgYmFiaWVzW21vbV0pOwogICAgICAgICAgYmFieU1ha2luUHJpY2VbYmFiaWVzW21vbV1dID0gMDsKICAgICAgICAgIGJhYmllc1ttb21dID0gMDsKICAgICAgICAgIG1hdGVzW21hdGVzW21vbV1dID0gMDsKICAgICAgICAgIG1hdGVzW21vbV0gPSAwOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICAKICAvKioKICAgKiBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGJpcnRoIGEgYmFieSBpZiBhbiBvd25lciBoYXMgYm90aCBtb20gYW5kIGRhZC4KICAgKiBAcGFyYW0gX2JhYnkgVG9rZW4gSUQgb2YgdGhlIGJhYnkgdG8gYmlydGguCiAgKi8KICBmdW5jdGlvbiBhdXRvQmlydGgodWludDI1NiBfYmFieSkKICAgIGludGVybmFsCiAgewogICAgQW5pbWFsIHN0b3JhZ2UgYW5pbWFsID0gYXJrRGF0YVtfYmFieV07CiAgICBhbmltYWwuYmlydGhlciA9IG1zZy5zZW5kZXI7CiAgICB0cmFuc2ZlclRva2VuKGFuaW1hbC5vd25lciwgbXNnLnNlbmRlciwgX2JhYnkpOwogIH0KCiAgLyoqCiAgKiBAZGV2IFRyYW5zZmVyIFRva2VuIGZyb20gUHJldmlvdXMgT3duZXIgdG8gTmV3IE93bmVyCiAgKiBAcGFyYW0gX2Zyb20gcHJldmlvdXMgb3duZXIgYWRkcmVzcwogICogQHBhcmFtIF90byBuZXcgb3duZXIgYWRkcmVzcwogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdG9rZW4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW4oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHsKICAgIC8vIGNoZWNrIHRva2VuIGV4aXN0cwogICAgcmVxdWlyZSh0b2tlbkV4aXN0cyhfdG9rZW5JZCkpOwoKICAgIC8vIG1ha2Ugc3VyZSBwcmV2aW91cyBvd25lciBpcyBjb3JyZWN0CiAgICByZXF1aXJlKGFya0RhdGFbX3Rva2VuSWRdLm93bmVyID09IF9mcm9tKTsKCiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwoKICAgIC8vIGNsZWFyIGFwcHJvdmFscyBsaW5rZWQgdG8gdGhpcyB0b2tlbgogICAgY2xlYXJBcHByb3ZhbChfZnJvbSwgX3Rva2VuSWQpOwoKICAgIC8vIHJlbW92ZSB0b2tlbiBmcm9tIHByZXZpb3VzIG93bmVyCiAgICByZW1vdmVUb2tlbihfZnJvbSwgX3Rva2VuSWQpOwoKICAgIC8vIHVwZGF0ZSBvd25lciBhbmQgYWRkIHRva2VuIHRvIG5ldyBvd25lcgogICAgYWRkVG9rZW4oX3RvLCBfdG9rZW5JZCk7CgogICAvL3JhaXNlIGV2ZW50CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgV2l0aGRyYXcgZGV2J3MgY3V0CiAgKi8KICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5QWRtaW4oKSB7CiAgICBpZiAoX2Ftb3VudCA9PSAwKSB7IAogICAgICBfYW1vdW50ID0gZGV2ZWxvcGVyQ3V0OyAKICAgIH0KICAgIGRldmVsb3BlckN1dCA9IGRldmVsb3BlckN1dC5zdWIoX2Ftb3VudCk7CiAgICBvd25lci50cmFuc2ZlcihfYW1vdW50KTsKICB9CgogIC8qKgogICAqIEBkZXYgV2l0aGRyYXcgYW55b25lJ3MgYmlydGhlciBiYWxhbmNlLgogICAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgVGhlIHBlcnNvbiB3aG9zZSBiYWxhbmNlIHNoYWxsIGJlIHNlbnQgdG8gdGhlbS4KICAqLwogIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZShhZGRyZXNzIF9iZW5lZmljaWFyeSkgZXh0ZXJuYWwgewogICAgdWludDI1NiBwYXlvdXQgPSBiaXJ0aGVyQmFsYW5jZXNbX2JlbmVmaWNpYXJ5XTsKICAgIGJpcnRoZXJCYWxhbmNlc1tfYmVuZWZpY2lhcnldID0gMDsKICAgIF9iZW5lZmljaWFyeS50cmFuc2ZlcihwYXlvdXQpOwogIH0KCiAgLyoqCiAgICogQGRldiBSZXR1cm4gYWxsIHJlbGV2YW50IGRhdGEgZm9yIGFuIGFuaW1hbC4KICAgKiBAcGFyYW0gX3Rva2VuSWQgVW5pcXVlIGFuaW1hbCBJRC4KICAqLwogIGZ1bmN0aW9uIGdldEFya0RhdGEgKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgCiAgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3ByaWNlLCB1aW50MjU2IF9uZXh0UHJpY2UsIHVpbnQyNTYgX21hdGUsIAogICAgICAgICAgIGFkZHJlc3MgX2JpcnRoZXIsIHVpbnQ4IF9nZW5kZXIsIHVpbnQyNTYgX2JhYnksIHVpbnQyNTYgX2JhYnlQcmljZSkgCiAgewogICAgQW5pbWFsIG1lbW9yeSBhbmltYWwgPSBhcmtEYXRhW190b2tlbklkXTsKICAgIHVpbnQyNTYgYmFieTsKICAgIGlmIChhbmltYWwuZ2VuZGVyID09IDEpIGJhYnkgPSBiYWJpZXNbX3Rva2VuSWRdOwogICAgZWxzZSBiYWJ5ID0gYmFiaWVzW21hdGVzW190b2tlbklkXV07CiAgICAKICAgIHJldHVybiAoYW5pbWFsLm93bmVyLCBhbmltYWwucHJpY2UsIGdldE5leHRQcmljZShhbmltYWwucHJpY2UpLCBtYXRlc1tfdG9rZW5JZF0sIAogICAgICAgICAgICBhbmltYWwuYmlydGhlciwgYW5pbWFsLmdlbmRlciwgYmFieSwgYmFieU1ha2luUHJpY2VbYmFieV0pOwogIH0KICAKICAvKioKICAgKiBAZGV2IEdldCBzdW0gcHJpY2UgcmVxdWlyZWQgdG8gYmlydGggYmFieS4KICAgKiBAcGFyYW0gX2JhYnlJZCBVbmlxdWUgYmFieSBJZC4KICAqLwogIGZ1bmN0aW9uIGdldEJhYnlNYWtpblByaWNlKHVpbnQyNTYgX2JhYnlJZCkgZXh0ZXJuYWwgdmlldwogIHJldHVybnMgKHVpbnQyNTYgcHJpY2UpCiAgewogICAgcHJpY2UgPSBiYWJ5TWFraW5QcmljZVtfYmFieUlkXTsKICB9CgogIC8qKgogICAqIEBkZXYgR2V0IHRoZSBwYXJlbnRzIG9mIGEgY2VydGFpbiBiYWJ5LgogICAqIEBwYXJhbSBfYmFieUlkIFVuaXF1ZSBiYWJ5IElkLgogICovCiAgZnVuY3Rpb24gZ2V0QmFieU1vbW1hcyh1aW50MjU2IF9iYWJ5SWQpIGV4dGVybmFsIHZpZXcKICByZXR1cm5zICh1aW50MjU2WzJdIHBhcmVudHMpCiAgewogICAgcGFyZW50cyA9IGJhYnlNb21tYXNbX2JhYnlJZF07CiAgfQogIAogIC8qKgogICAqIEBkZXYgRnJvbnRlbmQgY2FuIHVzZSB0aGlzIHRvIGZpbmQgdGhlIGJpcnRoZXIgcGVyY2VudCBmb3IgYW5pbWFsLgogICAqIEBwYXJhbSBfdG9rZW5JZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgYW5pbWFsLgogICovCiAgZnVuY3Rpb24gZ2V0QmlydGhDdXQodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldwogIHJldHVybnMgKHVpbnQyNTYgYmlydGhDdXQpCiAgewogICAgYmlydGhDdXQgPSBhcmtEYXRhW190b2tlbklkXS5iaXJ0aGVyUGN0OwogIH0KCiAgLyoqCiAgICogQGRldiBDaGVjayB0aGUgYmlydGhlciBiYWxhbmNlIG9mIGEgY2VydGFpbiBhZGRyZXNzLgogICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gY2hlY2sgdGhlIGJhbGFuY2Ugb2YuCiAgKi8KICBmdW5jdGlvbiBjaGVja0JhbGFuY2UoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJpcnRoZXJCYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgLyoqCiAgKiBAZGV2IERldGVybWluZXMgaWYgdG9rZW4gZXhpc3RzIGJ5IGNoZWNraW5nIGl0J3MgcHJpY2UKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRva2VuCiAgKi8KICBmdW5jdGlvbiB0b2tlbkV4aXN0cyAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBfZXhpc3RzKSB7CiAgICByZXR1cm4gYXJrRGF0YVtfdG9rZW5JZF0ucHJpY2UgPiAwOwogIH0KCiAgLyoqCiAgKiBAZGV2IEd1YXJhbnRlZXMgbXNnLnNlbmRlciBpcyBvd25lciBvZiB0aGUgZ2l2ZW4gdG9rZW4KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byB2YWxpZGF0ZSBpdHMgb3duZXJzaGlwIGJlbG9uZ3MgdG8gbXNnLnNlbmRlcgogICovCiAgbW9kaWZpZXIgb25seU93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgewogICAgcmVxdWlyZShvd25lck9mKF90b2tlbklkKSA9PSBtc2cuc2VuZGVyKTsKICAgIF87CiAgfQoKICAvKioKICAqIEBkZXYgR3VhcmFudGVlcyBtc2cuc2VuZGVyIGlzIG5vdCBhIGNvbnRyYWN0CiAgKiBAcGFyYW0gX2J1eWVyIGFkZHJlc3Mgb2YgcGVyc29uIGJ1eWluZyBhbmltYWwKICAqLwogIG1vZGlmaWVyIGlzTm90Q29udHJhY3QoYWRkcmVzcyBfYnV5ZXIpIHsKICAgIHVpbnQgc2l6ZTsKICAgIGFzc2VtYmx5IHsgc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYnV5ZXIpIH0KICAgIHJlcXVpcmUoc2l6ZSA9PSAwKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgc3RvcmVkIGJ5IHRoZSBjb250cmFjdAogICogQHJldHVybiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucwogICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdG90YWxUb2tlbnM7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBxdWVyeSB0aGUgYmFsYW5jZSBvZgogICogQHJldHVybiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcwogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gb3duZWRUb2tlbnNbX293bmVyXS5sZW5ndGg7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgbGlzdCBvZiB0b2tlbnMgb3duZWQgYnkgYSBnaXZlbiBhZGRyZXNzCiAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRva2VucyBvZgogICogQHJldHVybiB1aW50MjU2W10gcmVwcmVzZW50aW5nIHRoZSBsaXN0IG9mIHRva2VucyBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIHRva2Vuc09mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2W10pIHsKICAgIHJldHVybiBvd25lZFRva2Vuc1tfb3duZXJdOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIG93bmVyIG9mIHRoZSBzcGVjaWZpZWQgdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBxdWVyeSB0aGUgb3duZXIgb2YKICAqIEByZXR1cm4gb3duZXIgYWRkcmVzcyBjdXJyZW50bHkgbWFya2VkIGFzIHRoZSBvd25lciBvZiB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAqLwogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcykgewogICAgYWRkcmVzcyBvd25lciA9IHRva2VuT3duZXJbX3Rva2VuSWRdOwogICAgcmV0dXJuIG93bmVyOwogIH0KCiAgLyoqCiAgICogQGRldiBHZXRzIHRoZSBhcHByb3ZlZCBhZGRyZXNzIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHJldHVybiBhZGRyZXNzIGN1cnJlbnRseSBhcHByb3ZlZCB0byB0YWtlIG93bmVyc2hpcCBvZiB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlZEZvcih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICByZXR1cm4gdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdOwogIH0KCiAgLyoqCiAgKiBAZGV2IFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQgdG8gYW5vdGhlciBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBjbGVhckFwcHJvdmFsQW5kVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgQXBwcm92ZXMgYW5vdGhlciBhZGRyZXNzIHRvIGNsYWltIGZvciB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90byBhZGRyZXNzIHRvIGJlIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSBhcHByb3ZlZAogICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBhZGRyZXNzIG93bmVyID0gb3duZXJPZihfdG9rZW5JZCk7CiAgICByZXF1aXJlKF90byAhPSBvd25lcik7CiAgICBpZiAoYXBwcm92ZWRGb3IoX3Rva2VuSWQpICE9IDAgfHwgX3RvICE9IDApIHsKICAgICAgdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdID0gX3RvOwogICAgICBBcHByb3ZhbChvd25lciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CiAgfQoKICAvKioKICAqIEBkZXYgQ2xhaW1zIHRoZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIGJlaW5nIGNsYWltZWQgYnkgdGhlIG1zZy5zZW5kZXIKICAqLwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIHJlcXVpcmUoaXNBcHByb3ZlZEZvcihtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgY2xlYXJBcHByb3ZhbEFuZFRyYW5zZmVyKG93bmVyT2YoX3Rva2VuSWQpLCBtc2cuc2VuZGVyLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAgKiBAZGV2IFRlbGxzIHdoZXRoZXIgdGhlIG1zZy5zZW5kZXIgaXMgYXBwcm92ZWQgZm9yIHRoZSBnaXZlbiB0b2tlbiBJRCBvciBub3QKICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBwcml2YXRlIHNvIGl0IGNhbiBiZSBleHRlbmRlZCBpbiBmdXJ0aGVyIGltcGxlbWVudGF0aW9ucyBsaWtlIHRoZSBvcGVyYXRhYmxlIEVSQzcyMQogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBvZiB0aGUgb3duZXIgdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIHF1ZXJ5IHRoZSBhcHByb3ZhbCBvZgogICAqIEByZXR1cm4gYm9vbCB3aGV0aGVyIHRoZSBtc2cuc2VuZGVyIGlzIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQgb3Igbm90CiAgICovCiAgZnVuY3Rpb24gaXNBcHByb3ZlZEZvcihhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gYXBwcm92ZWRGb3IoX3Rva2VuSWQpID09IF9vd25lcjsKICB9CiAgCiAgLyoqCiAgKiBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGNsZWFyIGN1cnJlbnQgYXBwcm92YWwgYW5kIHRyYW5zZmVyIHRoZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF9mcm9tIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICogQHBhcmFtIF90byBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRoZSB0b2tlbiB0bwogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgKi8KICBmdW5jdGlvbiBjbGVhckFwcHJvdmFsQW5kVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIGlzTm90Q29udHJhY3QoX3RvKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3RvICE9IG93bmVyT2YoX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gX2Zyb20pOwoKICAgIGNsZWFyQXBwcm92YWwoX2Zyb20sIF90b2tlbklkKTsKICAgIHJlbW92ZVRva2VuKF9mcm9tLCBfdG9rZW5JZCk7CiAgICBhZGRUb2tlbihfdG8sIF90b2tlbklkKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjbGVhciBjdXJyZW50IGFwcHJvdmFsIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICovCiAgZnVuY3Rpb24gY2xlYXJBcHByb3ZhbChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9vd25lcik7CiAgICB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF0gPSAwOwogICAgQXBwcm92YWwoX293bmVyLCAwLCBfdG9rZW5JZCk7CiAgfQoKCiAgICAvKioKICAqIEBkZXYgTWludCB0b2tlbiBmdW5jdGlvbgogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgb3duIHRoZSBtaW50ZWQgdG9rZW4KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSBtaW50ZWQgYnkgdGhlIG1zZy5zZW5kZXIKICAqLwogIGZ1bmN0aW9uIF9taW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICBhZGRUb2tlbihfdG8sIF90b2tlbklkKTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gYWRkIGEgdG9rZW4gSUQgdG8gdGhlIGxpc3Qgb2YgYSBnaXZlbiBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgcmVwcmVzZW50aW5nIHRoZSBuZXcgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIHRva2VucyBsaXN0IG9mIHRoZSBnaXZlbiBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiBhZGRUb2tlbihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKHRva2VuT3duZXJbX3Rva2VuSWRdID09IGFkZHJlc3MoMCkpOwogICAgdG9rZW5Pd25lcltfdG9rZW5JZF0gPSBfdG87CiAgICBhcmtEYXRhW190b2tlbklkXS5vd25lciA9IF90bzsKICAgIAogICAgdWludDI1NiBsZW5ndGggPSBiYWxhbmNlT2YoX3RvKTsKICAgIG93bmVkVG9rZW5zW190b10ucHVzaChfdG9rZW5JZCk7CiAgICBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXSA9IGxlbmd0aDsKICAgIHRvdGFsVG9rZW5zID0gdG90YWxUb2tlbnMuYWRkKDEpOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIHJlbW92ZSBhIHRva2VuIElEIGZyb20gdGhlIGxpc3Qgb2YgYSBnaXZlbiBhZGRyZXNzCiAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyByZXByZXNlbnRpbmcgdGhlIHByZXZpb3VzIG93bmVyIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgdG9rZW5zIGxpc3Qgb2YgdGhlIGdpdmVuIGFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIHJlbW92ZVRva2VuKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgewogICAgcmVxdWlyZShvd25lck9mKF90b2tlbklkKSA9PSBfZnJvbSk7CgogICAgdWludDI1NiB0b2tlbkluZGV4ID0gb3duZWRUb2tlbnNJbmRleFtfdG9rZW5JZF07CiAgICB1aW50MjU2IGxhc3RUb2tlbkluZGV4ID0gYmFsYW5jZU9mKF9mcm9tKS5zdWIoMSk7CiAgICB1aW50MjU2IGxhc3RUb2tlbiA9IG93bmVkVG9rZW5zW19mcm9tXVtsYXN0VG9rZW5JbmRleF07CgogICAgdG9rZW5Pd25lcltfdG9rZW5JZF0gPSAwOwogICAgb3duZWRUb2tlbnNbX2Zyb21dW3Rva2VuSW5kZXhdID0gbGFzdFRva2VuOwogICAgb3duZWRUb2tlbnNbX2Zyb21dW2xhc3RUb2tlbkluZGV4XSA9IDA7CiAgICAvLyBOb3RlIHRoYXQgdGhpcyB3aWxsIGhhbmRsZSBzaW5nbGUtZWxlbWVudCBhcnJheXMuIEluIHRoYXQgY2FzZSwgYm90aCB0b2tlbkluZGV4IGFuZCBsYXN0VG9rZW5JbmRleCBhcmUgZ29pbmcgdG8KICAgIC8vIGJlIHplcm8uIFRoZW4gd2UgY2FuIG1ha2Ugc3VyZSB0aGF0IHdlIHdpbGwgcmVtb3ZlIF90b2tlbklkIGZyb20gdGhlIG93bmVkVG9rZW5zIGxpc3Qgc2luY2Ugd2UgYXJlIGZpcnN0IHN3YXBwaW5nCiAgICAvLyB0aGUgbGFzdFRva2VuIHRvIHRoZSBmaXJzdCBwb3NpdGlvbiwgYW5kIHRoZW4gZHJvcHBpbmcgdGhlIGVsZW1lbnQgcGxhY2VkIGluIHRoZSBsYXN0IHBvc2l0aW9uIG9mIHRoZSBsaXN0CgogICAgb3duZWRUb2tlbnNbX2Zyb21dLmxlbmd0aC0tOwogICAgb3duZWRUb2tlbnNJbmRleFtfdG9rZW5JZF0gPSAwOwogICAgb3duZWRUb2tlbnNJbmRleFtsYXN0VG9rZW5dID0gdG9rZW5JbmRleDsKICAgIHRvdGFsVG9rZW5zID0gdG90YWxUb2tlbnMuc3ViKDEpOwogIH0KCiAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZyBfbmFtZSkgewogICAgcmV0dXJuICJFdGhlcnNBcmsgVG9rZW4iOwogIH0KCiAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsKICAgIHJldHVybiAiRUFSSyI7CiAgfQoKfQ=='.
	

]
