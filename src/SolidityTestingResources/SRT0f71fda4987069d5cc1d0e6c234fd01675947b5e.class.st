Class {
	#name : #SRT0f71fda4987069d5cc1d0e6c234fd01675947b5e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f71fda4987069d5cc1d0e6c234fd01675947b5e >> base64 [
	^ ''.
	

]
