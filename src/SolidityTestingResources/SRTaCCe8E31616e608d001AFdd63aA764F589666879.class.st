Class {
	#name : #SRTaCCe8E31616e608d001AFdd63aA764F589666879,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaCCe8E31616e608d001AFdd63aA764F589666879 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CmNvbnRyYWN0IEZ1bmRhcmlhVG9rZW4gewogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICB1aW50IHB1YmxpYyBzdXBwbHlMaW1pdDsKICAgIGFkZHJlc3MgcHVibGljIGZ1bmRhcmlhUG9vbEFkZHJlc3M7CiAgICAKICAgIGZ1bmN0aW9uIHN1cHBseVRvKGFkZHJlc3MsIHVpbnQpOwogICAgZnVuY3Rpb24gdG9rZW5Gb3JXZWkodWludCkgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIHdlaUZvclRva2VuKHVpbnQpIHJldHVybnModWludCk7ICAgIAogICAgICAgICAKfQoKY29udHJhY3QgRnVuZGFyaWFCb251c0Z1bmQgewogICAgZnVuY3Rpb24gc2V0T3duZWRCb251cygpIHBheWFibGUge30gICAgCn0KCmNvbnRyYWN0IEZ1bmRhcmlhVG9rZW5CdXkgewogICAgICAgIAogICAgYWRkcmVzcyBwdWJsaWMgZnVuZGFyaWFCb251c0Z1bmRBZGRyZXNzOyAgLy8gYWRkcmVzcyBvZiBGdW5kYXJpYSAnYm9udXMgZnVuZCcgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIGZ1bmRhcmlhVG9rZW5BZGRyZXNzOyAvLyBhZGRyZXNzIG9mIEZ1bmRhcmlhIHRva2VuIGNvbnRyYWN0CiAgICAKICAgIHVpbnQgcHVibGljIGJvbnVzUGVyaW9kID0gNjQgd2Vla3M7IC8vIGJvbnVzIHBlcmlvZCBmcm9tIG1vbWVudCBvZiB0aGlzIGNvbnRyYWN0IGNyZWF0aW5nCiAgICB1aW50IGNvbnN0YW50IGJvbnVzSW50ZXJ2YWxzQ291bnQgPSA5OyAvLyBkZWNyZWFzaW5nIG9mIGJvbnVzIHNoYXJlIHdpdGggdGltZQogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lc3RhbXBPZkJvbnVzUGVyaW9kOyAvLyB3aGVuIHRoZSBib251cyBwZXJpb2Qgc3RhcnRzCiAgICB1aW50IHB1YmxpYyBmaW5hbFRpbWVzdGFtcE9mQm9udXNQZXJpb2Q7IC8vIHdoZW4gdGhlIGJvbnVzIHBlcmlvZCBlbmRzCiAgICAKICAgIC8vIGZvciBrZWVwaW5nIG9mIGRhdGEgdG8gZGVmaW5lIGJvbnVzIHNoYXJlIGF0IHRoZSBtb21lbnQgb2YgY2FsbGluZyBidXkoKSAgICAKICAgIHN0cnVjdCBib251c0RhdGEgewogICAgICAgIHVpbnQgdGltZXN0YW1wOwogICAgICAgIHVpbnQgc2hhcmVLb2VmOwogICAgfQogICAgCiAgICAvLyBhcnJheSB0byBrZWVwIGJvbnVzIHJlbGF0ZWQgZGF0YQogICAgYm9udXNEYXRhWzldIGJvbnVzU2hlZHVsZTsKICAgIAogICAgYWRkcmVzcyBjcmVhdG9yOyAvLyBjcmVhdG9yIGFkZHJlc3Mgb2YgdGhpcyBjb250cmFjdAogICAgLy8gY29uZGl0aW9uIHRvIGJlIGNyZWF0b3IgYWRkcmVzcyB0byBydW4gc29tZSBmdW5jdGlvbnMKICAgIG1vZGlmaWVyIG9ubHlDcmVhdG9yIHsgCiAgICAgICAgaWYobXNnLnNlbmRlciA9PSBjcmVhdG9yKSBfOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBGdW5kYXJpYVRva2VuQnV5KGFkZHJlc3MgX2Z1bmRhcmlhVG9rZW5BZGRyZXNzKSB7CiAgICAgICAgZnVuZGFyaWFUb2tlbkFkZHJlc3MgPSBfZnVuZGFyaWFUb2tlbkFkZHJlc3M7CiAgICAgICAgc3RhcnRUaW1lc3RhbXBPZkJvbnVzUGVyaW9kID0gbm93OwogICAgICAgIGZpbmFsVGltZXN0YW1wT2ZCb251c1BlcmlvZCA9IG5vdytib251c1BlcmlvZDsKICAgICAgICBmb3IodWludDggaT0wOyBpPGJvbnVzSW50ZXJ2YWxzQ291bnQ7IGkrKykgewogICAgICAgICAgICAvLyBkZWZpbmUgdGltZXN0YW1wcyBvZiBib251cyBwZXJpb2QgaW50ZXJ2YWxzCiAgICAgICAgICAgIGJvbnVzU2hlZHVsZVtpXS50aW1lc3RhbXAgPSBmaW5hbFRpbWVzdGFtcE9mQm9udXNQZXJpb2QtKGJvbnVzUGVyaW9kKihib251c0ludGVydmFsc0NvdW50LWktMSkvYm9udXNJbnRlcnZhbHNDb3VudCk7CiAgICAgICAgICAgIC8vIGtvZWYgZm9yIGRlY3JlYXNpbmcgYm9udXMgc2hhcmUKICAgICAgICAgICAgYm9udXNTaGVkdWxlW2ldLnNoYXJlS29lZiA9IGJvbnVzSW50ZXJ2YWxzQ291bnQtaTsKICAgICAgICB9CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldEZ1bmRhcmlhQm9udXNGdW5kQWRkcmVzcyhhZGRyZXNzIF9mdW5kYXJpYUJvbnVzRnVuZEFkZHJlc3MpIG9ubHlDcmVhdG9yIHsKICAgICAgICBmdW5kYXJpYUJvbnVzRnVuZEFkZHJlc3MgPSBfZnVuZGFyaWFCb251c0Z1bmRBZGRyZXNzOyAgICAKICAgIH0gCiAgICAKICAgIC8vIGZpbmlzaCBib251cyBpZiBuZWVkZWQgKGlmIGJvbnVzIHN5c3RlbSBub3QgZWZmaWNpZW50KQogICAgZnVuY3Rpb24gZmluaXNoQm9udXNQZXJpb2QoKSBvbmx5Q3JlYXRvciB7CiAgICAgICAgZmluYWxUaW1lc3RhbXBPZkJvbnVzUGVyaW9kID0gbm93OyAgICAKICAgIH0KICAgIAogICAgLy8gaWYgdG9rZW4gYm91Z2h0IHN1Y2Nlc3NmdWx5CiAgICBldmVudCBUb2tlbkJvdWdodChhZGRyZXNzIGJ1eWVyLCB1aW50IHRva2VuVG9CdXllciwgdWludCB3ZWlGb3JGdW5kYXJpYVBvb2wsIHVpbnQgd2VpRm9yQm9udXNGdW5kLCB1aW50IHJlbW5hbnRXZWkpOwogICAgCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZT4wKTsKICAgICAgICAvLyB1c2UgRnVuZGFyaWEgdG9rZW4gY29udHJhY3QgZnVuY3Rpb25zCiAgICAgICAgRnVuZGFyaWFUb2tlbiBmdCA9IEZ1bmRhcmlhVG9rZW4oZnVuZGFyaWFUb2tlbkFkZHJlc3MpOwogICAgICAgIC8vIHNob3VsZCBiZSBlbm91Z2ggdG9rZW5zIGJlZm9yZSBzdXBwbHkgcmVhY2hlZCBsaW1pdAogICAgICAgIHJlcXVpcmUoZnQuc3VwcGx5TGltaXQoKS0xPmZ0LnRvdGFsU3VwcGx5KCkpOwogICAgICAgIC8vIHRva2VucyB0byBidXllciBhY2NvcmRpbmcgdG8gY291cnNlCiAgICAgICAgdmFyIHRva2VuVG9CdXllciA9IGZ0LnRva2VuRm9yV2VpKG1zZy52YWx1ZSk7CiAgICAgICAgLy8gc2hvdWxkIGJlIGVub2doIGV0aGVyIGZvciBhdCBsZWFzdCAxIHRva2VuCiAgICAgICAgcmVxdWlyZSh0b2tlblRvQnV5ZXI+PTEpOwogICAgICAgIC8vIGV2ZXJ5IHNlY29uZCB0b2tlbiBnb2VzIHRvIGNyZWF0b3IgYWRkcmVzcwogICAgICAgIHZhciB0b2tlblRvQ3JlYXRvciA9IHRva2VuVG9CdXllcjsKICAgICAgICB1aW50IHdlaUZvckZ1bmRhcmlhUG9vbDsgLy8gd2VpIGRpc3RyaWJ1dGVkIHRvIEZ1bmRhcmlhIHBvb2wKICAgICAgICB1aW50IHdlaUZvckJvbnVzRnVuZDsgLy8gd2VpIGRpc3RyaWJ1dGVkIHRvIEZ1bmRhcmlhIGJvbnVzIGZ1bmQKICAgICAgICB1aW50IHJldHVybmVkV2VpOyAvLyByZW1uYW50CiAgICAgICAgLy8gaWYgdHJ5aW5nIHRvIGJ1eSBtb3JlIHRva2VucyB0aGVuIHN1cHBseSBsaW1pdAogICAgICAgIGlmKGZ0LnRvdGFsU3VwcGx5KCkrdG9rZW5Ub0J1eWVyK3Rva2VuVG9DcmVhdG9yID4gZnQuc3VwcGx5TGltaXQoKSkgewogICAgICAgICAgICAvLyBob3cgbWFueSB0b2tlbnMgYXJlIHN1cHBvc2VkIHRvIGJ1eT8KICAgICAgICAgICAgdmFyIHN1cHBvc2VkVG9rZW5Ub0J1eWVyID0gdG9rZW5Ub0J1eWVyOwogICAgICAgICAgICAvLyBnZXQgYWxsIHJlbWFpbmluZyB0b2tlbnMgYW5kIGRldmlkZSB0aGVtIGJldHdlZW4gcmVjaWVwZW50cwogICAgICAgICAgICB0b2tlblRvQnV5ZXIgPSAoZnQuc3VwcGx5TGltaXQoKS1mdC50b3RhbFN1cHBseSgpKS8yOwogICAgICAgICAgICAvLyBldmVyeSBzZWNvbmQgdG9rZW4gZ29lcyB0byBjcmVhdG9yIGFkZHJlc3MKICAgICAgICAgICAgdG9rZW5Ub0NyZWF0b3IgPSB0b2tlblRvQnV5ZXI7IAogICAgICAgICAgICAvLyB0b2tlbnMgb3ZlciBsaW1pdAogICAgICAgICAgICB2YXIgZXhjZXNzVG9rZW4gPSBzdXBwb3NlZFRva2VuVG9CdXllci10b2tlblRvQnV5ZXI7CiAgICAgICAgICAgIC8vIHdlaSB0byByZXR1cm4gdG8gYnV5ZXIKICAgICAgICAgICAgcmV0dXJuZWRXZWkgPSBmdC53ZWlGb3JUb2tlbihleGNlc3NUb2tlbik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIHJlbWFpbmluZyB3ZWkgZm9yIHRva2VucwogICAgICAgIHZhciByZW1uYW50VmFsdWUgPSBtc2cudmFsdWUtcmV0dXJuZWRXZWk7CiAgICAgICAgLy8gaWYgYm9udXMgcGVyaW9kIGlzIG92ZXIKICAgICAgICBpZihub3c+ZmluYWxUaW1lc3RhbXBPZkJvbnVzUGVyaW9kKSB7CiAgICAgICAgICAgIHdlaUZvckZ1bmRhcmlhUG9vbCA9IHJlbW5hbnRWYWx1ZTsgICAgICAgICAgICAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50IHByZXZUaW1lc3RhbXA7CiAgICAgICAgICAgIGZvcih1aW50OCBpPTA7IGk8Ym9udXNJbnRlcnZhbHNDb3VudDsgaSsrKSB7CiAgICAgICAgICAgICAgICAvLyBmaW5kIGludGVydmFsIHRvIGdldCBuZWVkZWQgYm9udXMgc2hhcmUKICAgICAgICAgICAgICAgIGlmKGJvbnVzU2hlZHVsZVtpXS50aW1lc3RhbXA+PW5vdyAmJiBub3c+cHJldlRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgICAgIC8vIHdlaSB0byBiZSBkaXN0cmlidXRlZCBpbnRvIHRoZSBGdW5kYXJpYSBib251cyBmdW5kCiAgICAgICAgICAgICAgICAgICAgd2VpRm9yQm9udXNGdW5kID0gcmVtbmFudFZhbHVlKmJvbnVzU2hlZHVsZVtpXS5zaGFyZUtvZWYvKGJvbnVzSW50ZXJ2YWxzQ291bnQrMSk7ICAgIAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcHJldlRpbWVzdGFtcCA9IGJvbnVzU2hlZHVsZVtpXS50aW1lc3RhbXA7ICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHdlaSBmb3IgRnVuZGFyaWEgcG9vbAogICAgICAgICAgICB3ZWlGb3JGdW5kYXJpYVBvb2wgPSByZW1uYW50VmFsdWUtd2VpRm9yQm9udXNGdW5kOyAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIC8vIHVzZSBGdW5kYXJpYSB0b2tlbiBjb250cmFjdCBmdW5jdGlvbiB0byBkaXN0cmlidXRlIHRva2VucyB0byBjcmVhdG9yIGFkZHJlc3MKICAgICAgICBmdC5zdXBwbHlUbyhjcmVhdG9yLCB0b2tlblRvQ3JlYXRvcik7CiAgICAgICAgLy8gdHJhbnNmZXIgd2VpIGZvciBib3VnaHQgdG9rZW5zIHRvIEZ1bmRhcmlhIHBvb2wKICAgICAgICAoZnQuZnVuZGFyaWFQb29sQWRkcmVzcygpKS50cmFuc2Zlcih3ZWlGb3JGdW5kYXJpYVBvb2wpOwogICAgICAgIC8vIGlmIHdlIGhhdmUgd2VpIGZvciBidXllciB0byBiZSBzYXZlZCBpbiBib251cyBmdW5kCiAgICAgICAgaWYod2VpRm9yQm9udXNGdW5kPjApIHsKICAgICAgICAgICAgRnVuZGFyaWFCb251c0Z1bmQgZmJmID0gRnVuZGFyaWFCb251c0Z1bmQoZnVuZGFyaWFCb251c0Z1bmRBZGRyZXNzKTsKICAgICAgICAgICAgLy8gZGlzdHJpYnV0ZSBib251cyB3ZWkgdG8gYm9udXMgZnVuZAogICAgICAgICAgICBmYmYuc2V0T3duZWRCb251cy52YWx1ZSh3ZWlGb3JCb251c0Z1bmQpKCk7CiAgICAgICAgfQogICAgICAgIC8vIGlmIGhhdmUgcmVtbmFudCwgcmV0dXJuIGl0IHRvIGJ1eWVyCiAgICAgICAgaWYocmV0dXJuZWRXZWk+MCkgbXNnLnNlbmRlci50cmFuc2ZlcihyZXR1cm5lZFdlaSk7CiAgICAgICAgLy8gdXNlIEZ1bmRhcmlhIHRva2VuIGNvbnRyYWN0IGZ1bmN0aW9uIHRvIGRpc3RyaWJ1dGUgdG9rZW5zIHRvIGJ1eWVyCiAgICAgICAgZnQuc3VwcGx5VG8obXNnLnNlbmRlciwgdG9rZW5Ub0J1eWVyKTsKICAgICAgICAvLyBpbmZvcm0gYWJvdXQgJ3Rva2VuIGJvdWdodCcgZXZlbnQKICAgICAgICBUb2tlbkJvdWdodChtc2cuc2VuZGVyLCB0b2tlblRvQnV5ZXIsIHdlaUZvckZ1bmRhcmlhUG9vbCwgd2VpRm9yQm9udXNGdW5kLCByZXR1cm5lZFdlaSk7CiAgICB9CiAgICAKICAgIC8vIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlcgogICAgZnVuY3Rpb24gKCkgewoJICAgIHRocm93OyAKICAgIH0gICAgICAKCn0='.
	

]
