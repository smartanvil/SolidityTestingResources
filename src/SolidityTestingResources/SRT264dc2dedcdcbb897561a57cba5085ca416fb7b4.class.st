Class {
	#name : #SRT264dc2dedcdcbb897561a57cba5085ca416fb7b4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT264dc2dedcdcbb897561a57cba5085ca416fb7b4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gYiAqIGMpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAtIGI7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgYXNzZXJ0KGEgPT0gYyArIGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgYXNzZXJ0KGEgPT0gYyAtIGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CmNvbnRyYWN0IFF1blF1blRva2VuSXNzdWUgewoKICAgIGFkZHJlc3MgcHVibGljIHRva2VuQ29udHJhY3RBZGRyZXNzOwogICAgdWludDE2ICBwdWJsaWMgbGFzdFJhdGUgPSA5NTA7IC8vIHRoZSBzZWNvbmQgeWVhciBpbmZsYXRlIHJhdGUgaXMgOTUwLzEwMDAwCiAgICB1aW50MjU2IHB1YmxpYyBsYXN0QmxvY2tOdW1iZXI7CiAgICB1aW50MjU2IHB1YmxpYyBsYXN0WWVhclRvdGFsU3VwcGx5ID0gMTUgKiAxMCAqKiAyNjsgLy9pbml0IGlzc3VlCiAgICB1aW50OCAgIHB1YmxpYyBpbmZsYXRlQ291bnQgPSAwOwogICAgYm9vbCAgICBwdWJsaWMgaXNGaXJzdFllYXIgPSB0cnVlOyAvL25vdCBpbmZsYXRlIGluIDIwMTgKCiAgICBmdW5jdGlvbiBRdW5RdW5Ub2tlbklzc3VlIChhZGRyZXNzIF90b2tlbkNvbnRyYWN0QWRkcmVzcykgcHVibGljewogICAgICAgIHRva2VuQ29udHJhY3RBZGRyZXNzID0gX3Rva2VuQ29udHJhY3RBZGRyZXNzOwogICAgICAgIGxhc3RCbG9ja051bWJlciA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSYXRlKCkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgaWYoaW5mbGF0ZUNvdW50ID09IDEwKXsKICAgICAgICAgICAgLy8gZGVjcmVhc2luZyAwLjUlIHBlciB5ZWFyIHVudGlsIHRoZSBvdmVyYWxsIGluZmxhdGlvbiByYXRlIHJlYWNoZXMgMSUuCiAgICAgICAgICAgIGlmKGxhc3RSYXRlID4gMTAwKXsKICAgICAgICAgICAgICAgIGxhc3RSYXRlIC09IDUwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHJlc2V0IGNvdW50CiAgICAgICAgICAgIGluZmxhdGVDb3VudCA9IDA7CiAgICAgICAgfQogICAgICAgIC8vIGluZmxhdGUgMS8xMCBlYWNoIHRpbWUKICAgICAgICByZXR1cm4gU2FmZU1hdGguZGl2KGxhc3RSYXRlLCAxMCk7CiAgICB9CgogICAgLy8gYW55b25lIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIGlzc3VlKCkgcHVibGljICB7CiAgICAgICAgLy9lbnN1cmUgZmlyc3QgeWVhciBjYW4gbm90IGluZmxhdGUKICAgICAgICBpZihpc0ZpcnN0WWVhcil7CiAgICAgICAgICAgIC8vIDIxMDI0MDAgYmxvY2tzIGlzIGFib3V0IG9uZSB5ZWFyLCBzdXBwb3NlIGl0IHRha2VzIDE1IHNlY29uZHMgdG8gZ2VuZXJhdGUgYSBuZXcgYmxvY2sKICAgICAgICAgICAgcmVxdWlyZShTYWZlTWF0aC5zdWIoYmxvY2subnVtYmVyLCBsYXN0QmxvY2tOdW1iZXIpID4gMjEwMjQwMCk7CiAgICAgICAgICAgIGlzRmlyc3RZZWFyID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIDIxMDI0MCBibG9ja3MgaXMgYWJvdXQgb25lIHRlbnRoIHllYXIsIGVuc3VyZSBvbmx5IDEwIHRpbWVzIGluZmxhdGlvbiBwZXIgeWVhcgogICAgICAgIHJlcXVpcmUoU2FmZU1hdGguc3ViKGJsb2NrLm51bWJlciwgbGFzdEJsb2NrTnVtYmVyKSA+IDIxMDI0MCk7CiAgICAgICAgUXVuUXVuVG9rZW4gdG9rZW5Db250cmFjdCA9IFF1blF1blRva2VuKHRva2VuQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICAvL2FkanVzdCB0b3RhbCBzdXBwbHkgZXZlcnkgeWVhcgogICAgICAgIGlmKGluZmxhdGVDb3VudCA9PSAxMCl7CiAgICAgICAgICAgIGxhc3RZZWFyVG90YWxTdXBwbHkgPSB0b2tlbkNvbnRyYWN0LnRvdGFsU3VwcGx5KCk7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChsYXN0WWVhclRvdGFsU3VwcGx5LCBnZXRSYXRlKCkpLCAxMDAwMCk7CiAgICAgICAgcmVxdWlyZShhbW91bnQgPiAwKTsKICAgICAgICB0b2tlbkNvbnRyYWN0Lmlzc3VlKGFtb3VudCk7CiAgICAgICAgbGFzdEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyOwogICAgICAgIGluZmxhdGVDb3VudCArPSAxOwogICAgfQp9CgoKaW50ZXJmYWNlIHRva2VuUmVjaXBpZW50IHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsKfQoKY29udHJhY3QgUXVuUXVuVG9rZW4gewoKICAgIC8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnUXVuUXVuQ29tbXVuaXRpZXMnOwoKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gJ1FVTic7CgogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAxNSAqIDEwICoqIDI2OwoKICAgIGFkZHJlc3MgcHVibGljIGlzc3VlQ29udHJhY3RBZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8gVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8vIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKICAgIC8vIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IElzc3VlKHVpbnQyNTYgYW1vdW50KTsKCiAgICAvKioKICAgICAqIENvbnN0cmN0b3IgZnVuY3Rpb24KICAgICAqCiAgICAgKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gUXVuUXVuVG9rZW4oKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gdG90YWxTdXBwbHk7CiAgICAgICAgLy8gY3JlYXRlIG5ldyBpc3N1ZSBjb250cmFjdAogICAgICAgIGlzc3VlQ29udHJhY3RBZGRyZXNzID0gbmV3IFF1blF1blRva2VuSXNzdWUoYWRkcmVzcyh0aGlzKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBpc3N1ZSBuZXcgdG9rZW4KICAgICAqCiAgICAgKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gaXNzdWUodWludDI1NiBhbW91bnQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGlzc3VlQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gU2FmZU1hdGguYWRkKGJhbGFuY2VPZltvd25lcl0sIGFtb3VudCk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBTYWZlTWF0aC5hZGQodG90YWxTdXBwbHksIGFtb3VudCk7CiAgICAgICAgSXNzdWUoYW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlT2ZbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICAgKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QKICAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID4gYmFsYW5jZU9mW190b10pOwogICAgICAgIC8vIFNhdmUgdGhpcyBmb3IgYW4gYXNzZXJ0aW9uIGluIHRoZSBmdXR1cmUKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAvLyBBc3NlcnRzIGFyZSB1c2VkIHRvIHVzZSBzdGF0aWMgYW5hbHlzaXMgdG8gZmluZCBidWdzIGluIHlvdXIgY29kZS4gVGhleSBzaG91bGQgbmV2ZXIgZmFpbAogICAgICAgIGFzc2VydChiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b10gPT0gcHJldmlvdXNCYWxhbmNlcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMKICAgICAqCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIHlvdXIgYWNjb3VudAogICAgICoKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCiAgICAgKgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZU9mW21zZy5zZW5kZXJdKTsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgbm90aWZ5CiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICogQHBhcmFtIF9leHRyYURhdGEgc29tZSBleHRyYSBpbmZvcm1hdGlvbiB0byBzZW5kIHRvIHRoZSBhcHByb3ZlZCBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgdmlldyBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dhbmNlW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgICogRGVzdHJveSB0b2tlbnMKICAgICAqCiAgICAgKiBSZW1vdmUgYF92YWx1ZWAgdG9rZW5zIGZyb20gdGhlIHN5c3RlbSBpcnJldmVyc2libHkKICAgICAqCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsKICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogRGVzdHJveSB0b2tlbnMgZnJvbSBvdGhlciBhY2NvdW50CiAgICAgKgogICAgICogUmVtb3ZlIGBfdmFsdWVgIHRva2VucyBmcm9tIHRoZSBzeXN0ZW0gaXJyZXZlcnNpYmx5IG9uIGJlaGFsZiBvZiBgX2Zyb21gLgogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSB0aGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgICovCiAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSB0YXJnZXRlZCBiYWxhbmNlIGlzIGVub3VnaAogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHRhcmdldGVkIGJhbGFuY2UKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIncyBhbGxvd2FuY2UKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICAgICAgLy8gVXBkYXRlIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihfZnJvbSwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCn0='.
	

]
