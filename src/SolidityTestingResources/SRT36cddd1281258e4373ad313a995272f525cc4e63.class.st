Class {
	#name : #SRT36cddd1281258e4373ad313a995272f525cc4e63,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36cddd1281258e4373ad313a995272f525cc4e63 >> base64 [
	^ ''.
	

]
