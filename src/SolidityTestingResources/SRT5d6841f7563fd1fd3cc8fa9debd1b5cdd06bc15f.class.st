Class {
	#name : #SRT5d6841f7563fd1fd3cc8fa9debd1b5cdd06bc15f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d6841f7563fd1fd3cc8fa9debd1b5cdd06bc15f >> base64 [
	^ ''.
	

]
