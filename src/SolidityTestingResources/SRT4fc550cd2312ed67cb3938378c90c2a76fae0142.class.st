Class {
	#name : #SRT4fc550cd2312ed67cb3938378c90c2a76fae0142,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4fc550cd2312ed67cb3938378c90c2a76fae0142 >> base64 [
	^ ''.
	

]
