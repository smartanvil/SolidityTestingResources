Class {
	#name : #SRT0570318951cfb0e0c4c2af3070c1c040e0e8790b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0570318951cfb0e0c4c2af3070c1c040e0e8790b >> base64 [
	^ ''.
	

]
