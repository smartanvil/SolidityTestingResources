Class {
	#name : #SRTbac2dc4fe58f1f3382f036b1cb8d92591e0c135f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbac2dc4fe58f1f3382f036b1cb8d92591e0c135f >> base64 [
	^ ''.
	

]
