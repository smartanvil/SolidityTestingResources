Class {
	#name : #SRT2de9b766701b4d1468ae44b376dca65d31db243f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2de9b766701b4d1468ae44b376dca65d31db243f >> base64 [
	^ ''.
	

]
