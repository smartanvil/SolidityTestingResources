Class {
	#name : #SRTbAaBE94C786FE90514Dc6fA68499FD93EE583a5c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbAaBE94C786FE90514Dc6fA68499FD93EE583a5c >> base64 [
	^ 'Y29udHJhY3QgdGlja2luZ0JvbWIgewoKICAgIHN0cnVjdCB0ZWFtIHsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50IGxhc3RVcGRhdGU7CiAgICAgICAgYWRkcmVzc1tdIG1lbWJlcnM7CiAgICAgICAgdWludCBuYnJNZW1iZXJzOwogICAgfQoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiA2OyAvLyA2IEhvdXJzCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJTlZFU1RfQU1PVU5UID0gMTAwIGZpbm5leTsgLy8gMC4xIEVUSAogICAgdWludCBjb25zdGFudCBGRUUgPSAzOwoKICAgIHRlYW0gcHVibGljIHJlZDsKICAgIHRlYW0gcHVibGljIGJsdWU7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsKICAgIGFkZHJlc3MgY3JlYXRvcjsKCiAgICBzdHJpbmdbXSBwdWJsaWMgaGlzdG9yeVdpbm5lcjsKICAgIHVpbnRbXSBwdWJsaWMgaGlzdG9yeVJlZDsKICAgIHVpbnRbXSBwdWJsaWMgaGlzdG9yeUJsdWU7CiAgICB1aW50IHB1YmxpYyBnYW1lTmJyOwoKICAgIGZ1bmN0aW9uIHRpY2tpbmdCb21iKCkgewogICAgICAgIG5ld1JvdW5kKCk7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgZ2FtZU5iciA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gaGVscFJlZCgpIHsKICAgICAgICB1aW50IGk7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIENoZWNrIGlmIEV4cGxvZGVkLCBpZiBzbyBzYXZlIHRoZSBwcmV2aW91cyBnYW1lCiAgICAgICAgLy8gQW5kIGNyZWF0ZSBhIG5ldyByb3VuZAogICAgICAgIGNoZWNrSWZFeHBsb2RlZCgpOwoKICAgICAgICAvLyBVcGRhdGUgdGhlIFRpbWVTdGFtcAogICAgICAgIHJlZC5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOwoKICAgICAgICAvLyBTcGxpdCB0aGUgaW5jb21pbmcgbW9uZXkgZXZlcnkgSU5WRVNUX0FNT1VOVAogICAgICAgIHdoaWxlIChhbW91bnQgPj0gSU5WRVNUX0FNT1VOVCkgewogICAgICAgICAgICByZWQubWVtYmVycy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgICByZWQubmJyTWVtYmVycysrOwogICAgICAgICAgICBhbW91bnQgLT0gSU5WRVNUX0FNT1VOVDsKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIHNvbWUgbW9uZXkgaW4gdGhlIGJhbGFuY2UsIHNlbnQgaXQgYmFjawogICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChhbW91bnQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBoZWxwQmx1ZSgpIHsKICAgICAgICB1aW50IGk7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIENoZWNrIGlmIEV4cGxvZGVkLCBpZiBzbyBzYXZlIHRoZSBwcmV2aW91cyBnYW1lCiAgICAgICAgLy8gQW5kIGNyZWF0ZSBhIG5ldyBnYW1lCiAgICAgICAgY2hlY2tJZkV4cGxvZGVkKCk7CgogICAgICAgIC8vIFVwZGF0ZSB0aGUgVGltZVN0YW1wCiAgICAgICAgYmx1ZS5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOwoKICAgICAgICAvLyBTcGxpdCB0aGUgaW5jb21pbmcgbW9uZXkgZXZlcnkgMTAwIGZpbm5leXMKICAgICAgICB3aGlsZSAoYW1vdW50ID49IElOVkVTVF9BTU9VTlQpIHsKICAgICAgICAgICAgYmx1ZS5tZW1iZXJzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICAgIGJsdWUubmJyTWVtYmVycysrOwogICAgICAgICAgICBhbW91bnQgLT0gSU5WRVNUX0FNT1VOVDsKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIHNvbWUgbW9uZXkgaW4gdGhlIGJhbGFuY2UsIHNlbnQgaXQgYmFjawogICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChhbW91bnQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja0lmRXhwbG9kZWQoKSB7CiAgICAgICAgaWYgKGNoZWNrVGltZSgpKSB7CiAgICAgICAgICAgIG5ld1JvdW5kKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrVGltZSgpIHByaXZhdGUgcmV0dXJucyhib29sIGV4cGxvZGVkKSB7CiAgICAgICAgdWludCBpOwogICAgICAgIHVpbnQgbG9zdEFtb3VudCA9IDA7CiAgICAgICAgdWludCBnYWluUGVyTWVtYmVyID0gMDsKICAgICAgICB1aW50IGZlZUNvbGxlY3RlZCA9IDA7CgogICAgICAgIC8vIElmIFJlZCBhbmQgQmx1ZSBoYXZlIGV4cGxvZGVkIGF0IHRoZSBzYW1lIHRpbWUsIHJldHVybiB0aGUgYW1vdW50ZWQgaW52ZXN0ZWQKICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPT0gYmx1ZS5sYXN0VXBkYXRlICYmIHJlZC5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlZC5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tyZWQubWVtYmVyc1tpXV0gKz0gSU5WRVNUX0FNT1VOVDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmx1ZS5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tibHVlLm1lbWJlcnNbaV1dICs9IElOVkVTVF9BTU9VTlQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnVGllIGJldHdlZW4gUmVkIGFuZCBCbHVlJyk7CiAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7CiAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgZ2FtZU5icisrOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vIFRha2UgdGhlIG9sZGVyIHRpbWVzdGFtcAogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA8IGJsdWUubGFzdFVwZGF0ZSkgewogICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgUmVkIGJvbWIgZXhwbG9kZWQKICAgICAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbG9zdCBhbW91bnQgYnkgdGhlIHJlZCB0ZWFtCiAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2YgUmVkIG1lbWJlciAqIEludmVzdGVkIGFtb3VudCBwZXIgdXNlciAgKgogICAgICAgICAgICAgICAgZmVlQ29sbGVjdGVkICs9IChyZWQubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQgKiBGRUUgLyAxMDApOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbY3JlYXRvcl0gKz0gZmVlQ29sbGVjdGVkOwogICAgICAgICAgICAgICAgbG9zdEFtb3VudCA9IChyZWQubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQpIC0gZmVlQ29sbGVjdGVkOwoKICAgICAgICAgICAgICAgIGdhaW5QZXJNZW1iZXIgPSBsb3N0QW1vdW50IC8gYmx1ZS5uYnJNZW1iZXJzOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsdWUubWVtYmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW2JsdWUubWVtYmVyc1tpXV0gKz0gKElOVkVTVF9BTU9VTlQgKyBnYWluUGVyTWVtYmVyKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ1JlZCcpOwogICAgICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgICAgIGdhbWVOYnIrKzsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgQmx1ZSBib21iIGV4cGxvZGVkCiAgICAgICAgICAgIGlmIChibHVlLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBsb3N0IGFtb3VudCBieSB0aGUgcmVkIHRlYW0KICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBSZWQgbWVtYmVyICogSW52ZXN0ZWQgYW1vdW50IHBlciB1c2VyICAqCiAgICAgICAgICAgICAgICBmZWVDb2xsZWN0ZWQgKz0gKGJsdWUubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQgKiBGRUUgLyAxMDApOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbY3JlYXRvcl0gKz0gZmVlQ29sbGVjdGVkOwogICAgICAgICAgICAgICAgbG9zdEFtb3VudCA9IChibHVlLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UKSAtIGZlZUNvbGxlY3RlZDsKICAgICAgICAgICAgICAgIGdhaW5QZXJNZW1iZXIgPSBsb3N0QW1vdW50IC8gcmVkLm5ick1lbWJlcnM7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVkLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tyZWQubWVtYmVyc1tpXV0gKz0gKElOVkVTVF9BTU9VTlQgKyBnYWluUGVyTWVtYmVyKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ0JsdWUnKTsKICAgICAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7CiAgICAgICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7CiAgICAgICAgICAgICAgICBnYW1lTmJyKys7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG5ld1JvdW5kKCkgcHJpdmF0ZSB7CiAgICAgICAgcmVkLm5hbWUgPSAiUmVkIHRlYW0iOwogICAgICAgIGJsdWUubmFtZSA9ICJCbHVlIHRlYW0iOwogICAgICAgIHJlZC5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGJsdWUubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICByZWQubmJyTWVtYmVycyA9IDA7CiAgICAgICAgYmx1ZS5uYnJNZW1iZXJzID0gMDsKICAgICAgICByZWQubWVtYmVycyA9IG5ldyBhZGRyZXNzW10oMCk7CiAgICAgICAgYmx1ZS5tZW1iZXJzID0gbmV3IGFkZHJlc3NbXSgwKTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHsKICAgICAgICAvLyBIZWxwIHRoZSBvbGRlc3QgdGltZXN0YW1wIChnb2luZyB0byBleHBsb2RlIGZpcnN0KQogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA8IGJsdWUubGFzdFVwZGF0ZSkgewogICAgICAgICAgICBoZWxwUmVkKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaGVscEJsdWUoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29sbGVjdEJhbGFuY2UoKSB7CiAgICAgICAgbXNnLnNlbmRlci5zZW5kKGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICB9CgogICAgLy8gQWxsb3cgdGhlIGNyZWF0b3IgdG8gc2VuZCB0aGVpciBiYWxhbmNlcyB0byB0aGUgcGxheWVycwogICAgZnVuY3Rpb24gc2VuZEJhbGFuY2UoYWRkcmVzcyBwbGF5ZXIpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yKSB7CiAgICAgICAgICAgIHBsYXllci5zZW5kKGJhbGFuY2VzW3BsYXllcl0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBuZXdPd25lcihhZGRyZXNzIG5ld093bmVyKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgewogICAgICAgICAgICBjcmVhdG9yID0gbmV3T3duZXI7CiAgICAgICAgfQogICAgfQoKfQ=='.
	

]
