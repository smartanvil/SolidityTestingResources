Class {
	#name : #SRTb3d031000f66e87400E8e4951Eb70c9ee7bb0823,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb3d031000f66e87400E8e4951Eb70c9ee7bb0823 >> base64 [
	^ 'Y29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOyB9Cgpjb250cmFjdCB0b2tlbiB7CiAgICAvKiDku6TniYznmoTlhazlvIDlj5jph48gKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnVG9rZW4gMC4xJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLyog5omA5pyJ6LSm5pys55qE5pWw57uEICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgLyog5a6a5LmJ5LiA5Liq5LqL5Lu277yM5b2T5Lqk5piT5Y+R55Sf5pe277yM6YCa55+l5a6i5oi356uvICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKiDliJ3lp4vljJblkIjnuqYgKi8KICAgIGZ1bmN0aW9uIHRva2VuKAogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwKICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICAgICApIHsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8g5ZCI57qm55qE5Yib5bu66ICF5oul5pyJ6L+Z5ZCI57qm5omA5pyJ55qE5Yid5aeL5Luk54mMCiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIOabtOaWsOS7pOeJjOS+m+e7meaAu+aVsAogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDorr7nva7ku6TniYznmoTlkI3lrZcKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5Luk54mM55qE56ym5Y+3CiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuvue9ruS7pOeJjOeahOWwj+aVsOS9jQogICAgfQoKICAgIC8qIOWPkemAgeS7pOeJjCAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAvLyDmo4Dmn6Xov5nlj5HpgIHogIXmmK/lkKbmnInotrPlpJ/lpJrnmoTku6TniYwKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIOajgOafpea6ouWHugogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8g5LuO5Y+R6YCB6ICF6LSm5oi35YeP5Y6755u45bqU55qE6aKd5bqmCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDku47mjqXmlLbogIXotKbmiLflop7liqDnm7jlupTnmoTpop3luqYKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIOS6i+S7tuOAgumAmuefpeaJgOacieato+WcqOebkeWQrOi/meS4quWQiOe6pueahOeUqOaItwogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7ICAgIAogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIOWMv+WQjeaWueazle+8jOmihOmYsuacieS6uuWQkei/meWQiOe6puWPkemAgeS7peWkquW4gSAqLwogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm93OyAgICAgCiAgICB9Cn0KCmNvbnRyYWN0IFRsenNUb2tlbiBpcyBvd25lZCwgdG9rZW4gewoKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwoKICAgIC8qIOWumuS5ieS4gOS4quS6i+S7tu+8jOW9k+aciei1hOS6p+iiq+WGu+e7k+eahOaXtuWAme+8jOmAmuefpeato+WcqOebkeWQrOS6i+S7tueahOWuouaIt+erryAqLwogICAgZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsKCiAgICAvKiDliJ3lp4vljJblkIjnuqYgKi8KICAgIGZ1bmN0aW9uIFRsenNUb2tlbigKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICApIHRva2VuIChpbml0aWFsU3VwcGx5LCB0b2tlbk5hbWUsIGRlY2ltYWxVbml0cywgdG9rZW5TeW1ib2wpIHt9CgogICAgLyog5Y+R6YCB5Luk54mMICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgIC8vIOajgOafpeWPkemAgeiAheaYr+WQpuaciei2s+Wkn+WkmueahOS7pOeJjAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgLy8g5qOA5p+l5rqi5Ye6CiAgICAgICAgaWYgKGZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pIHRocm93OyAgICAgICAgICAgICAgICAvLyDmo4Dmn6Xlhrvnu5PnirbmgIEKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgIC8vIOS7juWPkemAgeiAheeahOi0puaIt+S4iuWHj+WOu+ebuOW6lOeahOaVsOminQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5LuO5o6l5pS26ICF55qE6LSm5oi35LiK5aKe5Yqg55u45bqU55qE5pWw6aKdCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyDkuovku7bpgJrnn6UKICAgIH0KCgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFtfZnJvbV0pIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGZyb3plbiAgICAgICAgICAgIAogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7ICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seU93bmVyIHsKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgfQp9'.
	

]
