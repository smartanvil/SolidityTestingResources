Class {
	#name : #SRT558c62533def5e9d77a7e555490c0E2889EaCF3A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT558c62533def5e9d77a7e555490c0E2889EaCF3A >> base64 [
	^ ''.
	

]
