Class {
	#name : #SRTd3759eb6394dc1a2fe30d81c86631a0ecd1368e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3759eb6394dc1a2fe30d81c86631a0ecd1368e9 >> base64 [
	^ ''.
	

]
