Class {
	#name : #SRTd784B7429ed0b2D0Ae9624bCFF1DE8D086f13Aa9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd784B7429ed0b2D0Ae9624bCFF1DE8D086f13Aa9 >> base64 [
	^ ''.
	

]
