Class {
	#name : #SRTb7feef5cf872df05f7cec25a2ce82a14cedcc27a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7feef5cf872df05f7cec25a2ce82a14cedcc27a >> base64 [
	^ ''.
	

]
