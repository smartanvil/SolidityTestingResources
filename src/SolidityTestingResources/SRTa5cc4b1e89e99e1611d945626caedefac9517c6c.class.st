Class {
	#name : #SRTa5cc4b1e89e99e1611d945626caedefac9517c6c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa5cc4b1e89e99e1611d945626caedefac9517c6c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovL0Jhc2UgY2xhc3Mgb2YgdG9rZW4tb3duZXIKY29udHJhY3QgT3duYWJsZSB7CglhZGRyZXNzIHB1YmxpYyBvd25lcjsJCQkJCQkJCQkJCQkJCS8vb3duZXIncyBhZGRyZXNzCgoJZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyAKCXsKCQlvd25lciA9IG1zZy5zZW5kZXI7Cgl9CgoJbW9kaWZpZXIgb25seU93bmVyKCkgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgkJXzsKCX0KCS8qCgkqCUZ1bnRpb246IFRyYW5zZmVyIG93bmVyJ3MgYXV0aG9yaXR5IAoJKglUeXBlOlB1YmxpYyBhbmQgb25seU93bmVyCgkqCVBhcmFtZXRlcnM6CgkJCUBuZXdPd25lcjoJYWRkcmVzcyBvZiBuZXdPd25lcgoJKi8KCWZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWN7CgkJaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKCQlvd25lciA9IG5ld093bmVyOwoJCX0KCX0KCQoJZnVuY3Rpb24ga2lsbCgpIG9ubHlPd25lciBwdWJsaWN7CgkJc2VsZmRlc3RydWN0KG93bmVyKTsKCX0KfQoKLy9Bbm5vdW5jZW1lbnQgb2YgYW4gaW50ZXJmYWNlIGZvciByZWNpcGllbnQgYXBwcm92aW5nCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IAoJZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSlwdWJsaWM7IAp9CgoKY29udHJhY3QgTG9hblRva2VuIGlzIE93bmFibGV7CgkKCS8vPT09PT09PT09PT09PT09PT09PXB1YmxpYyB2YXJpYWJsZXMgZGVmaW5pdGlvbiBzdGFydD09PT09PT09PT09PT09PT09PQogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwkJCQkJCQkJCQkJCQkJCS8vTmFtZSBvZiB5b3VyIFRva2VuCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsJCQkJCQkJCQkJCQkJCS8vU3ltYm9sIG9mIHlvdXIgVG9rZW4KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwkJCQkJCQkJCQkJCQkJLy9EZWNpbWFscyBvZiB5b3VyIFRva2VuCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsJCQkJCQkJCQkJCQkJLy9NYXhpbXVtIGFtb3VudCBvZiBUb2tlbiBzdXBwbGllcwoKICAgIC8vZGVmaW5lIGRpY3Rpb25hcmllcyBvZiBiYWxhbmNlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CQkJCQkJCQkvL0Fubm91bmNlIHRoZSBkaWN0aW9uYXJ5IG9mIGFjY291bnQncyBiYWxhbmNlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CQkJLy9Bbm5vdW5jZSB0aGUgZGljdGlvbmFyeSBvZiBhY2NvdW50J3MgYXZhaWxhYmxlIGJhbGFuY2UKCS8vPT09PT09PT09PT09PT09PT09PXB1YmxpYyB2YXJpYWJsZXMgZGVmaW5pdGlvbiBlbmQ9PT09PT09PT09PT09PT09PT0KCgkKCS8vPT09PT09PT09PT09PT09PT09PWV2ZW50cyBkZWZpbml0aW9uIHN0YXJ0PT09PT09PT09PT09PT09PT09ICAgIAogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CS8vRXZlbnQgb24gYmxvY2tjaGFpbiB3aGljaCBub3RpZnkgY2xpZW50CgkvLz09PT09PT09PT09PT09PT09PT1ldmVudHMgZGVmaW5pdGlvbiBlbmQ9PT09PT09PT09PT09PT09PT0KCQoJCgkvLz09PT09PT09PT09PT09PT09PT1Db250cmFjdCBJbml0aWFsaXphdGlvbiBTZXF1ZW5jZSBEZWZpbml0aW9uIHN0YXJ0PT09PT09PT09PT09PT09PT09PQogICAgZnVuY3Rpb24gTG9hblRva2VuICgKICAgICAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICAgICApIHB1YmxpYyB7CiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5ICogMTAgKiogdWludDI1NihkZWNpbWFscyk7ICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5IHdpdGggdGhlIGRlY2ltYWwgYW1vdW50CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7ICAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgbmFtZSA9IHRva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIAogICAgfQoJLy89PT09PT09PT09PT09PT09PT09Q29udHJhY3QgSW5pdGlhbGl6YXRpb24gU2VxdWVuY2UgZGVmaW5pdGlvbiBlbmQ9PT09PT09PT09PT09PT09PT09CgkKCS8vPT09PT09PT09PT09PT09PT09PUNvbnRyYWN0IGJlaGF2aW9yICYgZnVudGlvbnMgZGVmaW5pdGlvbiBzdGFydD09PT09PT09PT09PT09PT09PT0KCQoJLyoKCSoJRnVudGlvbjogVHJhbnNmZXIgZnVudGlvbnMKCSoJVHlwZTpJbnRlcm5hbAoJKglQYXJhbWV0ZXJzOgoJCQlAX2Zyb206CWFkZHJlc3Mgb2Ygc2VuZGVyJ3MgYWNjb3VudAoJCQlAX3RvOglhZGRyZXNzIG9mIHJlY2lwaWVudCdzIGFjY291bnQKCQkJQF92YWx1ZTp0cmFuc2FjdGlvbiBhbW91bnQKCSovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CgkJLy9GYXVsdC10b2xlcmFudCBwcm9jZXNzaW5nCgkJcmVxdWlyZShfdG8gIT0gMHgwKTsJCQkJCQkvLwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CgogICAgICAgIC8vRXhlY3V0ZSB0cmFuc2FjdGlvbgoJCXVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCQkKCQkvL1ZlcmlmeSB0cmFuc2FjdGlvbgogICAgICAgIGFzc2VydChiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b10gPT0gcHJldmlvdXNCYWxhbmNlcyk7CiAgICB9CgkKCQoJLyoKCSoJRnVudGlvbjogVHJhbnNmZXIgdG9rZW5zCgkqCVR5cGU6UHVibGljCgkqCVBhcmFtZXRlcnM6CgkJCUBfdG86CWFkZHJlc3Mgb2YgcmVjaXBpZW50J3MgYWNjb3VudAoJCQlAX3ZhbHVlOnRyYW5zYWN0aW9uIGFtb3VudAoJKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKCQkKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQkKCQoJLyoKCSoJRnVudGlvbjogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcwoJKglUeXBlOlB1YmxpYwoJKglQYXJhbWV0ZXJzOgoJCQlAX2Zyb206CWFkZHJlc3Mgb2Ygc2VuZGVyJ3MgYWNjb3VudAoJCQlAX3RvOglhZGRyZXNzIG9mIHJlY2lwaWVudCdzIGFjY291bnQKCQkJQF92YWx1ZTp0cmFuc2FjdGlvbiBhbW91bnQKCSovCgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIAoJcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAJCQkJCS8vQWxsb3dhbmNlIHZlcmlmaWNhdGlvbgogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCgkvKgoJKglGdW50aW9uOiBBcHByb3ZlIHVzYWJsZSBhbW91bnQgZm9yIGFuIGFjY291bnQKCSoJVHlwZTpQdWJsaWMKCSoJUGFyYW1ldGVyczoKCQkJQF9zcGVuZGVyOglhZGRyZXNzIG9mIHNwZW5kZXIncyBhY2NvdW50CgkJCUBfdmFsdWU6CWFwcHJvdmUgYW1vdW50CgkqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIAogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKCS8qCgkqCUZ1bnRpb246IEFwcHJvdmUgdXNhYmxlIGFtb3VudCBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgdGhlbiBub3RpZnkgdGhlIGNvbnRyYWN0CgkqCVR5cGU6UHVibGljCgkqCVBhcmFtZXRlcnM6CgkJCUBfc3BlbmRlcjoJYWRkcmVzcyBvZiBvdGhlciBhY2NvdW50CgkJCUBfdmFsdWU6CWFwcHJvdmUgYW1vdW50CgkJCUBfZXh0cmFEYXRhOmFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gc2VuZCB0byB0aGUgYXBwcm92ZWQgY29udHJhY3QKCSovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIAogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQogICAgLyoKCSoJRnVudGlvbjogVHJhbnNmZXIgb3duZXIncyBhdXRob3JpdHkgYW5kIGFjY291bnQgYmFsYW5jZQoJKglUeXBlOlB1YmxpYyBhbmQgb25seU93bmVyCgkqCVBhcmFtZXRlcnM6CgkJCUBuZXdPd25lcjoJYWRkcmVzcyBvZiBuZXdPd25lcgoJKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwV2l0aEJhbGFuY2UoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpY3sKCQlpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewoJCSAgICBfdHJhbnNmZXIob3duZXIsbmV3T3duZXIsYmFsYW5jZU9mW293bmVyXSk7CgkJICAgIG93bmVyID0gbmV3T3duZXI7CgkJfQoJfQogICAvLz09PT09PT09PT09PT09PT09PT1Db250cmFjdCBiZWhhdmlvciAmIGZ1bnRpb25zIGRlZmluaXRpb24gZW5kPT09PT09PT09PT09PT09PT09PQp9'.
	

]
