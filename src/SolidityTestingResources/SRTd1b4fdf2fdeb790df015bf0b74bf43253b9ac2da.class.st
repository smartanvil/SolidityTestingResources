Class {
	#name : #SRTd1b4fdf2fdeb790df015bf0b74bf43253b9ac2da,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd1b4fdf2fdeb790df015bf0b74bf43253b9ac2da >> base64 [
	^ ''.
	

]
