Class {
	#name : #SRT0465028899f4a56b13eef1725f95998a1b73a4f3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0465028899f4a56b13eef1725f95998a1b73a4f3 >> base64 [
	^ ''.
	

]
