Class {
	#name : #SRTa415cd56c694bd7402d14560d18bb19a28f77617,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa415cd56c694bd7402d14560d18bb19a28f77617 >> base64 [
	^ ''.
	

]
