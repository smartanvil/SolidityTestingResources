Class {
	#name : #SRTc5bbae50781be1669306b9e001eff57a2957b09d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc5bbae50781be1669306b9e001eff57a2957b09d >> base64 [
	^ ''.
	

]
