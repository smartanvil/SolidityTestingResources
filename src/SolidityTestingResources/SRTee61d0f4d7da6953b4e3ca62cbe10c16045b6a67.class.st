Class {
	#name : #SRTee61d0f4d7da6953b4e3ca62cbe10c16045b6a67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTee61d0f4d7da6953b4e3ca62cbe10c16045b6a67 >> base64 [
	^ ''.
	

]
