Class {
	#name : #SRT8c7d36631768c83feae33ec42a843cc2a2fa1897,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8c7d36631768c83feae33ec42a843cc2a2fa1897 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgewogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcygpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsKfQoKbGlicmFyeSBPcmFjbGl6ZUxpYiB7CiAgIAogICAgc3RydWN0IE9yYWNsaXplRGF0YSB7CiAgICAgICAgT3JhY2xpemVBZGRyUmVzb2x2ZXJJIG9yYWNsaXplQWRkcmVzc1Jlc29sdmVyOwogICAgICAgIE9yYWNsaXplSSBvcmFjbGl6ZTsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIG9yYWNsaXplUmFuZG9tRFNBcmdzOwogICAgICAgIG1hcHBpbmcoYnl0ZXMzMj0+Ym9vbCkgb3JhY2xpemVSYW5kb21Ec1Nlc3Npb25LZXlIYXNoVmVyaWZpZWQ7CiAgICAgICAgc3RyaW5nIG9yYWNsaXplTmV0d29ya05hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gaW5pdGlhbGl6ZU9yYWNsaXplKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYpIGludGVybmFsIHsKICAgICAgIHNlbGYub3JhY2xpemVBZGRyZXNzUmVzb2x2ZXIgPSBvcmFjbGl6ZV9zZXROZXR3b3JrKHNlbGYpOwogICAgICAgaWYgKHNlbGYub3JhY2xpemVBZGRyZXNzUmVzb2x2ZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgIHNlbGYub3JhY2xpemUgPSBPcmFjbGl6ZUkoc2VsZi5vcmFjbGl6ZUFkZHJlc3NSZXNvbHZlci5nZXRBZGRyZXNzKCkpOwogICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZikgcHVibGljIHJldHVybnMoT3JhY2xpemVBZGRyUmVzb2x2ZXJJKSB7CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk+MCkgeyAvL21haW5uZXQKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoc2VsZiwgImV0aF9tYWlubmV0Iik7CiAgICAgICAgICAgIHJldHVybiBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxZDNCMjYzOGE3Y0M5ZjJDQjNEMjk4QTNEQTdhOTBCNjdFNTUwNmVkKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk+MCkgeyAvL3JvcHN0ZW4gdGVzdG5ldAogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZShzZWxmLCAiZXRoX3JvcHN0ZW4zIik7CiAgICAgICAgICAgIHJldHVybiBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHhjMDNBMjYxNUQ1ZWZhZjVGNDlGNjBCN0JCNjU4M2VhZWMyMTJmZGYxKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk+MCkgeyAvL2tvdmFuIHRlc3RuZXQKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoc2VsZiwgImV0aF9rb3ZhbiIpOwogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDE0NjUwMGNmZDM1QjIyRTRBMzkyRmUwYURjMDZEZTFhMTM2OEVkNDgpPjApIHsgLy9yaW5rZWJ5IHRlc3RuZXQKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoc2VsZiwgImV0aF9yaW5rZWJ5Iik7CiAgICAgICAgICAgIHJldHVybiBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk+MCkgeyAvL2V0aGVyZXVtLWJyaWRnZQogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDIwZTEyQTFGODU5QjNGZWFFNUZiMkEwQTMyQzE4RjVhNjU1NTViQkYpPjApIHsgLy9ldGhlci5jYW1wIGlkZQogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpPjApIHsgLy9icm93c2VyLXNvbGlkaXR5CiAgICAgICAgICAgIHJldHVybiBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHg1MWVmYUY0YzhCM0M5QWZCRDVhQjlGNGJiQzgyNzg0QWI2ZWY4ZkFBKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29ya05hbWUoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIF9uZXR3b3JrX25hbWUpIGludGVybmFsIHsKICAgICAgICBzZWxmLm9yYWNsaXplTmV0d29ya05hbWUgPSBfbmV0d29ya19uYW1lOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZU5ldHdvcmtOYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHN0cmluZyBkYXRhc291cmNlKSBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHN0cmluZyBkYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoc2VsZiwgMCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIHB1YmxpYyByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgdWludCBwcmljZSA9IHNlbGYub3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoc2VsZiwgMCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBwdWJsaWMgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHVpbnQgcHJpY2UgPSBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBwdWJsaWMgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShzZWxmLCAwLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeTIudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoc2VsZiwgMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyLCB1aW50IGdhc2xpbWl0KSBwdWJsaWMgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHVpbnQgcHJpY2UgPSBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnF1ZXJ5Ml93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHNlbGYsIDAsIGRhdGFzb3VyY2UsIGFyZ04pOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHVpbnQgcHJpY2UgPSBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgfQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShzZWxmLCAwLCBkYXRhc291cmNlLCBhcmdOLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgfQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9uZXdSYW5kb21EU1F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgX2RlbGF5LCB1aW50IF9uYnl0ZXMsIHVpbnQgX2N1c3RvbUdhc0xpbWl0KSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyKSB7CiAgICAgICAgYXNzZXJ0KChfbmJ5dGVzID4gMCkgJiYgKF9uYnl0ZXMgPD0gMzIpKTsKICAgICAgICBieXRlcyBtZW1vcnkgbmJ5dGVzID0gbmV3IGJ5dGVzKDEpOwogICAgICAgIG5ieXRlc1swXSA9IGJ5dGUoX25ieXRlcyk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHVub25jZSA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25LZXlIYXNoID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBieXRlczMyIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIgPSBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaChzZWxmKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQodW5vbmNlLCAweDIwKSwgeG9yKGJsb2NraGFzaChzdWIobnVtYmVyLCAxKSksIHhvcihjb2luYmFzZSwgdGltZXN0YW1wKSkpCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpCiAgICAgICAgfQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsKICAgICAgICBhcmdzWzBdID0gdW5vbmNlOwogICAgICAgIGFyZ3NbMV0gPSBuYnl0ZXM7CiAgICAgICAgYXJnc1syXSA9IHNlc3Npb25LZXlIYXNoOyAKICAgICAgICBieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9xdWVyeShzZWxmLCBfZGVsYXksICJyYW5kb20iLCBhcmdzLCBfY3VzdG9tR2FzTGltaXQpOwogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQoc2VsZiwgcXVlcnlJZCwga2VjY2FrMjU2KGJ5dGVzOChfZGVsYXkpLCBhcmdzWzFdLCBzaGEyNTYoYXJnc1swXSksIGFyZ3NbMl0pKTsKICAgICAgICByZXR1cm4gcXVlcnlJZDsKICAgIH0KCiAgICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgYnl0ZXMgcHJvb2YsIGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMgcmVzdWx0LCBzdHJpbmcgY29udGV4dF9uYW1lKSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIGNoZWNrb2s7CiAgICAgICAgCiAgICAgICAgLy8gU3RlcCAyOiB0aGUgdW5pcXVlIGtleWhhc2ggaGFzIHRvIG1hdGNoIHdpdGggdGhlIHNoYTI1NiBvZiAoY29udGV4dCBuYW1lICsgcXVlcnlJZCkKICAgICAgICB1aW50IGxlZGdlclByb29mTGVuZ3RoID0gMys2NSsodWludChwcm9vZlszKzY1KzFdKSsyKSszMjsKICAgICAgICBieXRlcyBtZW1vcnkga2V5aGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCwgMzIsIGtleWhhc2gsIDApOwogICAgICAgIGNoZWNrb2sgPSAoa2VjY2FrMjU2KGtleWhhc2gpID09IGtlY2NhazI1NihzaGEyNTYoY29udGV4dF9uYW1lLCBxdWVyeUlkKSkpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzEgPSBuZXcgYnl0ZXModWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOwogICAgICAgIAogICAgICAgIC8vIFN0ZXAgMzogd2UgYXNzdW1lIHNpZzEgaXMgdmFsaWQgKGl0IHdpbGwgYmUgdmVyaWZpZWQgZHVyaW5nIHN0ZXAgNSkgYW5kIHdlIHZlcmlmeSBpZiAncmVzdWx0JyBpcyB0aGUgcHJlZml4IG9mIHNoYTI1NihzaWcxKQogICAgICAgIGNoZWNrb2sgPSBtYXRjaEJ5dGVzMzJQcmVmaXgoc2hhMjU2KHNpZzEpLCByZXN1bHQpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gU3RlcCA0OiBjb21taXRtZW50IG1hdGNoIHZlcmlmaWNhdGlvbiwga2VjY2FrMjU2KGRlbGF5LCBuYnl0ZXMsIHVub25jZSwgc2Vzc2lvbktleUhhc2gpID09IGNvbW1pdG1lbnQgaW4gc3RvcmFnZS4KICAgICAgICAvLyBUaGlzIGlzIHRvIHZlcmlmeSB0aGF0IHRoZSBjb21wdXRlZCBhcmdzIG1hdGNoIHdpdGggdGhlIG9uZXMgc3BlY2lmaWVkIGluIHRoZSBxdWVyeS4KICAgICAgICBieXRlcyBtZW1vcnkgY29tbWl0bWVudFNsaWNlMSA9IG5ldyBieXRlcyg4KzErMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgrMzIsIDgrMSszMiwgY29tbWl0bWVudFNsaWNlMSwgMCk7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25QdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIHVpbnQgc2lnMm9mZnNldCA9IGxlZGdlclByb29mTGVuZ3RoKzMyKyg4KzErMzIpK3NpZzEubGVuZ3RoKzY1OwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldC02NCwgNjQsIHNlc3Npb25QdWJrZXksIDApOwogICAgICAgIAogICAgICAgIGJ5dGVzMzIgc2Vzc2lvblB1YmtleUhhc2ggPSBzaGEyNTYoc2Vzc2lvblB1YmtleSk7CiAgICAgICAgaWYgKHNlbGYub3JhY2xpemVSYW5kb21EU0FyZ3NbcXVlcnlJZF0gPT0ga2VjY2FrMjU2KGNvbW1pdG1lbnRTbGljZTEsIHNlc3Npb25QdWJrZXlIYXNoKSkgewogICAgICAgICAgICBkZWxldGUgc2VsZi5vcmFjbGl6ZVJhbmRvbURTQXJnc1txdWVyeUlkXTsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyBTdGVwIDU6IHZhbGlkaXR5IHZlcmlmaWNhdGlvbiBmb3Igc2lnMSAoa2V5aGFzaCBhbmQgYXJncyBzaWduZWQgd2l0aCB0aGUgc2Vzc2lvbktleSkKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMSA9IG5ldyBieXRlcygzMis4KzErMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyKzgrMSszMiwgdG9zaWduMSwgMCk7CiAgICAgICAgY2hlY2tvayA9IHZlcmlmeVNpZyhzaGEyNTYodG9zaWduMSksIHNpZzEsIHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIHZlcmlmeSBpZiBzZXNzaW9uUHVia2V5SGFzaCB3YXMgdmVyaWZpZWQgYWxyZWFkeSwgaWYgbm90Li4gbGV0J3MgZG8gaXQhCiAgICAgICAgaWYgKHNlbGYub3JhY2xpemVSYW5kb21Ec1Nlc3Npb25LZXlIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID09IGZhbHNlKSB7CiAgICAgICAgICAgIHNlbGYub3JhY2xpemVSYW5kb21Ec1Nlc3Npb25LZXlIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShwcm9vZiwgc2lnMm9mZnNldCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplUmFuZG9tRHNTZXNzaW9uS2V5SGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fc2Vzc2lvbktleVZhbGlkaXR5KGJ5dGVzIHByb29mLCB1aW50IHNpZzJvZmZzZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIAogICAgICAgIC8vIFN0ZXAgNjogdmVyaWZ5IHRoZSBhdHRlc3RhdGlvbiBzaWduYXR1cmUsIEFQUEtFWTEgbXVzdCBzaWduIHRoZSBzZXNzaW9uS2V5IGZyb20gdGhlIGNvcnJlY3QgbGVkZ2VyIGFwcCAoQ09ERUhBU0gpCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzIgPSBuZXcgYnl0ZXModWludChwcm9vZltzaWcyb2Zmc2V0KzFdKSsyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQsIHNpZzIubGVuZ3RoLCBzaWcyLCAwKTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24yID0gbmV3IGJ5dGVzKDErNjUrMzIpOwogICAgICAgIHRvc2lnbjJbMF0gPSAxOyAvL3JvbGUKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjUsIDY1LCB0b3NpZ24yLCAxKTsKICAgICAgICBieXRlcyBtZW1vcnkgQ09ERUhBU0ggPSBoZXgiZmQ5NGZhNzFiYzBiYTEwZDM5ZDQ2NGQwZDhmNDY1ZWZlZWYwYTI3NjRlMzg4N2ZjYzlkZjQxZGVkMjBmNTA1YyI7CiAgICAgICAgY29weUJ5dGVzKENPREVIQVNILCAwLCAzMiwgdG9zaWduMiwgMSs2NSk7CiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjIpLCBzaWcyLCBhcHBrZXkxX3B1YmtleSk7CiAgICAgICAgCiAgICAgICAgaWYgKHNpZ29rID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gU3RlcCA3OiB2ZXJpZnkgdGhlIEFQUEtFWTEgcHJvdmVuYW5jZSAobXVzdCBiZSBzaWduZWQgYnkgTGVkZ2VyKQogICAgICAgIGJ5dGVzIG1lbW9yeSBMRURHRVJLRVkgPSBoZXgiN2ZiOTU2NDY5YzVjOWI4OTg0MGQ1NWI0MzUzN2U2NmE5OGRkNDgxMWVhMGEyNzIyNDI3MmMyZTU2MjI5MTFlODUzN2EyZjhlODZhNDZiYWVjODI4NjRlOThkZDAxZTljY2MyZjhiYzVkZmM5Y2JlNWE5MWEyOTA0OThkZDk2ZTQiOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24zID0gbmV3IGJ5dGVzKDErNjUpOwogICAgICAgIHRvc2lnbjNbMF0gPSAweEZFOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMywgNjUsIHRvc2lnbjMsIDEpOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWczID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbMys2NSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7CiAgICAgICAgCiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjMpLCBzaWczLCBMRURHRVJLRVkpOwogICAgICAgIAogICAgICAgIHJldHVybiBzaWdvazsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fcmV0dXJuQ29kZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBieXRlczMyIF9xdWVyeUlkLCBzdHJpbmcgX3Jlc3VsdCwgYnl0ZXMgX3Byb29mKSBpbnRlcm5hbCByZXR1cm5zICh1aW50OCkgewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSB7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgICBib29sIHByb29mVmVyaWZpZWQgPSBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihzZWxmLCBfcHJvb2YsIF9xdWVyeUlkLCBieXRlcyhfcmVzdWx0KSwgb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoc2VsZikpOwogICAgICAgIGlmIChwcm9vZlZlcmlmaWVkID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzMzIgY29tbWl0bWVudCkgaW50ZXJuYWwgewogICAgICAgIHNlbGYub3JhY2xpemVSYW5kb21EU0FyZ3NbcXVlcnlJZF0gPSBjb21taXRtZW50OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBtYXRjaEJ5dGVzMzJQcmVmaXgoYnl0ZXMzMiBjb250ZW50LCBieXRlcyBwcmVmaXgpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgbWF0Y2hfID0gdHJ1ZTsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPHByZWZpeC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY29udGVudFtpXSAhPSBwcmVmaXhbaV0pIHsKICAgICAgICAgICAgICAgIG1hdGNoXyA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBtYXRjaF87CiAgICB9CgogICAgZnVuY3Rpb24gdmVyaWZ5U2lnKGJ5dGVzMzIgdG9zaWduaCwgYnl0ZXMgZGVyc2lnLCBieXRlcyBwdWJrZXkpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIGFkZHJlc3Mgc2lnbmVyOwogICAgICAgIAogICAgICAgIGJ5dGVzMzIgc2lncjsKICAgICAgICBieXRlczMyIHNpZ3M7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3JfID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICB1aW50IG9mZnNldCA9IDQrKHVpbnQoZGVyc2lnWzNdKSAtIDB4MjApOwogICAgICAgIHNpZ3JfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0LCAzMiwgc2lncl8sIDApOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdzXyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgb2Zmc2V0ICs9IDMyICsgMjsKICAgICAgICBzaWdzXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCsodWludChkZXJzaWdbb2Zmc2V0LTFdKSAtIDB4MjApLCAzMiwgc2lnc18sIDApOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHNpZ3IgOj0gbWxvYWQoYWRkKHNpZ3JfLCAzMikpCiAgICAgICAgICAgIHNpZ3MgOj0gbWxvYWQoYWRkKHNpZ3NfLCAzMikpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIAogICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyNywgc2lnciwgc2lncyk7CiAgICAgICAgaWYgKGFkZHJlc3Moa2VjY2FrMjU2KHB1YmtleSkpID09IHNpZ25lcikgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjgsIHNpZ3IsIHNpZ3MpOwogICAgICAgICAgICByZXR1cm4gKGFkZHJlc3Moa2VjY2FrMjU2KHB1YmtleSkpID09IHNpZ25lcik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUKICAgIGZ1bmN0aW9uIHNhZmVyX2VjcmVjb3ZlcihieXRlczMyIGhhc2gsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQKICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzCiAgICAgICAgLy8gd3JpdGVzIGFyZSBtZW1vcnkgZXh0ZW5zaW9ucyksIGJ1dCBkb24ndCB1cGRhdGUgdGhlIG9mZnNldCBzbwogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcgogICAgICAgIC8vIHRoaXMgY29udGV4dC4KCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcwogICAgICAgIGJvb2wgcmV0OwogICAgICAgIGFkZHJlc3MgYWRkcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgc2l6ZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgNjQpLCByKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykKCiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiByZXVzZSB0aGUgcmVxdWVzdCBtZW1vcnkgYmVjYXVzZSB3ZSBkZWFsIHdpdGgKICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpCiAgICAgICAgICAgIGFkZHIgOj0gbWxvYWQoc2l6ZSkKICAgICAgICB9CiAgCiAgICAgICAgcmV0dXJuIChyZXQsIGFkZHIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9jYkFkZHJlc3MoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5jYkFkZHJlc3MoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRQcm9vZihPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBieXRlIHByb29mUCkgcHVibGljIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDdXN0b21HYXNQcmljZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IGdhc1ByaWNlKSBwdWJsaWMgewogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnNldEN1c3RvbUdhc1ByaWNlKGdhc1ByaWNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDb25maWcoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiBjb25maWcpIHB1YmxpYyB7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUuc2V0Q29uZmlnKGNvbmZpZyk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29kZVNpemUoYWRkcmVzcyBfYWRkcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBfc2l6ZSkgewogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgX3NpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaChPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyKXsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICB1aW50IGFycmxlbiA9IGFyci5sZW5ndGg7CgogICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICBieXRlc1tdIG1lbW9yeSBlbGVtQXJyYXkgPSBuZXcgYnl0ZXNbXShhcnJsZW4pOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGVsZW1BcnJheVtpXS5sZW5ndGggKyAoZWxlbUFycmF5W2ldLmxlbmd0aCAtIDEpLzIzICsgMzsgLy8rMyBhY2NvdW50cyBmb3IgcGFpcmVkIGlkZW50aWZpZXIgdHlwZXMKICAgICAgICB9CiAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgIHVpbnQgY2JvcmxlbiA9IGFycmxlbiArIDB4ODA7CiAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgd2hpbGUgKGJ5dGUoY2JvcmxlbikubGVuZ3RoID4gY3RyKSB7CiAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICBjdHIrKzsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgaWYgKHggJSAyMyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgIHVpbnQgbGN0ciA9IGN0cjsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGVsZW1BcnJheVtpXVt4XTsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc1tjdHJdID0gMHhGRjsKICAgICAgICAgICAgY3RyKys7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChieXRlcykgewogICAgICAgICAgICB1aW50IGFycmxlbiA9IGFyci5sZW5ndGg7CgogICAgICAgICAgICAvLyBnZXQgY29ycmVjdCBjYm9yIG91dHB1dCBsZW5ndGgKICAgICAgICAgICAgdWludCBvdXRwdXRsZW4gPSAwOwogICAgICAgICAgICBieXRlc1tdIG1lbW9yeSBlbGVtQXJyYXkgPSBuZXcgYnl0ZXNbXShhcnJsZW4pOwogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICAgICAgZWxlbUFycmF5W2ldID0gKGJ5dGVzKGFycltpXSkpOwogICAgICAgICAgICAgICAgb3V0cHV0bGVuICs9IGVsZW1BcnJheVtpXS5sZW5ndGggKyAoZWxlbUFycmF5W2ldLmxlbmd0aCAtIDEpLzIzICsgMzsgLy8rMyBhY2NvdW50cyBmb3IgcGFpcmVkIGlkZW50aWZpZXIgdHlwZXMKICAgICAgICAgICAgfQogICAgICAgICAgICB1aW50IGN0ciA9IDA7CiAgICAgICAgICAgIHVpbnQgY2JvcmxlbiA9IGFycmxlbiArIDB4ODA7CiAgICAgICAgICAgIG91dHB1dGxlbiArPSBieXRlKGNib3JsZW4pLmxlbmd0aDsKICAgICAgICAgICAgYnl0ZXMgbWVtb3J5IHJlcyA9IG5ldyBieXRlcyhvdXRwdXRsZW4pOwoKICAgICAgICAgICAgd2hpbGUgKGJ5dGUoY2JvcmxlbikubGVuZ3RoID4gY3RyKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoY2JvcmxlbilbY3RyXTsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweDVGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgeCA9IDA7IHggPCBlbGVtQXJyYXlbaV0ubGVuZ3RoOyB4KyspIHsKICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIGEgYnVnIHdpdGggbGFyZ2VyIHN0cmluZ3MsIHRoaXMgbWF5IGJlIHRoZSBjdWxwcml0CiAgICAgICAgICAgICAgICAgICAgaWYgKHggJSAyMyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgZWxlbWNib3JsZW4gPSBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geCA+PSAyNCA/IDIzIDogZWxlbUFycmF5W2ldLmxlbmd0aCAtIHg7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1jYm9ybGVuICs9IDB4NDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgbGN0ciA9IGN0cjsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ5dGUoZWxlbWNib3JsZW4pLmxlbmd0aCA+IGN0ciAtIGxjdHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShlbGVtY2JvcmxlbilbY3RyIC0gbGN0cl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGVsZW1BcnJheVtpXVt4XTsKICAgICAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHhGRjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgfQoKICAgIGZ1bmN0aW9uIGNvcHlCeXRlcyhieXRlcyBmcm9tLCB1aW50IGZyb21PZmZzZXQsIHVpbnQgbGVuZ3RoLCBieXRlcyB0bywgdWludCB0b09mZnNldCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChieXRlcykgewogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gbGVuZ3RoICsgdG9PZmZzZXQ7CgogICAgICAgIGFzc2VydCAodG8ubGVuZ3RoID49IG1pbkxlbmd0aCk7CgogICAgICAgIC8vIE5PVEU6IHRoZSBvZmZzZXQgMzIgaXMgYWRkZWQgdG8gc2tpcCB0aGUgYHNpemVgIGZpZWxkIG9mIGJvdGggYnl0ZXMgdmFyaWFibGVzCiAgICAgICAgdWludCBpID0gMzIgKyBmcm9tT2Zmc2V0OwogICAgICAgIHVpbnQgaiA9IDMyICsgdG9PZmZzZXQ7CgogICAgICAgIHdoaWxlIChpIDwgKDMyICsgZnJvbU9mZnNldCArIGxlbmd0aCkpIHsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgbGV0IHRtcCA6PSBtbG9hZChhZGQoZnJvbSwgaSkpCiAgICAgICAgICAgICAgICBtc3RvcmUoYWRkKHRvLCBqKSwgdG1wKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgKz0gMzI7CiAgICAgICAgICAgIGogKz0gMzI7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdG87CiAgICB9Cn0KCmxpYnJhcnkgTWF0aCB7CiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KfQoKY29udHJhY3QgUmV3YXJkRGlzdHJpYnV0YWJsZSB7CiAgICBldmVudCBUb2tlbnNSZXdhcmRlZChhZGRyZXNzIGluZGV4ZWQgcGxheWVyLCBhZGRyZXNzIHJld2FyZFRva2VuLCB1aW50IHJld2FyZHMsIGFkZHJlc3MgcmVxdWVzdGVyLCB1aW50IGdhbWVJZCwgdWludCBibG9jayk7CiAgICBldmVudCBSZWZlcnJhbFJld2FyZGVkKGFkZHJlc3MgaW5kZXhlZCByZWZlcnJlciwgYWRkcmVzcyBpbmRleGVkIHBsYXllciwgYWRkcmVzcyByZXdhcmRUb2tlbiwgdWludCByZXdhcmRzLCB1aW50IGdhbWVJZCwgdWludCBibG9jayk7CiAgICBldmVudCBSZWZlcnJhbFJlZ2lzdGVyZWQoYWRkcmVzcyBpbmRleGVkIHBsYXllciwgYWRkcmVzcyBpbmRleGVkIHJlZmVycmVyKTsKCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIGFuZCB0cmFuc2ZlcnMgdGhlIHJld2FyZHMgdG8gdGhlIHBsYXllci4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyUmV3YXJkcyhhZGRyZXNzIHBsYXllciwgdWludCBlbnRyeUFtb3VudCwgdWludCBnYW1lSWQpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zLCBhY3Jvc3MgYWxsIGFwcHJvdmFscy4KICAgIGZ1bmN0aW9uIGdldFRvdGFsVG9rZW5zKGFkZHJlc3MgdG9rZW5BZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KTsKCiAgICAvLy8gQGRldiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2Ygc3VwcG9ydGVkIHJld2FyZCB0b2tlbiBjb250cmFjdHMuCiAgICBmdW5jdGlvbiBnZXRSZXdhcmRUb2tlbkNvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCk7CgogICAgLy8vIEBkZXYgR2V0cyB0aGUgdG90YWwgbnVtYmVyIG9mIGFwcHJvdmVycy4KICAgIGZ1bmN0aW9uIGdldFRvdGFsQXBwcm92ZXJzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCk7CgogICAgLy8vIEBkZXYgR2V0cyB0aGUgcmV3YXJkIHJhdGUgaW5jbHVzaXZlIG9mIHJlZmVycmFsIGJvbnVzLgogICAgZnVuY3Rpb24gZ2V0UmV3YXJkUmF0ZShhZGRyZXNzIHBsYXllciwgYWRkcmVzcyB0b2tlbkFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpOwoKICAgIC8vLyBAZGV2IEFkZHMgYSByZXF1ZXN0ZXIgdG8gdGhlIHdoaXRlbGlzdC4KICAgIC8vLyBAcGFyYW0gcmVxdWVzdGVyIFRoZSBhZGRyZXNzIG9mIGEgY29udHJhY3Qgd2hpY2ggd2lsbCByZXF1ZXN0IHJld2FyZCB0cmFuc2ZlcnMKICAgIGZ1bmN0aW9uIGFkZFJlcXVlc3RlcihhZGRyZXNzIHJlcXVlc3RlcikgcHVibGljOwoKICAgIC8vLyBAZGV2IFJlbW92ZXMgYSByZXF1ZXN0ZXIgZnJvbSB0aGUgd2hpdGVsaXN0LgogICAgLy8vIEBwYXJhbSByZXF1ZXN0ZXIgVGhlIGFkZHJlc3Mgb2YgYSBjb250cmFjdCB3aGljaCB3aWxsIHJlcXVlc3QgcmV3YXJkIHRyYW5zZmVycwogICAgZnVuY3Rpb24gcmVtb3ZlUmVxdWVzdGVyKGFkZHJlc3MgcmVxdWVzdGVyKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgQWRkcyBhIGFwcHJvdmVyIGFkZHJlc3MuICBBcHByb3ZhbCBoYXBwZW5zIHdpdGggdGhlIHRva2VuIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBhcHByb3ZlciBUaGUgYXBwcm92ZXIgYWRkcmVzcyB0byBhZGQgdG8gdGhlIHBvb2wuCiAgICBmdW5jdGlvbiBhZGRBcHByb3ZlcihhZGRyZXNzIGFwcHJvdmVyKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgUmVtb3ZlcyBhbiBhcHByb3ZlciBhZGRyZXNzLiAKICAgIC8vLyBAcGFyYW0gYXBwcm92ZXIgVGhlIGFwcHJvdmVyIGFkZHJlc3MgdG8gcmVtb3ZlIGZyb20gdGhlIHBvb2wuCiAgICBmdW5jdGlvbiByZW1vdmVBcHByb3ZlcihhZGRyZXNzIGFwcHJvdmVyKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgVXBkYXRlcyB0aGUgcmV3YXJkIHJhdGUKICAgIGZ1bmN0aW9uIHVwZGF0ZVJld2FyZFJhdGUoYWRkcmVzcyB0b2tlbkFkZHJlc3MsIHVpbnQgbmV3UmV3YXJkUmF0ZSkgcHVibGljOwoKICAgIC8vLyBAZGV2IFVwZGF0ZXMgdGhlIHRva2VuIGFkZHJlc3Mgb2YgdGhlIHBheW1lbnQgdHlwZS4KICAgIGZ1bmN0aW9uIGFkZFJld2FyZFRva2VuKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCB1aW50IG5ld1Jld2FyZFJhdGUpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBVcGRhdGVzIHRoZSB0b2tlbiBhZGRyZXNzIG9mIHRoZSBwYXltZW50IHR5cGUuCiAgICBmdW5jdGlvbiByZW1vdmVSZXdhcmRUb2tlbihhZGRyZXNzIHRva2VuQWRkcmVzcykgcHVibGljOwoKICAgIC8vLyBAZGV2IFVwZGF0ZXMgdGhlIHJlZmVycmFsIGJvbnVzIHJhdGUKICAgIGZ1bmN0aW9uIHVwZGF0ZVJlZmVycmFsQm9udXNSYXRlKHVpbnQgbmV3UmVmZXJyYWxCb251c1JhdGUpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBSZWdpc3RlcnMgdGhlIHBsYXllciB3aXRoIHRoZSBnaXZlbiByZWZlcnJhbCBjb2RlCiAgICAvLy8gQHBhcmFtIHBsYXllciBUaGUgYWRkcmVzcyBvZiB0aGUgcGxheWVyCiAgICAvLy8gQHBhcmFtIHJlZmVycmVyIFRoZSBhZGRyZXNzIG9mIHRoZSByZWZlcnJlcgogICAgZnVuY3Rpb24gcmVnaXN0ZXJSZWZlcnJhbChhZGRyZXNzIHBsYXllciwgYWRkcmVzcyByZWZlcnJlcikgcHVibGljOwoKICAgIC8vLyBAZGV2IFRyYW5zZmVycyBhbnkgdG9rZW5zIHRvIHRoZSBvd25lcgogICAgZnVuY3Rpb24gZGVzdHJveVJld2FyZHMoKSBwdWJsaWM7Cn0KCmNvbnRyYWN0IFByaWNlYWJsZSB7CiAgICBtb2RpZmllciBjb3N0c0V4YWN0bHkodWludCBwcmljZSkgewogICAgICAgIGlmIChtc2cudmFsdWUgPT0gcHJpY2UpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9CiAgICB9CgogICAgbW9kaWZpZXIgY29zdHModWludCBwcmljZSkgewogICAgICAgIGlmIChtc2cudmFsdWUgPj0gcHJpY2UpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9CiAgICB9Cn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgQ2FzY2FkaW5nIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgc3RydWN0IENhc2NhZGUgewogICAgICAgIGFkZHJlc3MgY2FzY2FkZTsKICAgICAgICB1aW50MTYgcGVyY2VudGFnZTsKICAgIH0KCiAgICB1aW50IHB1YmxpYyB0b3RhbENhc2NhZGluZ1BlcmNlbnRhZ2U7CiAgICBDYXNjYWRlW10gcHVibGljIGNhc2NhZGVzOyAgICAKCiAgICAvLy8gQGRldiBBZGRzIGFuIGFkZHJlc3MgYW5kIGFzc29jaWF0ZWQgcGVyY2VudGFnZSBmb3IgdHJhbnNmZXIuCiAgICAvLy8gQHBhcmFtIG5ld0FkZHJlc3MgVGhlIG5ldyBhZGRyZXNzCiAgICBmdW5jdGlvbiBhZGRDYXNjYWRlKGFkZHJlc3MgbmV3QWRkcmVzcywgdWludCBuZXdQZXJjZW50YWdlKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBjYXNjYWRlcy5wdXNoKENhc2NhZGUobmV3QWRkcmVzcywgdWludDE2KG5ld1BlcmNlbnRhZ2UpKSk7CiAgICAgICAgdG90YWxDYXNjYWRpbmdQZXJjZW50YWdlICs9IG5ld1BlcmNlbnRhZ2U7CiAgICB9CgogICAgLy8vIEBkZXYgRGVsZXRlcyBhbiBhZGRyZXNzIGFuZCBhc3NvY2lhdGVkIHBlcmNlbnRhZ2UgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgLy8vIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGNhc2NhZGUgdG8gYmUgZGVsZXRlZC4KICAgIGZ1bmN0aW9uIGRlbGV0ZUNhc2NhZGUodWludCBpbmRleCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShpbmRleCA8IGNhc2NhZGVzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgdG90YWxDYXNjYWRpbmdQZXJjZW50YWdlIC09IGNhc2NhZGVzW2luZGV4XS5wZXJjZW50YWdlOwoKICAgICAgICBjYXNjYWRlc1tpbmRleF0gPSBjYXNjYWRlc1tjYXNjYWRlcy5sZW5ndGggLSAxXTsKICAgICAgICBkZWxldGUgY2FzY2FkZXNbY2FzY2FkZXMubGVuZ3RoIC0gMV07CiAgICAgICAgY2FzY2FkZXMubGVuZ3RoLS07CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRoZSBjYXNjYWRlIHZhbHVlcyB0byB0aGUgYXNzaWduZWQgYWRkcmVzc2VzCiAgICAvLy8gQHBhcmFtIHRvdGFsSmFja3BvdCB0aGUgdG90YWwgamFja3BvdCBhbW91bnQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyQ2FzY2FkZXModWludCB0b3RhbEphY2twb3QpIGludGVybmFsIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBjYXNjYWRlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB1aW50IGNhc2NhZGVUb3RhbCA9IGdldENhc2NhZGVUb3RhbChjYXNjYWRlc1tpXS5wZXJjZW50YWdlLCB0b3RhbEphY2twb3QpOwoKICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHNhZmUgZnJvbSByZS1lbnRyeSBnaXZlbiBnYXMgbGltaXQgb2YgMjMwMC4KICAgICAgICAgICAgY2FzY2FkZXNbaV0uY2FzY2FkZS50cmFuc2ZlcihjYXNjYWRlVG90YWwpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBHZXRzIHRoZSBjYXNjYWRlIHRvdGFsIGZvciB0aGUgZ2l2ZW4gcGVyY2VudGFnZQogICAgLy8vIEBwYXJhbSBwZXJjZW50YWdlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSB0b3RhbCBwb3QgYXMgYSB1aW50CiAgICAvLy8gQHBhcmFtIHRvdGFsSmFja3BvdCB0aGUgdG90YWwgamFja3BvdCBhbW91bnQKICAgIC8vLyBAcmV0dXJuIHRoZSB0b3RhbCBhbW91bnQgdGhlIHBlcmNlbnRhZ2UgcmVwcmVzZW50cwogICAgZnVuY3Rpb24gZ2V0Q2FzY2FkZVRvdGFsKHVpbnQgcGVyY2VudGFnZSwgdWludCB0b3RhbEphY2twb3QpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsSmFja3BvdC5tdWwocGVyY2VudGFnZSkuZGl2KDEwMCk7ICAgICAgICAKICAgIH0KICAgCiAgICAvLy8gQSB1dGlsaXR5IG1ldGhvZCB0byBjYWxjdWxhdGUgdGhlIHRvdGFsIGFmdGVyIGNhc2NhZGVzIGhhdmUgYmVlbiBhcHBsaWVkLgogICAgLy8vIEBwYXJhbSB0b3RhbEphY2twb3QgdGhlIHRvdGFsIGphY2twb3QgYW1vdW50CiAgICAvLy8gQHJldHVybiB0aGUgdG90YWwgYW1vdW50IGFmdGVyIHRoZSBjYXNjYWRlcyBoYXZlIGJlZW4gYXBwbGllZAogICAgZnVuY3Rpb24gZ2V0VG90YWxBZnRlckNhc2NhZGVzKHVpbnQgdG90YWxKYWNrcG90KSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjYXNjYWRlVG90YWwgPSBnZXRDYXNjYWRlVG90YWwodG90YWxDYXNjYWRpbmdQZXJjZW50YWdlLCB0b3RhbEphY2twb3QpOwogICAgICAgIHJldHVybiB0b3RhbEphY2twb3Quc3ViKGNhc2NhZGVUb3RhbCk7CiAgICB9Cn0KCmNvbnRyYWN0IFNhZmVXaW5uZXIgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHBlbmRpbmdQYXltZW50czsKICAgIGFkZHJlc3NbXSBwdWJsaWMgcGVuZGluZ1dpbm5lcnM7CiAgICB1aW50IHB1YmxpYyB0b3RhbFBlbmRpbmdQYXltZW50czsKCiAgICBldmVudCBXaW5uZXJXaXRoZHJldyhhZGRyZXNzIGluZGV4ZWQgd2lubmVyLCB1aW50IGFtb3VudCwgdWludCBibG9jayk7CgogICAgLy8vIEBkZXYgcmVjb3JkcyB0aGUgd2lubmVyIHNvIHRoYXQgYSB0cmFuc2ZlciBvciB3aXRoZHJhdyBjYW4gb2NjdXIgYXQgCiAgICAvLy8gYSBsYXRlciBkYXRlLgogICAgZnVuY3Rpb24gYWRkUGVuZGluZ1dpbm5lcihhZGRyZXNzIHdpbm5lciwgdWludCBhbW91bnQpIGludGVybmFsIHsKICAgICAgICBwZW5kaW5nUGF5bWVudHNbd2lubmVyXSA9IHBlbmRpbmdQYXltZW50c1t3aW5uZXJdLmFkZChhbW91bnQpOwogICAgICAgIHRvdGFsUGVuZGluZ1BheW1lbnRzID0gdG90YWxQZW5kaW5nUGF5bWVudHMuYWRkKGFtb3VudCk7CiAgICAgICAgcGVuZGluZ1dpbm5lcnMucHVzaCh3aW5uZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IGFsbG93cyBhIHdpbm5lciB0byB3aXRoZHJhdyB0aGVpciByaWdodGZ1bCBqYWNrcG90LgogICAgZnVuY3Rpb24gd2l0aGRyYXdXaW5uaW5ncygpIHB1YmxpYyB7CiAgICAgICAgYWRkcmVzcyB3aW5uZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHVpbnQgcGF5bWVudCA9IHBlbmRpbmdQYXltZW50c1t3aW5uZXJdOwoKICAgICAgICByZXF1aXJlKHBheW1lbnQgPiAwKTsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBwYXltZW50KTsKCiAgICAgICAgdHJhbnNmZXJQZW5kaW5nKHdpbm5lciwgcGF5bWVudCk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0cmllcyBhbGwgcGVuZGluZyB3aW5uZXJzCiAgICBmdW5jdGlvbiByZXRyeVdpbm5lcnMoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBwZW5kaW5nV2lubmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXRyeVdpbm5lcihpKTsKICAgICAgICB9CgogICAgICAgIHBlbmRpbmdXaW5uZXJzLmxlbmd0aCA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gcmV0cnlXaW5uZXIodWludCBpbmRleCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgYWRkcmVzcyB3aW5uZXIgPSBwZW5kaW5nV2lubmVyc1tpbmRleF07CiAgICAgICAgdWludCBwYXltZW50ID0gcGVuZGluZ1BheW1lbnRzW3dpbm5lcl07CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gcGF5bWVudCk7CiAgICAgICAgaWYgKHBheW1lbnQgIT0gMCkgewogICAgICAgICAgICB0cmFuc2ZlclBlbmRpbmcod2lubmVyLCBwYXltZW50KTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJQZW5kaW5nKGFkZHJlc3Mgd2lubmVyLCB1aW50MjU2IHBheW1lbnQpIGludGVybmFsIHsKICAgICAgICB0b3RhbFBlbmRpbmdQYXltZW50cyA9IHRvdGFsUGVuZGluZ1BheW1lbnRzLnN1YihwYXltZW50KTsKICAgICAgICBwZW5kaW5nUGF5bWVudHNbd2lubmVyXSA9IDA7CiAgICAgICAgd2lubmVyLnRyYW5zZmVyKHBheW1lbnQpOyAgICAgICAgCiAgICAgICAgV2lubmVyV2l0aGRyZXcod2lubmVyLCBwYXltZW50LCBibG9jay5udW1iZXIpOwogICAgfQp9Cgpjb250cmFjdCBSYWZmbGUgaXMgT3duYWJsZSwgUHJpY2VhYmxlLCBTYWZlV2lubmVyLCBDYXNjYWRpbmcgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIHVzaW5nIE9yYWNsaXplTGliIGZvciBPcmFjbGl6ZUxpYi5PcmFjbGl6ZURhdGE7CgogIGVudW0gUmFmZmxlU3RhdGUgeyBBY3RpdmUsIEluQWN0aXZlLCBQZW5kaW5nSW5BY3RpdmUgfQogIGVudW0gUmFuZG9tU291cmNlIHsgUmFuZG9tRFMsIFFybmcgfQoKICBzdHJ1Y3QgSmFja3BvdCB7CiAgICB1aW50IGFic29sdXRlVG90YWw7CiAgICB1aW50IGZlZVRvdGFsOwogICAgdWludCBjYXNjYWRlVG90YWw7CiAgICB1aW50IHdpbm5lclRvdGFsOwogIH0KCiAgc3RydWN0IFRpY2tldEhvbGRlciB7CiAgICBhZGRyZXNzIHB1cmNoYXNlcjsKICAgIHVpbnQxNiBjb3VudDsKICAgIHVpbnQ4MCBydW5uaW5nVG90YWw7CiAgfQogIAogIC8vIHB1YmxpYwogIFJhZmZsZVN0YXRlIHB1YmxpYyByYWZmbGVTdGF0ZTsKICBSYW5kb21Tb3VyY2UgcHVibGljIHJhbmRvbVNvdXJjZTsKICB1aW50IHB1YmxpYyB0aWNrZXRQcmljZTsKICB1aW50IHB1YmxpYyBnYW1lSWQ7CiAgdWludCBwdWJsaWMgZmVlOwogIAoKICAvLyBpbnRlcm5hbAogIFRpY2tldEhvbGRlcltdIGludGVybmFsIHRpY2tldEhvbGRlcnM7CiAgdWludCBpbnRlcm5hbCByYW5kb21CeXRlczsKICB1aW50IGludGVybmFsIHJhbmRvbVF1ZXJpZWQ7CiAgdWludCBpbnRlcm5hbCBjYWxsYmFja0dhczsKICBSZXdhcmREaXN0cmlidXRhYmxlIGludGVybmFsIHJld2FyZERpc3RyaWJ1dG9yOwoKICAvLyBvcmFjbGl6ZQogIE9yYWNsaXplTGliLk9yYWNsaXplRGF0YSBvcmFjbGl6ZURhdGE7CgogIC8vIGV2ZW50cwogIGV2ZW50IFRpY2tldFB1cmNoYXNlZChhZGRyZXNzIGluZGV4ZWQgdGlja2V0UHVyY2hhc2VyLCB1aW50IGluZGV4ZWQgaWQsIHVpbnQgbnVtVGlja2V0cywgdWludCB0b3RhbENvc3QsIHVpbnQgYmxvY2spOwogIGV2ZW50IFdpbm5lclNlbGVjdGVkKGFkZHJlc3MgaW5kZXhlZCB3aW5uZXIsIHVpbnQgaW5kZXhlZCBpZCwgdWludCB3aW5uaW5ncywgdWludCBibG9jayk7CiAgZXZlbnQgUmFuZG9tUHJvb2ZGYWlsZWQoYnl0ZXMzMiBxdWVyeUlkLCB1aW50IGluZGV4ZWQgaWQsIHVpbnQgYmxvY2spOwoKICBmdW5jdGlvbiBSYWZmbGUodWludCBfdGlja2V0UHJpY2UsIGFkZHJlc3MgX3Jld2FyZERpc3RyaWJ1dG9yKSBwdWJsaWMgewogICAgdGlja2V0UHJpY2UgPSBfdGlja2V0UHJpY2U7CiAgICByYWZmbGVTdGF0ZSA9IFJhZmZsZVN0YXRlLkFjdGl2ZTsKICAgIGNhbGxiYWNrR2FzID0gMjAwMDAwOwogICAgcmFuZG9tQnl0ZXMgPSA4OwogICAgZmVlID0gNSBmaW5uZXk7CiAgICByZXdhcmREaXN0cmlidXRvciA9IFJld2FyZERpc3RyaWJ1dGFibGUoX3Jld2FyZERpc3RyaWJ1dG9yKTsKICAgIG9yYWNsaXplRGF0YS5pbml0aWFsaXplT3JhY2xpemUoKTsKICAgIHJhbmRvbVNvdXJjZSA9IFJhbmRvbVNvdXJjZS5Rcm5nOwogICAgcmVzZXRSYWZmbGUoKTsKICB9CgogIC8vLyBAZGV2IFJldHVybnMgd2hldGhlciB0aGUgZ2FtZSBpcyBhY3RpdmUuCiAgZnVuY3Rpb24gaXNBY3RpdmUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHJhZmZsZVN0YXRlID09IFJhZmZsZVN0YXRlLkFjdGl2ZSB8fCByYWZmbGVTdGF0ZSA9PSBSYWZmbGVTdGF0ZS5QZW5kaW5nSW5BY3RpdmU7CiAgfQogIAogIC8vLyBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uIHRvIHB1cmNoYXNlIGEgc2luZ2xlIHRpY2tldC4KICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgfQogICAKICAvLy8gQGRldiBHZXRzIHRoZSBwcm9qZWN0ZWQgamFja3BvdC4KICAvLy8gQHJldHVybiBUaGUgcHJvamVjdGVkIGphY2twb3QgYW1vdW50LgogIGZ1bmN0aW9uIGdldFByb2plY3RlZEphY2twb3QoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgdWludCBqYWNrcG90ID0gZ2V0QWJzb2x1dGVQcm9qZWN0ZWRKYWNrcG90KCk7CiAgICBKYWNrcG90IG1lbW9yeSB0b3RhbHMgPSBnZXRKYWNrcG90VG90YWxzKGphY2twb3QpOwogICAgcmV0dXJuIHRvdGFscy53aW5uZXJUb3RhbDsKICB9CgogIC8vLyBAZGV2IEdldHMgdGhlIGFjdHVhbCBqYWNrcG90CiAgLy8vIEByZXR1cm4gVGhlIGFjdHVhbCBqYWNrcG90IGFtb3VudC4KICBmdW5jdGlvbiBnZXRKYWNrcG90KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgamFja3BvdCA9IGdldEFic29sdXRlSmFja3BvdCgpOwogICAgSmFja3BvdCBtZW1vcnkgdG90YWxzID0gZ2V0SmFja3BvdFRvdGFscyhqYWNrcG90KTsKICAgIHJldHVybiB0b3RhbHMud2lubmVyVG90YWw7CiAgfQoKICAvLy8gQGRldiBHZXRzIHRoZSB0aWNrZXQgaG9sZGVyIGNvdW50CiAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIHRpY2tldCBob2xkZXIgY291bnQKICBmdW5jdGlvbiBnZXRUaWNrZXRIb2xkZXJDb3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gZ2V0VG90YWxUaWNrZXRzKCk7CiAgfQoKICAvLy8gQGRldiBVcGRhdGVzIHRoZSB0aWNrZXQgcHJpY2UuCiAgZnVuY3Rpb24gdXBkYXRlVGlja2V0UHJpY2UodWludCB1cGRhdGVkUHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShyYWZmbGVTdGF0ZSA9PSBSYWZmbGVTdGF0ZS5JbkFjdGl2ZSk7CiAgICByZXF1aXJlKHVwZGF0ZWRQcmljZSA+IDApOwogICAgdGlja2V0UHJpY2UgPSB1cGRhdGVkUHJpY2U7CiAgfQoKICAvLy8gQGRldiBVcGRhdGVzIHRoZSB0aWNrZXQgcHJpY2UuCiAgZnVuY3Rpb24gdXBkYXRlRmVlKHVpbnQgdXBkYXRlZEZlZSkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHVwZGF0ZWRGZWUgPiAwKTsKICAgIGZlZSA9IHVwZGF0ZWRGZWU7CiAgfQoKICAvLy8gQGRldiBEZWFjdGl2YXRlcyB0aGUgcmFmZmxlIGFmdGVyIHRoZSBuZXh0IGdhbWUuCiAgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShyYWZmbGVTdGF0ZSA9PSBSYWZmbGVTdGF0ZS5BY3RpdmUpOwogICAgcmFmZmxlU3RhdGUgPSB0aWNrZXRIb2xkZXJzLmxlbmd0aCA9PSAwID8gUmFmZmxlU3RhdGUuSW5BY3RpdmUgOiBSYWZmbGVTdGF0ZS5QZW5kaW5nSW5BY3RpdmU7CiAgfQoKICAvLy8gQGRldiBBY3RpdmF0ZXMgdGhlIHJhZmZsZSwgaWYgaW5hY3RpdmF0ZWQuCiAgZnVuY3Rpb24gYWN0aXZhdGUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuSW5BY3RpdmUpOwogICAgcmFmZmxlU3RhdGUgPSBSYWZmbGVTdGF0ZS5BY3RpdmU7CiAgfQoKICAvLy8gVGhlIG9yYWNsaXplIGNhbGxiYWNrIGZ1bmN0aW9uLgogIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBxdWVyeUlkLCBzdHJpbmcgcmVzdWx0LCBieXRlcyBwcm9vZikgcHVibGljIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvcmFjbGl6ZURhdGEub3JhY2xpemVfY2JBZGRyZXNzKCkpOwogICAgCiAgICAvLyBXZSBvbmx5IGV4cGVjdCB0aGlzIGZvciB0aGlzIGNhbGxiYWNrCiAgICBpZiAob3JhY2xpemVEYXRhLm9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19yZXR1cm5Db2RlKHF1ZXJ5SWQsIHJlc3VsdCwgcHJvb2YpICE9IDApIHsKICAgICAgUmFuZG9tUHJvb2ZGYWlsZWQocXVlcnlJZCwgZ2FtZUlkLCBub3cpOwogICAgICByYW5kb21RdWVyaWVkID0gMDsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fY2FsbGJhY2socXVlcnlJZCwgcmVzdWx0KTsKICB9CgogIC8vLyBUaGUgb3JhY2xpemUgY2FsbGJhY2sgZnVuY3Rpb24uCiAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIHF1ZXJ5SWQsIHN0cmluZyByZXN1bHQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xpemVEYXRhLm9yYWNsaXplX2NiQWRkcmVzcygpKTsKICAgIAogICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgY2FzZSB3aGVyZSBvcmFjbGl6ZSBpcyB0cmlnZ2VyZWQsIG9yIGNhbGxzIGJhY2sgbXVsdGlwbGUgdGltZXMuCiAgICBpZiAoIXNob3VsZENob29zZVdpbm5lcigpKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB1aW50IG1heFJhbmdlID0gMioqKDgqcmFuZG9tQnl0ZXMpOyAKICAgIHVpbnQgcmFuZG9tTnVtYmVyID0gdWludChrZWNjYWsyNTYocmVzdWx0KSkgJSBtYXhSYW5nZTsgCiAgICB3aW5uZXJTZWxlY3RlZChyYW5kb21OdW1iZXIpOwogIH0KCiAgLy8vIEBkZXYgQW4gYWRtaW5pc3RyYXRpdmUgZnVuY3Rpb24gdG8gYWxsb3cgaW4gY2FzZSB0aGUgcHJvb2YgZmFpbHMgb3IgCiAgLy8vIGEgcmFuZG9tIHdpbm5lciBuZWVkcyB0byBiZSBjaG9zZW4gYWdhaW4uCiAgZnVuY3Rpb24gZm9yY2VDaG9vc2VSYW5kb21XaW5uZXIoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmFmZmxlU3RhdGUgIT0gUmFmZmxlU3RhdGUuSW5BY3RpdmUpOwogICAgZXhlY3V0ZVJhbmRvbVF1ZXJ5KCk7CiAgfQoKICAvLy8gQGRldiBGb3JjZXMgYSByZWZ1bmQgZm9yIGFsbCBwYXJ0aWNpcGFudHMgYW5kIGRlYWN0aXZhdGVzIHRoZSBjb250cmFjdAogIC8vLyBUaGlzIG9mZmVycyBhIGZ1bGwgcmVmdW5kLCBzbyBpdCB3aWxsIGJlIHVwIHRvIHRoZSBvd25lciB0byBlbnN1cmUgYSBmdWxsIGJhbGFuY2UuCiAgZnVuY3Rpb24gZm9yY2VSZWZ1bmQoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJhZmZsZVN0YXRlID0gUmFmZmxlU3RhdGUuUGVuZGluZ0luQWN0aXZlOwoKICAgIHVpbnQgdG90YWwgPSBnZXRUb3RhbFRpY2tldHMoKSAqIHRpY2tldFByaWNlOwogICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPiB0b3RhbCk7CgogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdGlja2V0SG9sZGVycy5sZW5ndGg7IGkrKykgewogICAgICBUaWNrZXRIb2xkZXIgc3RvcmFnZSBob2xkZXIgPSB0aWNrZXRIb2xkZXJzW2ldOwogICAgICBob2xkZXIucHVyY2hhc2VyLnRyYW5zZmVyKHVpbnQyNTYoaG9sZGVyLmNvdW50KS5tdWwodGlja2V0UHJpY2UpKTsKICAgIH0KCiAgICByZXNldFJhZmZsZSgpOwogIH0KCiAgLy8vIEBkZXYgRGVzdHJveXMgdGhlIGN1cnJlbnQgY29udHJhY3QgYW5kIG1vdmVzIGFsbCBFVEggYmFjayB0byAgCiAgZnVuY3Rpb24gdXBkYXRlUmV3YXJkRGlzdHJpYnV0b3IoYWRkcmVzcyBuZXdSZXdhcmREaXN0cmlidXRvcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXdhcmREaXN0cmlidXRvciA9IFJld2FyZERpc3RyaWJ1dGFibGUobmV3UmV3YXJkRGlzdHJpYnV0b3IpOwogIH0KCiAgLy8vIEBkZXYgRGVzdHJveXMgdGhlIGN1cnJlbnQgY29udHJhY3QgYW5kIG1vdmVzIGFsbCBFVEggYmFjayB0bwogIC8vLyBvd25lci4gT25seSBjYW4gb2NjdXIgYWZ0ZXIgc3RhdGUgaGFzIGJlZW4gc2V0IHRvIGluYWN0aXZlLgogIGZ1bmN0aW9uIGRlc3Ryb3koKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuSW5BY3RpdmUpOwogICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICB9CgogIC8vLyBHZXRzIHRoZSBwcm9qZWN0ZWQgamFja3BvdCBwcmlvciB0byBhbnkgZmVlcwogIC8vLyBAcmV0dXJuIFRoZSBwcm9qZWN0ZWQgamFja3BvdCBwcmlvciB0byBhbnkgZmVlcwogIGZ1bmN0aW9uIGdldEFic29sdXRlUHJvamVjdGVkSmFja3BvdCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICAvLy8gR2V0cyB0aGUgYWN0dWFsIGphY2twb3QgcHJpb3IgdG8gYW55IGZlZXMKICAvLy8gQHJldHVybiBUaGUgYWN0dWFsIGphY2twb3QgYW1vdW50IHByaW9yIHRvIGFueSBmZWVzLgogIGZ1bmN0aW9uIGdldEFic29sdXRlSmFja3BvdCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIAogIC8vLyBBbiBhYnN0cmFjdCBmdW5jdGlvbiB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYSBpdCBpcyBhcHByb3ByaWF0ZSB0byBjaG9vc2UgYSB3aW5uZXIuCiAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBpdCBpcyBhcHByb3ByaWF0ZSB0byBjaG9vc2UgdGhlIHdpbm5lciwgZmFsc2Ugb3RoZXJ3aXNlLgogIGZ1bmN0aW9uIHNob3VsZENob29zZVdpbm5lcigpIGludGVybmFsIHJldHVybnMgKGJvb2wpOwoKICBmdW5jdGlvbiBleGVjdXRlUmFuZG9tUXVlcnkoKSBpbnRlcm5hbCB7CiAgICBpZiAocmFuZG9tU291cmNlID09IFJhbmRvbVNvdXJjZS5SYW5kb21EUykgewogICAgICBvcmFjbGl6ZURhdGEub3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeSgwLCByYW5kb21CeXRlcywgY2FsbGJhY2tHYXMpOwogICAgfQogICAgZWxzZSB7CiAgICAgIG9yYWNsaXplRGF0YS5vcmFjbGl6ZV9xdWVyeSgiVVJMIiwianNvbihodHRwczovL3FybmcuYW51LmVkdS5hdS9BUEkvanNvbkkucGhwP2xlbmd0aD0xJnR5cGU9aGV4MTYmc2l6ZT0zMikuZGF0YVswXSIsIGNhbGxiYWNrR2FzKTsKICAgIH0KICB9CgogIC8vLyBDaG9vc2VzIHRoZSB3aW5uZXIgYXQgcmFuZG9tLgogIGZ1bmN0aW9uIGNob29zZVdpbm5lcigpIGludGVybmFsIHsKICAgIC8vIFdlIGJ1aWxkIGluIGEgYnVmZmVyIG9mIDIwIGJsb2Nrcy4gIEFwcHJveCAxIGJsb2NrIHBlciAxNSBzZWNzIH4gNSBtaW5zCiAgICAvLyB0aGUgbGFzdCB0aW1lIHJhbmRvbSB3YXMgcXVlcmllZCwgd2UnbGwgZXhlY3V0ZSBhZ2Fpbi4KICAgIGlmIChyYW5kb21RdWVyaWVkIDwgKGJsb2NrLm51bWJlci5zdWIoMjApKSkgewogICAgICBleGVjdXRlUmFuZG9tUXVlcnkoKTsKICAgICAgcmFuZG9tUXVlcmllZCA9IGJsb2NrLm51bWJlcjsKICAgIH0KICB9CgogIC8vLyBJbnRlcm5hbCBmdW5jdGlvbiBmb3Igd2hlbiBhIHdpbm5lciBpcyBjaG9zZW4uCiAgZnVuY3Rpb24gd2lubmVyU2VsZWN0ZWQodWludCByYW5kb21OdW1iZXIpIGludGVybmFsIHsKICAgIFRpY2tldEhvbGRlciBtZW1vcnkgd2lubmVyID0gZ2V0V2lubmluZ1RpY2tldEhvbGRlcihyYW5kb21OdW1iZXIpOwogICAgdWludCBqYWNrcG90ID0gZ2V0QWJzb2x1dGVKYWNrcG90KCk7CiAgICBKYWNrcG90IG1lbW9yeSBqYWNrcG90VG90YWxzID0gZ2V0SmFja3BvdFRvdGFscyhqYWNrcG90KTsKCiAgICBXaW5uZXJTZWxlY3RlZCh3aW5uZXIucHVyY2hhc2VyLCBnYW1lSWQsIGphY2twb3RUb3RhbHMud2lubmVyVG90YWwsIG5vdyk7ICAgIAogICAgdHJhbnNmZXJKYWNrcG90KHdpbm5lci5wdXJjaGFzZXIsIGphY2twb3RUb3RhbHMud2lubmVyVG90YWwpOwogICAgdHJhbnNmZXJDYXNjYWRlcyhqYWNrcG90VG90YWxzLmFic29sdXRlVG90YWwpOwogICAgcmVzZXRSYWZmbGUoKTsKICB9CgogIGZ1bmN0aW9uIGdldFdpbm5pbmdUaWNrZXRIb2xkZXIodWludCByYW5kb21OdW1iZXIpIGludGVybmFsIHZpZXcgcmV0dXJucyhUaWNrZXRIb2xkZXIpIHsKICAgIGFzc2VydCh0aWNrZXRIb2xkZXJzLmxlbmd0aCA+IDApOwogICAgdWludCB0b3RhbFRpY2tldHMgPSBnZXRUb3RhbFRpY2tldHMoKTsKICAgIHVpbnQgd2lubmVyID0gKHJhbmRvbU51bWJlciAlIHRvdGFsVGlja2V0cykgKyAxOwoKICAgIHVpbnQgbWluID0gMDsKICAgIHVpbnQgbWF4ID0gdGlja2V0SG9sZGVycy5sZW5ndGgtMTsKICAgIHdoaWxlIChtYXggPiBtaW4pIHsKICAgICAgICB1aW50IG1pZCA9IChtYXggKyBtaW4gKyAxKSAvIDI7CiAgICAgICAgaWYgKHRpY2tldEhvbGRlcnNbbWlkXS5ydW5uaW5nVG90YWwgPj0gd2lubmVyICYmCiAgICAgICAgICh0aWNrZXRIb2xkZXJzW21pZF0ucnVubmluZ1RvdGFsLXRpY2tldEhvbGRlcnNbbWlkXS5jb3VudCkgPCB3aW5uZXIpIHsKICAgICAgICAgICByZXR1cm4gdGlja2V0SG9sZGVyc1ttaWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRpY2tldEhvbGRlcnNbbWlkXS5ydW5uaW5nVG90YWwgPD0gd2lubmVyKSB7CiAgICAgICAgICAgIG1pbiA9IG1pZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtYXggPSBtaWQtMTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRpY2tldEhvbGRlcnNbbWluXTsKICB9CgogIC8vLyBUcmFuc2ZlcnMgdGhlIGphY2twb3QgdG8gdGhlIHdpbm5lciB0cmlnZ2VyaW5nIHRoZSBldmVudAogIGZ1bmN0aW9uIHRyYW5zZmVySmFja3BvdChhZGRyZXNzIHdpbm5lciwgdWludCBqYWNrcG90KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQpIHsKICAgIC8vIFdlIGV4cGxpY2l0bHkgZG8gbm90IHVzZSB0cmFuc2ZlciBoZXJlIGJlY2F1c2UgaWYgdGhlIAogICAgLy8gdGhlIGNhbGwgZmFpbHMsIHRoZSBvcmFjbGl6ZSBjb250cmFjdCB3aWxsIG5vdCByZXRyeS4KICAgIGJvb2wgc2VuZFN1Y2Nlc3NmdWwgPSB3aW5uZXIuc2VuZChqYWNrcG90KTsKICAgIGlmICghc2VuZFN1Y2Nlc3NmdWwpIHsKICAgICAgYWRkUGVuZGluZ1dpbm5lcih3aW5uZXIsIGphY2twb3QpOwogICAgfQoKICAgIHJldHVybiBqYWNrcG90OwogIH0KCiAgLy8vIFJlc2V0cyB0aGUgcmFmZmxlIGdhbWUgc3RhdGUuCiAgZnVuY3Rpb24gcmVzZXRSYWZmbGUoKSBpbnRlcm5hbCB7CiAgICBpZiAocmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuUGVuZGluZ0luQWN0aXZlKSB7CiAgICAgIHJhZmZsZVN0YXRlID0gUmFmZmxlU3RhdGUuSW5BY3RpdmU7CiAgICB9CiAgICB0aWNrZXRIb2xkZXJzLmxlbmd0aCA9IDA7CiAgICBnYW1lSWQgPSBibG9jay5udW1iZXI7CiAgICByYW5kb21RdWVyaWVkID0gMDsKICB9CgogIC8vLyBHZXRzIHRoZSBqYWNrcG90IGFmdGVyIGZlZXMKICBmdW5jdGlvbiBnZXRKYWNrcG90VG90YWxzKHVpbnQgamFja3BvdCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyhKYWNrcG90KSB7CiAgICBpZiAoamFja3BvdCA8IGZlZSkgewogICAgICByZXR1cm4gSmFja3BvdCgwLCAwLCAwLCAwKTsKICAgIH0KCiAgICB1aW50IGNhc2NhZGVUb3RhbCA9IGdldENhc2NhZGVUb3RhbCh0b3RhbENhc2NhZGluZ1BlcmNlbnRhZ2UsIGphY2twb3QpOwogICAgcmV0dXJuIEphY2twb3QoamFja3BvdCwgZmVlLCBjYXNjYWRlVG90YWwsIGphY2twb3Quc3ViKGZlZSkuc3ViKGNhc2NhZGVUb3RhbCkpOwogIH0KCiAgZnVuY3Rpb24gdXBkYXRlUmFuZG9tU291cmNlKHVpbnQgbmV3UmFuZG9tU291cmNlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGlmIChuZXdSYW5kb21Tb3VyY2UgPT0gMSkgewogICAgICByYW5kb21Tb3VyY2UgPSBSYW5kb21Tb3VyY2UuUmFuZG9tRFM7CiAgICB9IGVsc2UgewogICAgICByYW5kb21Tb3VyY2UgPSBSYW5kb21Tb3VyY2UuUXJuZzsKICAgIH0KCiAgICBzZXRQcm9vZigpOwogIH0KCgogIGZ1bmN0aW9uIHNldFByb29mKCkgaW50ZXJuYWwgewogICAgICBpZiAocmFuZG9tU291cmNlID09IFJhbmRvbVNvdXJjZS5SYW5kb21EUykgewogICAgICAgIC8vIHByb29mVHlwZV9MZWRnZXIgPSAweDMwOwogICAgICAgIG9yYWNsaXplRGF0YS5vcmFjbGl6ZV9zZXRQcm9vZigweDMwKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBvcmFjbGl6ZURhdGEub3JhY2xpemVfc2V0UHJvb2YoMHgwMCk7CiAgICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldFRvdGFsVGlja2V0cygpIGludGVybmFsIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICByZXR1cm4gdGlja2V0SG9sZGVycy5sZW5ndGggPT0gMCA/IDAgOiB0aWNrZXRIb2xkZXJzW3RpY2tldEhvbGRlcnMubGVuZ3RoLTFdLnJ1bm5pbmdUb3RhbDsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZU9yYWNsaXplR2FzKHVpbnQgbmV3Q2FsbGJhY2tHYXMsIHVpbnQgY3VzdG9tR2FzUHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgY2FsbGJhY2tHYXMgPSBuZXdDYWxsYmFja0dhczsKICAgIHVwZGF0ZUN1c3RvbUdhc1ByaWNlKGN1c3RvbUdhc1ByaWNlKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZUN1c3RvbUdhc1ByaWNlKHVpbnQgY3VzdG9tR2FzUHJpY2UpIGludGVybmFsIHsKICAgIG9yYWNsaXplRGF0YS5vcmFjbGl6ZV9zZXRDdXN0b21HYXNQcmljZShjdXN0b21HYXNQcmljZSk7CiAgfQp9Cgpjb250cmFjdCBDb3VudEJhc2VkUmFmZmxlIGlzIFJhZmZsZSB7CiAgCiAgdWludCBwdWJsaWMgZHJhd1RpY2tldENvdW50OwoKICAvLy8gQGRldiBDb25zdHJ1Y3RvciBmb3IgY29udmVudGlvbmFsIHJhZmZsZQogIC8vLyBAcGFyYW0gX3RpY2tldFByaWNlIFRoZSB0aWNrZXQgcHJpY2UuCiAgLy8vIEBwYXJhbSBfZHJhd1RpY2tldENvdW50IFRoZSBudW1iZXIgb2YgdGlja2V0cyBmb3IgYSBkcmF3IHRvIHRha2UgcGxhY2UuCiAgZnVuY3Rpb24gQ291bnRCYXNlZFJhZmZsZSh1aW50IF90aWNrZXRQcmljZSwgdWludCBfZHJhd1RpY2tldENvdW50LCBhZGRyZXNzIF9yZXdhcmREaXN0cmlidXRvcikgUmFmZmxlKF90aWNrZXRQcmljZSwgX3Jld2FyZERpc3RyaWJ1dG9yKSBwdWJsaWMgewogICAgZHJhd1RpY2tldENvdW50ID0gX2RyYXdUaWNrZXRDb3VudDsKICB9CgogIC8vLyBAZGV2IEdldHMgdGhlIHByb2plY3RlZCBqYWNrcG90LgogIGZ1bmN0aW9uIGdldEFic29sdXRlUHJvamVjdGVkSmFja3BvdCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgdG90YWxUaWNrZXRDb3VudCA9IGdldFRvdGFsVGlja2V0cygpOwogICAgdWludCB0aWNrZXRDb3VudCA9IGRyYXdUaWNrZXRDb3VudCA+IHRvdGFsVGlja2V0Q291bnQgPyBkcmF3VGlja2V0Q291bnQgOiB0b3RhbFRpY2tldENvdW50OwogICAgcmV0dXJuIHRpY2tldENvdW50Lm11bCh0aWNrZXRQcmljZSk7IAogIH0KCiAgLy8vIEBkZXYgR2V0cyB0aGUgYWN0dWFsIGphY2twb3QKICBmdW5jdGlvbiBnZXRBYnNvbHV0ZUphY2twb3QoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICBpZiAodGlja2V0SG9sZGVycy5sZW5ndGggPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5iYWxhbmNlLnN1Yih0b3RhbFBlbmRpbmdQYXltZW50cyk7CiAgfQoKICAgIC8qIEBkZXYgUHVyY2hhc2VzIHRpY2tldHMgdG8gdGhlIHJhZmZsZS4KICAqIEBwYXJhbSBudW1UaWNrZXRzIE51bWJlciBvZiB0aWNrZXRzIHRvIHB1cmNoYXNlLgogICogQHBhcmFtIHJlZmVycmVyIFRoZSBhZGRyZXNzIG9mIHRoZSByZWZlcnJlci4KICAqLwogIGZ1bmN0aW9uIHB1cmNoYXNlVGlja2V0KHVpbnQgbnVtVGlja2V0cywgYWRkcmVzcyByZWZlcnJlcikgcHVibGljIHBheWFibGUgY29zdHNFeGFjdGx5KG51bVRpY2tldHMubXVsKHRpY2tldFByaWNlKSkgewogICAgcmVxdWlyZShyYWZmbGVTdGF0ZSAhPSBSYWZmbGVTdGF0ZS5JbkFjdGl2ZSk7CiAgICByZXF1aXJlKG51bVRpY2tldHMgPCBkcmF3VGlja2V0Q291bnQpOwoKICAgIC8vIEFkZCB0aGUgYWRkcmVzcyB0byB0aGUgdGlja2V0SG9sZGVycy4KICAgIHVpbnQgdG90YWxUaWNrZXRzID0gZ2V0VG90YWxUaWNrZXRzKCk7CiAgICB0aWNrZXRIb2xkZXJzLnB1c2goVGlja2V0SG9sZGVyKG1zZy5zZW5kZXIsIHVpbnQxNihudW1UaWNrZXRzKSwgdWludDgwKHRvdGFsVGlja2V0cy5hZGQobnVtVGlja2V0cykpKSk7CiAgICBUaWNrZXRQdXJjaGFzZWQobXNnLnNlbmRlciwgZ2FtZUlkLCBudW1UaWNrZXRzLCB0aWNrZXRQcmljZS5tdWwobnVtVGlja2V0cyksIG5vdyk7CiAgICBpZiAocmV3YXJkRGlzdHJpYnV0b3IgIT0gYWRkcmVzcygwKSkgewogICAgICByZXdhcmREaXN0cmlidXRvci5yZWdpc3RlclJlZmVycmFsKG1zZy5zZW5kZXIsIHJlZmVycmVyKTsKICAgICAgcmV3YXJkRGlzdHJpYnV0b3IudHJhbnNmZXJSZXdhcmRzKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgZ2FtZUlkKTsKICAgIH0KCiAgICBpZiAoc2hvdWxkQ2hvb3NlV2lubmVyKCkpIHsKICAgICAgY2hvb3NlV2lubmVyKCk7CiAgICB9CiAgfQogIAogIC8vLyBBbiBhYnN0cmFjdCBmdW5jdGlvbiB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYSBpdCBpcyBhcHByb3ByaWF0ZSB0byBjaG9vc2UgYSB3aW5uZXIuCiAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBpdCBpcyBhcHByb3ByaWF0ZSB0byBjaG9vc2UgdGhlIHdpbm5lciwgZmFsc2Ugb3RoZXJ3aXNlLgogIGZ1bmN0aW9uIHNob3VsZENob29zZVdpbm5lcigpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBnZXRUb3RhbFRpY2tldHMoKSA+PSBkcmF3VGlja2V0Q291bnQ7CiAgfQp9Cgpjb250cmFjdCBHb2xkUmFmZmxlIGlzIENvdW50QmFzZWRSYWZmbGUgewoKICAvLy8gQGRldiBDb25zdHJ1Y3RvciBmb3IgY29udmVudGlvbmFsIHJhZmZsZQogIC8vLyBTaG91bGQgcmVhY2ggamFja3BvdCBvZiB+IDEuNSBFVEgKICBmdW5jdGlvbiBHb2xkUmFmZmxlKGFkZHJlc3MgX3Jld2FyZERpc3RyaWJ1dG9yKSBDb3VudEJhc2VkUmFmZmxlKDEwMCBmaW5uZXksIDEwLCBfcmV3YXJkRGlzdHJpYnV0b3IpIHB1YmxpYyB7CiAgfQp9Cgpjb250cmFjdCBPcmFjbGl6ZUkgewogICAgYWRkcmVzcyBwdWJsaWMgY2JBZGRyZXNzOwogICAgZnVuY3Rpb24gcXVlcnkodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcHVibGljICBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Mih1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcxLCBzdHJpbmcgX2FyZzIpIHB1YmxpYyAgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTJfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMiwgdWludCBfZ2FzbGltaXQpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tih1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgYnl0ZXMgX2FyZ04pIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tl93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOLCB1aW50IF9nYXNsaW1pdCkgcHVibGljIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlKSBwdWJsaWMgcmV0dXJucyAodWludCBfZHNwcmljZSk7CiAgICBmdW5jdGlvbiBnZXRQcmljZShzdHJpbmcgX2RhdGFzb3VyY2UsIHVpbnQgZ2FzbGltaXQpIHB1YmxpYyByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiByYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIHB1YmxpYyByZXR1cm5zKGJ5dGVzMzIpOwp9'.
	

]
