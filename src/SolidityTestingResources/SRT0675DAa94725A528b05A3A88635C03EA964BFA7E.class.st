Class {
	#name : #SRT0675DAa94725A528b05A3A88635C03EA964BFA7E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0675DAa94725A528b05A3A88635C03EA964BFA7E >> base64 [
	^ ''.
	

]
