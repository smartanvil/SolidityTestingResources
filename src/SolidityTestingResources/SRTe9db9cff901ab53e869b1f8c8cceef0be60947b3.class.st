Class {
	#name : #SRTe9db9cff901ab53e869b1f8c8cceef0be60947b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe9db9cff901ab53e869b1f8c8cceef0be60947b3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBUaWxlcyB7CgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTlVNX1RJTEVTID0gMjU2OwogICAgdWludCBjb25zdGFudCBTSURFX0xFTkdUSCA9IDE2OwogICAgdWludCBwcml2YXRlIGNvbnN0YW50IFNUQVJUSU5HX0dBTUVfTlVNQkVSID0gMTsKICAgIHVpbnQgcHVibGljIERFRkFVTFRfR0FNRV9DT1NUID0gNTAwMDAwMDAwMDAwMDAwMDsKCiAgICBhZGRyZXNzIHByaXZhdGUgb3duZXI7CgogICAgdWludCBwdWJsaWMgY3VycmVudEdhbWVOdW1iZXI7CiAgICB1aW50IHB1YmxpYyBjdXJyZW50R2FtZUJhbGFuY2U7CiAgICB1aW50IHB1YmxpYyBudW1UaWxlc0NsYWltZWQ7CiAgICBUaWxlWzE2XVsxNl0gcHVibGljIHRpbGVzOwogICAgYm9vbCBwdWJsaWMgZ2FtZVN0b3BwZWQ7CiAgICB1aW50IHB1YmxpYyBnYW1lRWFybmluZ3M7CiAgICBib29sIHB1YmxpYyB3aWxsQ2hhbmdlQ29zdDsKICAgIHVpbnQgcHVibGljIGN1cnJlbnRHYW1lQ29zdDsKICAgIHVpbnQgcHVibGljIG5leHRHYW1lQ29zdDsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBwZW5kaW5nV2l0aGRyYXdhbHM7CiAgICBtYXBwaW5nICh1aW50ID0+IGFkZHJlc3MpIHB1YmxpYyBnYW1lVG9XaW5uZXI7CgogICAgc3RydWN0IFRpbGUgewogICAgICAgIHVpbnQgZ2FtZUNsYWltZWQ7CiAgICAgICAgYWRkcmVzcyBjbGFpbWVkQnk7CiAgICB9CgogICAgZXZlbnQgR2FtZVdvbih1aW50IGluZGV4ZWQgZ2FtZU51bWJlciwgYWRkcmVzcyBpbmRleGVkIHdpbm5lcik7CiAgICBldmVudCBUaWxlQ2xhaW1lZCh1aW50IGluZGV4ZWQgZ2FtZU51bWJlciwgdWludCBpbmRleGVkIHhDb29yZCwgdWludCBpbmRleGVkIHlDb29yZCwgYWRkcmVzcyBjbGFpbWVkQnkpOwogICAgZXZlbnQgV2lubmluZ3NDbGFpbWVkKGFkZHJlc3MgaW5kZXhlZCBjbGFpbWVkQnksIHVpbnQgaW5kZXhlZCBhbW91bnRDbGFpbWVkKTsKICAgIGV2ZW50IEZhaWxlZFRvQ2xhaW0oYWRkcmVzcyBpbmRleGVkIGNsYWltZWRCeSwgdWludCBpbmRleGVkIGFtb3VudFRvQ2xhaW0pOwogICAgZXZlbnQgUHJpbnRXaW5uaW5nSW5mbyhieXRlczMyIGhhc2gsIHVpbnQgeENvb3JkLCB1aW50IHlDb29yZCk7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBnYW1lUnVubmluZygpIHsKICAgICAgICByZXF1aXJlKCFnYW1lU3RvcHBlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBnYW1lTm90UnVubmluZygpIHsKICAgICAgICByZXF1aXJlKGdhbWVTdG9wcGVkID09IHRydWUpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gVGlsZXMoKSBwYXlhYmxlIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgY3VycmVudEdhbWVOdW1iZXIgPSBTVEFSVElOR19HQU1FX05VTUJFUjsKICAgICAgICBjdXJyZW50R2FtZUNvc3QgPSBERUZBVUxUX0dBTUVfQ09TVDsKICAgICAgICBudW1UaWxlc0NsYWltZWQgPSAwOwogICAgICAgIGdhbWVTdG9wcGVkID0gZmFsc2U7CiAgICAgICAgZ2FtZUVhcm5pbmdzID0gMDsKICAgICAgICB3aWxsQ2hhbmdlQ29zdCA9IGZhbHNlOwogICAgICAgIG5leHRHYW1lQ29zdCA9IERFRkFVTFRfR0FNRV9DT1NUOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbmNlbENvbnRyYWN0KCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBnYW1lU3RvcHBlZCA9IHRydWU7CiAgICAgICAgcmVmdW5kVGlsZXMoKTsKICAgICAgICByZWZ1bmRXaW5uaW5ncygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJpZ2h0Q29vcmRpbmF0ZShieXRlIGlucHV0KSByZXR1cm5zKHVpbnQpIHsKICAgICAgICBieXRlIHZhbCA9IGlucHV0ICYgYnl0ZSgxNSk7CiAgICAgICAgcmV0dXJuIHVpbnQodmFsKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRMZWZ0Q29vcmRpbmF0ZShieXRlIGlucHV0KSByZXR1cm5zKHVpbnQpIHsKICAgICAgICBieXRlIHZhbCA9IGlucHV0ID4+IDQ7CiAgICAgICAgcmV0dXJuIHVpbnQodmFsKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXRlcm1pbmVXaW5uZXIoKSBwcml2YXRlIHsKICAgICAgICBieXRlczMyIHdpbm5pbmdIYXNoID0gYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpOwogICAgICAgIGJ5dGUgd2lubmluZ1BhaXIgPSB3aW5uaW5nSGFzaFszMV07CiAgICAgICAgdWludDI1NiB3aW5uaW5nWCA9IGdldFJpZ2h0Q29vcmRpbmF0ZSh3aW5uaW5nUGFpcik7CiAgICAgICAgdWludDI1NiB3aW5uaW5nWSA9IGdldExlZnRDb29yZGluYXRlKHdpbm5pbmdQYWlyKTsKICAgICAgICBhZGRyZXNzIHdpbm5lciA9IHRpbGVzW3dpbm5pbmdYXVt3aW5uaW5nWV0uY2xhaW1lZEJ5OwogICAgICAgIFByaW50V2lubmluZ0luZm8od2lubmluZ0hhc2gsIHdpbm5pbmdYLCB3aW5uaW5nWSk7CiAgICAgICAgR2FtZVdvbihjdXJyZW50R2FtZU51bWJlciwgd2lubmVyKTsKICAgICAgICByZXNldEdhbWUod2lubmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbVRpbGUodWludCB4Q29vcmQsIHVpbnQgeUNvb3JkLCB1aW50IGdhbWVOdW1iZXIpIGdhbWVSdW5uaW5nIHBheWFibGUgewogICAgICAgIGlmIChnYW1lTnVtYmVyICE9IGN1cnJlbnRHYW1lTnVtYmVyIHx8IHRpbGVzW3hDb29yZF1beUNvb3JkXS5nYW1lQ2xhaW1lZCA9PSBjdXJyZW50R2FtZU51bWJlcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gY3VycmVudEdhbWVDb3N0KTsKCiAgICAgICAgY3VycmVudEdhbWVCYWxhbmNlICs9IG1zZy52YWx1ZTsKICAgICAgICB0aWxlc1t4Q29vcmRdW3lDb29yZF0gPSBUaWxlKGN1cnJlbnRHYW1lTnVtYmVyLCBtc2cuc2VuZGVyKTsKICAgICAgICBUaWxlQ2xhaW1lZChjdXJyZW50R2FtZU51bWJlciwgeENvb3JkLCB5Q29vcmQsIG1zZy5zZW5kZXIpOwogICAgICAgIG51bVRpbGVzQ2xhaW1lZCArPSAxOwogICAgICAgIGlmIChudW1UaWxlc0NsYWltZWQgPT0gTlVNX1RJTEVTKSB7CiAgICAgICAgICAgIGRldGVybWluZVdpbm5lcigpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZXNldEdhbWUoYWRkcmVzcyB3aW5uZXIpIHByaXZhdGUgewogICAgICAgIHVpbnQgd2lubmluZ0Ftb3VudCA9IHVpbnQoY3VycmVudEdhbWVCYWxhbmNlKSAqIHVpbnQoOSkgLyB1aW50KDEwKTsKICAgICAgICB1aW50IHJlbWFpbmRlciA9IGN1cnJlbnRHYW1lQmFsYW5jZSAtIHdpbm5pbmdBbW91bnQ7CiAgICAgICAgY3VycmVudEdhbWVCYWxhbmNlID0gMDsKCiAgICAgICAgZ2FtZVRvV2lubmVyW2N1cnJlbnRHYW1lTnVtYmVyXSA9IHdpbm5lcjsKICAgICAgICBjdXJyZW50R2FtZU51bWJlcisrOwogICAgICAgIG51bVRpbGVzQ2xhaW1lZCA9IDA7CgogICAgICAgIHBlbmRpbmdXaXRoZHJhd2Fsc1t3aW5uZXJdICs9IHdpbm5pbmdBbW91bnQ7CiAgICAgICAgZ2FtZUVhcm5pbmdzICs9IHJlbWFpbmRlcjsKCiAgICAgICAgaWYgKHdpbGxDaGFuZ2VDb3N0KSB7CiAgICAgICAgICAgIGN1cnJlbnRHYW1lQ29zdCA9IG5leHRHYW1lQ29zdDsKICAgICAgICAgICAgd2lsbENoYW5nZUNvc3QgPSBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gdG9kbzogb3B0aW1pemUgdGhpcwogICAgZnVuY3Rpb24gcmVmdW5kVGlsZXMoKSBwcml2YXRlIHsKICAgICAgICBUaWxlIG1lbW9yeSBjdXJyVGlsZTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBTSURFX0xFTkdUSDsgaSsrKSB7CiAgICAgICAgICAgIGZvciAodWludCBqID0gMDsgaiA8IFNJREVfTEVOR1RIOyBqKyspIHsKICAgICAgICAgICAgICAgIGN1cnJUaWxlID0gdGlsZXNbaV1bal07CiAgICAgICAgICAgICAgICBpZiAoY3VyclRpbGUuZ2FtZUNsYWltZWQgPT0gY3VycmVudEdhbWVOdW1iZXIpIHsKICAgICAgICAgICAgICAgICAgICAvLyBjb3VsZCBhY2N1bXVsYXRlIHRyYW5zYWN0aW9ucyBhbmQgcGF5IGxlc3MgZ2FzCiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJUaWxlLmNsYWltZWRCeS5zZW5kKGN1cnJlbnRHYW1lQ29zdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGlsZXNbaV1bal0gPSBUaWxlKDAsIDB4MCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZFdpbm5pbmdzKCkgcHJpdmF0ZSB7CiAgICAgICAgYWRkcmVzcyBjdXJyQWRkcmVzczsKICAgICAgICB1aW50IGN1cnJBbW91bnQ7CiAgICAgICAgZm9yICh1aW50IGkgPSBTVEFSVElOR19HQU1FX05VTUJFUjsgaSA8PSBjdXJyZW50R2FtZU51bWJlcjsgaSsrKSB7CiAgICAgICAgICAgIGN1cnJBZGRyZXNzID0gZ2FtZVRvV2lubmVyW2ldOwogICAgICAgICAgICBjdXJyQW1vdW50ID0gcGVuZGluZ1dpdGhkcmF3YWxzW2N1cnJBZGRyZXNzXTsKICAgICAgICAgICAgaWYgKGN1cnJBbW91bnQgIT0gMCkgewogICAgICAgICAgICAgICAgaWYgKGN1cnJBZGRyZXNzLnNlbmQoY3VyckFtb3VudCkpIHsKICAgICAgICAgICAgICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbY3VyckFkZHJlc3NdID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbVdpbm5pbmdzKCkgewogICAgICAgIGlmIChwZW5kaW5nV2l0aGRyYXdhbHNbbXNnLnNlbmRlcl0gIT0gMCkgewogICAgICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSkpIHsKICAgICAgICAgICAgICAgIFdpbm5pbmdzQ2xhaW1lZChtc2cuc2VuZGVyLCBwZW5kaW5nV2l0aGRyYXdhbHNbbXNnLnNlbmRlcl0pOwogICAgICAgICAgICAgICAgcGVuZGluZ1dpdGhkcmF3YWxzW21zZy5zZW5kZXJdID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIEZhaWxlZFRvQ2xhaW0obXNnLnNlbmRlciwgcGVuZGluZ1dpdGhkcmF3YWxzW21zZy5zZW5kZXJdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVHYW1lQ29zdCh1aW50IG5ld0dhbWVDb3N0KSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIHRvZG86IHNob3VsZCB3ZSB2YWxpZGF0ZSBzb21ldGhpbmcgaGVyZT8KICAgICAgICBuZXh0R2FtZUNvc3QgPSBuZXdHYW1lQ29zdDsKICAgICAgICB3aWxsQ2hhbmdlQ29zdCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY2xhaW1Pd25lcnNFYXJuaW5ncygpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKGdhbWVFYXJuaW5ncyAhPSAwKSB7CiAgICAgICAgICAgIGlmIChvd25lci5zZW5kKGdhbWVFYXJuaW5ncykpIHsKICAgICAgICAgICAgICAgIGdhbWVFYXJuaW5ncyA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0='.
	

]
