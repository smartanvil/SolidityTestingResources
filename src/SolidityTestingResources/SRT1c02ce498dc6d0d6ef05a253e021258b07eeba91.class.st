Class {
	#name : #SRT1c02ce498dc6d0d6ef05a253e021258b07eeba91,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c02ce498dc6d0d6ef05a253e021258b07eeba91 >> base64 [
	^ ''.
	

]
