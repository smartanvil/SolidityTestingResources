Class {
	#name : #SRTA96B24E4987056859411A8f3C7EA4B163395e664,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA96B24E4987056859411A8f3C7EA4B163395e664 >> base64 [
	^ ''.
	

]
