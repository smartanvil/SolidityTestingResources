Class {
	#name : #SRTc8ffd394421e09cb48b620dda56168171ca35ab7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc8ffd394421e09cb48b620dda56168171ca35ab7 >> base64 [
	^ ''.
	

]
