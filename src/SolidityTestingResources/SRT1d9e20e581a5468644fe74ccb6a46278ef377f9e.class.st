Class {
	#name : #SRT1d9e20e581a5468644fe74ccb6a46278ef377f9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d9e20e581a5468644fe74ccb6a46278ef377f9e >> base64 [
	^ ''.
	

]
