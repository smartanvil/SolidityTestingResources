Class {
	#name : #SRT8d10c03bc0889a2edea0de12e455a19ac7395b98,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8d10c03bc0889a2edea0de12e455a19ac7395b98 >> base64 [
	^ ''.
	

]
