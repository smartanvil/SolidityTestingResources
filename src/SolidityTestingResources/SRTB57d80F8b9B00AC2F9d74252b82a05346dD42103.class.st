Class {
	#name : #SRTB57d80F8b9B00AC2F9d74252b82a05346dD42103,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB57d80F8b9B00AC2F9d74252b82a05346dD42103 >> base64 [
	^ ''.
	

]
