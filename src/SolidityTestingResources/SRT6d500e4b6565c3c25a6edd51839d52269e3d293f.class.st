Class {
	#name : #SRT6d500e4b6565c3c25a6edd51839d52269e3d293f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6d500e4b6565c3c25a6edd51839d52269e3d293f >> base64 [
	^ ''.
	

]
