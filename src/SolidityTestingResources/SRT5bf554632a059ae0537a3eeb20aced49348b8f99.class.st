Class {
	#name : #SRT5bf554632a059ae0537a3eeb20aced49348b8f99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5bf554632a059ae0537a3eeb20aced49348b8f99 >> base64 [
	^ ''.
	

]
