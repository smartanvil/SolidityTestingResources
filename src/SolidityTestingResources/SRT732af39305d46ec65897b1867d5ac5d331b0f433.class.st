Class {
	#name : #SRT732af39305d46ec65897b1867d5ac5d331b0f433,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT732af39305d46ec65897b1867d5ac5d331b0f433 >> base64 [
	^ ''.
	

]
