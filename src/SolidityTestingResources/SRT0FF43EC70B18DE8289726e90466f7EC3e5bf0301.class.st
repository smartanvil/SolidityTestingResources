Class {
	#name : #SRT0FF43EC70B18DE8289726e90466f7EC3e5bf0301,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0FF43EC70B18DE8289726e90466f7EC3e5bf0301 >> base64 [
	^ ''.
	

]
