Class {
	#name : #SRT20f7a3ddf244dc9299975b4da1c39f8d5d75f05a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT20f7a3ddf244dc9299975b4da1c39f8d5d75f05a >> base64 [
	^ ''.
	

]
