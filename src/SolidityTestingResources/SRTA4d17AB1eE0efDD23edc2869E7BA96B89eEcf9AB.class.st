Class {
	#name : #SRTA4d17AB1eE0efDD23edc2869E7BA96B89eEcf9AB,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA4d17AB1eE0efDD23edc2869E7BA96B89eEcf9AB >> base64 [
	^ 'LyoqCiAqIE92ZXJmbG93IGF3YXJlIHVpbnQgbWF0aCBmdW5jdGlvbnMuCiAqCiAqIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9NYWtlckRBTy9tYWtlci1vdGMvYmxvYi9tYXN0ZXIvY29udHJhY3RzL3NpbXBsZV9tYXJrZXQuc29sCiAqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCi8qKgogKiBFUkMgMjAgdG9rZW4KICoKICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBUUlVFVG9rZW4gIHsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJUUlVFIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlRSVUUiOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ICAgID0gMTAwMDAwMDAwICogMTAqKmRlY2ltYWxzOwoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHsKICAgICAgICByZXR1cm4gX3RvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7IC8vbGlzdCBvZiBiYWxhbmNlIG9mIGVhY2ggYWRkcmVzcwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgdWludCBwdWJsaWMgYmFzZVN0YXJ0VGltZTsgLy9BbGwgb3RoZXIgdGltZSBzcG90cyBhcmUgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGlzIHRpbWUgc3BvdC4KCiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyID0gMHgwOwoKICAgIHVpbnQyNTYgcHVibGljIGRpc3RyaWJ1dGVkID0gMDsKCiAgICBldmVudCBBbGxvY2F0ZUZvdW5kZXJUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHNlbmRlcik7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIC8vY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIFRSVUVUb2tlbihhZGRyZXNzIF9mb3VuZGVyKSB7CiAgICAgICAgZm91bmRlciA9IF9mb3VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFN0YXJ0VGltZSh1aW50IF9zdGFydFRpbWUpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciE9Zm91bmRlcikgcmV2ZXJ0KCk7CiAgICAgICAgYmFzZVN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBEaXN0cmlidXRlIHRva2VucyBvdXQuCiAgICAgKgogICAgICogU2VjdXJpdHkgcmV2aWV3CiAgICAgKgogICAgICogQXBwbGljYWJsZSB0ZXN0czoKICAgICAqCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlKHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyBfdG8pIHsKICAgICAgICBpZiAobXNnLnNlbmRlciE9Zm91bmRlcikgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKGRpc3RyaWJ1dGVkICsgX2Ftb3VudCA+IF90b3RhbFN1cHBseSkgcmV2ZXJ0KCk7CgogICAgICAgIGRpc3RyaWJ1dGVkICs9IF9hbW91bnQ7CgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBfdG8sIF9hbW91bnQpOwogICAgfQoKCgogICAgLyoqCiAgICAgKiBFUkMgMjAgU3RhbmRhcmQgVG9rZW4gaW50ZXJmYWNlIHRyYW5zZmVyIGZ1bmN0aW9uCiAgICAgKgogICAgICogUHJldmVudCB0cmFuc2ZlcnMgdW50aWwgZnJlZXplIHBlcmlvZCBpcyBvdmVyLgogICAgICoKICAgICAqIEFwcGxpY2FibGUgdGVzdHM6CiAgICAgKgogICAgICogLSBUZXN0IHJlc3RyaWN0ZWQgZWFybHkgdHJhbnNmZXIKICAgICAqIC0gVGVzdCB0cmFuc2ZlciBhZnRlciByZXN0cmljdGVkIHBlcmlvZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChub3cgPCBiYXNlU3RhcnRUaW1lKSByZXZlcnQoKTsKCiAgICAgICAgLy9EZWZhdWx0IGFzc3VtZXMgdG90YWxTdXBwbHkgY2FuJ3QgYmUgb3ZlciBtYXggKDJeMjU2IC0gMSkuCiAgICAgICAgLy9JZiB5b3VyIHRva2VuIGxlYXZlcyBvdXQgdG90YWxTdXBwbHkgYW5kIGNhbiBpc3N1ZSBtb3JlIHRva2VucyBhcyB0aW1lIGdvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSBmb3VuZGVyIGFkZHJlc3MgKHdoZXJlIElDTyBFVEggaXMgYmVpbmcgZm9yd2FyZGVkKS4KICAgICAqCiAgICAgKiBBcHBsaWNhYmxlIHRlc3RzOgogICAgICoKICAgICAqIC0gVGVzdCBmb3VuZGVyIGNoYW5nZSBieSBoYWNrZXIKICAgICAqIC0gVGVzdCBmb3VuZGVyIGNoYW5nZQogICAgICogLSBUZXN0IGZvdW5kZXIgdG9rZW4gYWxsb2NhdGlvbiB0d2ljZQogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VGb3VuZGVyKGFkZHJlc3MgbmV3Rm91bmRlcikgewogICAgICAgIGlmIChtc2cuc2VuZGVyIT1mb3VuZGVyKSByZXZlcnQoKTsKICAgICAgICBmb3VuZGVyID0gbmV3Rm91bmRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEVSQyAyMCBTdGFuZGFyZCBUb2tlbiBpbnRlcmZhY2UgdHJhbnNmZXIgZnVuY3Rpb24KICAgICAqCiAgICAgKiBQcmV2ZW50IHRyYW5zZmVycyB1bnRpbCBmcmVlemUgcGVyaW9kIGlzIG92ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGZvdW5kZXIpIHJldmVydCgpOwoKICAgICAgICAvL3NhbWUgYXMgYWJvdmUuIFJlcGxhY2UgdGhpcyBsaW5lIHdpdGggdGhlIGZvbGxvd2luZyBpZiB5b3Ugd2FudCB0byBwcm90ZWN0IGFnYWluc3Qgd3JhcHBpbmcgdWludHMuCiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CgogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICAvLyBmb3J3YXJkIGFsbCBldGggdG8gZm91bmRlcgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBpZiAoIWZvdW5kZXIuY2FsbC52YWx1ZShtc2cudmFsdWUpKCkpIHJldmVydCgpOyAKICAgIH0KCiAgICAvLyBvbmx5IG93bmVyIGNhbiBraWxsCiAgICBmdW5jdGlvbiBraWxsKCkgeyAKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBmb3VuZGVyKSB7CiAgICAgICAgICAgIHN1aWNpZGUoZm91bmRlcik7IAogICAgICAgIH0KICAgIH0KCn0='.
	

]
