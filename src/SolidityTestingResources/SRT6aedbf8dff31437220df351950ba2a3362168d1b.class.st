Class {
	#name : #SRT6aedbf8dff31437220df351950ba2a3362168d1b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6aedbf8dff31437220df351950ba2a3362168d1b >> base64 [
	^ ''.
	

]
