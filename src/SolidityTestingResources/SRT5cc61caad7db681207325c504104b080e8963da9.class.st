Class {
	#name : #SRT5cc61caad7db681207325c504104b080e8963da9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5cc61caad7db681207325c504104b080e8963da9 >> base64 [
	^ ''.
	

]
