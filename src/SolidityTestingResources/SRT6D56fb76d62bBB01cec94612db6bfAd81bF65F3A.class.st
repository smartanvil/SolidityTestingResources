Class {
	#name : #SRT6D56fb76d62bBB01cec94612db6bfAd81bF65F3A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6D56fb76d62bBB01cec94612db6bfAd81bF65F3A >> base64 [
	^ ''.
	

]
