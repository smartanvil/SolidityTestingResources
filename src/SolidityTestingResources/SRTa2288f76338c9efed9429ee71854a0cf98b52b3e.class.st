Class {
	#name : #SRTa2288f76338c9efed9429ee71854a0cf98b52b3e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa2288f76338c9efed9429ee71854a0cf98b52b3e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoKICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eQogKgogKiBUaGUgTUlUIExpY2Vuc2UgKE1JVCkKICogQ29weXJpZ2h0IChjKSAyMDE2IFNtYXJ0IENvbnRyYWN0IFNvbHV0aW9ucywgSW5jLgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKCi8qCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkKICoKICogVGhlIE1JVCBMaWNlbnNlIChNSVQpCiAqIENvcHlyaWdodCAoYykgMjAxNiBTbWFydCBDb250cmFjdCBTb2x1dGlvbnMsIEluYy4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgT25lLXRpbWUgc2NoZWR1bGFibGUgY29udHJhY3QKICogQGF1dGhvciBKYWt1YiBTdGVmYW5za2kgKGh0dHBzOi8vZ2l0aHViLmNvbS9qc3RlZmFuc2tpKQogKgogKiBodHRwczovL2dpdGh1Yi5jb20vT25MaXZlUGxhdGZvcm0vb25saXZlLWNvbnRyYWN0cwogKgogKiBUaGUgQlNEIDMtQ2xhdXNlIENsZWFyIExpY2Vuc2UKICogQ29weXJpZ2h0IChjKSAyMDE4IE9uTGl2ZSBMVEQKICovCmNvbnRyYWN0IFNjaGVkdWxhYmxlIGlzIE93bmFibGUgewoKICAgIC8qKgogICAgICogQGRldiBGaXJzdCBibG9jayB3aGVuIGNvbnRyYWN0IGlzIGFjdGl2ZSAoaW5jbHVzaXZlKS4gWmVybyBpZiBub3Qgc2NoZWR1bGVkLgogICAgICovCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydEJsb2NrOwoKICAgIC8qKgogICAgICogQGRldiBMYXN0IGJsb2NrIHdoZW4gY29udHJhY3QgaXMgYWN0aXZlIChpbmNsdXNpdmUpLiBaZXJvIGlmIG5vdCBzY2hlZHVsZWQuCiAgICAgKi8KICAgIHVpbnQyNTYgcHVibGljIGVuZEJsb2NrOwoKICAgIC8qKgogICAgICogQGRldiBDb250cmFjdCBzY2hlZHVsZWQgd2l0aGluIGdpdmVuIGJsb2NrcwogICAgICogQHBhcmFtIHN0YXJ0QmxvY2sgdWludDI1NiBUaGUgZmlyc3QgYmxvY2sgd2hlbiBjb250cmFjdCBpcyBhY3RpdmUgKGluY2x1c2l2ZSkKICAgICAqIEBwYXJhbSBlbmRCbG9jayB1aW50MjU2IFRoZSBsYXN0IGJsb2NrIHdoZW4gY29udHJhY3QgaXMgYWN0aXZlIChpbmNsdXNpdmUpCiAgICAgKi8KICAgIGV2ZW50IFNjaGVkdWxlZCh1aW50MjU2IHN0YXJ0QmxvY2ssIHVpbnQyNTYgZW5kQmxvY2spOwoKICAgIG1vZGlmaWVyIG9ubHlOb3RaZXJvKHVpbnQyNTYgdmFsdWUpIHsKICAgICAgICByZXF1aXJlKHZhbHVlICE9IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVNjaGVkdWxlZCgpIHsKICAgICAgICByZXF1aXJlKGlzU2NoZWR1bGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seU5vdFNjaGVkdWxlZCgpIHsKICAgICAgICByZXF1aXJlKCFpc1NjaGVkdWxlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBY3RpdmUoKSB7CiAgICAgICAgcmVxdWlyZShpc0FjdGl2ZSgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlOb3RBY3RpdmUoKSB7CiAgICAgICAgcmVxdWlyZSghaXNBY3RpdmUoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2NoZWR1bGUgY29udHJhY3QgYWN0aXZhdGlvbiBmb3IgZ2l2ZW4gYmxvY2sgcmFuZ2UKICAgICAqIEBwYXJhbSBfc3RhcnRCbG9jayB1aW50MjU2IFRoZSBmaXJzdCBibG9jayB3aGVuIGNvbnRyYWN0IGlzIGFjdGl2ZSAoaW5jbHVzaXZlKQogICAgICogQHBhcmFtIF9lbmRCbG9jayB1aW50MjU2IFRoZSBsYXN0IGJsb2NrIHdoZW4gY29udHJhY3QgaXMgYWN0aXZlIChpbmNsdXNpdmUpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNjaGVkdWxlKHVpbnQyNTYgX3N0YXJ0QmxvY2ssIHVpbnQyNTYgX2VuZEJsb2NrKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgICAgIG9ubHlOb3RTY2hlZHVsZWQKICAgICAgICBvbmx5Tm90WmVybyhfc3RhcnRCbG9jaykKICAgICAgICBvbmx5Tm90WmVybyhfZW5kQmxvY2spCiAgICB7CiAgICAgICAgcmVxdWlyZShfc3RhcnRCbG9jayA8IF9lbmRCbG9jayk7CgogICAgICAgIHN0YXJ0QmxvY2sgPSBfc3RhcnRCbG9jazsKICAgICAgICBlbmRCbG9jayA9IF9lbmRCbG9jazsKCiAgICAgICAgU2NoZWR1bGVkKF9zdGFydEJsb2NrLCBfZW5kQmxvY2spOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDaGVjayB3aGV0aGVyIGFjdGl2YXRpb24gaXMgc2NoZWR1bGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzU2NoZWR1bGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdGFydEJsb2NrID4gMCAmJiBlbmRCbG9jayA+IDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENoZWNrIHdoZXRoZXIgY29udHJhY3QgaXMgY3VycmVudGx5IGFjdGl2ZQogICAgICovCiAgICBmdW5jdGlvbiBpc0FjdGl2ZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYmxvY2subnVtYmVyID49IHN0YXJ0QmxvY2sgJiYgYmxvY2subnVtYmVyIDw9IGVuZEJsb2NrOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBQcmUtSUNPIENyb3dkc2FsZSB3aXRoIGNvbnN0YW50IHByaWNlIGFuZCBsaW1pdGVkIHN1cHBseQogKiBAYXV0aG9yIEpha3ViIFN0ZWZhbnNraSAoaHR0cHM6Ly9naXRodWIuY29tL2pzdGVmYW5za2kpCiAqCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9PbkxpdmVQbGF0Zm9ybS9vbmxpdmUtY29udHJhY3RzCiAqCiAqIFRoZSBCU0QgMy1DbGF1c2UgQ2xlYXIgTGljZW5zZQogKiBDb3B5cmlnaHQgKGMpIDIwMTggT25MaXZlIExURAogKi8KY29udHJhY3QgTWludGFibGUgewogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHM7CgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCkgcHVibGljOwp9CgoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUgZm9yIG9mZi1jaGFpbiBwYXltZW50IG1ldGhvZHMKICogQGF1dGhvciBKYWt1YiBTdGVmYW5za2kgKGh0dHBzOi8vZ2l0aHViLmNvbS9qc3RlZmFuc2tpKQogKgogKiBodHRwczovL2dpdGh1Yi5jb20vT25MaXZlUGxhdGZvcm0vb25saXZlLWNvbnRyYWN0cwogKgogKiBUaGUgQlNEIDMtQ2xhdXNlIENsZWFyIExpY2Vuc2UKICogQ29weXJpZ2h0IChjKSAyMDE4IE9uTGl2ZSBMVEQKICovCmNvbnRyYWN0IFByZUljb0Nyb3dkc2FsZSBpcyBTY2hlZHVsYWJsZSB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLyoqCiAgICAgKiBAZGV2IEFkZHJlc3Mgb2YgY29udHJpYnV0aW9uIHdhbGxldAogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogICAgLyoqCiAgICAgKiBAZGV2IEFkZHJlc3Mgb2YgbWludGFibGUgdG9rZW4gaW5zdGFuY2UKICAgICAqLwogICAgTWludGFibGUgcHVibGljIHRva2VuOwoKICAgIC8qKgogICAgICogQGRldiBDdXJyZW50IGFtb3VudCBvZiB0b2tlbnMgYXZhaWxhYmxlIGZvciBzYWxlCiAgICAgKi8KICAgIHVpbnQyNTYgcHVibGljIGF2YWlsYWJsZUFtb3VudDsKCiAgICAvKioKICAgICAqIEBkZXYgUHJpY2Ugb2YgdG9rZW4gaW4gV2VpCiAgICAgKi8KICAgIHVpbnQyNTYgcHVibGljIHByaWNlOwoKICAgIC8qKgogICAgICogQGRldiBNaW5pbXVtIEVUSCB2YWx1ZSBzZW50IGFzIGNvbnRyaWJ1dGlvbgogICAgICovCiAgICB1aW50MjU2IHB1YmxpYyBtaW5WYWx1ZTsKCiAgICAvKioKICAgICAqIEBkZXYgSW5kaWNhdGVzIHdoZXRoZXIgY29udHJpYnV0aW9uIGlkZW50aWZpZWQgYnkgYnl0ZXMzMiBpZCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQKICAgICAqLwogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBib29sKSBwdWJsaWMgaXNDb250cmlidXRpb25SZWdpc3RlcmVkOwoKICAgIGZ1bmN0aW9uIFByZUljb0Nyb3dkc2FsZSgKICAgICAgICBhZGRyZXNzIF93YWxsZXQsCiAgICAgICAgTWludGFibGUgX3Rva2VuLAogICAgICAgIHVpbnQyNTYgX2F2YWlsYWJsZUFtb3VudCwKICAgICAgICB1aW50MjU2IF9wcmljZSwKICAgICAgICB1aW50MjU2IF9taW5WYWx1ZQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlWYWxpZChfd2FsbGV0KQogICAgICAgIG9ubHlWYWxpZChfdG9rZW4pCiAgICAgICAgb25seU5vdFplcm8oX2F2YWlsYWJsZUFtb3VudCkKICAgICAgICBvbmx5Tm90WmVybyhfcHJpY2UpCiAgICB7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgICAgICBhdmFpbGFibGVBbW91bnQgPSBfYXZhaWxhYmxlQW1vdW50OwogICAgICAgIHByaWNlID0gX3ByaWNlOwogICAgICAgIG1pblZhbHVlID0gX21pblZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDb250cmlidXRpb24gaXMgYWNjZXB0ZWQKICAgICAqIEBwYXJhbSBjb250cmlidXRvciBhZGRyZXNzIFRoZSByZWNpcGllbnQgb2YgdGhlIHRva2VucwogICAgICogQHBhcmFtIHZhbHVlIHVpbnQyNTYgVGhlIGFtb3VudCBvZiBjb250cmlidXRlZCBFVEgKICAgICAqIEBwYXJhbSBhbW91bnQgdWludDI1NiBUaGUgYW1vdW50IG9mIHRva2VucwogICAgICovCiAgICBldmVudCBDb250cmlidXRpb25BY2NlcHRlZChhZGRyZXNzIGluZGV4ZWQgY29udHJpYnV0b3IsIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvKioKICAgICAqIEBkZXYgT2ZmLWNoYWluIGNvbnRyaWJ1dGlvbiByZWdpc3RlcmVkCiAgICAgKiBAcGFyYW0gaWQgYnl0ZXMzMiBBIHVuaXF1ZSBjb250cmlidXRpb24gaWQKICAgICAqIEBwYXJhbSBjb250cmlidXRvciBhZGRyZXNzIFRoZSByZWNpcGllbnQgb2YgdGhlIHRva2VucwogICAgICogQHBhcmFtIGFtb3VudCB1aW50MjU2IFRoZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKi8KICAgIGV2ZW50IENvbnRyaWJ1dGlvblJlZ2lzdGVyZWQoYnl0ZXMzMiBpbmRleGVkIGlkLCBhZGRyZXNzIGluZGV4ZWQgY29udHJpYnV0b3IsIHVpbnQyNTYgYW1vdW50KTsKCiAgICBtb2RpZmllciBvbmx5VmFsaWQoYWRkcmVzcyBhZGRyKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVN1ZmZpY2llbnRWYWx1ZSh1aW50MjU2IHZhbHVlKSB7CiAgICAgICAgcmVxdWlyZSh2YWx1ZSA+PSBtaW5WYWx1ZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5U3VmZmljaWVudEF2YWlsYWJsZVRva2Vucyh1aW50MjU2IGFtb3VudCkgewogICAgICAgIHJlcXVpcmUoYXZhaWxhYmxlQW1vdW50ID49IGFtb3VudCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5VW5pcXVlQ29udHJpYnV0aW9uKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXF1aXJlKCFpc0NvbnRyaWJ1dGlvblJlZ2lzdGVyZWRbaWRdKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBY2NlcHQgRVRIIHRyYW5zZmVycyBhcyBjb250cmlidXRpb25zCiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBhY2NlcHRDb250cmlidXRpb24obXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ29udHJpYnV0ZSBFVEggaW4gZXhjaGFuZ2UgZm9yIHRva2VucwogICAgICogQHBhcmFtIGNvbnRyaWJ1dG9yIGFkZHJlc3MgVGhlIGFkZHJlc3MgdGhhdCByZWNlaXZlcyB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gY29udHJpYnV0ZShhZGRyZXNzIGNvbnRyaWJ1dG9yKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGFjY2VwdENvbnRyaWJ1dGlvbihjb250cmlidXRvciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmVnaXN0ZXIgY29udHJpYnV0aW9uIHdpdGggZ2l2ZW4gaWQKICAgICAqIEBwYXJhbSBpZCBieXRlczMyIEEgdW5pcXVlIGNvbnRyaWJ1dGlvbiBpZAogICAgICogQHBhcmFtIGNvbnRyaWJ1dG9yIGFkZHJlc3MgVGhlIHJlY2lwaWVudCBvZiB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gYW1vdW50IHVpbnQyNTYgVGhlIGFtb3VudCBvZiB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gcmVnaXN0ZXJDb250cmlidXRpb24oYnl0ZXMzMiBpZCwgYWRkcmVzcyBjb250cmlidXRvciwgdWludDI1NiBhbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgb25seUFjdGl2ZQogICAgICAgIG9ubHlWYWxpZChjb250cmlidXRvcikKICAgICAgICBvbmx5Tm90WmVybyhhbW91bnQpCiAgICAgICAgb25seVVuaXF1ZUNvbnRyaWJ1dGlvbihpZCkKICAgIHsKICAgICAgICBpc0NvbnRyaWJ1dGlvblJlZ2lzdGVyZWRbaWRdID0gdHJ1ZTsKICAgICAgICBtaW50VG9rZW5zKGNvbnRyaWJ1dG9yLCBhbW91bnQpOwoKICAgICAgICBDb250cmlidXRpb25SZWdpc3RlcmVkKGlkLCBjb250cmlidXRvciwgYW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2FsY3VsYXRlIGFtb3VudCBvZiBPTkwgdG9rZW5zIHJlY2VpdmVkIGZvciBnaXZlbiBFVEggdmFsdWUKICAgICAqIEBwYXJhbSB2YWx1ZSB1aW50MjU2IENvbnRyaWJ1dGlvbiB2YWx1ZSBpbiBFVEgKICAgICAqIEByZXR1cm4gdWludDI1NiBBbW91bnQgb2YgcmVjZWl2ZWQgT05MIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVDb250cmlidXRpb24odWludDI1NiB2YWx1ZSkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB2YWx1ZS5tdWwoMTAgKiogdG9rZW4uZGVjaW1hbHMoKSkuZGl2KHByaWNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhY2NlcHRDb250cmlidXRpb24oYWRkcmVzcyBjb250cmlidXRvciwgdWludDI1NiB2YWx1ZSkKICAgICAgICBwcml2YXRlCiAgICAgICAgb25seUFjdGl2ZQogICAgICAgIG9ubHlWYWxpZChjb250cmlidXRvcikKICAgICAgICBvbmx5U3VmZmljaWVudFZhbHVlKHZhbHVlKQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBjYWxjdWxhdGVDb250cmlidXRpb24odmFsdWUpOwogICAgICAgIG1pbnRUb2tlbnMoY29udHJpYnV0b3IsIGFtb3VudCk7CgogICAgICAgIHdhbGxldC50cmFuc2Zlcih2YWx1ZSk7CgogICAgICAgIENvbnRyaWJ1dGlvbkFjY2VwdGVkKGNvbnRyaWJ1dG9yLCB2YWx1ZSwgYW1vdW50KTsKCiAgICAgICAgcmV0dXJuIGFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KQogICAgICAgIHByaXZhdGUKICAgICAgICBvbmx5U3VmZmljaWVudEF2YWlsYWJsZVRva2VucyhhbW91bnQpCiAgICB7CiAgICAgICAgYXZhaWxhYmxlQW1vdW50ID0gYXZhaWxhYmxlQW1vdW50LnN1YihhbW91bnQpOwogICAgICAgIHRva2VuLm1pbnQodG8sIGFtb3VudCk7CiAgICB9Cn0='.
	

]
