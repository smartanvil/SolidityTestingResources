Class {
	#name : #SRTbdba65bb45f2922b08f17a67d3bfcdb1a6e3267c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbdba65bb45f2922b08f17a67d3bfcdb1a6e3267c >> base64 [
	^ ''.
	

]
