Class {
	#name : #SRTb7c6f23e9bfd56b7337916086b699f104959a2ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7c6f23e9bfd56b7337916086b699f104959a2ff >> base64 [
	^ ''.
	

]
