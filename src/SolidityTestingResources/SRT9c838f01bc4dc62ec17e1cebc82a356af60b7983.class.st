Class {
	#name : #SRT9c838f01bc4dc62ec17e1cebc82a356af60b7983,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9c838f01bc4dc62ec17e1cebc82a356af60b7983 >> base64 [
	^ ''.
	

]
