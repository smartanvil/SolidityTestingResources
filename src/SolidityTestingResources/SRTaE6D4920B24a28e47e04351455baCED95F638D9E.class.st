Class {
	#name : #SRTaE6D4920B24a28e47e04351455baCED95F638D9E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaE6D4920B24a28e47e04351455baCED95F638D9E >> base64 [
	^ ''.
	

]
