Class {
	#name : #SRT1dd0497c6a7e90d4e88cbb0adf9c8326b83097d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1dd0497c6a7e90d4e88cbb0adf9c8326b83097d9 >> base64 [
	^ ''.
	

]
