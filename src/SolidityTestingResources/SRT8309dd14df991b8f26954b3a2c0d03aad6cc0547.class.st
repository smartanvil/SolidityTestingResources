Class {
	#name : #SRT8309dd14df991b8f26954b3a2c0d03aad6cc0547,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8309dd14df991b8f26954b3a2c0d03aad6cc0547 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKiogU2FmZU1hdGggbGlicyBhcmUgaW5zcGlyZWQgYnk6CiAgKiAgaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9ibG9iL21hc3Rlci9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKICAqIFRoZXJlIGlzIGRlYmF0ZSBhcyB0byB3aGV0aGVyIHRoaXMgbGliIHNob3VsZCB1c2UgYXNzZXJ0IG9yIHJlcXVpcmU6CiAgKiAgaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvNTY1CgogICogYHJlcXVpcmVgIGlzIHVzZWQgaW4gdGhlc2UgbGlicmFyaWVzIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbnM6CiAgKiAgIC0gb3ZlcmZsb3dzIHNob3VsZCBub3QgYmUgY2hlY2tlZCBpbiBjb250cmFjdCBmdW5jdGlvbiBib2RpZXM7IERSWQogICogICAtICJ2YWxpZCIgdXNlciBpbnB1dCBjYW4gY2F1c2Ugb3ZlcmZsb3dzLCB3aGljaCBzaG91bGQgbm90IGFzc2VydCgpCiAgKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJlcXVpcmUoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKbGlicmFyeSBTYWZlTWF0aDY0IHsKICBmdW5jdGlvbiBzdWIodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50NjQpIHsKICAgIHVpbnQ2NCBjID0gYSArIGI7CiAgICByZXF1aXJlKGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovLyBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9vd25lcnNoaXAvT3duYWJsZS5zb2wKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQp9CgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMApjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvYmxvYi9tYXN0ZXIvY29udHJhY3RzL3Rva2VuL0RldGFpbGVkRVJDMjAuc29sCmNvbnRyYWN0IERldGFpbGVkRVJDMjAgaXMgRVJDMjAgewogIHN0cmluZyBwdWJsaWMgbmFtZTsKICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgogIGZ1bmN0aW9uIERldGFpbGVkRVJDMjAoc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWxzKSBwdWJsaWMgewogICAgbmFtZSA9IF9uYW1lOwogICAgc3ltYm9sID0gX3N5bWJvbDsKICAgIGRlY2ltYWxzID0gX2RlY2ltYWxzOwogIH0KfQoKCi8qKiBLYXJtYVRva2VuIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgKgogICogVXNlciBDcmVhdGlvbjoKICAqIC0gU2VsZi1yZWdpc3RyYXRpb24KICAqICAgLSBPd25lciBzaWducyBoYXNoKGFkZHJlc3MsIHVzZXJuYW1lLCBlbmRvd21lbnQpLCBhbmQgc2VuZHMgdG8gdXNlcgogICogICAtIFVzZXIgcmVnaXN0ZXJzIHdpdGggdXNlcm5hbWUsIGVuZG93bWVudCwgYW5kIHNpZ25hdHVyZSB0byBjcmVhdGUgbmV3IGFjY291bnQuCiAgKiAtIE1vZCBjcmVhdGVzIG5ldyB1c2VyLgogICogLSBVc2VycyBhcmUgZmlyc3QgZWxpZ2libGUgdG8gd2l0aGRyYXcgZGl2aWRlbmRzIGZvciB0aGUgcGVyaW9kIGFmdGVyIGFjY291bnQgY3JlYXRpb24uCiAgKgogICogS2FybWEvVG9rZW4gUnVsZXM6CiAgKiAtIEthcm1hIGlzIGNyZWF0ZWQgYnkgaW5pdGlhbCB1c2VyIGNyZWF0aW9uIGVuZG93bWVudC4KICAqIC0gS2FybWEgY2FuIGFsc28gYmUgbWludGVkIGJ5IG1vZCBpbnRvIGFuIGV4aXN0aW5nIGFjY291bnQuCiAgKiAtIEthcm1hIGNhbiBvbmx5IGJlIHRyYW5zZmVycmVkIHRvIGV4aXN0aW5nIGFjY291bnQgaG9sZGVyLgogICogLSBLYXJtYSBpbXBsZW1lbnRzIHRoZSBFUkMyMCB0b2tlbiBpbnRlcmZhY2UuCiAgKgogICogRGl2aWRlbmRzOgogICogLSBlYWNoIHVzZXIgY2FuIHdpdGhkcmF3IGEgZGl2aWRlbmQgb25jZSBwZXIgbW9udGguCiAgKiAtIGRpdmlkZW5kIGlzIHRvdGFsIGNvbnRyYWN0IHZhbHVlIG1pbnVzIG93bmVyIGN1dCBhdCBlbmQgb2YgdGhlIG1vbnRoLCBkaXZpZGVkIGJ5IHRvdGFsIG51bWJlciBvZiB1c2VycyBhdCBlbmQgb2YgbW9udGguCiAgKiAtIG93bmVyIGN1dCBpcyBkZXRlcm1pbmVkIGF0IGJlZ2lubmluZyBvZiBuZXcgcGVyaW9kLgogICogLSB1c2VyIGhhcyAxIG1vbnRoIHRvIHdpdGhkcmF3IHRoZWlyIGRpdmlkZW5kIGZyb20gdGhlIHByZXZpb3VzIG1vbnRoLgogICogLSBpZiB1c2VyIGRvZXMgbm90IHdpdGhkcmF3IHRoZWlyIGRpdmlkZW5kLCB0aGVpciBzaGFyZSB3aWxsIGJlIGdpdmVuIHRvIG93bmVyLgogICogLSBtb2QgY2FuIHBsYWNlIGEgdXNlciBvbiBhIDEgbW9udGggInRpbWVvdXQiLCB3aGVyZWJ5IHRoZXkgd29uJ3QgYmUgZWxpZ2libGUgZm9yIGEgZGl2aWRlbmQuCgogICogRWc6IDEwIGV0aCBpcyBzZW50IHRvIHRoZSBjb250cmFjdCBpbiBKYW51YXJ5LCBvd25lciBjdXQgaXMgMzAlLiAKICAqIFRoZXJlIGFyZSA3MCB0b2tlbiBob2xkZXJzIG9uIEphbiAzMS4gQXQgYW55IHRpbWUgaW4gRmVicnVhcnksIGVhY2ggdG9rZW4gaG9sZGVyIGNhbiB3aXRoZHJhdyAuMSBldGggZm9yIHRoZWlyIEphbnVhcnkgCiAgKiBkaXZpZGVuZCAodW5sZXNzIHRoZXkgd2VyZSBnaXZlbiBhICJ0aW1lb3V0IiBpbiBKYW51YXJ5KS4KICAqLwpjb250cmFjdCBLYXJtYSBpcyBPd25hYmxlLCBEZXRhaWxlZEVSQzIwKCJLYXJtYVRva2VuIiwgIktBUk1BIiwgMCkgewogIC8vIFNhZmVNYXRoIGxpYnMgYXJlIHJlc3BvbnNpYmxlIGZvciBjaGVja2luZyBvdmVyZmxvdy4KICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICB1c2luZyBTYWZlTWF0aDY0IGZvciB1aW50NjQ7CgogIHN0cnVjdCBVc2VyIHsKICAgIGJ5dGVzMjAgdXNlcm5hbWU7CiAgICB1aW50NjQga2FybWE7IAogICAgdWludDE2IGNhbldpdGhkcmF3UGVyaW9kOwogICAgdWludDE2IGJpcnRoUGVyaW9kOwogIH0KCiAgLy8gTWFuYWdlIHVzZXJzLgogIG1hcHBpbmcoYWRkcmVzcyA9PiBVc2VyKSBwdWJsaWMgdXNlcnM7CiAgbWFwcGluZyhieXRlczIwID0+IGFkZHJlc3MpIHB1YmxpYyB1c2VybmFtZXM7CgogIC8vIE1hbmFnZSBkaXZpZGVuZCBwYXltZW50cy4KICB1aW50MjU2IHB1YmxpYyBlcG9jaDsgLy8gVGltZXN0YW1wIGF0IHN0YXJ0IG9mIG5ldyBwZXJpb2QuCiAgdWludDI1NiBkaXZpZGVuZFBvb2w7IC8vIFRvdGFsIGFtb3VudCBvZiBkaXZpZGVuZHMgdG8gcGF5IG91dCBmb3IgbGFzdCBwZXJpb2QuCiAgdWludDI1NiBwdWJsaWMgZGl2aWRlbmQ7IC8vIFBlci11c2VyIHNoYXJlIG9mIGxhc3QgcGVyaW9kJ3MgZGl2aWRlbmQuCiAgdWludDI1NiBwdWJsaWMgb3duZXJDdXQ7IC8vIFBlcmNlbnRhZ2UsIGluIGJhc2lzIHBvaW50cywgb2Ygb3duZXIgY3V0IG9mIHRoaXMgcGVyaW9kJ3MgcGF5bWVudHMuCiAgdWludDY0IHB1YmxpYyBudW1Vc2VyczsgLy8gTnVtYmVyIG9mIHVzZXJzIGNyZWF0ZWQgYmVmb3JlIHRoaXMgcGVyaW9kLgogIHVpbnQ2NCBwdWJsaWMgbmV3VXNlcnM7IC8vIE51bWJlciBvZiB1c2VycyBjcmVhdGVkIGR1cmluZyB0aGlzIHBlcmlvZC4KICB1aW50MTYgcHVibGljIGN1cnJlbnRQZXJpb2QgPSAxOwoKICBhZGRyZXNzIHB1YmxpYyBtb2RlcmF0b3I7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IFBlcmlvZEVuZCh1aW50MTYgcGVyaW9kLCB1aW50MjU2IGFtb3VudCwgdWludDY0IHVzZXJzKTsKICBldmVudCBQYXltZW50KGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgV2l0aGRyYXdhbChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQxNiBpbmRleGVkIHBlcmlvZCwgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE5ld1VzZXIoYWRkcmVzcyBhZGRyLCBieXRlczIwIHVzZXJuYW1lLCB1aW50NjQgZW5kb3dtZW50KTsKCiAgbW9kaWZpZXIgb25seU1vZCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtb2RlcmF0b3IpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIEthcm1hKHVpbnQyNTYgX3N0YXJ0RXBvY2gpIHB1YmxpYyB7CiAgICBlcG9jaCA9IF9zdGFydEVwb2NoOwogICAgbW9kZXJhdG9yID0gbXNnLnNlbmRlcjsKICB9CgogIGZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewogICAgUGF5bWVudChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogIH0KCiAgLyoqIAogICAqIE93bmVyIEZ1bmN0aW9ucyAKICAgKi8KCiAgZnVuY3Rpb24gc2V0TW9kKGFkZHJlc3MgX25ld01vZCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtb2RlcmF0b3IgPSBfbmV3TW9kOwogIH0KCiAgLy8gT3duZXIgc2hvdWxkIGNhbGwgdGhpcyBvbiAxc3Qgb2YgZXZlcnkgbW9udGguCiAgLy8gX293bmVyQ3V0IGlzIG5ldyBvd25lciBjdXQgZm9yIG5ldyBwZXJpb2QuCiAgZnVuY3Rpb24gbmV3UGVyaW9kKHVpbnQyNTYgX293bmVyQ3V0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobm93ID49IGVwb2NoICsgMjggZGF5cyk7CiAgICByZXF1aXJlKF9vd25lckN1dCA8PSAxMDAwMCk7CgogICAgdWludDI1NiB1bmNsYWltZWREaXZpZGVuZCA9IGRpdmlkZW5kUG9vbDsKICAgIHVpbnQyNTYgb3duZXJSYWtlID0gKHRoaXMuYmFsYW5jZS11bmNsYWltZWREaXZpZGVuZCkgKiBvd25lckN1dCAvIDEwMDAwOwoKICAgIGRpdmlkZW5kUG9vbCA9IHRoaXMuYmFsYW5jZSAtIHVuY2xhaW1lZERpdmlkZW5kIC0gb3duZXJSYWtlOwoKICAgIC8vIENhbGN1bGF0ZSBkaXZpZGVuZC4KICAgIHVpbnQ2NCBleGlzdGluZ1VzZXJzID0gbnVtVXNlcnM7CiAgICBpZiAoZXhpc3RpbmdVc2VycyA9PSAwKSB7CiAgICAgIGRpdmlkZW5kID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGRpdmlkZW5kID0gZGl2aWRlbmRQb29sIC8gZXhpc3RpbmdVc2VyczsKICAgIH0KCiAgICBudW1Vc2VycyA9IG51bVVzZXJzLmFkZChuZXdVc2Vycyk7CiAgICBuZXdVc2VycyA9IDA7CiAgICBjdXJyZW50UGVyaW9kKys7CiAgICBlcG9jaCA9IG5vdzsKICAgIG93bmVyQ3V0ID0gX293bmVyQ3V0OwoKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIob3duZXJSYWtlICsgdW5jbGFpbWVkRGl2aWRlbmQpOwogICAgUGVyaW9kRW5kKGN1cnJlbnRQZXJpb2QtMSwgdGhpcy5iYWxhbmNlLCBleGlzdGluZ1VzZXJzKTsKICB9CgogIC8qKgogICAgKiBNb2QgRnVuY3Rpb25zCiAgICAqLwoKICBmdW5jdGlvbiBjcmVhdGVVc2VyKGFkZHJlc3MgX2FkZHIsIGJ5dGVzMjAgX3VzZXJuYW1lLCB1aW50NjQgX2Ftb3VudCkgcHVibGljIG9ubHlNb2QgewogICAgbmV3VXNlcihfYWRkciwgX3VzZXJuYW1lLCBfYW1vdW50KTsKICB9CgogIC8vIFNlbmQga2FybWEgdG8gZXhpc3RpbmcgYWNjb3VudC4KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX2FkZHIsIHVpbnQ2NCBfYW1vdW50KSBwdWJsaWMgb25seU1vZCB7CiAgICByZXF1aXJlKHVzZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCAhPSAwKTsKCiAgICB1c2Vyc1tfYWRkcl0ua2FybWEgPSB1c2Vyc1tfYWRkcl0ua2FybWEuYWRkKF9hbW91bnQpOwogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF9hZGRyLCBfYW1vdW50KTsKICB9CgogIC8vIElmIGEgdXNlciBoYXMgYmVlbiBiYWQsIHRoZXkgd29uJ3QgYmUgYWJsZSB0byByZWNlaXZlIGEgZGl2aWRlbmQgOigKICBmdW5jdGlvbiB0aW1lb3V0KGFkZHJlc3MgX2FkZHIpIHB1YmxpYyBvbmx5TW9kIHsKICAgIHJlcXVpcmUodXNlcnNbX2FkZHJdLmNhbldpdGhkcmF3UGVyaW9kICE9IDApOwoKICAgIHVzZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCA9IGN1cnJlbnRQZXJpb2QgKyAxOwogIH0KCiAgLyoqCiAgICAqIFVzZXIgRnVuY3Rpb25zCiAgICAqLwoKICAvLyBPd25lciB3aWxsIHNpZ24gaGFzaChhZGRyZXNzLCB1c2VybmFtZSwgYW1vdW50KSwgYW5kIGFkZHJlc3Mgb3duZXIgdXNlcyB0aGlzIAogIC8vIHNpZ25hdHVyZSB0byByZWdpc3RlciB0aGVpciBhY2NvdW50LgogIGZ1bmN0aW9uIHJlZ2lzdGVyKGJ5dGVzMjAgX3VzZXJuYW1lLCB1aW50NjQgX2VuZG93bWVudCwgYnl0ZXMgX3NpZykgcHVibGljIHsKICAgIHJlcXVpcmUocmVjb3ZlcihrZWNjYWsyNTYobXNnLnNlbmRlciwgX3VzZXJuYW1lLCBfZW5kb3dtZW50KSwgX3NpZykgPT0gb3duZXIpOwogICAgbmV3VXNlcihtc2cuc2VuZGVyLCBfdXNlcm5hbWUsIF9lbmRvd21lbnQpOwogIH0KCiAgLy8gVXNlciBjYW4gd2l0aGRyYXcgdGhlaXIgc2hhcmUgb2YgZG9uYXRpb25zIGZyb20gdGhlIHByZXZpb3VzIG1vbnRoLgogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHsKICAgIHJlcXVpcmUodXNlcnNbbXNnLnNlbmRlcl0uY2FuV2l0aGRyYXdQZXJpb2QgIT0gMCk7CiAgICByZXF1aXJlKHVzZXJzW21zZy5zZW5kZXJdLmNhbldpdGhkcmF3UGVyaW9kIDwgY3VycmVudFBlcmlvZCk7CgogICAgdXNlcnNbbXNnLnNlbmRlcl0uY2FuV2l0aGRyYXdQZXJpb2QgPSBjdXJyZW50UGVyaW9kOwogICAgZGl2aWRlbmRQb29sIC09IGRpdmlkZW5kOwogICAgbXNnLnNlbmRlci50cmFuc2ZlcihkaXZpZGVuZCk7CiAgICBXaXRoZHJhd2FsKG1zZy5zZW5kZXIsIGN1cnJlbnRQZXJpb2QtMSwgZGl2aWRlbmQpOwogIH0KCiAgLyoqCiAgICAqIEVSQzIwIEZ1bmN0aW9ucwogICAgKi8KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiB1c2Vyc1tfb3duZXJdLmthcm1hOwogIH0KCiAgLy8gQ29udHJhcnkgdG8gbW9zdCBFUkMyMCBpbXBsZW1lbnRhdGlvbnMsIHJlcXVpcmUgdGhhdCByZWNpcGllbnQgaXMgZXhpc3RpbmcgdXNlci4KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKHVzZXJzW190b10uY2FuV2l0aGRyYXdQZXJpb2QgIT0gMCk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSB1c2Vyc1ttc2cuc2VuZGVyXS5rYXJtYSk7CgogICAgLy8gVHlwZSBhc3NlcnRpb24gdG8gdWludDY0IGlzIHNhZmUgYmVjYXVzZSB3ZSByZXF1aXJlIHRoYXQgX3ZhbHVlIGlzIDwgdWludDY0IGFib3ZlLgogICAgdXNlcnNbbXNnLnNlbmRlcl0ua2FybWEgPSB1c2Vyc1ttc2cuc2VuZGVyXS5rYXJtYS5zdWIodWludDY0KF92YWx1ZSkpOwogICAgdXNlcnNbX3RvXS5rYXJtYSA9IHVzZXJzW190b10ua2FybWEuYWRkKHVpbnQ2NChfdmFsdWUpKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBDb250cmFyeSB0byBtb3N0IEVSQzIwIGltcGxlbWVudGF0aW9ucywgcmVxdWlyZSB0aGF0IHJlY2lwaWVudCBpcyBleGlzdGluZyB1c2VyLgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKHVzZXJzW190b10uY2FuV2l0aGRyYXdQZXJpb2QgIT0gMCk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSB1c2Vyc1tfZnJvbV0ua2FybWEpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIHVzZXJzW19mcm9tXS5rYXJtYSA9IHVzZXJzW19mcm9tXS5rYXJtYS5zdWIodWludDY0KF92YWx1ZSkpOwogICAgdXNlcnNbX3RvXS5rYXJtYSA9IHVzZXJzW190b10ua2FybWEuYWRkKHVpbnQ2NChfdmFsdWUpKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgICogUHJpdmF0ZSBGdW5jdGlvbnMKICAgICovCgogIC8vIEVuc3VyZXMgdGhhdCB1c2VybmFtZSBpc24ndCB0YWtlbiwgYW5kIGFjY291bnQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IGZvciAKICAvLyB1c2VyJ3MgYWRkcmVzcy4KICBmdW5jdGlvbiBuZXdVc2VyKGFkZHJlc3MgX2FkZHIsIGJ5dGVzMjAgX3VzZXJuYW1lLCB1aW50NjQgX2VuZG93bWVudCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKHVzZXJuYW1lc1tfdXNlcm5hbWVdID09IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh1c2Vyc1tfYWRkcl0uY2FuV2l0aGRyYXdQZXJpb2QgPT0gMCk7CgogICAgdXNlcnNbX2FkZHJdLmNhbldpdGhkcmF3UGVyaW9kID0gY3VycmVudFBlcmlvZCArIDE7CiAgICB1c2Vyc1tfYWRkcl0uYmlydGhQZXJpb2QgPSBjdXJyZW50UGVyaW9kOwogICAgdXNlcnNbX2FkZHJdLmthcm1hID0gX2VuZG93bWVudDsKICAgIHVzZXJzW19hZGRyXS51c2VybmFtZSA9IF91c2VybmFtZTsKICAgIHVzZXJuYW1lc1tfdXNlcm5hbWVdID0gX2FkZHI7CgogICAgbmV3VXNlcnMgPSBuZXdVc2Vycy5hZGQoMSk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfZW5kb3dtZW50KTsKICAgIE5ld1VzZXIoX2FkZHIsIF91c2VybmFtZSwgX2VuZG93bWVudCk7CiAgfQoKICAvLyBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9FQ1JlY292ZXJ5LnNvbAogIGZ1bmN0aW9uIHJlY292ZXIoYnl0ZXMzMiBoYXNoLCBieXRlcyBzaWcpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYWRkcmVzcykgewogICAgYnl0ZXMzMiByOwogICAgYnl0ZXMzMiBzOwogICAgdWludDggdjsKCiAgICAvL0NoZWNrIHRoZSBzaWduYXR1cmUgbGVuZ3RoCiAgICBpZiAoc2lnLmxlbmd0aCAhPSA2NSkgewogICAgICByZXR1cm4gKGFkZHJlc3MoMCkpOwogICAgfQoKICAgIC8vIERpdmlkZSB0aGUgc2lnbmF0dXJlIGluIHIsIHMgYW5kIHYgdmFyaWFibGVzCiAgICBhc3NlbWJseSB7CiAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZywgMzIpKQogICAgICBzIDo9IG1sb2FkKGFkZChzaWcsIDY0KSkKICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWcsIDk2KSkpCiAgICB9CgogICAgLy8gVmVyc2lvbiBvZiBzaWduYXR1cmUgc2hvdWxkIGJlIDI3IG9yIDI4LCBidXQgMCBhbmQgMSBhcmUgYWxzbyBwb3NzaWJsZSB2ZXJzaW9ucwogICAgaWYgKHYgPCAyNykgewogICAgICB2ICs9IDI3OwogICAgfQoKICAgIC8vIElmIHRoZSB2ZXJzaW9uIGlzIGNvcnJlY3QgcmV0dXJuIHRoZSBzaWduZXIgYWRkcmVzcwogICAgaWYgKHYgIT0gMjcgJiYgdiAhPSAyOCkgewogICAgICByZXR1cm4gKGFkZHJlc3MoMCkpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVjcmVjb3ZlcihoYXNoLCB2LCByLCBzKTsKICAgIH0KICB9Cn0='.
	

]
