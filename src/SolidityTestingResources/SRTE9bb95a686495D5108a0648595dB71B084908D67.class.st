Class {
	#name : #SRTE9bb95a686495D5108a0648595dB71B084908D67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE9bb95a686495D5108a0648595dB71B084908D67 >> base64 [
	^ ''.
	

]
