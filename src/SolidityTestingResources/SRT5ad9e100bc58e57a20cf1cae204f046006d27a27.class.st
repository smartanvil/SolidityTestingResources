Class {
	#name : #SRT5ad9e100bc58e57a20cf1cae204f046006d27a27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ad9e100bc58e57a20cf1cae204f046006d27a27 >> base64 [
	^ ''.
	

]
