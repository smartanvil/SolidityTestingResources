Class {
	#name : #SRTb533aae346245e2e05b23f420C140bCA2529b8a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb533aae346245e2e05b23f420C140bCA2529b8a6 >> base64 [
	^ ''.
	

]
