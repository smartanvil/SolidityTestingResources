Class {
	#name : #SRTd0cef0a3d1c4df82623feaf81baca80f0194e9cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd0cef0a3d1c4df82623feaf81baca80f0194e9cc >> base64 [
	^ ''.
	

]
