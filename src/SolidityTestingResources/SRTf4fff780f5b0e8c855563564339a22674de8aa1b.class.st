Class {
	#name : #SRTf4fff780f5b0e8c855563564339a22674de8aa1b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4fff780f5b0e8c855563564339a22674de8aa1b >> base64 [
	^ ''.
	

]
