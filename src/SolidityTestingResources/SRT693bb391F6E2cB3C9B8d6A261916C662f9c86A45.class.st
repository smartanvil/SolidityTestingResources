Class {
	#name : #SRT693bb391F6E2cB3C9B8d6A261916C662f9c86A45,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT693bb391F6E2cB3C9B8d6A261916C662f9c86A45 >> base64 [
	^ ''.
	

]
