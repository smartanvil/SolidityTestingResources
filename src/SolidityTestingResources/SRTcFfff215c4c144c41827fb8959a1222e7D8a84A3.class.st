Class {
	#name : #SRTcFfff215c4c144c41827fb8959a1222e7D8a84A3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcFfff215c4c144c41827fb8959a1222e7D8a84A3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBDcmVkaXRJREVOVElUWXsKICAgIAogICAgYWRkcmVzcyBwdWJsaWMgY3JlZGl0RGFvOwogICAgCiAgICB1aW50IHB1YmxpYyBuZXh0RmllbGRJbmRleDsKICAgIG1hcHBpbmcgKHVpbnQgPT4gc3RyaW5nKSBhdmFsaWFibGVGaWVsZHM7CiAgICBtYXBwaW5nIChzdHJpbmcgPT4gYm9vbCkgZmllbGRBY3RpdmF0ZWQ7CiAgICBtYXBwaW5nIChzdHJpbmcgPT4gdWludCkgZmllbGRUeXBlczsKICAgIAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBzdHJpbmcpIGFkZHJlc3NEZXNjcmlwdGlvbnM7CiAgICAKICAgIHVpbnQgcHVibGljIG5leHRJZGVudGl0eUFjY291bnQ7CiAgICBtYXBwaW5nICh1aW50ID0+IG1hcHBpbmcgKGJ5dGVzID0+IGJ5dGVzKSkgaWRlbnRpdHlBY2NvdW50czsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGFkZHJlc3NUb0FjY291bnRNYXA7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpKSBtYXBwaW5nUHJvcG9zYWw7CiAgICAKICAgIGV2ZW50IE1hcHBpbmdQcm9wb3NhbElzc3VlZChhZGRyZXNzIF9hZGRyZXNzVGhhdE1hcHBlZCwgYWRkcmVzcyBfYWRkcmVzc1RvTWFwLCB1aW50IGlkZW50aXR5SWQpOwogICAgZXZlbnQgTWFwcGluZ0RvbmUoYWRkcmVzcyBfYWRkcmVzc1RvTWFwLCB1aW50IGlkZW50aXR5SWQpOwogICAgZXZlbnQgQWRkcmVzc0Rlc2NyaXB0aW9uQWRkZWQoYWRkcmVzcyBfc291cmNlLCBzdHJpbmcgX2Rlc2NyaXB0aW9uKTsKICAgIAogICAgZnVuY3Rpb24gQ3JlZGl0SURFTlRJVFkoYWRkcmVzcyBfY3JlZGl0RGFvKSB7CiAgICAgICAgbmV4dEZpZWxkSW5kZXggPSAxOwogICAgICAgIG5leHRJZGVudGl0eUFjY291bnQgPSAxOwogICAgICAgIGNyZWRpdERhbyA9IF9jcmVkaXREYW87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZEFkZHJlc3NEZXNjcmlwdGlvbihzdHJpbmcgX2FkZHJlc3NEZXNjcmlwdGlvbil7CiAgICAgICAgYWRkcmVzc0Rlc2NyaXB0aW9uc1ttc2cuc2VuZGVyXSA9IF9hZGRyZXNzRGVzY3JpcHRpb247CiAgICAgICAgQWRkcmVzc0Rlc2NyaXB0aW9uQWRkZWQobXNnLnNlbmRlciwgX2FkZHJlc3NEZXNjcmlwdGlvbik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEZpZWxkRGF0YSh1aW50IF9pbmRleCkgY29uc3RhbnQgcmV0dXJucyAodWludCwgYnl0ZXMsIGJvb2wsIHVpbnQpewogICAgICAgIHN0cmluZyB0ZW1wRmllbGQgPSBhdmFsaWFibGVGaWVsZHNbX2luZGV4XTsKICAgICAgICBieXRlcyBtZW1vcnkgdGVtcEJ5dGVGaWVsZCA9IGJ5dGVzKHRlbXBGaWVsZCk7CiAgICAgICAgcmV0dXJuIChfaW5kZXgsIHRlbXBCeXRlRmllbGQsIGZpZWxkQWN0aXZhdGVkW3RlbXBGaWVsZF0sIGZpZWxkVHlwZXNbdGVtcEZpZWxkXSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZEFjY291bnREYXRhKHN0cmluZyBfZmllbGQsIGJ5dGVzIF9kYXRhKXsKICAgICAgICBpZiAoZmllbGRBY3RpdmF0ZWRbX2ZpZWxkXSAhPSB0cnVlKSB0aHJvdzsKICAgICAgICBieXRlcyBtZW1vcnkgZmllbGRCeXRlcyA9IGJ5dGVzKF9maWVsZCk7CiAgICAgICAgaWYgKGFkZHJlc3NUb0FjY291bnRNYXBbbXNnLnNlbmRlcl0gPT0gMCl7CiAgICAgICAgICAgIGlkZW50aXR5QWNjb3VudHNbbmV4dElkZW50aXR5QWNjb3VudF1bZmllbGRCeXRlc10gPSBfZGF0YTsKICAgICAgICAgICAgYWRkcmVzc1RvQWNjb3VudE1hcFttc2cuc2VuZGVyXSA9IG5leHRJZGVudGl0eUFjY291bnQ7CiAgICAgICAgICAgIG5leHRJZGVudGl0eUFjY291bnQgKz0gMTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdWludCBhY2NvdW50SWQgPSBhZGRyZXNzVG9BY2NvdW50TWFwW21zZy5zZW5kZXJdOwogICAgICAgICAgICBpZGVudGl0eUFjY291bnRzW2FjY291bnRJZF1bZmllbGRCeXRlc10gPSBfZGF0YTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZEFkZHJlc3NNYXBwaW5nUHJvcG9zYWwoYWRkcmVzcyBfYWRkcmVzc1RvTWFwKXsKICAgICAgICBpZiAoYWRkcmVzc1RvQWNjb3VudE1hcFttc2cuc2VuZGVyXSA9PSAwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBtYXBwaW5nUHJvcG9zYWxbbXNnLnNlbmRlcl1bX2FkZHJlc3NUb01hcF0gPSBhZGRyZXNzVG9BY2NvdW50TWFwW21zZy5zZW5kZXJdOwogICAgICAgIE1hcHBpbmdQcm9wb3NhbElzc3VlZChtc2cuc2VuZGVyLCBfYWRkcmVzc1RvTWFwLCBhZGRyZXNzVG9BY2NvdW50TWFwW21zZy5zZW5kZXJdKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZU1hcHBpbmdQcm9wb3NhbChhZGRyZXNzIF9hZGRyZXNzVGhhdE1hcHBlZCkgewogICAgICAgIGlmIChtYXBwaW5nUHJvcG9zYWxbX2FkZHJlc3NUaGF0TWFwcGVkXVttc2cuc2VuZGVyXSA9PSAwKSB0aHJvdzsKICAgICAgICAKICAgICAgICB1aW50IHRlbXBJZCA9IG1hcHBpbmdQcm9wb3NhbFtfYWRkcmVzc1RoYXRNYXBwZWRdW21zZy5zZW5kZXJdOwogICAgICAgIGFkZHJlc3NUb0FjY291bnRNYXBbbXNnLnNlbmRlcl0gPSB0ZW1wSWQ7CiAgICAgICAgbWFwcGluZ1Byb3Bvc2FsW19hZGRyZXNzVGhhdE1hcHBlZF1bbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIE1hcHBpbmdEb25lKG1zZy5zZW5kZXIsIHRlbXBJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEFjY291bnREYXRhKGFkZHJlc3MgX2FjY291bnRBZGRyZXNzLCBzdHJpbmcgX2ZpZWxkKSBjb25zdGFudCByZXR1cm5zIChieXRlcyl7CiAgICAgICAgcmV0dXJuIGlkZW50aXR5QWNjb3VudHNbYWRkcmVzc1RvQWNjb3VudE1hcFtfYWNjb3VudEFkZHJlc3NdXVtieXRlcyhfZmllbGQpXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0QWRkcmVzc0Rlc2NyaXB0aW9uKGFkZHJlc3MgX3F1ZXJ5QWRkcmVzcykgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKXsKICAgICAgICByZXR1cm4gYWRkcmVzc0Rlc2NyaXB0aW9uc1tfcXVlcnlBZGRyZXNzXTsKICAgIH0KICAgIAogICAgLy8KICAgIC8vIEFkbWluIGZlYXR1cmVzCiAgICAvLwogICAgZnVuY3Rpb24gYWRkRmllbGQoc3RyaW5nIF9maWVsZE5hbWUsIHVpbnQgX2ZpZWxkVHlwZSl7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY3JlZGl0RGFvKSB0aHJvdzsKICAgICAgICBpZiAoX2ZpZWxkVHlwZSA9PSAwKSB0aHJvdzsKICAgICAgICBpZiAoZmllbGRUeXBlc1tfZmllbGROYW1lXSAhPSAwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBhdmFsaWFibGVGaWVsZHNbbmV4dEZpZWxkSW5kZXhdID0gX2ZpZWxkTmFtZTsKICAgICAgICBmaWVsZEFjdGl2YXRlZFtfZmllbGROYW1lXSA9IHRydWU7CiAgICAgICAgZmllbGRUeXBlc1tfZmllbGROYW1lXSA9IF9maWVsZFR5cGU7CiAgICAgICAgCiAgICAgICAgbmV4dEZpZWxkSW5kZXggKz0gMTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG9nZ2xlRmllbGRBY3RpdmF0aW9uKHN0cmluZyBfZmllbGROYW1lKXsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjcmVkaXREYW8pIHRocm93OwogICAgICAgIGlmIChmaWVsZFR5cGVzW19maWVsZE5hbWVdID09IDApIHRocm93OwogICAgICAgIAogICAgICAgIGZpZWxkQWN0aXZhdGVkW19maWVsZE5hbWVdID0gIWZpZWxkQWN0aXZhdGVkW19maWVsZE5hbWVdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBlZGl0QWRkcmVzc0Rlc2NyaXB0aW9uKGFkZHJlc3MgX3RhcmdldEFkZHJlc3MsIHN0cmluZyBfYWRkcmVzc0Rlc2NyaXB0aW9uKXsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjcmVkaXREYW8pIHRocm93OwogICAgICAgIAogICAgICAgIGFkZHJlc3NEZXNjcmlwdGlvbnNbX3RhcmdldEFkZHJlc3NdID0gX2FkZHJlc3NEZXNjcmlwdGlvbjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZWRpdEFjY291bnREYXRhKGFkZHJlc3MgX3RhcmdldEFkZHJlc3MsIHN0cmluZyBfZmllbGQsIGJ5dGVzIF9kYXRhKXsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjcmVkaXREYW8pIHRocm93OwogICAgICAgIAogICAgICAgIGlkZW50aXR5QWNjb3VudHNbYWRkcmVzc1RvQWNjb3VudE1hcFtfdGFyZ2V0QWRkcmVzc11dW2J5dGVzKF9maWVsZCldID0gX2RhdGE7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldENyZWRpdERhbyhhZGRyZXNzIF9uZXdDcmVkaXREYW8pewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNyZWRpdERhbykgdGhyb3c7CiAgICAgICAgY3JlZGl0RGFvID0gX25ld0NyZWRpdERhbzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24ga2lsbENvbnRyYWN0KCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNyZWRpdERhbykgdGhyb3c7CiAgICAgICAgc2VsZmRlc3RydWN0KGNyZWRpdERhbyk7CiAgICB9Cn0='.
	

]
