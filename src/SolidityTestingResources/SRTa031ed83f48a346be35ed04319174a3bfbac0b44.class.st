Class {
	#name : #SRTa031ed83f48a346be35ed04319174a3bfbac0b44,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa031ed83f48a346be35ed04319174a3bfbac0b44 >> base64 [
	^ 'LyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCmNvbnRyYWN0IENoYW1waW9uIGlzIE93bmFibGUgewogICAgdWludDggY29uc3RhbnQgTlVNQkVSID0gMTsKICAgIHVpbnQ4IGNvbnN0YW50IFNUUklORyA9IDA7CiAgICAKICAgIC8qKiBnYW1lIHN0YXR1c2VzICoqLwogICAgdWludDggY29uc3RhbnQgR1NfTk9UX1NUQVJURUQgPSAwOwogICAgdWludDggY29uc3RhbnQgR1NfSU5fUFJPQ0VTUyA9IDE7CiAgICB1aW50OCBjb25zdGFudCBHU19XQUlUSU5HX1VTRVJTID0gMjsKICAgIAogICAgdWludDI1NiBwdWJsaWMgZ2FtZSA9IDA7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIGdhbWVQbGF5ZXJOdW1iZXIgPSAwOwogICAgCiAgICB1aW50OCBwdWJsaWMgY3VycmVudEdhbWVTdGF0dXM7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIGN1cnJlbnRHYW1lQmxvY2tOdW1iZXI7CiAgICAKICAgIHVpbnQyNTZbXSBwdWJsaWMgYWxsR2FtZXM7CiAgICAKICAgIG1hcHBpbmcodWludDI1NiA9PiB1aW50MjU2W10pIGludGVybmFsIGdhbWVzOwogICAgCiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gUnVsZXMpIGludGVybmFsIGdhbWVzUnVsZXM7CiAgICAKICAgIG1hcHBpbmcodWludDI1NiA9PiBhZGRyZXNzW10pIGludGVybmFsIGdhbWVQbGF5ZXJzOwogICAgCiAgICAvKiogZ2FtZSA9PiB1c2VyICoqLwogICAgbWFwcGluZyh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyB3aW5uZXJzOwogICAgCiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTZbXSkpIGludGVybmFsIHBsYXllck51bWJlcnNJbkdhbWU7CgogICAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIGdhbWVQcml6ZTsKICAgIAogICAgc3RydWN0IFJ1bGVzIHsKICAgICAgICB1aW50OCByaWdodDsKICAgICAgICB1aW50OCBsZWZ0OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBDaGFtcGlvbigpIHsKICAgICAgICBjdXJyZW50R2FtZVN0YXR1cyA9IEdTX05PVF9TVEFSVEVEOwogICAgICAgIGdhbWUgPSBibG9jay5udW1iZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWxsR2FtZXMoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTZbXSkgewogICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgYWxsZ2FtZXMgPSBuZXcgdWludDI1NltdKGFsbEdhbWVzLmxlbmd0aCk7CiAgICAgICAgYWxsZ2FtZXMgPSBhbGxHYW1lczsKICAgICAgICByZXR1cm4gYWxsZ2FtZXM7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWxsR2FtZXNDb3VudCgpIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBhbGxHYW1lcy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0V2lubmVyKHVpbnQyNTYgX2dhbWUpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gd2lubmVyc1tfZ2FtZV07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFdpbm5lcih1aW50MjU2IF9nYW1lLCBhZGRyZXNzIF93aW5uZXIpIHByaXZhdGUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHdpbm5lcnNbX2dhbWVdID0gX3dpbm5lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0R2FtZVJ1bGVzKHVpbnQyNTYgX2dhbWUpIAogICAgICAgICAgICBjb25zdGFudCByZXR1cm5zICh1aW50OCBsZWZ0U2lkZSwgdWludDggcmlnaHRTaWRlKSAKICAgIHsKICAgICAgICByZXR1cm4gKGxlZnRTaWRlUnVsZShfZ2FtZSksIHJpZ2h0U2lkZVJ1bGUoX2dhbWUpKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbGVmdFNpZGVSdWxlKHVpbnQyNTYgX2dhbWUpIAogICAgICAgICAgICBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSAKICAgIHsKICAgICAgICByZXR1cm4gZ2FtZXNSdWxlc1tnZXRTdGFydEJsb2NrKF9nYW1lKV0ubGVmdDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmlnaHRTaWRlUnVsZSh1aW50MjU2IF9nYW1lKSAKICAgICAgICAgICAgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgCiAgICB7CiAgICAgICAgcmV0dXJuIGdhbWVzUnVsZXNbZ2V0U3RhcnRCbG9jayhfZ2FtZSldLnJpZ2h0OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRTdGFydEJsb2NrKHVpbnQyNTYgX2dhbWUpIAogICAgICAgICAgICBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSAKICAgIHsKICAgICAgICByZXR1cm4gZ2FtZXNbX2dhbWVdWzBdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFBsYXllcnNDb3VudEJ5R2FtZSh1aW50MjU2IF9nYW1lKSAKICAgICAgICAgICAgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gZ2FtZVBsYXllcnNbX2dhbWVdLmxlbmd0aDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0UGxheWVyTnVtYmVyc0luR2FtZSh1aW50MjU2IF9nYW1lQmxvY2ssIGFkZHJlc3MgX3BhbGF5ZXIpIAogICAgICAgICAgICBjb25zdGFudCByZXR1cm5zICh1aW50MjU2W10pCiAgICB7CiAgICAgICAgcmV0dXJuIHBsYXllck51bWJlcnNJbkdhbWVbX2dhbWVCbG9ja11bX3BhbGF5ZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRHYW1lUHJpemUodWludDI1NiBfZ2FtZSwgdWludDI1NiBfYW1vdW50KSB7CiAgICAgICAgZ2FtZVByaXplW19nYW1lXSA9IF9hbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZVByaXplKHVpbnQyNTYgX2dhbWUpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gZ2FtZVByaXplW19nYW1lXTsKICAgIH0KCiAgICAvKiogZGVmaW5lIGdhbWUgcnVsZXMgKiovCiAgICBmdW5jdGlvbiBkZWZpbmVHYW1lUnVsZXModWludDI1NiBfZ2FtZSkgcHJpdmF0ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgCiAgICAgICAgUnVsZXMgbWVtb3J5IHJ1bGVzOwogICAgICAgIAogICAgICAgIGlmIChpc051bWJlcihfZ2FtZSkpIHsKICAgICAgICAgICAgcnVsZXMubGVmdCA9IE5VTUJFUjsKICAgICAgICAgICAgcnVsZXMucmlnaHQgPSBTVFJJTkc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcnVsZXMubGVmdCA9IFNUUklORzsKICAgICAgICAgICAgcnVsZXMucmlnaHQgPSBOVU1CRVI7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGdhbWVzUnVsZXNbX2dhbWVdID0gcnVsZXM7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHVpbnQyNTYgX2dhbWUpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJ5dGVzMzIgaGFzaCA9IGJsb2NrLmJsb2NraGFzaChfZ2FtZSk7CiAgICAgICAgcmVxdWlyZShoYXNoICE9IDB4MCk7CiAgICAgICAgCiAgICAgICAgYnl0ZSBiID0gYnl0ZShoYXNoWzMxXSk7CiAgICAgICAgdWludCBoaSA9IHVpbnQ4KGIpIC8gMTY7CiAgICAgICAgdWludCBsbyA9IHVpbnQ4KGIpIC0gMTYgKiB1aW50OChoaSk7CiAgICAgICAgCiAgICAgICAgaWYgKGxvIDw9IDkpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc3RhcnRHYW1lKCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoY3VycmVudEdhbWVTdGF0dXMgPT0gR1NfV0FJVElOR19VU0VSUyk7CiAgICAgICAgY3VycmVudEdhbWVTdGF0dXMgPSBHU19JTl9QUk9DRVNTOwogICAgICAgIGN1cnJlbnRHYW1lQmxvY2tOdW1iZXIgPSBnYW1lOwogICAgICAgIGdhbWUgPSBibG9jay5udW1iZXI7CiAgICAgICAgZ2FtZVBsYXllck51bWJlciA9IDA7CiAgICAgICAgCiAgICAgICAgYWxsR2FtZXMucHVzaChjdXJyZW50R2FtZUJsb2NrTnVtYmVyKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHN0YXJ0QmxvY2sgPSBibG9jay5udW1iZXIgLSAxOwogICAgICAgIGRlZmluZUdhbWVSdWxlcyhzdGFydEJsb2NrKTsKICAgICAgICBnYW1lc1tjdXJyZW50R2FtZUJsb2NrTnVtYmVyXS5wdXNoKHN0YXJ0QmxvY2spOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaEN1cnJlbnRHYW1lKCkgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBmaW5pc2hHYW1lKGN1cnJlbnRHYW1lQmxvY2tOdW1iZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaEdhbWUodWludDI1NiBfZ2FtZSkgb25seU93bmVyIHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKGN1cnJlbnRHYW1lQmxvY2tOdW1iZXIgIT0gMCk7CiAgICAgICAgcmVxdWlyZSh3aW5uZXJzW19nYW1lXSA9PSAweDApOwogICAgICAgIHJlcXVpcmUoY3VycmVudEdhbWVTdGF0dXMgPT0gR1NfSU5fUFJPQ0VTUyk7CgogICAgICAgIHVpbnQyNTYgc3RlcHMgPSBnZXRDdXJyZW50R2FtZVN0ZXBzKCk7CiAgICAgICAgdWludDI1NiBzdGFydEJsb2NrID0gZ2V0U3RhcnRCbG9jayhjdXJyZW50R2FtZUJsb2NrTnVtYmVyKTsKICAgICAgICByZXF1aXJlKHN0YXJ0QmxvY2sgKyBzdGVwcyA8IGJsb2NrLm51bWJlcik7CiAgICAgICAgCiAgICAgICAgdWludDI1NiBsTWluID0gMTsKICAgICAgICB1aW50MjU2IGxNYXggPSAyOwogICAgICAgIHVpbnQyNTYgck1pbiA9IDM7CiAgICAgICAgdWludDI1NiByTWF4ID0gNDsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAxOyBpIDw9IHN0ZXBzOyBpKyspIHsKICAgICAgICAgICAgcmVxdWlyZShibG9jay5ibG9ja2hhc2goX2dhbWUgKyBpKSAhPSAweDApOwogICAgICAgICAgICAobE1pbiwgbE1heCwgck1pbiwgck1heCkgPSBwcm9jZXNzU3RlcHMoY3VycmVudEdhbWVCbG9ja051bWJlciwgaSk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIChsTWluID09IGxNYXggJiYgck1pbiA9PSByTWF4ICYmIGxNaW4gPT0gck1pbikgewogICAgICAgICAgICAgICAgYWRkcmVzcyB3aW5uZXIgPSBnYW1lUGxheWVyc1tjdXJyZW50R2FtZUJsb2NrTnVtYmVyXVtyTWF4XTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2V0V2lubmVyKAogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHYW1lQmxvY2tOdW1iZXIsIAogICAgICAgICAgICAgICAgICAgIHdpbm5lcgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGN1cnJlbnRHYW1lQmxvY2tOdW1iZXIgPSAwOwogICAgICAgICAgICAgICAgY3VycmVudEdhbWVTdGF0dXMgPSBHU19XQUlUSU5HX1VTRVJTOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gd2lubmVyOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiAweDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRHYW1lU3RlcHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGdldFN0ZXBzQ291bnQoY3VycmVudEdhbWVCbG9ja051bWJlcik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U3RlcHNDb3VudCh1aW50MjU2IF9nYW1lKSAKICAgICAgICAgICAgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB5KSB7CiAgICAgICAgdWludDI1NiB4ID0gZ2V0UGxheWVyc0NvdW50QnlHYW1lKF9nYW1lKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBhcmcgOj0geAogICAgICAgICAgICB4IDo9IHN1Yih4LDEpCiAgICAgICAgICAgIHggOj0gb3IoeCwgZGl2KHgsIDB4MDIpKQogICAgICAgICAgICB4IDo9IG9yKHgsIGRpdih4LCAweDA0KSkKICAgICAgICAgICAgeCA6PSBvcih4LCBkaXYoeCwgMHgxMCkpCiAgICAgICAgICAgIHggOj0gb3IoeCwgZGl2KHgsIDB4MTAwKSkKICAgICAgICAgICAgeCA6PSBvcih4LCBkaXYoeCwgMHgxMDAwMCkpCiAgICAgICAgICAgIHggOj0gb3IoeCwgZGl2KHgsIDB4MTAwMDAwMDAwKSkKICAgICAgICAgICAgeCA6PSBvcih4LCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMCkpCiAgICAgICAgICAgIHggOj0gb3IoeCwgZGl2KHgsIDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgeCA6PSBhZGQoeCwgMSkKICAgICAgICAgICAgbGV0IG0gOj0gbWxvYWQoMHg0MCkKICAgICAgICAgICAgbXN0b3JlKG0sICAgICAgICAgICAweGY4ZjljYmZhZTZjYzc4ZmJlZmU3Y2RjM2ExNzkzZGZjZjRmMGU4YmJkOGNlYzQ3MGI2YTI4YTdhNWEzZTFlZmQpCiAgICAgICAgICAgIG1zdG9yZShhZGQobSwweDIwKSwgMHhmNWVjZjFiM2U5ZGViYzY4ZTFkOWNmYWJjNTk5NzEzNWJmYjdhN2EzOTM4YjdiNjA2YjViNGIzZjJmMWYwZmZlKQogICAgICAgICAgICBtc3RvcmUoYWRkKG0sMHg0MCksIDB4ZjZlNGVkOWZmMmQ2YjQ1OGVhZGNkZjk3YmQ5MTY5MmRlMmQ0ZGE4ZmQyZDBhYzUwYzZhZTlhODI3MjUyMzYxNikKICAgICAgICAgICAgbXN0b3JlKGFkZChtLDB4NjApLCAweGM4YzBiODg3YjBhOGE0NDg5Yzk0OGM3Zjg0N2M2MTI1NzQ2YzY0NWM1NDRjNDQ0MDM4MzAyODIwMTgxMDA4ZmYpCiAgICAgICAgICAgIG1zdG9yZShhZGQobSwweDgwKSwgMHhmN2NhZTU3N2VlYzJhMDNjZjNiYWQ3NmZiNTg5NTkxZGViYjJkZDY3ZTBhYTk4MzRiZWE2OTI1ZjZhNGEyZTBlKQogICAgICAgICAgICBtc3RvcmUoYWRkKG0sMHhhMCksIDB4ZTM5ZWQ1NTdkYjk2OTAyY2QzOGVkMTRmYWQ4MTUxMTVjNzg2YWY0NzliN2U4MzI0NzM2MzUzNDMzNzI3MTcwNykKICAgICAgICAgICAgbXN0b3JlKGFkZChtLDB4YzApLCAweGM5NzZjMTNiYjk2ZTg4MWNiMTY2YTkzM2E1NWU0OTBkOWQ1Njk1MmI4ZDRlODAxNDg1NDY3ZDIzNjI0MjI2MDYpCiAgICAgICAgICAgIG1zdG9yZShhZGQobSwweGUwKSwgMHg3NTNhNmQxYjY1MzI1ZDBjNTUyYTRkMTM0NTIyNDEwNTM5MWEzMTBiMjkxMjIxMDQxOTBhMTEwMzA5MDIwMTAwKQogICAgICAgICAgICBtc3RvcmUoMHg0MCwgYWRkKG0sIDB4MTAwKSkKICAgICAgICAgICAgbGV0IHZhbHVlIDo9IDB4ODE4MjgzODQ4NTg2ODc4ODk4YThiOGM4ZDhlOGY5MjkzOTU5Njk3OTlhOWI5ZDllOWZhYWViNmJlZGVlZmYKICAgICAgICAgICAgbGV0IHNoaWZ0IDo9IDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAgICAgICAgIGxldCBhIDo9IGRpdihtdWwoeCwgdmFsdWUpLCBzaGlmdCkKICAgICAgICAgICAgeSA6PSBkaXYobWxvYWQoYWRkKG0sc3ViKDI1NSxhKSkpLCBzaGlmdCkKICAgICAgICAgICAgeSA6PSBhZGQoeSwgbXVsKDI1NiwgZ3QoYXJnLCAweDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKSkKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2Vzc1N0ZXBzKHVpbnQyNTYgX2dhbWVCbG9jaywgdWludDI1NiBzdGVwKSAKICAgICAgICAgICAgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiwgdWludDI1NiwgdWludDI1NiwgdWludDI1NikgewogICAgICAgIHJlcXVpcmUoX2dhbWVCbG9jayAhPSAwKTsKICAgICAgICByZXF1aXJlKChnZXRTdGFydEJsb2NrKF9nYW1lQmxvY2spICsgaSkgPCBibG9jay5udW1iZXIpOwogICAgICAgIC8vIFRPRE8gY2hlY2sgCiAgICAgICAgCiAgICAgICAgdWludDI1NiBsTWluID0gMDsKICAgICAgICB1aW50MjU2IGxNYXggPSAwOwogICAgICAgIHVpbnQyNTYgck1pbiA9IDA7CiAgICAgICAgdWludDI1NiByTWF4ID0gZ2FtZVBsYXllcnNbX2dhbWVCbG9ja10ubGVuZ3RoIC0gMTsKICAgICAgICAKICAgICAgICBpZiAoaXNFdmVuTnVtYmVyKHJNYXgpKSB7CiAgICAgICAgICAgIGxNYXggPSByTWF4IC8gMjsKICAgICAgICAgICAgck1pbiA9IHJNYXggLyAyICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsTWF4ID0gck1heCAvIDI7CiAgICAgICAgICAgIHJNaW4gPSByTWF4IC8gMiArIDE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChzdGVwID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIChsTWluLCBsTWF4LCByTWluLCByTWF4KTsKICAgICAgICB9IAogICAgICAgIAogICAgICAgIGZvciAodWludCBpID0gMTsgaSA8PSBzdGVwOyBpKyspIHsKICAgICAgICAgICAgYm9vbCBpc051bWJlclJlcyA9IGlzTnVtYmVyKGdldFN0YXJ0QmxvY2soX2dhbWVCbG9jaykgKyBpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgoaXNOdW1iZXJSZXMgJiYgbGVmdFNpZGVSdWxlKF9nYW1lQmxvY2spID09IE5VTUJFUikgfHwKICAgICAgICAgICAgICAgICghaXNOdW1iZXJSZXMgJiYgbGVmdFNpZGVSdWxlKF9nYW1lQmxvY2spID09IFNUUklORykKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICBpZiAobE1pbiA9PSBsTWF4KSB7CiAgICAgICAgICAgICAgICAgICAgck1pbiA9IGxNaW47CiAgICAgICAgICAgICAgICAgICAgck1heCA9IGxNYXg7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJNYXggPSBsTWF4OwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyUmVzICYmIHJpZ2h0U2lkZVJ1bGUoX2dhbWVCbG9jaykgPT0gTlVNQkVSIHx8CiAgICAgICAgICAgICAgICAoIWlzTnVtYmVyUmVzICYmIHJpZ2h0U2lkZVJ1bGUoX2dhbWVCbG9jaykgPT0gU1RSSU5HKQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIGlmIChyTWluID09IHJNYXgpIHsKICAgICAgICAgICAgICAgICAgICBsTWluID0gck1pbjsKICAgICAgICAgICAgICAgICAgICBsTWF4ID0gck1heDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbE1pbiA9IHJNaW47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgock1heCAtIGxNaW4gIT0gMSkgJiYgaXNFdmVuTnVtYmVyKHJNYXgpKSB7CiAgICAgICAgICAgICAgICBsTWF4ID0gck1heCAvIDI7CiAgICAgICAgICAgICAgICByTWluID0gck1heCAvIDIgKyAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJNYXggLSBsTWluICE9IDEpIHsKICAgICAgICAgICAgICAgIGxNYXggPSByTWF4IC8gMjsKICAgICAgICAgICAgICAgIHJNaW4gPSByTWF4IC8gMiArIDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsTWF4ID0gbE1pbjsKICAgICAgICAgICAgICAgIHJNaW4gPSByTWF4OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiAobE1pbiwgbE1heCwgck1pbiwgck1heCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGlzRXZlbk51bWJlcih1aW50IF92MSkgCiAgICAgICAgICAgIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IHYxdSA9IF92MSAqIDEwMDsKICAgICAgICB1aW50IHYyID0gMjsKICAgICAgICAKICAgICAgICB1aW50IHZ1UmVzdWx0ID0gdjF1IC8gdjI7CiAgICAgICAgdWludCB2UmVzdWx0ID0gX3YxIC8gdjI7CiAgICAgICAgCiAgICAgICAgaWYgKHZ1UmVzdWx0ICE9IHZSZXN1bHQgKiAxMDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqIGJ1eSB0aWNrZXQgJiYgc3RhcnQgZ2FtZSB8IGluaXQgZ2FtZSBieSBjb25kaXRpb25zICoqLwogICAgZnVuY3Rpb24gYnV5VGlja2V0KGFkZHJlc3MgX3BsYXllcikgb25seU93bmVyIAogICAgICAgICAgICByZXR1cm5zICh1aW50MjU2IHBsYXllck51bWJlciwgdWludDI1NiBnYW1lTnVtYmVyKSB7CiAgICAgICAgaWYgKGN1cnJlbnRHYW1lU3RhdHVzID09IEdTX05PVF9TVEFSVEVEKSB7CiAgICAgICAgICAgIGN1cnJlbnRHYW1lU3RhdHVzID0gR1NfV0FJVElOR19VU0VSUzsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZ2FtZVBsYXllcnNbZ2FtZV0ucHVzaChfcGxheWVyKTsKICAgICAgICAKICAgICAgICBwbGF5ZXJOdW1iZXIgPSBnYW1lUGxheWVyTnVtYmVyOwogICAgICAgIAogICAgICAgIHBsYXllck51bWJlcnNJbkdhbWVbZ2FtZV1bX3BsYXllcl0ucHVzaChwbGF5ZXJOdW1iZXIpOwogICAgICAgIAogICAgICAgIGdhbWVQbGF5ZXJOdW1iZXIrKzsKICAgICAgICAKICAgICAgICByZXR1cm4gKHBsYXllck51bWJlciwgZ2FtZSk7CiAgICB9Cn0='.
	

]
