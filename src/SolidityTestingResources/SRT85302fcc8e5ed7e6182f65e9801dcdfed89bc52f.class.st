Class {
	#name : #SRT85302fcc8e5ed7e6182f65e9801dcdfed89bc52f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT85302fcc8e5ed7e6182f65e9801dcdfed89bc52f >> base64 [
	^ ''.
	

]
