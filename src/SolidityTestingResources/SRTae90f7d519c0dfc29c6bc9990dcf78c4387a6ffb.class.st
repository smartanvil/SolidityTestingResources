Class {
	#name : #SRTae90f7d519c0dfc29c6bc9990dcf78c4387a6ffb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTae90f7d519c0dfc29c6bc9990dcf78c4387a6ffb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKY29udHJhY3QgUk5UTXVsdGlTaWdXYWxsZXQgewogICAgLyoKICAgICAqICBFdmVudHMKICAgICAqLwogICAgZXZlbnQgQ29uZmlybWF0aW9uKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKCiAgICBldmVudCBSZXZvY2F0aW9uKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKCiAgICBldmVudCBTdWJtaXNzaW9uKHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKCiAgICBldmVudCBFeGVjdXRpb24odWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwoKICAgIGV2ZW50IEV4ZWN1dGlvbkZhaWx1cmUodWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwoKICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCB2YWx1ZSk7CgogICAgZXZlbnQgT3duZXJBZGRpdGlvbihhZGRyZXNzIGluZGV4ZWQgb3duZXIpOwoKICAgIGV2ZW50IE93bmVyUmVtb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIpOwoKICAgIGV2ZW50IFJlcXVpcmVtZW50Q2hhbmdlKHVpbnQgcmVxdWlyZWQpOwoKICAgIGV2ZW50IFBhdXNlKCk7CgogICAgZXZlbnQgVW5wYXVzZSgpOwoKICAgIC8qCiAgICAgKiAgQ29uc3RhbnRzCiAgICAgKi8KICAgIHVpbnQgY29uc3RhbnQgcHVibGljIE1BWF9PV05FUl9DT1VOVCA9IDEwOwoKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIEFETUlOU19DT1VOVCA9IDI7CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIG1hcHBpbmcgKHVpbnQgPT4gV2FsbGV0VHJhbnNhY3Rpb24pIHB1YmxpYyB0cmFuc2FjdGlvbnM7CgogICAgbWFwcGluZyAodWludCA9PiBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpKSBwdWJsaWMgY29uZmlybWF0aW9uczsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc093bmVyOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGlzQWRtaW47CgogICAgYWRkcmVzc1tdIHB1YmxpYyBvd25lcnM7CgogICAgYWRkcmVzc1tdIHB1YmxpYyBhZG1pbnM7CgogICAgdWludCBwdWJsaWMgcmVxdWlyZWQ7CgogICAgdWludCBwdWJsaWMgdHJhbnNhY3Rpb25Db3VudDsKCiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICBzdHJ1Y3QgV2FsbGV0VHJhbnNhY3Rpb24gewogICAgYWRkcmVzcyBzZW5kZXI7CiAgICBhZGRyZXNzIGRlc3RpbmF0aW9uOwogICAgdWludCB2YWx1ZTsKICAgIGJ5dGVzIGRhdGE7CiAgICBib29sIGV4ZWN1dGVkOwogICAgfQoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KCiAgICAvLy8gQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgICAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5V2FsbGV0KCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyRG9lc05vdEV4aXN0KGFkZHJlc3Mgb3duZXIpIHsKICAgICAgICByZXF1aXJlKCFpc093bmVyW293bmVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvd25lckV4aXN0cyhhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgcmVxdWlyZShpc093bmVyW293bmVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBhZG1pbkV4aXN0cyhhZGRyZXNzIGFkbWluKSB7CiAgICAgICAgcmVxdWlyZShpc0FkbWluW2FkbWluXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBhZG1pbkRvZXNOb3RFeGlzdChhZGRyZXNzIGFkbWluKSB7CiAgICAgICAgcmVxdWlyZSghaXNBZG1pblthZG1pbl0pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdHJhbnNhY3Rpb25FeGlzdHModWludCB0cmFuc2FjdGlvbklkKSB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0uZGVzdGluYXRpb24gIT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBjb25maXJtZWQodWludCB0cmFuc2FjdGlvbklkLCBhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgcmVxdWlyZShjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RDb25maXJtZWQodWludCB0cmFuc2FjdGlvbklkLCBhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgcmVxdWlyZSghY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcl0pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90RXhlY3V0ZWQodWludCB0cmFuc2FjdGlvbklkKSB7CiAgICAgICAgaWYgKHRyYW5zYWN0aW9uc1t0cmFuc2FjdGlvbklkXS5leGVjdXRlZCkKICAgICAgICByZXF1aXJlKGZhbHNlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdE51bGwoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB2YWxpZFJlcXVpcmVtZW50KHVpbnQgb3duZXJDb3VudCwgdWludCBfcmVxdWlyZWQpIHsKICAgICAgICBpZiAob3duZXJDb3VudCA+IE1BWF9PV05FUl9DT1VOVAogICAgICAgIHx8IF9yZXF1aXJlZCA+IG93bmVyQ291bnQKICAgICAgICB8fCBfcmVxdWlyZWQgPT0gMAogICAgICAgIHx8IG93bmVyQ291bnQgPT0gMCkgewogICAgICAgICAgICByZXF1aXJlKGZhbHNlKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB2YWxpZEFkbWluc0NvdW50KHVpbnQgYWRtaW5zQ291bnQpIHsKICAgICAgICByZXF1aXJlKGFkbWluc0NvdW50ID09IEFETUlOU19DT1VOVCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiBhbGxvd3MgdG8gZGVwb3NpdCBldGhlci4KICAgIGZ1bmN0aW9uKCkKICAgIHdoZW5Ob3RQYXVzZWQKICAgIHBheWFibGUKICAgIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICBEZXBvc2l0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLyoKICAgICAqIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3Igc2V0cyBpbml0aWFsIGFkbWlucyBhbmQgcmVxdWlyZWQgbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuCiAgICAvLy8gQHBhcmFtIF9hZG1pbnMgTGlzdCBvZiBpbml0aWFsIG93bmVycy4KICAgIC8vLyBAcGFyYW0gX3JlcXVpcmVkIE51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLgogICAgZnVuY3Rpb24gUk5UTXVsdGlTaWdXYWxsZXQoYWRkcmVzc1tdIF9hZG1pbnMsIHVpbnQgX3JlcXVpcmVkKQogICAgcHVibGljCiAgICAgICAgLy8gICAgdmFsaWRBZG1pbnNDb3VudChfYWRtaW5zLmxlbmd0aCkKICAgICAgICAvLyAgICB2YWxpZFJlcXVpcmVtZW50KF9hZG1pbnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2FkbWlucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKF9hZG1pbnNbaV0gIT0gMCAmJiAhaXNPd25lcltfYWRtaW5zW2ldXSAmJiAhaXNBZG1pbltfYWRtaW5zW2ldXSk7CiAgICAgICAgICAgIGlzQWRtaW5bX2FkbWluc1tpXV0gPSB0cnVlOwogICAgICAgICAgICBpc093bmVyW19hZG1pbnNbaV1dID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGFkbWlucyA9IF9hZG1pbnM7CiAgICAgICAgb3duZXJzID0gX2FkbWluczsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgIH0KCiAgICAvLy8gQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICBmdW5jdGlvbiBwYXVzZSgpIGFkbWluRXhpc3RzKG1zZy5zZW5kZXIpIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIFBhdXNlKCk7CiAgICB9CgogICAgLy8vIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAgZnVuY3Rpb24gdW5wYXVzZSgpIGFkbWluRXhpc3RzKG1zZy5zZW5kZXIpIHdoZW5QYXVzZWQgcHVibGljIHsKICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgICAgICBVbnBhdXNlKCk7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LgogICAgLy8vIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG5ldyBvd25lci4KICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICBwdWJsaWMKICAgIHdoZW5Ob3RQYXVzZWQKICAgIGFkbWluRXhpc3RzKG1zZy5zZW5kZXIpCiAgICBvd25lckRvZXNOb3RFeGlzdChvd25lcikKICAgIG5vdE51bGwob3duZXIpCiAgICB2YWxpZFJlcXVpcmVtZW50KG93bmVycy5sZW5ndGggKyAxLCByZXF1aXJlZCkKICAgIHsKICAgICAgICBpc093bmVyW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgICAgIE93bmVyQWRkaXRpb24ob3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lci4KICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICBwdWJsaWMKICAgIHdoZW5Ob3RQYXVzZWQKICAgIGFkbWluRXhpc3RzKG1zZy5zZW5kZXIpCiAgICBhZG1pbkRvZXNOb3RFeGlzdChvd25lcikKICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgewogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb3duZXJzLmxlbmd0aCAtIDE7IGkrKykKICAgICAgICBpZiAob3duZXJzW2ldID09IG93bmVyKSB7CiAgICAgICAgICAgIG93bmVyc1tpXSA9IG93bmVyc1tvd25lcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBvd25lcnMubGVuZ3RoIC09IDE7CiAgICAgICAgaWYgKHJlcXVpcmVkID4gb3duZXJzLmxlbmd0aCkKICAgICAgICBjaGFuZ2VSZXF1aXJlbWVudChvd25lcnMubGVuZ3RoKTsKICAgICAgICBPd25lclJlbW92YWwob3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byBiZSByZXBsYWNlZC4KICAgIC8vLyBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuCiAgICBmdW5jdGlvbiByZXBsYWNlT3duZXIoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBuZXdPd25lcikKICAgIHB1YmxpYwogICAgd2hlbk5vdFBhdXNlZAogICAgYWRtaW5FeGlzdHMobXNnLnNlbmRlcikKICAgIGFkbWluRG9lc05vdEV4aXN0KG93bmVyKQogICAgb3duZXJFeGlzdHMob3duZXIpCiAgICBvd25lckRvZXNOb3RFeGlzdChuZXdPd25lcikKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgaWYgKG93bmVyc1tpXSA9PSBvd25lcikgewogICAgICAgICAgICBvd25lcnNbaV0gPSBuZXdPd25lcjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgaXNPd25lcltuZXdPd25lcl0gPSB0cnVlOwogICAgICAgIE93bmVyUmVtb3ZhbChvd25lcik7CiAgICAgICAgT3duZXJBZGRpdGlvbihuZXdPd25lcik7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIHRvIGNoYW5nZSB0aGUgbnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gX3JlcXVpcmVkIE51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLgogICAgZnVuY3Rpb24gY2hhbmdlUmVxdWlyZW1lbnQodWludCBfcmVxdWlyZWQpCiAgICBwdWJsaWMKICAgIHdoZW5Ob3RQYXVzZWQKICAgIGFkbWluRXhpc3RzKG1zZy5zZW5kZXIpCiAgICB2YWxpZFJlcXVpcmVtZW50KG93bmVycy5sZW5ndGgsIF9yZXF1aXJlZCkKICAgIHsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgICAgICBSZXF1aXJlbWVudENoYW5nZShfcmVxdWlyZWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byBzdWJtaXQgYW5kIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIHZhbHVlIFRyYW5zYWN0aW9uIGV0aGVyIHZhbHVlLgogICAgLy8vIEBwYXJhbSBkYXRhIFRyYW5zYWN0aW9uIGRhdGEgcGF5bG9hZC4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgdHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBzdWJtaXRUcmFuc2FjdGlvbihhZGRyZXNzIGRlc3RpbmF0aW9uLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKQogICAgcHVibGljCiAgICB3aGVuTm90UGF1c2VkCiAgICBvd25lckV4aXN0cyhtc2cuc2VuZGVyKQogICAgcmV0dXJucyAodWludCB0cmFuc2FjdGlvbklkKQogICAgewogICAgICAgIHRyYW5zYWN0aW9uSWQgPSBhZGRUcmFuc2FjdGlvbihkZXN0aW5hdGlvbiwgdmFsdWUsIGRhdGEpOwogICAgICAgIGNvbmZpcm1UcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gY29uZmlybSBhIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgZnVuY3Rpb24gY29uZmlybVRyYW5zYWN0aW9uKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgIHB1YmxpYwogICAgd2hlbk5vdFBhdXNlZAogICAgb3duZXJFeGlzdHMobXNnLnNlbmRlcikKICAgIHRyYW5zYWN0aW9uRXhpc3RzKHRyYW5zYWN0aW9uSWQpCiAgICBub3RDb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgdHJhbnNhY3Rpb25JZCk7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiByZXZva2VDb25maXJtYXRpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgcHVibGljCiAgICB3aGVuTm90UGF1c2VkCiAgICBvd25lckV4aXN0cyhtc2cuc2VuZGVyKQogICAgY29uZmlybWVkKHRyYW5zYWN0aW9uSWQsIG1zZy5zZW5kZXIpCiAgICBub3RFeGVjdXRlZCh0cmFuc2FjdGlvbklkKQogICAgewogICAgICAgIGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bbXNnLnNlbmRlcl0gPSBmYWxzZTsKICAgICAgICBSZXZvY2F0aW9uKG1zZy5zZW5kZXIsIHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIGZ1bmN0aW9uIGV4ZWN1dGVUcmFuc2FjdGlvbih1aW50IHRyYW5zYWN0aW9uSWQpCiAgICBwdWJsaWMKICAgIHdoZW5Ob3RQYXVzZWQKICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICBjb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgIG5vdEV4ZWN1dGVkKHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgaWYgKGlzQ29uZmlybWVkKHRyYW5zYWN0aW9uSWQpKSB7CiAgICAgICAgICAgIFdhbGxldFRyYW5zYWN0aW9uIHN0b3JhZ2Ugd2FsbGV0VHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF07CiAgICAgICAgICAgIHdhbGxldFRyYW5zYWN0aW9uLmV4ZWN1dGVkID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKHdhbGxldFRyYW5zYWN0aW9uLmRlc3RpbmF0aW9uLmNhbGwudmFsdWUod2FsbGV0VHJhbnNhY3Rpb24udmFsdWUpKHdhbGxldFRyYW5zYWN0aW9uLmRhdGEpKQogICAgICAgICAgICBFeGVjdXRpb24odHJhbnNhY3Rpb25JZCk7CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgRXhlY3V0aW9uRmFpbHVyZSh0cmFuc2FjdGlvbklkKTsKICAgICAgICAgICAgICAgIHdhbGxldFRyYW5zYWN0aW9uLmV4ZWN1dGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgY29uZmlybWF0aW9uIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgLy8vIEByZXR1cm4gQ29uZmlybWF0aW9uIHN0YXR1cy4KICAgIGZ1bmN0aW9uIGlzQ29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyc1tpXV0pCiAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIGlmIChjb3VudCA9PSByZXF1aXJlZCkKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQWRkcyBhIG5ldyB0cmFuc2FjdGlvbiB0byB0aGUgdHJhbnNhY3Rpb24gbWFwcGluZywgaWYgdHJhbnNhY3Rpb24gZG9lcyBub3QgZXhpc3QgeWV0LgogICAgLy8vIEBwYXJhbSBkZXN0aW5hdGlvbiBUcmFuc2FjdGlvbiB0YXJnZXQgYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gdmFsdWUgVHJhbnNhY3Rpb24gZXRoZXIgdmFsdWUuCiAgICAvLy8gQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLgogICAgLy8vIEByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC4KICAgIGZ1bmN0aW9uIGFkZFRyYW5zYWN0aW9uKGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpCiAgICBpbnRlcm5hbAogICAgbm90TnVsbChkZXN0aW5hdGlvbikKICAgIHJldHVybnMgKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICB0cmFuc2FjdGlvbklkID0gdHJhbnNhY3Rpb25Db3VudDsKICAgICAgICB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0gPSBXYWxsZXRUcmFuc2FjdGlvbih7CiAgICAgICAgc2VuZGVyIDogbXNnLnNlbmRlciwKICAgICAgICBkZXN0aW5hdGlvbiA6IGRlc3RpbmF0aW9uLAogICAgICAgIHZhbHVlIDogdmFsdWUsCiAgICAgICAgZGF0YSA6IGRhdGEsCiAgICAgICAgZXhlY3V0ZWQgOiBmYWxzZQogICAgICAgIH0pOwogICAgICAgIHRyYW5zYWN0aW9uQ291bnQgKz0gMTsKICAgICAgICBTdWJtaXNzaW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8qCiAgICAgKiBXZWIzIGNhbGwgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMgb2YgYSB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIC8vLyBAcmV0dXJuIE51bWJlciBvZiBjb25maXJtYXRpb25zLgogICAgZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uQ291bnQodWludCB0cmFuc2FjdGlvbklkKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgcmV0dXJucyAodWludCBjb3VudCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bb3duZXJzW2ldXSkKICAgICAgICBjb3VudCArPSAxOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuCiAgICAvLy8gQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuCiAgICAvLy8gQHJldHVybiBUb3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbHRlcnMgYXJlIGFwcGxpZWQuCiAgICBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkNvdW50KGJvb2wgcGVuZGluZywgYm9vbCBleGVjdXRlZCkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIHJldHVybnMgKHVpbnQgY291bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdHJhbnNhY3Rpb25Db3VudDsgaSsrKQogICAgICAgIGlmIChwZW5kaW5nICYmICF0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQKICAgICAgICB8fCBleGVjdXRlZCAmJiB0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQpCiAgICAgICAgY291bnQgKz0gMTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2Ygb3duZXJzLgogICAgLy8vIEByZXR1cm4gTGlzdCBvZiBvd25lciBhZGRyZXNzZXMuCiAgICBmdW5jdGlvbiBnZXRPd25lcnMoKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgcmV0dXJucyAoYWRkcmVzc1tdKQogICAgewogICAgICAgIHJldHVybiBvd25lcnM7CiAgICB9CgogICAgLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2YgYWRtaW5zLgogICAgLy8gQHJldHVybiBMaXN0IG9mIGFkbWluIGFkZHJlc3NlcwogICAgZnVuY3Rpb24gZ2V0QWRtaW5zKCkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIHJldHVybnMgKGFkZHJlc3NbXSkKICAgIHsKICAgICAgICByZXR1cm4gYWRtaW5zOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLgogICAgZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9ucyh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICBwdWJsaWMKICAgIGNvbnN0YW50CiAgICByZXR1cm5zIChhZGRyZXNzW10gX2NvbmZpcm1hdGlvbnMpCiAgICB7CiAgICAgICAgYWRkcmVzc1tdIG1lbW9yeSBjb25maXJtYXRpb25zVGVtcCA9IG5ldyBhZGRyZXNzW10ob3duZXJzLmxlbmd0aCk7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgdWludCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bb3duZXJzW2ldXSkgewogICAgICAgICAgICBjb25maXJtYXRpb25zVGVtcFtjb3VudF0gPSBvd25lcnNbaV07CiAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgfQogICAgICAgIF9jb25maXJtYXRpb25zID0gbmV3IGFkZHJlc3NbXShjb3VudCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspCiAgICAgICAgX2NvbmZpcm1hdGlvbnNbaV0gPSBjb25maXJtYXRpb25zVGVtcFtpXTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2YgdHJhbnNhY3Rpb24gSURzIGluIGRlZmluZWQgcmFuZ2UuCiAgICAvLy8gQHBhcmFtIGZyb20gSW5kZXggc3RhcnQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuCiAgICAvLy8gQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS4KICAgIC8vLyBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLgogICAgLy8vIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLgogICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25JZHModWludCBmcm9tLCB1aW50IHRvLCBib29sIHBlbmRpbmcsIGJvb2wgZXhlY3V0ZWQpCiAgICBwdWJsaWMKICAgIGNvbnN0YW50CiAgICByZXR1cm5zICh1aW50W10gX3RyYW5zYWN0aW9uSWRzKQogICAgewogICAgICAgIHVpbnRbXSBtZW1vcnkgdHJhbnNhY3Rpb25JZHNUZW1wID0gbmV3IHVpbnRbXSh0cmFuc2FjdGlvbkNvdW50KTsKICAgICAgICB1aW50IGNvdW50ID0gMDsKICAgICAgICB1aW50IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyYW5zYWN0aW9uQ291bnQ7IGkrKykKICAgICAgICBpZiAocGVuZGluZyAmJiAhdHJhbnNhY3Rpb25zW2ldLmV4ZWN1dGVkCiAgICAgICAgfHwgZXhlY3V0ZWQgJiYgdHJhbnNhY3Rpb25zW2ldLmV4ZWN1dGVkKQogICAgICAgIHsKICAgICAgICAgICAgdHJhbnNhY3Rpb25JZHNUZW1wW2NvdW50XSA9IGk7CiAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgfQogICAgICAgIF90cmFuc2FjdGlvbklkcyA9IG5ldyB1aW50W10odG8gLSBmcm9tKTsKICAgICAgICBmb3IgKGkgPSBmcm9tOyBpIDwgdG87IGkrKykKICAgICAgICBfdHJhbnNhY3Rpb25JZHNbaSAtIGZyb21dID0gdHJhbnNhY3Rpb25JZHNUZW1wW2ldOwogICAgfQp9'.
	

]
