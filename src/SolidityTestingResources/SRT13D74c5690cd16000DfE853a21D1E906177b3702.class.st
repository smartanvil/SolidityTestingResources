Class {
	#name : #SRT13D74c5690cd16000DfE853a21D1E906177b3702,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13D74c5690cd16000DfE853a21D1E906177b3702 >> base64 [
	^ ''.
	

]
