Class {
	#name : #SRTd3006f35c0286f5485971f935b87f84e72e8e43f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3006f35c0286f5485971f935b87f84e72e8e43f >> base64 [
	^ ''.
	

]
