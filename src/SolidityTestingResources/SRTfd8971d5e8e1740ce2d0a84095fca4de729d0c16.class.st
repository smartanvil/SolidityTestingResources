Class {
	#name : #SRTfd8971d5e8e1740ce2d0a84095fca4de729d0c16,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfd8971d5e8e1740ce2d0a84095fca4de729d0c16 >> base64 [
	^ ''.
	

]
