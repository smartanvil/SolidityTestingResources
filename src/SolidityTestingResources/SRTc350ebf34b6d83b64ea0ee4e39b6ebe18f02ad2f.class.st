Class {
	#name : #SRTc350ebf34b6d83b64ea0ee4e39b6ebe18f02ad2f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc350ebf34b6d83b64ea0ee4e39b6ebe18f02ad2f >> base64 [
	^ ''.
	

]
