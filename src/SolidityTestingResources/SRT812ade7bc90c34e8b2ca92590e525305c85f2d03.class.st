Class {
	#name : #SRT812ade7bc90c34e8b2ca92590e525305c85f2d03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT812ade7bc90c34e8b2ca92590e525305c85f2d03 >> base64 [
	^ ''.
	

]
