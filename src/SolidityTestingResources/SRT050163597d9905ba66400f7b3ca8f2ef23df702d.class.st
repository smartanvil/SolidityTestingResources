Class {
	#name : #SRT050163597d9905ba66400f7b3ca8f2ef23df702d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT050163597d9905ba66400f7b3ca8f2ef23df702d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgppbnRlcmZhY2UgRVJDMjAgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogT3duZWQgQ29udHJhY3QKICoKICogVGhpcyBpcyBhIGNvbnRyYWN0IHRyYWl0IHRvIGluaGVyaXQgZnJvbS4gQ29udHJhY3RzIHRoYXQgaW5oZXJpdCBmcm9tIE93bmVkCiAqIGFyZSBhYmxlIHRvIG1vZGlmeSBmdW5jdGlvbnMgdG8gYmUgb25seSBjYWxsYWJsZSBieSB0aGUgb3duZXIgb2YgdGhlCiAqIGNvbnRyYWN0LgogKgogKiBCeSBkZWZhdWx0IGl0IGlzIGltcG9zc2libGUgdG8gY2hhbmdlIHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QuCiAqLwpjb250cmFjdCBPd25lZCB7CiAgLyoqCiAgICogQ29udHJhY3Qgb3duZXIuCiAgICoKICAgKiBUaGlzIHZhbHVlIGlzIHNldCBhdCBjb250cmFjdCBjcmVhdGlvbiB0aW1lLgogICAqLwogIGFkZHJlc3Mgb3duZXI7CgogIC8qKgogICAqIENvbnRyYWN0IGNvbnN0cnVjdG9yLgogICAqCiAgICogVGhpcyBzZXRzIHRoZSBvd25lciBvZiB0aGUgT3duZWQgY29udHJhY3QgYXQgdGhlIHRpbWUgb2YgY29udHJhY3QKICAgKiBjcmVhdGlvbi4KICAgKi8KICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBNb2RpZnkgbWV0aG9kIHRvIG9ubHkgYWxsb3cgdGhlIG93bmVyIHRvIGNhbGwgaXQuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KfQoKLyoqCiAqIENoaSBUb2tlbiBTYWxlIENvbnRyYWN0IHdpdGggcmV2ZW51ZSBzaGFyaW5nCiAqCiAqIFRoZSBpbnRlbnRpb24gb2YgdGhpcyBjb250cmFjdCBpcyB0byBydW4gdW50aWwgdGhlIHRvdGFsIHZhbHVlIG9mIDIwMDAgRVRICiAqIGlzIHNvbGQgb3V0LiBUaGVyZSBpcyBubyB0aW1lIGxpbWl0IHBsYWNlZCBvbiB0aGUgY29udHJhY3QuCiAqCiAqIFRoZSB0b3RhbCBudW1iZXIgb2YgQ0hJIHRva2VucyBhbGxvY2F0ZWQgdG8gdGhlIGNvbnRyYWN0IGlzIGVxdWFsIHRvIHRoZQogKiBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdGhhdCBjYW4gYmUgYWNxdWlyZWQuIFRoaXMgbWF4aW11bSBudW1iZXIgaXMKICogY2FsY3VsYXRpbmcgdGhlIHB1cmNoYXNlIG9mIDIwMDAgRVRIIG9mIHRva2VucywgYW5kIGFkZGluZyB0aGUgYm9udXMgdG9rZW5zCiAqIGZvciB0aGF0IHB1cmNoYXNlLgogKgogKiBUaGUgYm9udXMgdGllcnMgdGhyZXNob2xkcyBhcmUgY2FsY3VsYXRlZCB1c2luZyB0aGUgYWJzb2x1dGUgbnVtYmVyIG9mIHNvbGQKICogdG9rZW5zIChieSB0aGlzIGNvbnRyYWN0KSwgYW5kIGFyZSBhcyBmb2xsb3dzOgogKiAgLSB0aGUgMXN0IDE1MC4wMDAgdG9rZW5zICgwIC0gMTQ5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgNzUlOwogKiAgLSB0aGUgMm5kIDE1MC4wMDAgdG9rZW5zICgxNTAuMDAwIC0gMjk5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgNjAlOwogKiAgLSB0aGUgM3JkIDE1MC4wMDAgdG9rZW5zICgzMDAuMDAwIC0gNDQ5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgNTAlOwogKiAgLSB0aGUgNHRoIDE1MC4wMDAgdG9rZW5zICg0NTAuMDAwIC0gNTk5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgNDAlOwogKiAgLSB0aGUgNXRoIDE1MC4wMDAgdG9rZW5zICg2MDAuMDAwIC0gNzQ5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgMzAlOwogKiAgLSB0aGUgNnRoIDE1MC4wMDAgdG9rZW5zICg3NTAuMDAwIC0gODk5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgMjAlOwogKiAgLSB0aGUgbmV4dCAzMDAuMDAwIHRva2VucyAoOTAwLjAwMCAtIDEuMTk5Ljk5OSkgZ2V0IGEgYm9udXMgb2YgMTAlOwogKiAgLSB0aGUgbmV4dCAzMDAuMDAwIHRva2VucyAoMS4yMDAuMDAwIC0gMS40OTkuOTk5KSBnZXQgYSBib251cyBvZiA1JTsgYW5kCiAqICAtIHRoZSBuZXh0IDUwMC4wMDAgdG9rZW5zICgxLjUwMC4wMDAgLSAxLjk5OS45OTkpIGdldCBhIGJvbnVzIG9mIDIlLgogKgogKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRoaXMgY29udHJhY3QgaXMgYWJsZSB0byBoYW5kIG91dCwgY2FuIGJlCiAqIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBQeXRob24gY29kZToKICogIGh0dHBzOi8vcHlmaWRkbGUuaW8vZmlkZGxlLzliYmM4NzBhLTUzNGUtNDdiMS04N2MzLTVmMDAwYmRkN2Q3NC8KICovCmNvbnRyYWN0IENoaVNhbGUgaXMgT3duZWQgewogICAgLy8gRm9yIHNpbXBsaWNpdHkgcmVhc29ucywgYWxsIHZhbHVlcyBhcmUgY2FsY3VsYXRlZCB1c2luZyB1aW50MjU2LiBCb3RoCiAgICAvLyB2YWx1ZXMgY291bGQgdGVjaG5pY2FsbHkgYmUgcmVkdWNlZCB0byBhIGxvd2VyIGJpdCB2YWx1ZTogcGVyY2VudGFnZQogICAgLy8gZml0cyBpbiBgdWludDhgLCBhbmQgdGhyZXNob2xkIGZpdHMgd2l0aGluIGB1aW50NjRgLiBUaGlzIGNvbnRyYWN0IGlzCiAgICAvLyBub3Qgb3B0aW1pemVkIGZvciBzdG9yYWdlIGFuZCBkb2VzIG5vdCB1c2UgYml0IHBhY2tpbmcgdG8gc3RvcmUgbXVsdGlwbGUKICAgIC8vIHNtYWxsZXIgYHVpbnRgIHZhbHVlcyBpbiBhIHNpbmdsZSBsYXJnZXIgYHVpbnRgLgogICAgc3RydWN0IEJvbnVzVGllciB7CiAgICAgICAgdWludDI1NiBwZXJjZW50YWdlOwogICAgICAgIHVpbnQyNTYgdGhyZXNob2xkOwogICAgfQoKICAgIC8vIFRoZSBsaXN0IG9mIGJvbnVzIHRpZXJzIGlzIHNldCBhdCBjb250cmFjdCBjb25zdHJ1Y3Rpb24gYW5kIGRvZXMgbm90CiAgICAvLyBtdXRhdGUuCiAgICBCb251c1RpZXJbXSBwcml2YXRlIGJvbnVzVGllcnM7CgogICAgLy8gVGhlIG51bWJlciBvZiBzb2xkIHRva2VucyBpcyB0byBrZWVwIHRyYWNrIG9mIHRoZSBhY3RpdmUgYm9udXMgdGllci4gVGhlCiAgICAvLyBudW1iZXIgaXMgdXBkYXRlZCBldmVyeSB0aW1lIGEgcHVyY2hhc2UgaXMgbWFkZS4KICAgIHVpbnQyNTYgcHJpdmF0ZSB0b2tlbnNTb2xkOwoKICAgIC8vIFRoZSBib251cyBpbmRleCBpcyBhbHdheXMgdXAtdG8tZGF0ZSB3aXRoIHRoZSBsYXRlc3QgYm9udXMgdGllci4gSXQgaXMKICAgIC8vIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB3aGVuIGEgbmV3IHRocmVzaG9sZCBpcyBoaXQuCiAgICB1aW50OCBwcml2YXRlIGJvbnVzSW5kZXg7CgogICAgLy8gVGhlIG1heGltdW0gYm9udXMgdGhyZXNob2xkIGluZGljYXRlZCB0aGUgdGhyZXNob2xkIG9mIHRoZSBmaW5hbCBib251cwogICAgLy8gdGllci4gVGhpcyBpcyBhbHNvIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgYSBidXllciBpcyBhYmxlIHRvCiAgICAvLyBwdXJjaGFzZS4KICAgIHVpbnQyNTYgcHJpdmF0ZSBtYXhCb251c1RocmVzaG9sZDsKCiAgICAvLyBUaGUgcHJpY2UgcGVyIENISSB0b2tlbiBpcyBjb25zdGFudCwgYW5kIGVxdWFsIHRvIHRoZSB2YWx1ZSBkZXRlcm1pbmVkCiAgICAvLyBieSB0aGUgQWV0aGlhbiBDcnlzdGFsIEJhbms6IDAuMDAxIGV0aGVyIHBlciBDSEksIHdoaWNoIGlzIGVxdWFsIHRvIDEKICAgIC8vIGV0aGVyIGZvciAxMDAwIENISS4KICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBUT0tFTl9QUklDRSA9IDAuMDAxIGV0aGVyOwoKICAgIC8vIFRoZSByZXZlbnVlIHNoYXJlIHBlcmNlbnRhZ2UgaXMgdGhlIHBlcmNlbnRhZ2UgdGhhdCB0aGUgcmVmZXJyZXIgb2YgdGhlCiAgICAvLyBidXllciByZWNlaXZlcywgYWZ0ZXIgdGhlIGJ1eWVyIG1ha2VzIGEgcHVyY2hhc2UgdXNpbmcgdGhlaXIgYWRkcmVzcyBhcwogICAgLy8gcmVmZXJyYWwgYWRkcmVzcy4gVGhlIHJlZmVycmFsIGFkZHJlc3MgaXMgdGhlIGFkZHJlc3MgdGhhdCByZWNlaXZlcyB0aGUKICAgIC8vIHJldmVudWUgc2hhcmUgcGVyY2VudGFnZS4KICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBSRVZFTlVFX1NIQVJFX1BFUkNFTlRBR0UgPSAyMjsKCiAgICAvLyBUaGUgQ0hJIHRva2VuIGNvbnRyYWN0IGltcGxlbWVudHMgRVJDLTIwLgogICAgRVJDMjAgcHJpdmF0ZSBjaGlDb250cmFjdDsKCiAgICAvLyBMb2cgdGhlIENISSBwdXJjaGFzZSBldmVudC4gVGhlIHB1cmNoYXNlIGV2ZW50cyBhcmUgZmlsdGVyYWJsZSBieSBidXllcgogICAgLy8gYW5kIHJlZmVycmVyIHRvIGFsbG93IGZvciBxdWljayBsb29rLXVwcyBmb3Igc3BlY2lmaWMgdXNlcnMuCiAgICBldmVudCBMb2dDaGlQdXJjaGFzZSgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgYnV5ZXIsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHJlZmVycmVyLAogICAgICAgIHVpbnQyNTYgbnVtYmVyLAogICAgICAgIHVpbnQyNTYgdGltZXN0YW1wCiAgICApOwoKICAgIC8qKgogICAgICogQ0hJIFNhbGUgY29udHJhY3QgY29uc3RydWN0b3IKICAgICAqCiAgICAgKiBUaGUgQ0hJIGNvbnRyYWN0IGFkZHJlc3MgYW5kIGJvbnVzIG51bWJlcnMgYXJlIHBhc3NlZCBpbiBkeW5hbWljYWxseQogICAgICogdG8gYWxsb3cgZm9yIHRlc3RpbmcgdXNpbmcgZGlmZmVyZW50IEV0aGVyZXVtIG5ldHdvcmtzIGFuZCBkaWZmZXJlbnQKICAgICAqIGJvbnVzIG51bWJlcnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIENoaVNhbGUoCiAgICAgICAgYWRkcmVzcyBjaGlBZGRyZXNzLAogICAgICAgIHVpbnQyNTZbXSBib251c1RocmVzaG9sZHMsCiAgICAgICAgdWludDI1NltdIGJvbnVzUGVyY2VudGFnZXMKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICBPd25lZCgpCiAgICB7CiAgICAgICAgLy8gRXhwbGljaXRseSBjaGVjayB0aGUgbGVuZ3RocyBvZiB0aGUgYm9udXMgcGVyY2VudGFnZSBhbmQgdGhyZXNob2xkCiAgICAgICAgLy8gYXJyYXlzIHRvIHByZXZlbnQgaHVtYW4gZXJyb3IuIFRoaXMgZG9lcyBub3QgcHJldmVudCB0aGUgY3JlYXRvcgogICAgICAgIC8vIGZyb20gaW5wdXR0aW5nIHRoZSB3cm9uZyBudW1iZXJzLCBob3dldmVyLgogICAgICAgIHJlcXVpcmUoYm9udXNUaHJlc2hvbGRzLmxlbmd0aCA9PSBib251c1BlcmNlbnRhZ2VzLmxlbmd0aCk7CgogICAgICAgIC8vIEV4cGxpY2l0bHkgY2hlY2sgdGhhdCB0aGUgbnVtYmVyIG9mIGJvbnVzIHRpZXJzIGlzIGxlc3MgdGhhbiAyNTYsIGFzCiAgICAgICAgLy8gaXQgc2hvdWxkIGZpdCB3aXRoaW4gdGhlIDggYml0IHVuc2lnbmVkIGludGVnZXIgdmFsdWUgdGhhdCBpcyB1c2VkCiAgICAgICAgLy8gYXMgdGhlIGluZGV4IGNvdW50ZXIuCiAgICAgICAgcmVxdWlyZShib251c1RocmVzaG9sZHMubGVuZ3RoIDwgMjU2KTsKCiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIG9uZSBhcnJheSwgd2hpbHN0IHNpbXVsdGFuZW91c2x5IHJlYWRpbmcgZGF0YSBmcm9tIHRoZQogICAgICAgIC8vIG90aGVyIGFycmF5LiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgYm90aCBhcnJheXMgYXJlIG9mIHRoZSBzYW1lCiAgICAgICAgLy8gbGVuZ3RoLCBhcyBjaGVja2VkIGluIHRoZSBsaW5lIGFib3ZlLgogICAgICAgIGZvciAodWludDggaSA9IDA7IGkgPCBib251c1RocmVzaG9sZHMubGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgaHVtYW4gZXJyb3IsIGJ5IGNoZWNraW5nIHRoYXQgdGhlIG5ldyBib251cwogICAgICAgICAgICAvLyB0aHJlc2hvbGQgaXMgYWx3YXlzIGEgaGlnaGVyIHZhbHVlIHRoYW4gdGhlIHByZXZpb3VzIHRocmVzaG9sZC4KICAgICAgICAgICAgaWYgKGkgPiAwKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKGJvbnVzVGhyZXNob2xkc1tpXSA+IGJvbnVzVGhyZXNob2xkc1tpIC0gMV0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJdCBpcyBhbHJlYWR5IGd1YXJhbnRlZWQgdGhhdCBib251cyB0aHJlc2hvbGRzIGFyZSBpbiBhc2NlbmRpbmcKICAgICAgICAgICAgLy8gb3JkZXIuIEZvciB0aGlzIHJlYXNvbiwgdGhlIG1heGltdW0gYm9udXMgdGhyZXNob2xkIGNhbiBiZSBzZXQKICAgICAgICAgICAgLy8gYnkgc2VsZWN0aW5nIHRoZSBmaW5hbCB2YWx1ZSBpbiB0aGUgYm9udXMgdGhyZXNob2xkcyBhcnJheS4KICAgICAgICAgICAgaWYgKGkgPiBib251c1RocmVzaG9sZHMubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgbWF4Qm9udXNUaHJlc2hvbGQgPSBib251c1RocmVzaG9sZHNbaV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJvbnVzVGllcnMucHVzaChCb251c1RpZXIoewogICAgICAgICAgICAgICAgcGVyY2VudGFnZTogYm9udXNQZXJjZW50YWdlc1tpXSwKICAgICAgICAgICAgICAgIHRocmVzaG9sZDogYm9udXNUaHJlc2hvbGRzW2ldCiAgICAgICAgICAgIH0pKTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBDSEkgdG9rZW4gY29udHJhY3QgYWRkcmVzcyBpcyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gYWxsb3cgZm9yCiAgICAgICAgLy8gZWFzaWVyIHRlc3Rpbmcgb24gdGhlIGRldmVsb3BtZW50IGFuZCB0ZXN0aW5nIG5ldHdvcmtzLgogICAgICAgIGNoaUNvbnRyYWN0ID0gRVJDMjAoY2hpQWRkcmVzcyk7CgogICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIG9mIGFuIHVuc2lnbmVkIGludGVnZXIgaXMgYWxyZWFkeSB6ZXJvLCBob3dldmVyLAogICAgICAgIC8vIGZvciB2ZXJib3NpdHkgYW5kIHJlYWRhYmlsaXR5IHB1cnBvc2VzLCBib3RoIGNvdW50ZXJzIGFyZSBleHBsaWNpdGx5CiAgICAgICAgLy8gc2V0IHRvIHplcm8uCiAgICAgICAgdG9rZW5zU29sZCA9IDA7CiAgICAgICAgYm9udXNJbmRleCA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5KGFkZHJlc3MgcmVmZXJyYWxBZGRyZXNzKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiB0b2tlbnMgdG8gYnV5LiBUaGlzIGNhbiBiZSAwLCBpZiB0aGUgYnV5ZXIKICAgICAgICAvLyBzZW5kcyBhbiBldGhlciB2YWx1ZSB0aGF0IGlzIGxlc3MgdGhhbiB0aGUgcHJpY2UgaW5kaWNhdGVkIGJ5CiAgICAgICAgLy8gYFRPS0VOX1BSSUNFYC4KICAgICAgICB1aW50MjU2IHRva2Vuc1RvQnV5ID0gbXNnLnZhbHVlIC8gVE9LRU5fUFJJQ0U7CgogICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBDSEkgdG9rZW4gYmFsYW5jZSBvZiB0aGlzIGNvbnRyYWN0LiBJZiB0aGlzIG51bWJlcgogICAgICAgIC8vIGlzIHplcm8sIG5vIG1vcmUgdG9rZW5zIGNhbiB3aWxsIGJlIHNvbGQuCiAgICAgICAgdWludDI1NiB0b2tlbkJhbGFuY2UgPSBjaGlDb250cmFjdC5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CgogICAgICAgIC8vIEEgYnV5ZXIgY2FuIHNlbmQgbW9yZSB0aGFuIHRoZSByZXF1aXJlZCBhbW91bnQgZm9yIGJ1eWluZyBhIG51bWJlcgogICAgICAgIC8vIG9mIHRva2Vucy4gSW4gdGhpcyBjYXNlIHRoZSByZW1haW5kZXIgaXMgY2FsY3VsYXRlZCwgdGhhdCB3aWxsIGJlCiAgICAgICAgLy8gc2VudCBiYWNrIGF0IHRoZSBlbmQgb2YgdGhlIHRyYW5zYWN0aW9uLgogICAgICAgIHVpbnQyNTYgcmVtYWluZGVyID0gbXNnLnZhbHVlICUgVE9LRU5fUFJJQ0U7CgogICAgICAgIC8vIEV4cGxpY2l0bHkgZ3VhcmQgYWdhaW5zdCB0aGUgc2NlbmFyaW8gd2hlcmVpbiBodW1hbiBlcnJvciBvY2N1cnMsCiAgICAgICAgLy8gYW5kIGZld2VyIHRva2VucyBoYXZlIGJlZW4gdHJhbnNmZXJyZWQgdG8gdGhlIGNvbnRyYWN0IHRoYW4gZGljdGF0ZWQKICAgICAgICAvLyBieSB0aGUgYm9udXMgdGllcnMuIFRoaXMgc2l0dWF0aW9uIGNhbiBzdGlsbCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyCiAgICAgICAgLy8gZGF0ZSBieSBjYWxsaW5nIGByZXNldE1heEJvbnVzVGhyZXNob2xkYC4KICAgICAgICBpZiAobWF4Qm9udXNUaHJlc2hvbGQgPCB0b2tlbkJhbGFuY2UpIHsKICAgICAgICAgICAgbWF4Qm9udXNUaHJlc2hvbGQgPSB0b2tlbkJhbGFuY2U7CiAgICAgICAgfQoKICAgICAgICAvLyBBIHNjZW5hcmlvIGlzIHBvc3NpYmxlIHdoZXJlaW4gYSBidXllciBhdHRlbXB0cyB0byBidXkgbW9yZSB0b2tlbnMKICAgICAgICAvLyB0aGFuIHRoZSBjb250cmFjdCBpcyBvZmZlcmluZy4gSW4gdGhpcyBjYXNlIHRoZSBwdXJjaGFzZSBpcyBsaW1pdGVkCiAgICAgICAgLy8gdG8gdGhlIGF2YWlsYWJsZSBudW1iZXIgb2YgdG9rZW5zLgogICAgICAgIGlmICh0b2tlbnNUb0J1eSA+IG1heEJvbnVzVGhyZXNob2xkKSB7CiAgICAgICAgICAgIHRva2Vuc1RvQnV5ID0gbWF4Qm9udXNUaHJlc2hvbGQ7CgogICAgICAgICAgICAvLyBUaGUgYWN0dWFsIG51bWJlciBvZiB0b2tlbnMgdGhhdCBjYW4gYmUgYm91Z2h0IGlzIG11bHRpcGxpZWQgYnkKICAgICAgICAgICAgLy8gdGhlIHRva2VuIHByaWNlIHRvIGNhbGN1bGF0ZSB0aGUgYWN0dWFsIHB1cmNoYXNlIHByaWNlIG9mIHRoZQogICAgICAgICAgICAvLyB0cmFuc2FjdGlvbi4gVGhpcyBpcyB0aGVuIHN1YnRyYWN0ZWQgZnJvbSB0aGUgdG90YWwgdmFsdWUgb2YKICAgICAgICAgICAgLy8gZXRoZXIgc2VudCBpbiB0aGUgdHJhbnNhY3Rpb24gdG8gZW5kIHVwIHdpdGggdGhlIHJlbWFpbmRlciB0aGF0CiAgICAgICAgICAgIC8vIHdpbGwgYmUgc2VudCBiYWNrIHRvIHRoZSBidXllci4KICAgICAgICAgICAgcmVtYWluZGVyID0gbXNnLnZhbHVlIC0gdG9rZW5zVG9CdXkgKiBUT0tFTl9QUklDRTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBzYWxlIGNvbnRyYWN0IGhhcyBhIGJvbnVzIHN0cnVjdHVyZS4gVGhlIG51bWJlciBvZiBib251cyB0b2tlbnMKICAgICAgICAvLyBpcyBjYWxjdWxhdGVkIGluIGEgZGlmZmVyZW50IG1ldGhvZC4gVGhpcyBtZXRob2Qgd2lsbCBhbHdheXMgcmV0dXJuCiAgICAgICAgLy8gYSBudW1iZXIgKG9mIGJvbnVzIHRva2Vucykgd2l0aG91dCBlcnJvcjsgdGhpcyBudW1iZXIgY2FuIGJlIHplcm8uCiAgICAgICAgdWludDI1NiBib251c1Rva2VucyA9IGNhbGN1bGF0ZUJvbnVzVG9rZW5zKHRva2Vuc1RvQnV5KTsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSBudW1iZXIgb2YgdG9rZW5zIHNvbGQuIFRoaXMgbnVtYmVyIGRvZXMgbm90IGluY2x1ZGUgdGhlCiAgICAgICAgLy8gbnVtYmVyIG9mIGJvbnVzIHRva2VucyB0aGF0IHdlcmUgZ2l2ZW4gb3V0LCBvbmx5IHRoZSBudW1iZXIgb2YKICAgICAgICAvLyB0b2tlbnMgdGhhdCB3ZXJlICdib3VnaHQnLgogICAgICAgIHRva2Vuc1NvbGQgKz0gdG9rZW5zVG9CdXk7CgogICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdHJhbnNmZXJzIHdoZXJlIHRoZSBjb250cmFjdCBhdHRlbXB0cyB0byB0cmFuc2ZlciBtb3JlCiAgICAgICAgLy8gQ0hJIHRva2VucyB0aGFuIGl0IGhhcyBhdmFpbGFibGUuIEluIHJlYWxpdHksIHRoaXMgY2FuIG5ldmVyIG9jY3VyCiAgICAgICAgLy8gYXMgdGhlIHByb3BlciBhbW91bnQgb2YgdG9rZW5zIHNob3VsZCBoYXZlIGJlZW4gZGVwb3NpdGVkIHdpdGhpbiB0aGUKICAgICAgICAvLyBjb250cmFjdCBpbiBhY2NvcmRhbmNlIHRvIHRoZSBudW1iZXIgY2FsY3VsYXRlZCBieSB0aGUgUHl0aG9uIHNjcmlwdAogICAgICAgIC8vIGxpbmtlZCBhYm92ZS4gVGhpcyBpcyBzaW1wbHkgYSBndWFyZCBhZ2FpbnN0IGh1bWFuIGVycm9yLgogICAgICAgIGlmICh0b2tlbkJhbGFuY2UgPCB0b2tlbnNUb0J1eSArIGJvbnVzVG9rZW5zKSB7CiAgICAgICAgICAgIGNoaUNvbnRyYWN0LnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2VuQmFsYW5jZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2hpQ29udHJhY3QudHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zVG9CdXkgKyBib251c1Rva2Vucyk7CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgcmVmZXJyYWwgYWRkcmVzcyBoYXMgYSBkZWZhdWx0IHZhbHVlIHNldCB0byB0aGUgY29udHJhY3QgYWRkcmVzcwogICAgICAgIC8vIG9mIHRoaXMgQ0hJIHNhbGUgY29udHJhY3QgaW4gdGhlIHdlYiBhcHBsaWNhdGlvbi4gVGhlIGFwcGxpY2F0aW9uCiAgICAgICAgLy8gY2hhbmdlcyB0aGlzIHZhbHVlIHRvIGEgZGlmZmVyZW50IHJlZmVycmFsIGFkZHJlc3MgaWYgYSBzcGVjaWFsIGxpbmsKICAgICAgICAvLyBpcyBmb2xsb3dlZC4gSWYgdGhlIHJlZmVycmFsIGFkZHJlc3MgZG9lcyBub3QgZXF1YWwgdGhpcyBjb250cmFjdCdzCiAgICAgICAgLy8gYWRkcmVzcywgdGhlIHJldmVudWUgc2hhcmUgcGVyY2VudGFnZSBpcyBwYWlkIG91dCB0byB0aGF0IGFkZHJlc3MuCiAgICAgICAgaWYgKHJlZmVycmFsQWRkcmVzcyAhPSBhZGRyZXNzKHRoaXMpICYmIHJlZmVycmFsQWRkcmVzcyAhPSBhZGRyZXNzKDApKSB7CgogICAgICAgICAgICAvLyBUaGUgdmFsdWUgYG1zZy52YWx1ZSAqIFJFVkVOVUVfU0hBUkVfUEVSQ0VOVEFHRSAvIDEwMGAgaXMgYWx3YXlzCiAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgYSB2YWxpZCBudW1iZXIgKGkuZS4gYWNjZXB0ZWQgYnkgdGhlIGB0cmFuc2ZlcmAKICAgICAgICAgICAgLy8gbWV0aG9kKS4gVGhlIHZhbHVlIGNhbm5vdCBvdmVyZmxvdyBhcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgV2VpCiAgICAgICAgICAgIC8vIGluIGBtc2cudmFsdWVgIGZpdHMgaW4gMTI4IGJpdHMuIE11bHRpcGx5aW5nIHRoaXMgbnVtYmVyIGJ5CiAgICAgICAgICAgIC8vIGBSRVZFTlVFX1NIQVJFX1BFUkNFTlRBR0VgIHN0aWxsIHNhZmVseSBmaXRzIHdpdGhpbiB0aGUgY3VycmVudAogICAgICAgICAgICAvLyAyNTYgYml0IHJhbmdlLiBUaGUgdmFsdWUgaXMgc2VudCB1c2luZyBgc2VuZGAgdG8gbWFrZSBzdXJlIHRoZQogICAgICAgICAgICAvLyBwdXJjaGFzZSBkb2VzIG5vdCBmYWlsIGlmIHNvbWVvbmUgdXNlcyBhbiBpbnZhbGlkIGFkZHJlc3MuCiAgICAgICAgICAgIHJlZmVycmFsQWRkcmVzcy5zZW5kKAogICAgICAgICAgICAgICAgbXNnLnZhbHVlICogUkVWRU5VRV9TSEFSRV9QRVJDRU5UQUdFIC8gMTAwCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAvLyBJbiB0aGUgY2FzZSB3aGVyZSBhIGJ1eWVyIHNlbnQgaW4gdG9vIG11Y2ggZXRoZXIsIG9yIHRoZXJlIHdlcmVuJ3QKICAgICAgICAvLyBlbm91Z2ggdG9rZW5zIGF2YWlsYWJsZSwgdGhlIHJlbWFpbmluZyBldGhlciBpcyBzZW50IGJhY2sgdG8gdGhlCiAgICAgICAgLy8gYnV5ZXIuCiAgICAgICAgaWYgKHJlbWFpbmRlciA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZW1haW5kZXIpOwogICAgICAgIH0KCiAgICAgICAgTG9nQ2hpUHVyY2hhc2UobXNnLnNlbmRlciwgcmVmZXJyYWxBZGRyZXNzLCB0b2tlbnNUb0J1eSwgbm93KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlc2V0IHRoZSBtYXhpbXVtIGJvbnVzIHRocmVzaG9sZCB0byB0aGUgY29ycmVjdCB2YWx1ZS4KICAgICAqCiAgICAgKiBUaGlzIG51bWJlciBpcyBsb3dlcmVkIGlmIHRoZSBjb250cmFjdCBoYXMgZmV3ZXIgdG9rZW5zIGF2YWlsYWJsZSB0aGFuCiAgICAgKiBpbmRpY2F0ZWQgYnkgdGhlIG1heGltdW0gYm9udXMgdGhyZXNob2xkLiBJbiB0aGlzIGNhc2UsIHRoZSBjb3JyZWN0CiAgICAgKiBudW1iZXIgb2YgdG9rZW5zIHNob3VsZCBiZSBkZXBvc2l0ZWQgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QgdG8KICAgICAqIHJlc3RvcmUgdGhlIG51bWJlcnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlc2V0TWF4Qm9udXNUaHJlc2hvbGQoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIG1heEJvbnVzVGhyZXNob2xkID0gYm9udXNUaWVyc1tib251c1RpZXJzLmxlbmd0aCAtIDFdLnRocmVzaG9sZDsKICAgIH0KCiAgICAvKioKICAgICAqIFdpdGhkcmF3IGFsbCBldGhlciBmcm9tIHRoZSBjb250cmFjdC4KICAgICAqCiAgICAgKiBUaGlzIHdpdGhkcmF3YWwgaXMgc2VwYXJhdGUgZnJvbSB0aGUgQ0hJIHdpdGhkcmF3YWwgbWV0aG9kIHRvIGFsbG93IGZvcgogICAgICogaW50ZXJtaXR0ZW50IHdpdGhkcmF3YWxzIGFzIHRoZSBjb250cmFjdCBoYXMgbm8gc2V0IHRpbWUgcGVyaW9kIHRvIHJ1bgogICAgICogZm9yLgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICAvLyBUaGUgdHJhbnNmZXIgbWV0aG9kIGNhbm5vdCBmYWlsIHdpdGggdGhlIGN1cnJlbnQgZ2l2ZW4gaW5wdXQsIGFzIGEKICAgICAgICAvLyB0cmFuc2ZlciBvZiAwIFdlaSBpcyBhbHNvIGEgdmFsaWQgdHJhbnNmZXIgY2FsbC4KICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBXaXRoZHJhdyByZW1haW5pbmcgQ0hJIGZyb20gdGhlIGNvbnRyYWN0LgogICAgICoKICAgICAqIFRoZSBpbnRlbnQgb2YgdGhpcyBtZXRob2QgaXMgdG8gcmV0cmlldmUgdGhlIHJlbWFpbmluZyBib251cyB0b2tlbnMKICAgICAqIGFmdGVyIHRoZSBzYWxlIGhhcyBjb25jbHVkZWQgc3VjY2Vzc2Z1bGx5LCBidXQgbm90IGFsbCBib251cyB0b2tlbnMgaGF2ZQogICAgICogYmVlbiBoYW5kZWQgb3V0IChkdWUgdG8gcm91bmRpbmcpLgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0NoaSgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgLy8gVGhpcyBDSEkgdHJhbnNmZXIgY2Fubm90IGZhaWwgYXMgdGhlIGF2YWlsYWJsZSBiYWxhbmNlIGlzIGZpcnN0CiAgICAgICAgLy8gcmV0cmlldmVkIGZyb20gdGhlIENISSB0b2tlbiBjb250cmFjdC4gVGhlIGRldGVybWluaXN0aWMgbmF0dXJlIG9mCiAgICAgICAgLy8gdGhlIEV0aGVyZXVtIGJsb2NrY2hhaW4gZ3VhcmFudGVlcyB0aGF0IG5vIG90aGVyIG9wZXJhdGlvbnMgb2NjdXIKICAgICAgICAvLyBpbiBiZXR3ZWVuIHRoZSBiYWxhbmNlIHJldHJpZXZhbCBjYWxsIGFuZCB0aGUgdHJhbnNmZXIgY2FsbC4KICAgICAgICBjaGlDb250cmFjdC50cmFuc2Zlcihtc2cuc2VuZGVyLCBjaGlDb250cmFjdC5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBudW1iZXIgb2YgYm9udXMgdGllcnMuCiAgICAgKgogICAgICogUmV0dXJucwogICAgICogLS0tLS0tLQogICAgICogdWludDI1NgogICAgICogICAgIFRoZSBudW1iZXIgb2YgYm9udXMgdGllcnMgaW4gdGhlIHNhbGUgY29udHJhY3QuCiAgICAgKgogICAgICogTm90aWNlCiAgICAgKiAtLS0tLS0KICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSAyNTYgYml0IHVuc2lnbmVkIGludGVnZXIgYmVjYXVzZSB0aGF0IGlzIHRoZQogICAgICogcmV0dXJuIHR5cGUgb2YgdGhlIGBsZW5ndGhgIG1ldGhvZCBvbiBhcnJheXMuIFR5cGUgY2FzdGluZyBpdCB3b3VsZCBiZQogICAgICogYSBuZWVkbGVzcyBnYXMgY29zdC4KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0Qm9udXNUaWVyQ291bnQoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYm9udXNUaWVycy5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYm9udXMgcGVyY2VudGFnZSBhbmQgdGhyZXNob2xkIG9mIGEgZ2l2ZW4gYm9udXMgdGllci4KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzCiAgICAgKiAtLS0tLS0tLS0tCiAgICAgKiBib251c1RpZXJJbmRleCA6IHVpbnQ4CiAgICAgKgogICAgICogUmV0dXJucwogICAgICogLS0tLS0tLQogICAgICogdWludDI1NgogICAgICogICAgIFRoZSBmaXJzdCAyNTYgYml0IHVuc2lnbmVkIGludGVnZXIgaXMgdGhlIGJvbnVzIHBlcmNlbnRhZ2Ugb2YgdGhlCiAgICAgKiAgICAgZ2l2ZW4gYm9udXMgdGllci4KICAgICAqIHVpbnQyNTYKICAgICAqICAgICBUaGUgc2Vjb25kIDI1NiBiaXQgdW5zaWduZWQgaW50ZWdlciBpcyB0aGUgYm9udXMgdGhyZXNob2xkIG9mIHRoZQogICAgICogICAgIGdpdmVuIGJvbnVzIHRpZXIuCiAgICAgKgogICAgICogTm90aWNlCiAgICAgKiAtLS0tLS0KICAgICAqIEJvdGggcGVyY2VudGFnZSBhbmQgdGhyZXNob2xkIGFyZSAyNTYgYml0IHVuc2lnbmVkIGludGVnZXJzLCBldmVuIHRob3VnaAogICAgICogdGhleSB0ZWNobmljYWxseSByZXNwZWN0aXZlbHkgZml0IHdpdGhpbiBhbiA4IGJpdCB1bnNpZ25lZCBpbnRlZ2VyIGFuZAogICAgICogYSA2NCBiaXQgdW5zaWduZWQgaW50ZWdlci4gRm9yIHNpbXBsaWNpdHkgcHVycG9zZXMsIHRoZXkgYXJlIGtlcHQgYXMgMjU2CiAgICAgKiBiaXQgdmFsdWVzLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRCb251c1RpZXIoCiAgICAgICAgdWludDggYm9udXNUaWVySW5kZXgKICAgICkKICAgICAgICBleHRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiAoCiAgICAgICAgICAgIGJvbnVzVGllcnNbYm9udXNUaWVySW5kZXhdLnBlcmNlbnRhZ2UsCiAgICAgICAgICAgIGJvbnVzVGllcnNbYm9udXNUaWVySW5kZXhdLnRocmVzaG9sZAogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYm9udXMgcGVyY2VudGFnZSBhbmQgdGhyZXNob2xkIG9mIHRoZSBjdXJyZW50IGJvbnVzIHRpZXIuCiAgICAgKgogICAgICogUmV0dXJucwogICAgICogLS0tLS0tLQogICAgICogdWludDI1NgogICAgICogICAgIFRoZSBmaXJzdCAyNTYgYml0IHVuc2lnbmVkIGludGVnZXIgaXMgdGhlIGJvbnVzIHBlcmNlbnRhZ2Ugb2YgdGhlCiAgICAgKiAgICAgY3VycmVudCBib251cyB0aWVyLgogICAgICogdWludDI1NgogICAgICogICAgIFRoZSBzZWNvbmQgMjU2IGJpdCB1bnNpZ25lZCBpbnRlZ2VyIGlzIHRoZSBib251cyB0aHJlc2hvbGQgb2YgdGhlCiAgICAgKiAgICAgY3VycmVudCBib251cyB0aWVyLgogICAgICoKICAgICAqIE5vdGljZQogICAgICogLS0tLS0tCiAgICAgKiBCb3RoIHBlcmNlbnRhZ2UgYW5kIHRocmVzaG9sZCBhcmUgMjU2IGJpdCB1bnNpZ25lZCBpbnRlZ2VycywgZXZlbiB0aG91Z2gKICAgICAqIHRoZXkgdGVjaG5pY2FsbHkgcmVzcGVjdGl2ZWx5IGZpdCB3aXRoaW4gYW4gOCBiaXQgdW5zaWduZWQgaW50ZWdlciBhbmQKICAgICAqIGEgNjQgYml0IHVuc2lnbmVkIGludGVnZXIuIEZvciBzaW1wbGljaXR5IHB1cnBvc2VzLCB0aGV5IGFyZSBrZXB0IGFzIDI1NgogICAgICogYml0IHZhbHVlcy4KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0Q3VycmVudEJvbnVzVGllcigpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludDI1NiBwZXJjZW50YWdlLCB1aW50MjU2IHRocmVzaG9sZCkKICAgIHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICBib251c1RpZXJzW2JvbnVzSW5kZXhdLnBlcmNlbnRhZ2UsCiAgICAgICAgICAgIGJvbnVzVGllcnNbYm9udXNJbmRleF0udGhyZXNob2xkCiAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgbmV4dCBib251cyB0aWVyIGluZGV4LgogICAgICoKICAgICAqIFJldHVybnMKICAgICAqIC0tLS0tLS0KICAgICAqIHVpbnQ4CiAgICAgKiAgICAgVGhlIGluZGV4IG9mIHRoZSBuZXh0IGJvbnVzIHRpZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldE5leHRCb251c0luZGV4KCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50OCkKICAgIHsKICAgICAgICByZXR1cm4gYm9udXNJbmRleCArIDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiBzb2xkIHRva2Vucy4KICAgICAqCiAgICAgKiBSZXR1cm5zCiAgICAgKiAtLS0tLS0tCiAgICAgKiB1aW50MjU2CiAgICAgKiAgICAgVGhlIG51bWJlciBvZiBzb2xkIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0U29sZFRva2VucygpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b2tlbnNTb2xkOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgYm9udXMgdG9rZW5zIHRvIHNlbmQgdGhlIGJ1eWVyLgogICAgICoKICAgICAqIFBhcmFtZXRlcnMKICAgICAqIC0tLS0tLS0tLS0KICAgICAqIGJvdWdodFRva2VucyA6IHVpbnQyNTYKICAgICAqICAgICBUaGUgbnVtYmVyIG9mIHRva2VucyB0aGUgYnV5ZXIgaGFzIGJvdWdodCwgYW5kIHRvIGNhbGN1bGF0ZSB0aGUKICAgICAqICAgICBudW1iZXIgb2YgYm9udXMgdG9rZW5zIG9mLgogICAgICoKICAgICAqIFJldHVybnMKICAgICAqIC0tLS0tLS0KICAgICAqIHVpbnQyNTYKICAgICAqICAgICBUaGUgbnVtYmVyIG9mIGJvbnVzIHRva2VucyB0byBzZW5kIHRoZSBidXllci4KICAgICAqCiAgICAgKiBOb3RpY2UKICAgICAqIC0tLS0tLQogICAgICogVGhpcyBtZXRob2QgbW9kaWZpZXMgY29udHJhY3Qgc3RhdGUgYnkgaW5jcmVtZW50aW5nIHRoZSBib251cyB0aWVyIGluZGV4CiAgICAgKiB3aGVuZXZlciBhIGJvbnVzIHRpZXIgaXMgY29tcGxldGVseSBleGhhdXN0ZWQuIFRoaXMgaXMgZG9uZSBmb3IKICAgICAqIHNpbXBsaWNpdHkgcHVycG9zZXMuIEEgZGlmZmVyZW50IGFwcHJvYWNoIHdvdWxkIGhhdmUgYmVlbiB0byBtb3ZlIHRoZQogICAgICogbG9vcCB0byBhIGRpZmZlcmVudCBzZWdtZW50IG9mIHRoZSBjb250cmFjdC4KICAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlQm9udXNUb2tlbnMoCiAgICAgICAgdWludDI1NiBib3VnaHRUb2tlbnMKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gSW1tZWRpYXRlIHJldHVybiBpZiBhbGwgYm9udXMgdG9rZW5zIGhhdmUgYWxyZWFkeSBiZWVuIGhhbmRlZCBvdXQuCiAgICAgICAgaWYgKGJvbnVzSW5kZXggPT0gYm9udXNUaWVycy5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIGJvbnVzIHRva2VucyBhbHdheXMgc3RhcnRzIGF0IHplcm8uIElmIHRoZSBidXllciBkb2VzCiAgICAgICAgLy8gbm90IGhpdCBhbnkgb2YgdGhlIGJvbnVzIHRocmVzaG9sZHMsIG9yIGlmIHRoZSBidXllciBidXlzIGEgbG93CiAgICAgICAgLy8gbnVtYmVyIG9mIHRva2VucyB0aGF0IGNhdXNlcyB0aGUgYm9udXMgdG8gcm91bmQgZG93biB0byB6ZXJvLCB0aGlzCiAgICAgICAgLy8gemVybyB2YWx1ZSBpcyByZXR1cm5lZC4KICAgICAgICB1aW50MjU2IGJvbnVzVG9rZW5zID0gMDsKCiAgICAgICAgLy8gQ29weSB0aGUgbnVtYmVyIG9mIGJvdWdodCB0b2tlbnMgdG8gYW4gYGx2YWx1ZWAgdG8gYWxsb3cgbXV0YXRpb24uCiAgICAgICAgdWludDI1NiBfYm91Z2h0VG9rZW5zID0gYm91Z2h0VG9rZW5zOwoKICAgICAgICAvLyBDb3B5IHRoZSBudW1iZXIgb2Ygc29sZCB0b2tlbnMgdG8gYW4gYGx2YWx1ZWAgdG8gYWxsb3cgbXV0YXRpb24uCiAgICAgICAgdWludDI1NiBfdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQ7CgogICAgICAgIHdoaWxlIChfYm91Z2h0VG9rZW5zID4gMCkgewogICAgICAgICAgICB1aW50MjU2IHRocmVzaG9sZCA9IGJvbnVzVGllcnNbYm9udXNJbmRleF0udGhyZXNob2xkOwogICAgICAgICAgICB1aW50MjU2IGJvbnVzID0gYm9udXNUaWVyc1tib251c0luZGV4XS5wZXJjZW50YWdlOwoKICAgICAgICAgICAgLy8gVGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzY2VuYXJpb3MgZm9yIHRoZSBhY3RpdmUgYm9udXMgdGllcjoKICAgICAgICAgICAgLy8gIDE6IHRoZSBidXllciBwdXJjaGFzZXMgZXF1YWwgb3IgbW9yZSBDSEkgdG9rZW5zIHRoYW4gYXZhaWxhYmxlCiAgICAgICAgICAgIC8vICAgICBpbiB0aGUgY3VycmVudCBib251cyB0aWVyOyBhbmQKICAgICAgICAgICAgLy8gIDI6IHRoZSBidXllciBwdXJjaGFzZXMgbGVzcyBDSEkgdG9rZW5zIHRoYW4gYXZhaWxhYmxlIGluIHRoZQogICAgICAgICAgICAvLyAgICAgY3VycmVudCBib251cyB0aWVyLgogICAgICAgICAgICBpZiAoX3Rva2Vuc1NvbGQgKyBfYm91Z2h0VG9rZW5zID49IHRocmVzaG9sZCkgewogICAgICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiByZW1haW5pbmcgdG9rZW5zIHdpdGhpbiB0aGUgdGhyZXNob2xkIGlzIGVxdWFsCiAgICAgICAgICAgICAgICAvLyB0byB0aGUgdGhyZXNob2xkIG1pbnVzIHRoZSBudW1iZXIgb2YgdG9rZW5zIHRoYXQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAvLyBzb2xkIGFscmVhZHkuCiAgICAgICAgICAgICAgICBfYm91Z2h0VG9rZW5zIC09IHRocmVzaG9sZCAtIF90b2tlbnNTb2xkOwoKICAgICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgYm9udXMgdG9rZW5zIGlzIGVxdWFsIHRvIHRoZSByZW1haW5pbmcgbnVtYmVyCiAgICAgICAgICAgICAgICAvLyBvZiB0b2tlbnMgaW4gdGhlIGJvbnVzIHRpZXIgbXVsdGlwbGllZCBieSB0aGUgYm9udXMgdGllcidzCiAgICAgICAgICAgICAgICAvLyBwZXJjZW50YWdlLiBBIGRpZmZlcmVudCBib251cyB3aWxsIGJlIGNhbGN1bGF0ZWQgZm9yIHRoZQogICAgICAgICAgICAgICAgLy8gcmVtYWluaW5nIGJvdWdodCB0b2tlbnMuIFRoZSBudW1iZXIgaXMgZmlyc3QgbXVsdGlwbGllZCBieQogICAgICAgICAgICAgICAgLy8gdGhlIGJvbnVzIHBlcmNlbnRhZ2UgdG8gd29yayB0byB0aGUgYWR2YW50YWdlIG9mIHRoZSBidXllciwKICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBtaW5pbXVtIG51bWJlciBvZiB0b2tlbnMgdGhhdCBuZWVkIHRvIGJlIGJvdWdodCBmb3IgYQogICAgICAgICAgICAgICAgLy8gYm9udXMgdG8gYmUgY291bnRlZCB3b3VsZCBiZSBlcXVhbCB0byBgMTAwIC8gYm9udXNgIChyb3VuZGVkCiAgICAgICAgICAgICAgICAvLyBkb3duKSwgaW4gY29tcGFyaXNvbiB0byByZXF1aXJpbmcgYSBtaW5pbXVtIG9mIDEwMCB0b2tlbnMgaW4KICAgICAgICAgICAgICAgIC8vIHRoZSBvdGhlciBjYXNlLgogICAgICAgICAgICAgICAgYm9udXNUb2tlbnMgKz0gKHRocmVzaG9sZCAtIF90b2tlbnNTb2xkKSAqIGJvbnVzIC8gMTAwOwoKICAgICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2Ygc29sZCB0b2tlbnMgaXMgJ25vcm1hbGx5JyBpbmNyZW1lbnRlZCBieSB0aGUKICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiB0b2tlbnMgdGhhdCBoYXZlIGJlZW4gYm91Z2h0IChpbiB0aGF0IGJvbnVzIHRpZXIpLgogICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2hlbiBhbGwgcmVtYWluaW5nIHRva2VucyBpbiBhIGJvbnVzIHRpZXIgYXJlCiAgICAgICAgICAgICAgICAvLyBwdXJjaGFzZWQsIHRoZSByZXN1bHRpbmcgb3BlcmF0aW9uIGxvb2tzIGFzIGZvbGxvd3M6CiAgICAgICAgICAgICAgICAvLyAgX3Rva2Vuc1NvbGQgPSBfdG9rZW5zU29sZCArICh0aHJlc2hvbGQgLSBfdG9rZW5zU29sZCkKICAgICAgICAgICAgICAgIC8vIHdoaWNoIGNhbiBiZSBzaW1wbGlmaWVkIHRvIHRoZSBjdXJyZW50IG9wZXJhdGlvbi4KICAgICAgICAgICAgICAgIF90b2tlbnNTb2xkID0gdGhyZXNob2xkOwoKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBib251cyB0aWVyIGxpbWl0IGhhcyBub3QgYmVlbiByZWFjaGVkLCB0aGUgYm9udXMKICAgICAgICAgICAgICAgIC8vIGluZGV4IGlzIGluY3JlbWVudGVkLCBiZWNhdXNlIGFsbCB0b2tlbnMgaW4gdGhlIGN1cnJlbnQKICAgICAgICAgICAgICAgIC8vIGJvbnVzIHRpZXIgaGF2ZSBiZWVuIHNvbGQuCiAgICAgICAgICAgICAgICBpZiAoYm9udXNJbmRleCA8IGJvbnVzVGllcnMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgYm9udXNJbmRleCArPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBudW1iZXIgb2YgYm91Z2h0IHRva2VucyBkb2VzIG5vdCBoaXQKICAgICAgICAgICAgICAgIC8vIHRoZSBib251cyB0aHJlc2hvbGQuIE5vIGJvbnVzIGNoYW5nZXMgaGF2ZSB0byBiZSBtYWRlLCBhbmQKICAgICAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2Ygc29sZCB0b2tlbnMgY2FuIGJlIGluY3JlbWVudGVkIGJ5IHRoZSBib3VnaHQKICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiB0b2tlbnMuCiAgICAgICAgICAgICAgICBfdG9rZW5zU29sZCArPSBfYm91Z2h0VG9rZW5zOwoKICAgICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgYm9udXMgdG9rZW5zIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2YgYm91Z2h0CiAgICAgICAgICAgICAgICAvLyB0b2tlbnMgbXVsdGlwbGllZCBieSB0aGUgYm9udXMgZmFjdG9yIG9mIHRoZSBhY3RpdmUgYm9udXMKICAgICAgICAgICAgICAgIC8vIHRpZXIuCiAgICAgICAgICAgICAgICBib251c1Rva2VucyArPSBfYm91Z2h0VG9rZW5zICogYm9udXMgLyAxMDA7CgogICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGJvdWdodCB0b2tlbnMgdG8gemVyby4KICAgICAgICAgICAgICAgIF9ib3VnaHRUb2tlbnMgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYm9udXNUb2tlbnM7CiAgICB9Cn0='.
	

]
