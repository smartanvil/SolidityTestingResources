Class {
	#name : #SRTf5f4a0b0a2153028d518a3f887e0028688351029,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5f4a0b0a2153028d518a3f887e0028688351029 >> base64 [
	^ ''.
	

]
