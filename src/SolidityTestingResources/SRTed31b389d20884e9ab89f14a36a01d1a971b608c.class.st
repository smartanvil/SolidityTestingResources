Class {
	#name : #SRTed31b389d20884e9ab89f14a36a01d1a971b608c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed31b389d20884e9ab89f14a36a01d1a971b608c >> base64 [
	^ ''.
	

]
