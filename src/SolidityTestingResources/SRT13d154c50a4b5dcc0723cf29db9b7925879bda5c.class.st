Class {
	#name : #SRT13d154c50a4b5dcc0723cf29db9b7925879bda5c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13d154c50a4b5dcc0723cf29db9b7925879bda5c >> base64 [
	^ ''.
	

]
