Class {
	#name : #SRTaf30d2a7e90d7dc361c8c4585e9bb7d2f6f15bc7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf30d2a7e90d7dc361c8c4585e9bb7d2f6f15bc7 >> base64 [
	^ 'LyoqCiAqIE92ZXJmbG93IGF3YXJlIHVpbnQgbWF0aCBmdW5jdGlvbnMuCiAqCiAqIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9NYWtlckRBTy9tYWtlci1vdGMvYmxvYi9tYXN0ZXIvY29udHJhY3RzL3NpbXBsZV9tYXJrZXQuc29sCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CiAgLy9pbnRlcm5hbHMKCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHRocm93OwogIH0KfQoKLyoqCiAqIEVSQyAyMCB0b2tlbgogKgogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IFRva2VuIHsKCiAgICAvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KSB7fQoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkge30KCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7fQoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cgp9CgovKioKICogRVJDIDIwIHRva2VuCiAqCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgLyoqCiAgICAgKiBSZXZpZXdlZDoKICAgICAqIC0gSW50ZXJnZXIgb3ZlcmZsb3cgPSBPSywgY2hlY2tlZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLgogICAgICAgIC8vSWYgeW91ciB0b2tlbiBsZWF2ZXMgb3V0IHRvdGFsU3VwcGx5IGFuZCBjYW4gaXNzdWUgbW9yZSB0b2tlbnMgYXMgdGltZSBnb2VzIG9uLCB5b3UgbmVlZCB0byBjaGVjayBpZiBpdCBkb2Vzbid0IHdyYXAuCiAgICAgICAgLy9SZXBsYWNlIHRoZSBpZiB3aXRoIHRoaXMgb25lIGluc3RlYWQuCiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIC8vaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy9zYW1lIGFzIGFib3ZlLiBSZXBsYWNlIHRoaXMgbGluZSB3aXRoIHRoZSBmb2xsb3dpbmcgaWYgeW91IHdhbnQgdG8gcHJvdGVjdCBhZ2FpbnN0IHdyYXBwaW5nIHVpbnRzLgogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIC8vaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7Cgp9CgoKLyoqCiAqIEZpcnN0IGJsb29kIGNyb3dkc2FsZSBjcm93ZHNhbGUgY29udHJhY3QuCiAqCiAqIFNlY3VyaXR5IGNyaXRlcmlhIGV2YWx1YXRlZCBhZ2FpbnN0IGh0dHA6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvODU1MS9tZXRob2RvbG9naWNhbC1zZWN1cml0eS1yZXZpZXctb2YtYS1zbWFydC1jb250cmFjdAogKgogKgogKi8KY29udHJhY3QgRmlyc3RCbG9vZFRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiRmlyc3RCbG9vZCBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICIxU1QiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIHN0YXJ0QmxvY2s7IC8vY3Jvd2RzYWxlIHN0YXJ0IGJsb2NrIChzZXQgaW4gY29uc3RydWN0b3IpCiAgICB1aW50IHB1YmxpYyBlbmRCbG9jazsgLy9jcm93ZHNhbGUgZW5kIGJsb2NrIChzZXQgaW4gY29uc3RydWN0b3IpCgogICAgLy8gSW5pdGlhbCBmb3VuZGVyIGFkZHJlc3MgKHNldCBpbiBjb25zdHJ1Y3RvcikKICAgIC8vIEFsbCBkZXBvc2l0ZWQgRVRIIHdpbGwgYmUgaW5zdGFudGx5IGZvcndhcmRlZCB0byB0aGlzIGFkZHJlc3MuCiAgICAvLyBBZGRyZXNzIGlzIGEgbXVsdGlzaWcgd2FsbGV0LgogICAgYWRkcmVzcyBwdWJsaWMgZm91bmRlciA9IDB4MDsKCiAgICAvLyBzaWduZXIgYWRkcmVzcyAoZm9yIGNsaWNrd3JhcCBhZ3JlZW1lbnQpCiAgICAvLyBzZWUgZnVuY3Rpb24oKSB7fSBmb3IgY29tbWVudHMKICAgIGFkZHJlc3MgcHVibGljIHNpZ25lciA9IDB4MDsKCiAgICB1aW50IHB1YmxpYyBldGhlckNhcCA9IDQ2NTMxMyAqIDEwKioxODsgLy9tYXggYW1vdW50IHJhaXNlZCBkdXJpbmcgY3Jvd2RzYWxlICg1LjVNIFVTRCB3b3J0aCBvZiBldGhlciB3aWxsIGJlIG1lYXN1cmVkIHdpdGggYSBtb3ZpbmcgYXZlcmFnZSBtYXJrZXQgcHJpY2UgYXQgYmVnaW5uaW5nIG9mIHRoZSBjcm93ZHNhbGUpCiAgICB1aW50IHB1YmxpYyB0cmFuc2ZlckxvY2t1cCA9IDM3MDI4NTsgLy90cmFuc2ZlcnMgYXJlIGxvY2tlZCBmb3IgdGhpcyBtYW55IGJsb2NrcyBhZnRlciBlbmRCbG9jayAoYXNzdW1pbmcgMTQgc2Vjb25kIGJsb2NrcywgdGhpcyBpcyAyIG1vbnRocykKICAgIHVpbnQgcHVibGljIGZvdW5kZXJMb2NrdXAgPSAyMjUyNTcxOyAvL2ZvdW5kZXIgYWxsb2NhdGlvbiBjYW5ub3QgYmUgY3JlYXRlZCB1bnRpbCB0aGlzIG1hbnkgYmxvY2tzIGFmdGVyIGVuZEJsb2NrIChhc3N1bWluZyAxNCBzZWNvbmQgYmxvY2tzLCB0aGlzIGlzIDEgeWVhcikKICAgIHVpbnQgcHVibGljIGJvdW50eUFsbG9jYXRpb24gPSAyNTAwMDAwICogMTAqKjE4OyAvLzIuNU0gdG9rZW5zIGFsbG9jYXRlZCBwb3N0LWNyb3dkc2FsZSBmb3IgdGhlIGJvdW50eSBmdW5kCiAgICB1aW50IHB1YmxpYyBlY29zeXN0ZW1BbGxvY2F0aW9uID0gNSAqIDEwKioxNjsgLy81JSBvZiB0b2tlbiBzdXBwbHkgYWxsb2NhdGVkIHBvc3QtY3Jvd2RzYWxlIGZvciB0aGUgZWNvc3lzdGVtIGZ1bmQKICAgIHVpbnQgcHVibGljIGZvdW5kZXJBbGxvY2F0aW9uID0gMTAgKiAxMCoqMTY7IC8vMTAlIG9mIHRva2VuIHN1cHBseSBhbGxvY2F0ZWQgcG9zdC1jcm93ZHNhbGUgZm9yIHRoZSBmb3VuZGVyIGFsbG9jYXRpb24KICAgIGJvb2wgcHVibGljIGJvdW50eUFsbG9jYXRlZCA9IGZhbHNlOyAvL3RoaXMgd2lsbCBjaGFuZ2UgdG8gdHJ1ZSB3aGVuIHRoZSBib3VudHkgZnVuZCBpcyBhbGxvY2F0ZWQKICAgIGJvb2wgcHVibGljIGVjb3N5c3RlbUFsbG9jYXRlZCA9IGZhbHNlOyAvL3RoaXMgd2lsbCBjaGFuZ2UgdG8gdHJ1ZSB3aGVuIHRoZSBlY29zeXN0ZW0gZnVuZCBpcyBhbGxvY2F0ZWQKICAgIGJvb2wgcHVibGljIGZvdW5kZXJBbGxvY2F0ZWQgPSBmYWxzZTsgLy90aGlzIHdpbGwgY2hhbmdlIHRvIHRydWUgd2hlbiB0aGUgZm91bmRlciBmdW5kIGlzIGFsbG9jYXRlZAogICAgdWludCBwdWJsaWMgcHJlc2FsZVRva2VuU3VwcGx5ID0gMDsgLy90aGlzIHdpbGwga2VlcCB0cmFjayBvZiB0aGUgdG9rZW4gc3VwcGx5IGNyZWF0ZWQgZHVyaW5nIHRoZSBjcm93ZHNhbGUKICAgIHVpbnQgcHVibGljIHByZXNhbGVFdGhlclJhaXNlZCA9IDA7IC8vdGhpcyB3aWxsIGtlZXAgdHJhY2sgb2YgdGhlIEV0aGVyIHJhaXNlZCBkdXJpbmcgdGhlIGNyb3dkc2FsZQogICAgYm9vbCBwdWJsaWMgaGFsdGVkID0gZmFsc2U7IC8vdGhlIGZvdW5kZXIgYWRkcmVzcyBjYW4gc2V0IHRoaXMgdG8gdHJ1ZSB0byBoYWx0IHRoZSBjcm93ZHNhbGUgZHVlIHRvIGVtZXJnZW5jeQogICAgZXZlbnQgQnV5KGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgZXRoLCB1aW50IGZidCk7CiAgICBldmVudCBXaXRoZHJhdyhhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCBhZGRyZXNzIHRvLCB1aW50IGV0aCk7CiAgICBldmVudCBBbGxvY2F0ZUZvdW5kZXJUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHNlbmRlcik7CiAgICBldmVudCBBbGxvY2F0ZUJvdW50eUFuZEVjb3N5c3RlbVRva2VucyhhZGRyZXNzIGluZGV4ZWQgc2VuZGVyKTsKCiAgICBmdW5jdGlvbiBGaXJzdEJsb29kVG9rZW4oYWRkcmVzcyBmb3VuZGVySW5wdXQsIGFkZHJlc3Mgc2lnbmVySW5wdXQsIHVpbnQgc3RhcnRCbG9ja0lucHV0LCB1aW50IGVuZEJsb2NrSW5wdXQpIHsKICAgICAgICBmb3VuZGVyID0gZm91bmRlcklucHV0OwogICAgICAgIHNpZ25lciA9IHNpZ25lcklucHV0OwogICAgICAgIHN0YXJ0QmxvY2sgPSBzdGFydEJsb2NrSW5wdXQ7CiAgICAgICAgZW5kQmxvY2sgPSBlbmRCbG9ja0lucHV0OwogICAgfQoKICAgIC8qKgogICAgICogU2VjdXJpdHkgcmV2aWV3CiAgICAgKgogICAgICogLSBJbnRlZ2VyIG92ZXJmbG93OiBkb2VzIG5vdCBhcHBseSwgYmxvY2tudW1iZXIgY2FuJ3QgZ3JvdyB0aGF0IGhpZ2gKICAgICAqIC0gRGl2aXNpb24gaXMgdGhlIGxhc3Qgb3BlcmF0aW9uIGFuZCBjb25zdGFudCwgc2hvdWxkIG5vdCBjYXVzZSBpc3N1ZXMKICAgICAqIC0gUHJpY2UgZnVuY3Rpb24gcGxvdHRlZCBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2lzc3Vlcy8yCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByaWNlKCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgaWYgKGJsb2NrLm51bWJlcj49c3RhcnRCbG9jayAmJiBibG9jay5udW1iZXI8c3RhcnRCbG9jaysyNTApIHJldHVybiAxNzA7IC8vcG93ZXIgaG91cgogICAgICAgIGlmIChibG9jay5udW1iZXI8c3RhcnRCbG9jayB8fCBibG9jay5udW1iZXI+ZW5kQmxvY2spIHJldHVybiAxMDA7IC8vZGVmYXVsdCBwcmljZQogICAgICAgIHJldHVybiAxMDAgKyA0KihlbmRCbG9jayAtIGJsb2NrLm51bWJlcikvKGVuZEJsb2NrIC0gc3RhcnRCbG9jayArIDEpKjY3LzQ7IC8vY3Jvd2RzYWxlIHByaWNlCiAgICB9CgogICAgLy8gcHJpY2UoKSBleHBvc2VkIGZvciB1bml0IHRlc3RzCiAgICBmdW5jdGlvbiB0ZXN0UHJpY2UodWludCBibG9ja051bWJlcikgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgaWYgKGJsb2NrTnVtYmVyPj1zdGFydEJsb2NrICYmIGJsb2NrTnVtYmVyPHN0YXJ0QmxvY2srMjUwKSByZXR1cm4gMTcwOyAvL3Bvd2VyIGhvdXIKICAgICAgICBpZiAoYmxvY2tOdW1iZXI8c3RhcnRCbG9jayB8fCBibG9ja051bWJlcj5lbmRCbG9jaykgcmV0dXJuIDEwMDsgLy9kZWZhdWx0IHByaWNlCiAgICAgICAgcmV0dXJuIDEwMCArIDQqKGVuZEJsb2NrIC0gYmxvY2tOdW1iZXIpLyhlbmRCbG9jayAtIHN0YXJ0QmxvY2sgKyAxKSo2Ny80OyAvL2Nyb3dkc2FsZSBwcmljZQogICAgfQoKICAgIC8vIEJ1eSBlbnRyeSBwb2ludAogICAgZnVuY3Rpb24gYnV5KHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSB7CiAgICAgICAgYnV5UmVjaXBpZW50KG1zZy5zZW5kZXIsIHYsIHIsIHMpOwogICAgfQoKICAgIC8qKgogICAgICogTWFpbiB0b2tlbiBidXkgZnVuY3Rpb24uCiAgICAgKgogICAgICogU2VjdXJpdHkgcmV2aWV3CiAgICAgKgogICAgICogLSBJbnRlZ2VyIG1hdGg6IG9rIC0gdXNpbmcgU2FmZU1hdGgKICAgICAqCiAgICAgKiAtIGhhbHQgZmxhZyBhZGRlZCAtIG9rCiAgICAgKgogICAgICogQXBwbGljYWJsZSB0ZXN0czoKICAgICAqCiAgICAgKiAtIFRlc3QgaGFsdGluZywgYnV5aW5nLCBhbmQgZmFpbGluZwogICAgICogLSBUZXN0IGJ1eWluZyBvbiBiZWhhbGYgb2YgYSByZWNpcGllbnQKICAgICAqIC0gVGVzdCBidXkKICAgICAqIC0gVGVzdCB1bmhhbHRpbmcsIGJ1eWluZywgYW5kIHN1Y2NlZWRpbmcKICAgICAqIC0gVGVzdCBidXlpbmcgYWZ0ZXIgdGhlIHNhbGUgZW5kcwogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gYnV5UmVjaXBpZW50KGFkZHJlc3MgcmVjaXBpZW50LCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgewogICAgICAgIGJ5dGVzMzIgaGFzaCA9IHNoYTI1Nihtc2cuc2VuZGVyKTsKICAgICAgICBpZiAoZWNyZWNvdmVyKGhhc2gsdixyLHMpICE9IHNpZ25lcikgdGhyb3c7CiAgICAgICAgaWYgKGJsb2NrLm51bWJlcjxzdGFydEJsb2NrIHx8IGJsb2NrLm51bWJlcj5lbmRCbG9jayB8fCBzYWZlQWRkKHByZXNhbGVFdGhlclJhaXNlZCxtc2cudmFsdWUpPmV0aGVyQ2FwIHx8IGhhbHRlZCkgdGhyb3c7CiAgICAgICAgdWludCB0b2tlbnMgPSBzYWZlTXVsKG1zZy52YWx1ZSwgcHJpY2UoKSk7CiAgICAgICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IHNhZmVBZGQoYmFsYW5jZXNbcmVjaXBpZW50XSwgdG9rZW5zKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CiAgICAgICAgcHJlc2FsZUV0aGVyUmFpc2VkID0gc2FmZUFkZChwcmVzYWxlRXRoZXJSYWlzZWQsIG1zZy52YWx1ZSk7CgogICAgICAgIGlmICghZm91bmRlci5jYWxsLnZhbHVlKG1zZy52YWx1ZSkoKSkgdGhyb3c7IC8vaW1tZWRpYXRlbHkgc2VuZCBFdGhlciB0byBmb3VuZGVyIGFkZHJlc3MKCiAgICAgICAgQnV5KHJlY2lwaWVudCwgbXNnLnZhbHVlLCB0b2tlbnMpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHVwIGZvdW5kZXIgYWRkcmVzcyB0b2tlbiBiYWxhbmNlLgogICAgICoKICAgICAqIGFsbG9jYXRlQm91bnR5QW5kRWNvc3lzdGVtVG9rZW5zKCkgbXVzdCBiZSBjYWxsZCBmaXJzdC4KICAgICAqCiAgICAgKiBTZWN1cml0eSByZXZpZXcKICAgICAqCiAgICAgKiAtIEludGVnZXIgbWF0aDogb2sgLSBvbmx5IGNhbGxlZCBvbmNlIHdpdGggZml4ZWQgcGFyYW1ldGVycwogICAgICoKICAgICAqIEFwcGxpY2FibGUgdGVzdHM6CiAgICAgKgogICAgICogLSBUZXN0IGJvdW50eSBhbmQgZWNvc3lzdGVtIGFsbG9jYXRpb24KICAgICAqIC0gVGVzdCBib3VudHkgYW5kIGVjb3N5c3RlbSBhbGxvY2F0aW9uIHR3aWNlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvY2F0ZUZvdW5kZXJUb2tlbnMoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPWZvdW5kZXIpIHRocm93OwogICAgICAgIGlmIChibG9jay5udW1iZXIgPD0gZW5kQmxvY2sgKyBmb3VuZGVyTG9ja3VwKSB0aHJvdzsKICAgICAgICBpZiAoZm91bmRlckFsbG9jYXRlZCkgdGhyb3c7CiAgICAgICAgaWYgKCFib3VudHlBbGxvY2F0ZWQgfHwgIWVjb3N5c3RlbUFsbG9jYXRlZCkgdGhyb3c7CiAgICAgICAgYmFsYW5jZXNbZm91bmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW2ZvdW5kZXJdLCBwcmVzYWxlVG9rZW5TdXBwbHkgKiBmb3VuZGVyQWxsb2NhdGlvbiAvICgxIGV0aGVyKSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBwcmVzYWxlVG9rZW5TdXBwbHkgKiBmb3VuZGVyQWxsb2NhdGlvbiAvICgxIGV0aGVyKSk7CiAgICAgICAgZm91bmRlckFsbG9jYXRlZCA9IHRydWU7CiAgICAgICAgQWxsb2NhdGVGb3VuZGVyVG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHVwIGZvdW5kZXIgYWRkcmVzcyB0b2tlbiBiYWxhbmNlLgogICAgICoKICAgICAqIFNldCB1cCBib3VudHkgcG9vbC4KICAgICAqCiAgICAgKiBTZWN1cml0eSByZXZpZXcKICAgICAqCiAgICAgKiAtIEludGVnZXIgbWF0aDogb2sgLSBvbmx5IGNhbGxlZCBvbmNlIHdpdGggZml4ZWQgcGFyYW1ldGVycwogICAgICoKICAgICAqIEFwcGxpY2FibGUgdGVzdHM6CiAgICAgKgogICAgICogLSBUZXN0IGZvdW5kZXIgdG9rZW4gYWxsb2NhdGlvbiB0b28gZWFybHkKICAgICAqIC0gVGVzdCBmb3VuZGVyIHRva2VuIGFsbG9jYXRpb24gb24gdGltZQogICAgICogLSBUZXN0IGZvdW5kZXIgdG9rZW4gYWxsb2NhdGlvbiB0d2ljZQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVCb3VudHlBbmRFY29zeXN0ZW1Ub2tlbnMoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPWZvdW5kZXIpIHRocm93OwogICAgICAgIGlmIChibG9jay5udW1iZXIgPD0gZW5kQmxvY2spIHRocm93OwogICAgICAgIGlmIChib3VudHlBbGxvY2F0ZWQgfHwgZWNvc3lzdGVtQWxsb2NhdGVkKSB0aHJvdzsKICAgICAgICBwcmVzYWxlVG9rZW5TdXBwbHkgPSB0b3RhbFN1cHBseTsKICAgICAgICBiYWxhbmNlc1tmb3VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbZm91bmRlcl0sIHByZXNhbGVUb2tlblN1cHBseSAqIGVjb3N5c3RlbUFsbG9jYXRpb24gLyAoMSBldGhlcikpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgcHJlc2FsZVRva2VuU3VwcGx5ICogZWNvc3lzdGVtQWxsb2NhdGlvbiAvICgxIGV0aGVyKSk7CiAgICAgICAgYmFsYW5jZXNbZm91bmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW2ZvdW5kZXJdLCBib3VudHlBbGxvY2F0aW9uKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIGJvdW50eUFsbG9jYXRpb24pOwogICAgICAgIGJvdW50eUFsbG9jYXRlZCA9IHRydWU7CiAgICAgICAgZWNvc3lzdGVtQWxsb2NhdGVkID0gdHJ1ZTsKICAgICAgICBBbGxvY2F0ZUJvdW50eUFuZEVjb3N5c3RlbVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIEVtZXJnZW5jeSBTdG9wIGNyb3dkc2FsZS4KICAgICAqCiAgICAgKiAgQXBwbGljYWJsZSB0ZXN0czoKICAgICAqCiAgICAgKiAtIFRlc3QgdW5oYWx0aW5nLCBidXlpbmcsIGFuZCBzdWNjZWVkaW5nCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhbHQoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPWZvdW5kZXIpIHRocm93OwogICAgICAgIGhhbHRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdW5oYWx0KCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyIT1mb3VuZGVyKSB0aHJvdzsKICAgICAgICBoYWx0ZWQgPSBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSBmb3VuZGVyIGFkZHJlc3MgKHdoZXJlIGNyb3dkc2FsZSBFVEggaXMgYmVpbmcgZm9yd2FyZGVkKS4KICAgICAqCiAgICAgKiBBcHBsaWNhYmxlIHRlc3RzOgogICAgICoKICAgICAqIC0gVGVzdCBmb3VuZGVyIGNoYW5nZSBieSBoYWNrZXIKICAgICAqIC0gVGVzdCBmb3VuZGVyIGNoYW5nZQogICAgICogLSBUZXN0IGZvdW5kZXIgdG9rZW4gYWxsb2NhdGlvbiB0d2ljZQogICAgICoKICAgICAqLwoKICAgIGZ1bmN0aW9uIGNoYW5nZUZvdW5kZXIoYWRkcmVzcyBuZXdGb3VuZGVyKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPWZvdW5kZXIpIHRocm93OwogICAgICAgIGZvdW5kZXIgPSBuZXdGb3VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogRVJDIDIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZSB0cmFuc2ZlciBmdW5jdGlvbgogICAgICoKICAgICAqIFByZXZlbnQgdHJhbnNmZXJzIHVudGlsIGZyZWV6ZSBwZXJpb2QgaXMgb3Zlci4KICAgICAqCiAgICAgKiBBcHBsaWNhYmxlIHRlc3RzOgogICAgICoKICAgICAqIC0gVGVzdCByZXN0cmljdGVkIGVhcmx5IHRyYW5zZmVyCiAgICAgKiAtIFRlc3QgdHJhbnNmZXIgYWZ0ZXIgcmVzdHJpY3RlZCBwZXJpb2QKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmxvY2subnVtYmVyIDw9IGVuZEJsb2NrICsgdHJhbnNmZXJMb2NrdXAgJiYgbXNnLnNlbmRlciE9Zm91bmRlcikgdGhyb3c7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KICAgIC8qKgogICAgICogRVJDIDIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZSB0cmFuc2ZlciBmdW5jdGlvbgogICAgICoKICAgICAqIFByZXZlbnQgdHJhbnNmZXJzIHVudGlsIGZyZWV6ZSBwZXJpb2QgaXMgb3Zlci4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJsb2NrLm51bWJlciA8PSBlbmRCbG9jayArIHRyYW5zZmVyTG9ja3VwICYmIG1zZy5zZW5kZXIhPWZvdW5kZXIpIHRocm93OwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIERvIG5vdCBhbGxvdyBkaXJlY3QgZGVwb3NpdHMuCiAgICAgKgogICAgICogQWxsIGNyb3dkc2FsZSBkZXBvc2l0b3JzIG11c3QgaGF2ZSByZWFkIHRoZSBsZWdhbCBhZ3JlZW1lbnQuCiAgICAgKiBUaGlzIGlzIGNvbmZpcm1lZCBieSBoYXZpbmcgdGhlbSBzaWduaW5nIHRoZSB0ZXJtcyBvZiBzZXJ2aWNlIG9uIHRoZSB3ZWJzaXRlLgogICAgICogVGhleSBnaXZlIHRoZWlyIGNyb3dkc2FsZSBFdGhlcmV1bSBzb3VyY2UgYWRkcmVzcyBvbiB0aGUgd2Vic2l0ZS4KICAgICAqIFdlYnNpdGUgc2lnbnMgdGhpcyBhZGRyZXNzIHVzaW5nIGNyb3dkc2FsZSBwcml2YXRlIGtleSAoZGlmZmVyZW50IGZyb20gZm91bmRlcnMga2V5KS4KICAgICAqIGJ1eSgpIHRha2VzIHRoaXMgc2lnbmF0dXJlIGFzIGlucHV0IGFuZCByZWplY3RzIGFsbCBkZXBvc2l0cyB0aGF0IGRvIG5vdCBoYXZlCiAgICAgKiBzaWduYXR1cmUgeW91IHJlY2VpdmUgYWZ0ZXIgcmVhZGluZyB0ZXJtcyBvZiBzZXJ2aWNlLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24oKSB7CiAgICAgICAgdGhyb3c7CiAgICB9Cgp9'.
	

]
