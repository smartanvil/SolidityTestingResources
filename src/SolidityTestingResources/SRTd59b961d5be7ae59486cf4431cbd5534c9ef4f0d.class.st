Class {
	#name : #SRTd59b961d5be7ae59486cf4431cbd5534c9ef4f0d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd59b961d5be7ae59486cf4431cbd5534c9ef4f0d >> base64 [
	^ ''.
	

]
