Class {
	#name : #SRT1f88888732d0943bb49f7573a8848814ff0a4090,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1f88888732d0943bb49f7573a8848814ff0a4090 >> base64 [
	^ ''.
	

]
