Class {
	#name : #SRTa9877b1e05d035899131dbd1e403825166d09f92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9877b1e05d035899131dbd1e403825166d09f92 >> base64 [
	^ ''.
	

]
