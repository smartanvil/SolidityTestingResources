Class {
	#name : #SRTbb2395583d9c0a8d796abedcff1c1a8a21e68f66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb2395583d9c0a8d796abedcff1c1a8a21e68f66 >> base64 [
	^ ''.
	

]
