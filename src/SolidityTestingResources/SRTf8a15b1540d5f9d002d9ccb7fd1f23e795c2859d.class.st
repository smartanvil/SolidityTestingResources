Class {
	#name : #SRTf8a15b1540d5f9d002d9ccb7fd1f23e795c2859d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8a15b1540d5f9d002d9ccb7fd1f23e795c2859d >> base64 [
	^ ''.
	

]
