Class {
	#name : #SRT65c8eb2ece64a686f7e990ce2e1cadf498156388,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT65c8eb2ece64a686f7e990ce2e1cadf498156388 >> base64 [
	^ ''.
	

]
