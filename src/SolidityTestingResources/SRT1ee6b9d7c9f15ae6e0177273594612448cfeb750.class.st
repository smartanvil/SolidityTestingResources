Class {
	#name : #SRT1ee6b9d7c9f15ae6e0177273594612448cfeb750,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1ee6b9d7c9f15ae6e0177273594612448cfeb750 >> base64 [
	^ ''.
	

]
