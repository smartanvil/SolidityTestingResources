Class {
	#name : #SRTd7ee73ee5a1456c1c644692685608b4b0338063d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7ee73ee5a1456c1c644692685608b4b0338063d >> base64 [
	^ ''.
	

]
