Class {
	#name : #SRTc35dce7925cb3a33406abda3158a336f0a59cc0a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc35dce7925cb3a33406abda3158a336f0a59cc0a >> base64 [
	^ ''.
	

]
