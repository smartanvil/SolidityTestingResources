Class {
	#name : #SRT8bccd8547cd101ee78c33c41476670cf58fff411,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8bccd8547cd101ee78c33c41476670cf58fff411 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBCTUNBc3NldEludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBfX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIHJldHVybnMoYm9vbCk7CiAgICBmdW5jdGlvbiBfX3RyYW5zZmVyRnJvbVdpdGhSZWZlcmVuY2UoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSwgYWRkcmVzcyBfc2VuZGVyKSByZXR1cm5zKGJvb2wpOwogICAgZnVuY3Rpb24gX19hcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBhZGRyZXNzIF9zZW5kZXIpIHJldHVybnMoYm9vbCk7CiAgICBmdW5jdGlvbiBfX3Byb2Nlc3MoYnl0ZXMgX2RhdGEsIGFkZHJlc3MgX3NlbmRlcikgcGF5YWJsZSB7CiAgICAgICAgdGhyb3c7CiAgICB9Cn0KCmNvbnRyYWN0IEJNQ0Fzc2V0UHJveHkgewogICAgYWRkcmVzcyBwdWJsaWMgYm1jUGxhdGZvcm07CiAgICBmdW5jdGlvbiBfX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIHJldHVybnMoYm9vbCk7CiAgICBmdW5jdGlvbiBfX3RyYW5zZmVyRnJvbVdpdGhSZWZlcmVuY2UoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSwgYWRkcmVzcyBfc2VuZGVyKSByZXR1cm5zKGJvb2wpOwogICAgZnVuY3Rpb24gX19hcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBhZGRyZXNzIF9zZW5kZXIpIHJldHVybnMoYm9vbCk7ICAgIAogICAgZnVuY3Rpb24gZ2V0TGF0ZXN0VmVyc2lvbigpIHJldHVybnMoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBpbml0KGFkZHJlc3MgX2JtY1BsYXRmb3JtLCBzdHJpbmcgX3N5bWJvbCwgc3RyaW5nIF9uYW1lKTsKICAgIGZ1bmN0aW9uIHByb3Bvc2VVcGdyYWRlKGFkZHJlc3MgX25ld1ZlcnNpb24pOwp9CgovKioKICogQHRpdGxlIEJNQyBBc3NldCBpbXBsZW1lbnRhdGlvbiBjb250cmFjdC4KICoKICogQmFzaWMgYXNzZXQgaW1wbGVtZW50YXRpb24gY29udHJhY3QsIHdpdGhvdXQgYW55IGFkZGl0aW9uYWwgbG9naWMuCiAqIEV2ZXJ5IG90aGVyIGFzc2V0IGltcGxlbWVudGF0aW9uIGNvbnRyYWN0cyBzaG91bGQgZGVyaXZlIGZyb20gdGhpcyBvbmUuCiAqIFJlY2VpdmVzIGNhbGxzIGZyb20gdGhlIHByb3h5LCBhbmQgY2FsbHMgYmFjayBpbW1lZGlhdGx5IHdpdGhvdXQgYXJndW1lbnRzIG1vZGlmaWNhdGlvbi4KICoKICogTm90ZTogYWxsIHRoZSBub24gY29uc3RhbnQgZnVuY3Rpb25zIHJldHVybiBmYWxzZSBpbnN0ZWFkIG9mIHRocm93aW5nIGluIGNhc2UgaWYgc3RhdGUgY2hhbmdlCiAqIGRpZG4ndCBoYXBwZW4geWV0LgogKi8KY29udHJhY3QgQk1DQXNzZXQgaXMgQk1DQXNzZXRJbnRlcmZhY2UgewogICAgLy8gQXNzaWduZWQgYXNzZXQgcHJveHkgY29udHJhY3QsIGltbXV0YWJsZS4KICAgIEJNQ0Fzc2V0UHJveHkgcHVibGljIHByb3h5OwoKICAgIC8qKgogICAgICogT25seSBhc3NpZ25lZCBwcm94eSBpcyBhbGxvd2VkIHRvIGNhbGwuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQcm94eSgpIHsKICAgICAgICBpZiAocHJveHkgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICBfOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgYXNzZXQgcHJveHkgYWRkcmVzcy4KICAgICAqCiAgICAgKiBDYW4gYmUgc2V0IG9ubHkgb25jZS4KICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3h5IGFzc2V0IHByb3h5IGNvbnRyYWN0IGFkZHJlc3MuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyBmaW5hbCwgYW5kIG11c3Qgbm90IGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGluaXQoQk1DQXNzZXRQcm94eSBfcHJveHkpIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmIChhZGRyZXNzKHByb3h5KSAhPSAweDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBwcm94eSA9IF9wcm94eTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFBhc3NlcyBleGVjdXRpb24gaW50byB2aXJ0dWFsIGZ1bmN0aW9uLgogICAgICoKICAgICAqIENhbiBvbmx5IGJlIGNhbGxlZCBieSBhc3NpZ25lZCBhc3NldCBwcm94eS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIGZpbmFsLCBhbmQgbXVzdCBub3QgYmUgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgZnVuY3Rpb24gX190cmFuc2ZlcldpdGhSZWZlcmVuY2UoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSwgYWRkcmVzcyBfc2VuZGVyKSBvbmx5UHJveHkoKSByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShfdG8sIF92YWx1ZSwgX3JlZmVyZW5jZSwgX3NlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBDYWxscyBiYWNrIHdpdGhvdXQgbW9kaWZpY2F0aW9ucy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIHZpcnR1YWwsIGFuZCBtZWFudCB0byBiZSBvdmVycmlkZGVuLgogICAgICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UsIGFkZHJlc3MgX3NlbmRlcikgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHByb3h5Ll9fdHJhbnNmZXJXaXRoUmVmZXJlbmNlKF90bywgX3ZhbHVlLCBfcmVmZXJlbmNlLCBfc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFBhc3NlcyBleGVjdXRpb24gaW50byB2aXJ0dWFsIGZ1bmN0aW9uLgogICAgICoKICAgICAqIENhbiBvbmx5IGJlIGNhbGxlZCBieSBhc3NpZ25lZCBhc3NldCBwcm94eS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIGZpbmFsLCBhbmQgbXVzdCBub3QgYmUgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgZnVuY3Rpb24gX190cmFuc2ZlckZyb21XaXRoUmVmZXJlbmNlKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UsIGFkZHJlc3MgX3NlbmRlcikgb25seVByb3h5KCkgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIF90cmFuc2ZlckZyb21XaXRoUmVmZXJlbmNlKF9mcm9tLCBfdG8sIF92YWx1ZSwgX3JlZmVyZW5jZSwgX3NlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBDYWxscyBiYWNrIHdpdGhvdXQgbW9kaWZpY2F0aW9ucy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIHZpcnR1YWwsIGFuZCBtZWFudCB0byBiZSBvdmVycmlkZGVuLgogICAgICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIGludGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBwcm94eS5fX3RyYW5zZmVyRnJvbVdpdGhSZWZlcmVuY2UoX2Zyb20sIF90bywgX3ZhbHVlLCBfcmVmZXJlbmNlLCBfc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFBhc3NlcyBleGVjdXRpb24gaW50byB2aXJ0dWFsIGZ1bmN0aW9uLgogICAgICoKICAgICAqIENhbiBvbmx5IGJlIGNhbGxlZCBieSBhc3NpZ25lZCBhc3NldCBwcm94eS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIGZpbmFsLCBhbmQgbXVzdCBub3QgYmUgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgZnVuY3Rpb24gX19hcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBhZGRyZXNzIF9zZW5kZXIpIG9ubHlQcm94eSgpIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBfYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlLCBfc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIENhbGxzIGJhY2sgd2l0aG91dCBtb2RpZmljYXRpb25zLgogICAgICoKICAgICAqIEByZXR1cm4gc3VjY2Vzcy4KICAgICAqIEBkZXYgZnVuY3Rpb24gaXMgdmlydHVhbCwgYW5kIG1lYW50IHRvIGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIF9hcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBhZGRyZXNzIF9zZW5kZXIpIGludGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBwcm94eS5fX2FwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSwgX3NlbmRlcik7CiAgICB9Cn0KCgovKioKICogQHRpdGxlIEJsYWNrbW9vbmNyeXB0by5jb20gQk1DIHRva2VucyBjb250cmFjdC4KICoKICogVGhlIG9mZmljaWFsIEJsYWNrbW9vbmNyeXB0by5jb20gdG9rZW4gaW1wbGVtZW50YXRpb24uCiAqLwpjb250cmFjdCBCTUMgaXMgQk1DQXNzZXQgewoKICAgIHVpbnQgcHVibGljIGljb1VzZDsKICAgIHVpbnQgcHVibGljIGljb0V0aDsKICAgIHVpbnQgcHVibGljIGljb0J0YzsKICAgIHVpbnQgcHVibGljIGljb0x0YzsKCiAgICBmdW5jdGlvbiBpbml0Qk1DKEJNQ0Fzc2V0UHJveHkgX3Byb3h5LCB1aW50IF9pY29Vc2QsIHVpbnQgX2ljb0V0aCwgdWludCBfaWNvQnRjLCB1aW50IF9pY29MdGMpIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKGljb1VzZCAhPSAwIHx8IGljb0V0aCAhPSAwIHx8IGljb0J0YyAhPSAwIHx8IGljb0x0YyAhPSAwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWNvVXNkID0gX2ljb1VzZDsKICAgICAgICBpY29FdGggPSBfaWNvRXRoOwogICAgICAgIGljb0J0YyA9IF9pY29CdGM7CiAgICAgICAgaWNvTHRjID0gX2ljb0x0YzsKICAgICAgICBzdXBlci5pbml0KF9wcm94eSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cgp9'.
	

]
