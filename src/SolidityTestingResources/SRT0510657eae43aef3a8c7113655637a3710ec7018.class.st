Class {
	#name : #SRT0510657eae43aef3a8c7113655637a3710ec7018,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0510657eae43aef3a8c7113655637a3710ec7018 >> base64 [
	^ ''.
	

]
