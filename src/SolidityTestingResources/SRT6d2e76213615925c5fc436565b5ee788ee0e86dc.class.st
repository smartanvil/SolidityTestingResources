Class {
	#name : #SRT6d2e76213615925c5fc436565b5ee788ee0e86dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6d2e76213615925c5fc436565b5ee788ee0e86dc >> base64 [
	^ ''.
	

]
