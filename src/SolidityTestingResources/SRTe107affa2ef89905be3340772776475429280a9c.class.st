Class {
	#name : #SRTe107affa2ef89905be3340772776475429280a9c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe107affa2ef89905be3340772776475429280a9c >> base64 [
	^ ''.
	

]
