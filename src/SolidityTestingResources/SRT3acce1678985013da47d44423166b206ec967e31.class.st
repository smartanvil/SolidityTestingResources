Class {
	#name : #SRT3acce1678985013da47d44423166b206ec967e31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3acce1678985013da47d44423166b206ec967e31 >> base64 [
	^ ''.
	

]
