Class {
	#name : #SRT29fe372e3af95a0fd4693adde80d988d983e9770,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29fe372e3af95a0fd4693adde80d988d983e9770 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCmNvbnRyYWN0IEVSQzIzQ29udHJhY3RJbnRlcmZhY2UgewogIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBleHRlcm5hbDsKfQoKY29udHJhY3QgRVJDMjNDb250cmFjdCBpcyBFUkMyM0NvbnRyYWN0SW50ZXJmYWNlIHsKCiAvKioKICAqIEBkZXYgUmVqZWN0IGFsbCBFUkMyMyBjb21wYXRpYmxlIHRva2VucwogICogcGFyYW0gX2Zyb20gYWRkcmVzcyB0aGF0IGlzIHRyYW5zZmVycmluZyB0aGUgdG9rZW5zCiAgKiBwYXJhbSBfdmFsdWUgYW1vdW50IG9mIHNwZWNpZmllZCB0b2tlbgogICogcGFyYW0gX2RhdGEgYnl0ZXMgZGF0YSBwYXNzZWQgZnJvbSB0aGUgY2FsbGVyCiAgKi8KICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgLypfZnJvbSovLCB1aW50MjU2IC8qX3ZhbHVlKi8sIGJ5dGVzIC8qX2RhdGEqLykgZXh0ZXJuYWwgewogICAgcmV2ZXJ0KCk7CiAgfQoKfQoKY29udHJhY3QgRXRoTWF0Y2ggaXMgT3duYWJsZSwgRVJDMjNDb250cmFjdCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE1BU1RFUllfVEhSRVNIT0xEID0gMTAgZmlubmV5OyAvLyBuZXcgbWFzdGVyIGFsbG93ZWQgaWYgYmFsYW5jZSBmYWxscyBiZWxvdyB0aGlzICgxMCBmaW5uZXkgPT0gLjAxIEVUSCkKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBQQVlPVVRfUENUID0gOTU7IC8vICUgdG8gd2lubmVyIChyZXN0IHRvIGNyZWF0b3IpCgogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsgLy8gc3RhcnQgdGltZXN0YW1wIHdoZW4gbWF0Y2hlcyBtYXkgYmVnaW4KICBhZGRyZXNzIHB1YmxpYyBtYXN0ZXI7IC8vIGN1cnJlbnQgTWF0Y2htYXN0ZXIKICB1aW50MjU2IHB1YmxpYyBnYXNSZXE7IC8vIHJlcXVpcmUgc2FtZSBnYXMgZXZlcnkgdGltZSBpbiBtYWtlcigpCgogIGV2ZW50IE1hdGNobWFrZXJQcmV2YWlscyhhZGRyZXNzIGluZGV4ZWQgbWF0Y2htYXN0ZXIsIGFkZHJlc3MgaW5kZXhlZCBtYXRjaG1ha2VyLCB1aW50MjU2IHNlbnQsIHVpbnQyNTYgYWN0dWFsLCB1aW50MjU2IHdpbm5pbmdzKTsKICBldmVudCBNYXRjaG1hc3RlclByZXZhaWxzKGFkZHJlc3MgaW5kZXhlZCBtYXRjaG1hc3RlciwgYWRkcmVzcyBpbmRleGVkIG1hdGNobWFrZXIsIHVpbnQyNTYgc2VudCwgdWludDI1NiBhY3R1YWwsIHVpbnQyNTYgd2lubmluZ3MpOwogIGV2ZW50IE1hdGNobWFzdGVyVGFrZW92ZXIoYWRkcmVzcyBpbmRleGVkIG1hdGNobWFzdGVyUHJldiwgYWRkcmVzcyBpbmRleGVkIG1hdGNobWFzdGVyTmV3LCB1aW50MjU2IGJhbGFuY2VOZXcpOwoKICAvLyBjYW4gYmUgZnVuZGVkIGF0IGluaXQgaWYgZGVzaXJlZAogIGZ1bmN0aW9uIEV0aE1hdGNoKHVpbnQyNTYgX3N0YXJ0VGltZSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyk7CgogICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIG1hc3RlciA9IG1zZy5zZW5kZXI7IC8vIGluaXRpYWwKICAgIGdhc1JlcSA9IDQyMDAwOwogIH0KCiAgLy8gZW5zdXJlIHByb3BlciBzdGF0ZQogIG1vZGlmaWVyIGlzVmFsaWQoYWRkcmVzcyBfYWRkcikgewogICAgcmVxdWlyZShfYWRkciAhPSAweDApOwogICAgcmVxdWlyZSghTGliLmlzQ29udHJhY3QoX2FkZHIpKTsgLy8gYmFuIGNvbnRyYWN0cwogICAgcmVxdWlyZShub3cgPj0gc3RhcnRUaW1lKTsKCiAgIF87CiAgfQoKICAvLyBmYWxsYmFjayBmdW5jdGlvbgogIC8vIG1ha2UgYSBtYXRjaAogIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgIG1ha2VyKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbWFrZSBhIG1hdGNoIChhbmQgc3BlY2lmeSBwYXlvdXQgYWRkcmVzcykKICBmdW5jdGlvbiBtYWtlcihhZGRyZXNzIF9hZGRyKSBpc1ZhbGlkKF9hZGRyKSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKG1zZy5nYXMgPj0gZ2FzUmVxKTsgLy8gcmVxdWlyZSBzYW1lIGdhcyBldmVyeSB0aW1lIChvdmVyYWdlcyBhdXRvLXJldHVybmVkKQoKICAgIHVpbnQyNTYgd2VpUGFpZCA9IG1zZy52YWx1ZTsKICAgIHJlcXVpcmUod2VpUGFpZCA+IDApOwoKICAgIHVpbnQyNTYgYmFsUHJldiA9IHRoaXMuYmFsYW5jZS5zdWIod2VpUGFpZCk7CgogICAgaWYgKGJhbFByZXYgPT0gd2VpUGFpZCkgewogICAgICAvLyBtYWtlciB3aW5zCiAgICAgIHVpbnQyNTYgd2lubmluZ3MgPSB3ZWlQYWlkLmFkZChiYWxQcmV2LmRpdigyKSk7CiAgICAgIHBheShfYWRkciwgd2lubmluZ3MpOwogICAgICBNYXRjaG1ha2VyUHJldmFpbHMobWFzdGVyLCBfYWRkciwgd2VpUGFpZCwgYmFsUHJldiwgd2lubmluZ3MpOwogICAgfSBlbHNlIHsKICAgICAgLy8gbWFzdGVyIHdpbnMKICAgICAgcGF5KG1hc3Rlciwgd2VpUGFpZCk7CiAgICAgIE1hdGNobWFzdGVyUHJldmFpbHMobWFzdGVyLCBfYWRkciwgd2VpUGFpZCwgYmFsUHJldiwgd2VpUGFpZCk7CiAgICB9CiAgfQoKICAvLyBzZW5kIHByb2NlZWRzCiAgZnVuY3Rpb24gcGF5KGFkZHJlc3MgX2FkZHIsIHVpbnQyNTYgX2Ftb3VudCkgaW50ZXJuYWwgewogICAgaWYgKF9hbW91bnQgPT0gMCkgewogICAgICByZXR1cm47IC8vIGFtb3VudCBhY3R1YWxseSBjb3VsZCBiZSAwLCBlLmcuIGluaXRpYWwgZnVuZGluZyBvciBpZiBiYWxhbmNlIGlzIHRvdGFsbHkgZHJhaW5lZAogICAgfQoKICAgIHVpbnQyNTYgcGF5b3V0ID0gX2Ftb3VudC5tdWwoUEFZT1VUX1BDVCkuZGl2KDEwMCk7CiAgICBfYWRkci50cmFuc2ZlcihwYXlvdXQpOwoKICAgIHVpbnQyNTYgcmVtYWluZGVyID0gX2Ftb3VudC5zdWIocGF5b3V0KTsKICAgIG93bmVyLnRyYW5zZmVyKHJlbWFpbmRlcik7CiAgfQoKICAvLyBiZWNvbWUgdGhlIG5ldyBtYXN0ZXIKICBmdW5jdGlvbiBtYXN0ZXJ5KCkgcHVibGljIHBheWFibGUgewogICAgbWFzdGVyeShtc2cuc2VuZGVyKTsKICB9CgogIC8vIGJlY29tZSB0aGUgbmV3IG1hc3RlciAoYW5kIHNwZWNpZnkgcGF5b3V0IGFkZHJlc3MpCiAgZnVuY3Rpb24gbWFzdGVyeShhZGRyZXNzIF9hZGRyKSBpc1ZhbGlkKF9hZGRyKSBwdWJsaWMgcGF5YWJsZSB7CiAgICB1aW50MjU2IHdlaVBhaWQgPSBtc2cudmFsdWU7CiAgICByZXF1aXJlKHdlaVBhaWQgPj0gTUFTVEVSWV9USFJFU0hPTEQpOwoKICAgIHVpbnQyNTYgYmFsUHJldiA9IHRoaXMuYmFsYW5jZS5zdWIod2VpUGFpZCk7CiAgICByZXF1aXJlKGJhbFByZXYgPCBNQVNURVJZX1RIUkVTSE9MRCk7CgogICAgcGF5KG1hc3RlciwgYmFsUHJldik7CgogICAgTWF0Y2htYXN0ZXJUYWtlb3ZlcihtYXN0ZXIsIF9hZGRyLCB3ZWlQYWlkKTsgLy8gY2FsbGVkIGJlZm9yZSBuZXcgbWFzdGVyIHNldAoKICAgIG1hc3RlciA9IF9hZGRyOyAvLyBtdXN0IGJlIHNldCBhZnRlciBldmVudCBsb2dnZWQKICB9CgogIC8vIGluIGNhc2UgaXQgZXZlciBuZWVkcyB0byBiZSB1cGRhdGVkIGZvciBmdXR1cmUgRXRoZXJldW0gcmVsZWFzZXMsIGV0YwogIGZ1bmN0aW9uIHNldEdhc1JlcSh1aW50MjU2IF9nYXNSZXEpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICBnYXNSZXEgPSBfZ2FzUmVxOwogIH0KCiAgLy8gaW5pdGlhbCBmdW5kaW5nCiAgZnVuY3Rpb24gZnVuZCgpIG9ubHlPd25lciBleHRlcm5hbCBwYXlhYmxlIHsKICAgIHJlcXVpcmUobm93IDwgc3RhcnRUaW1lKTsgLy8gb3RoZXJ3aXNlIGNhbiBqdXN0IGNhbGwgbWFzdGVyeSgpCgogICAgLy8gaXQgaXMgcG9zc2libGUgdGhhdCBmdW5kcyBjYW4gYmUgZm9yY2VkIGluIHZpYSBzZWxmZGVzdHJ1Y3QsIHNvCiAgICAvLyBqdXN0IGVuc3VyZSBiYWxhbmNlIGlzIGVub3VnaCwgYXQgbGVhc3QgYWZ0ZXIgcmVjZWl2aW5nIHRoaXMgY2FsbCAobXNnLnZhbHVlKQogICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gTUFTVEVSWV9USFJFU0hPTEQpOwogIH0KCiAgLy8gZXhwbGljaXQgYmFsYW5jZSBnZXR0ZXIKICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICB9Cgp9CgpsaWJyYXJ5IExpYiB7CiAgLy8gd2hldGhlciBnaXZlbiBhZGRyZXNzIGlzIGEgY29udHJhY3Qgb3Igbm90IGJhc2VkIG9uIGJ5dGVjb2RlCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgc2l6ZTsKICAgIGFzc2VtYmx5IHsKICAgICAgc2l6ZSA6PSBleHRjb2Rlc2l6ZShhZGRyKQogICAgfQogICAgcmV0dXJuIChzaXplID4gMSk7IC8vIHRlc3RpbmcgcmV0dXJuZWQgc2l6ZSAiMSIgZm9yIG5vbi1jb250cmFjdCBhY2NvdW50cywgc28gd2UncmUgdXNpbmcgdGhhdC4KICB9Cn0='.
	

]
