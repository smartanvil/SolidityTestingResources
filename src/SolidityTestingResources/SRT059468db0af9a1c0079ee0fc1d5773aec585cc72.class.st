Class {
	#name : #SRT059468db0af9a1c0079ee0fc1d5773aec585cc72,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT059468db0af9a1c0079ee0fc1d5773aec585cc72 >> base64 [
	^ ''.
	

]
