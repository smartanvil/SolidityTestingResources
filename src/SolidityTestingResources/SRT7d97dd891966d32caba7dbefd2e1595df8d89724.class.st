Class {
	#name : #SRT7d97dd891966d32caba7dbefd2e1595df8d89724,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7d97dd891966d32caba7dbefd2e1595df8d89724 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgppbnRlcmZhY2UgQ0NDUkNvaW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGFkZHJlc3MgcHVibGljIG1hbmFnZXI7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICBtYW5hZ2VyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQogIAogIG1vZGlmaWVyIG9ubHlNYW5hZ2VyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1hbmFnZXIgfHwgbXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJNYW5hZ21lbnQoYWRkcmVzcyBuZXdNYW5hZ2VyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3TWFuYWdlciAhPSBhZGRyZXNzKDApKTsKICAgIG1hbmFnZXIgPSBuZXdNYW5hZ2VyOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwogIGJvb2wgcHVibGljIGZpbmlzaGVkID0gZmFsc2U7CiAgCiAgbW9kaWZpZXIgd2hlblNhbGVOb3RGaW5pc2goKSB7CiAgICByZXF1aXJlKCFmaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgd2hlblNhbGVGaW5pc2goKSB7CiAgICByZXF1aXJlKGZpbmlzaGVkKTsKICAgIF87CiAgfQoKICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgfQoKICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogIH0KfQoKY29udHJhY3QgQ0NDUlNhbGUgaXMgUGF1c2FibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgYWRkcmVzcyBwdWJsaWMgaW52ZXN0V2FsbGV0ID0gMHhiYjJlZkZhYjkzMmE0YzJmNzdGYzE2MTdDMWE1NjM3MzhENzFCMGE3OwogICAgQ0NDUkNvaW4gcHVibGljIHRva2VuUmV3YXJkOyAKICAgIHVpbnQyNTYgcHVibGljIHRva2VuUHJpY2UgPSA3MjM7IC8vIDFFVEggLyAxJAogICAgdWludDI1NiB6ZXJvQW1vdW50ID0gMTAwMDAwMDAwMDA7IC8vIDEwIHplcm8KICAgIHVpbnQyNTYgc3RhcnRsaW5lID0gMTUxMDczNjQwMDsgLy8gMTUuMTEuMTcgMTI6MDAKICAgIHVpbnQyNTYgcHVibGljIG1pbkNhcCA9IDMwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmFpc2VkID0gMjA3MDM4OTQzNjk3MzAwOwogICAgdWludDI1NiBwdWJsaWMgZXRoZXJPbmUgPSAxMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludDI1NiBwdWJsaWMgbWluaW11bVRva2VucyA9IDEwOwoKICAgIGZ1bmN0aW9uIENDQ1JTYWxlKGFkZHJlc3MgX3Rva2VuUmV3YXJkKSB7CiAgICAgICAgdG9rZW5SZXdhcmQgPSBDQ0NSQ29pbihfdG9rZW5SZXdhcmQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ5dGVzVG9BZGRyZXNzKGJ5dGVzIHNvdXJjZSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICB1aW50IHJlc3VsdDsKICAgICAgICB1aW50IG11bCA9IDE7CiAgICAgICAgZm9yKHVpbnQgaSA9IDIwOyBpID4gMDsgaS0tKSB7CiAgICAgICAgICAgIHJlc3VsdCArPSB1aW50OChzb3VyY2VbaS0xXSkqbXVsOwogICAgICAgICAgICBtdWwgPSBtdWwqMjU2OwogICAgICAgIH0KICAgICAgICByZXR1cm4gYWRkcmVzcyhyZXN1bHQpOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHdoZW5Ob3RQYXVzZWQgd2hlblNhbGVOb3RGaW5pc2ggcGF5YWJsZSB7CgogICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBldGhlck9uZS5kaXYodG9rZW5QcmljZSkubXVsKG1pbmltdW1Ub2tlbnMpKTsKICAgICAgICAKICAgICAgdWludDI1NiBhbW91bnRXZWkgPSBtc2cudmFsdWU7ICAgICAgICAKICAgICAgdWludDI1NiBhbW91bnQgPSBhbW91bnRXZWkuZGl2KHplcm9BbW91bnQpOwogICAgICB1aW50MjU2IHRva2VucyA9IGFtb3VudC5tdWwoZ2V0UmF0ZSgpKTsKICAgICAgCiAgICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA9PSAyMCkgewogICAgICAgICAgYWRkcmVzcyByZWZlcmVyID0gYnl0ZXNUb0FkZHJlc3MoYnl0ZXMobXNnLmRhdGEpKTsKICAgICAgICAgIHJlcXVpcmUocmVmZXJlciAhPSBtc2cuc2VuZGVyKTsKICAgICAgICAgIHJlZmVyZXIudHJhbnNmZXIoYW1vdW50V2VpLmRpdigxMDApLm11bCgyMCkpOwogICAgICB9CiAgICAgIAogICAgICB0b2tlblJld2FyZC50cmFuc2Zlcihtc2cuc2VuZGVyLCB0b2tlbnMpOwogICAgICBpbnZlc3RXYWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgdG90YWxSYWlzZWQgPSB0b3RhbFJhaXNlZC5hZGQodG9rZW5zKTsKCiAgICAgIGlmICh0b3RhbFJhaXNlZCA+PSBtaW5DYXApIHsKICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJhdGUoKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgICAgICAoYmxvY2sudGltZXN0YW1wIDwgc3RhcnRsaW5lICsgMTkgZGF5cykgcmV0dXJuIHRva2VuUHJpY2UubXVsKDEzOCkuZGl2KDEwMCk7CiAgICAgICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wIDw9IHN0YXJ0bGluZSArIDQ2IGRheXMpIHJldHVybiB0b2tlblByaWNlLm11bCgxMjMpLmRpdigxMDApOwogICAgICAgIGVsc2UgaWYgKGJsb2NrLnRpbWVzdGFtcCA8PSBzdGFydGxpbmUgKyA2MCBkYXlzKSByZXR1cm4gdG9rZW5QcmljZS5tdWwoMTE1KS5kaXYoMTAwKTsKICAgICAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPD0gc3RhcnRsaW5lICsgNzQgZGF5cykgcmV0dXJuIHRva2VuUHJpY2UubXVsKDEwOSkuZGl2KDEwMCk7CiAgICAgICAgcmV0dXJuIHRva2VuUHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlUHJpY2UodWludDI1NiBfdG9rZW5QcmljZSkgZXh0ZXJuYWwgb25seU1hbmFnZXIgewogICAgICAgIHRva2VuUHJpY2UgPSBfdG9rZW5QcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2Vucyh1aW50MjU2IF90b2tlbnMpIGV4dGVybmFsIG9ubHlNYW5hZ2VyIHsKICAgICAgICB0b2tlblJld2FyZC50cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG9rZW5zKTsgCiAgICB9CgogICAgZnVuY3Rpb24gbmV3TWluaW11bVRva2Vucyh1aW50MjU2IF9taW5pbXVtVG9rZW5zKSBleHRlcm5hbCBvbmx5TWFuYWdlciB7CiAgICAgICAgbWluaW11bVRva2VucyA9IF9taW5pbXVtVG9rZW5zOyAKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRXZWkodWludDI1NiBfZXRoZXJBbW91bnQpIGV4dGVybmFsIG9ubHlNYW5hZ2VyIHsKICAgICAgICB1aW50MjU2IGV0aGVyQW1vdW50ID0gX2V0aGVyQW1vdW50Lm11bChldGhlck9uZSk7CiAgICAgICAgaW52ZXN0V2FsbGV0LnRyYW5zZmVyKGV0aGVyQW1vdW50KTsgCiAgICB9CgogICAgZnVuY3Rpb24gYWlyZHJvcChhZGRyZXNzW10gX2FycmF5MSwgdWludDI1NltdIF9hcnJheTIpIGV4dGVybmFsIHdoZW5TYWxlTm90RmluaXNoIG9ubHlNYW5hZ2VyIHsKICAgICAgIGFkZHJlc3NbXSBtZW1vcnkgYXJyYXlBZGRyZXNzID0gX2FycmF5MTsKICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgYXJyYXlBbW91bnQgPSBfYXJyYXkyOwogICAgICAgdWludDI1NiBhcnJheUxlbmd0aCA9IGFycmF5QWRkcmVzcy5sZW5ndGguc3ViKDEpOwogICAgICAgdWludDI1NiBpID0gMDsKICAgICAgIAogICAgICB3aGlsZSAoaSA8PSBhcnJheUxlbmd0aCkgewogICAgICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKGFycmF5QWRkcmVzc1tpXSwgYXJyYXlBbW91bnRbaV0pOwogICAgICAgICAgIGkgPSBpLmFkZCgxKTsKICAgICAgfSAgCiAgICB9Cgp9'.
	

]
