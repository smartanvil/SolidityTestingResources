Class {
	#name : #SRT26f829dec49e91d2dfbf68dc2457356efe3685f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT26f829dec49e91d2dfbf68dc2457356efe3685f1 >> base64 [
	^ ''.
	

]
