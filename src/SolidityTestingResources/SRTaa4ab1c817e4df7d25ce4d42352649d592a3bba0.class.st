Class {
	#name : #SRTaa4ab1c817e4df7d25ce4d42352649d592a3bba0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa4ab1c817e4df7d25ce4d42352649d592a3bba0 >> base64 [
	^ ''.
	

]
