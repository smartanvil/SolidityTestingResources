Class {
	#name : #SRTcd3e727275bc2f511822dc9a26bd7b0bbf161784,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcd3e727275bc2f511822dc9a26bd7b0bbf161784 >> base64 [
	^ ''.
	

]
