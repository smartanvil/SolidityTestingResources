Class {
	#name : #SRT1dc3fc96b218b4ac9d36193f3325d949f9ed3a26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1dc3fc96b218b4ac9d36193f3325d949f9ed3a26 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgoKCgoKCgoKCgoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCgoKCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICoKICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiBJbmNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCgoKCi8qKgogKiBAdGl0bGUgQnVybmFibGUgVG9rZW4KICogQGRldiBUb2tlbiB0aGF0IGNhbiBiZSBpcnJldmVyc2libHkgYnVybmVkIChkZXN0cm95ZWQpLgogKi8KY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBCYXNpY1Rva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgYnVybmVkLgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KfQoKCgoKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogVGhlIEludGVsbGlnZW50IFNoaXBwaW5nIENoYWluIHRva2VuIChFVFlDIC0gRVRZQ1Rva2VuKSBoYXMgYSBmaXhlZCBzdXBwbHkKICoKICogVGhlIG93bmVyIGNhbiBhc3NvY2lhdGUgdGhlIHRva2VuIHdpdGggYSB0b2tlbiBzYWxlIGNvbnRyYWN0LiBJbiB0aGF0CiAqIGNhc2UsIHRoZSB0b2tlbiBiYWxhbmNlIGlzIG1vdmVkIHRvIHRoZSB0b2tlbiBzYWxlIGNvbnRyYWN0LCB3aGljaAogKiBpbiB0dXJuIGNhbiB0cmFuc2ZlciBpdHMgdG9rZW5zIHRvIGNvbnRyaWJ1dG9ycyB0byB0aGUgc2FsZS4KICovCmNvbnRyYWN0IEVUWUNUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBCdXJuYWJsZVRva2VuLCBPd25hYmxlIHsKCiAgICAvLyBDb25zdGFudHMKICAgIHN0cmluZyAgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiSW50ZWxsaWdlbnQgU2hpcHBpbmcgQ2hhaW4iOwogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkVUWUMiOwogICAgdWludDggICBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHN0cmluZyAgcHVibGljIGNvbnN0YW50IHdlYnNpdGUgPSAid3d3LmV0eWMuaW8iOyAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IElOSVRJQUxfU1VQUExZICAgICAgPSAgMTAwMDAwMDAwMCAqICgxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBDUk9XRFNBTEVfQUxMT1dBTkNFID0gICA4MDAwMDAwMDAgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQURNSU5fQUxMT1dBTkNFICAgICA9ICAgMjAwMDAwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKCiAgICAvLyBQcm9wZXJ0aWVzCiAgICB1aW50MjU2IHB1YmxpYyBjcm93ZFNhbGVBbGxvd2FuY2U7ICAgICAgLy8gdGhlIG51bWJlciBvZiB0b2tlbnMgYXZhaWxhYmxlIGZvciBjcm93ZHNhbGVzCiAgICB1aW50MjU2IHB1YmxpYyBhZG1pbkFsbG93YW5jZTsgICAgICAgICAgLy8gdGhlIG51bWJlciBvZiB0b2tlbnMgYXZhaWxhYmxlIGZvciB0aGUgYWRtaW5pc3RyYXRvcgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RTYWxlQWRkcjsgICAgICAgICAgIC8vIHRoZSBhZGRyZXNzIG9mIGEgY3Jvd2RzYWxlIGN1cnJlbnRseSBzZWxsaW5nIHRoaXMgdG9rZW4KICAgIGFkZHJlc3MgcHVibGljIGFkbWluQWRkcjsgICAgICAgICAgICAgICAvLyB0aGUgYWRkcmVzcyBvZiBhIGNyb3dkc2FsZSBjdXJyZW50bHkgc2VsbGluZyB0aGlzIHRva2VuCiAgICAvL2Jvb2wgICAgcHVibGljIHRyYW5zZmVyRW5hYmxlZCA9IGZhbHNlOyAvLyBpbmRpY2F0ZXMgaWYgdHJhbnNmZXJyaW5nIHRva2VucyBpcyBlbmFibGVkIG9yIG5vdAogICAgYm9vbCAgICBwdWJsaWMgdHJhbnNmZXJFbmFibGVkID0gdHJ1ZTsgIC8vIEVuYWJsZXMgZXZlcnlvbmUgdG8gdHJhbnNmZXIgdG9rZW5zIAoKICAgIC8vIE1vZGlmaWVycwoKICAgIC8qKgogICAgICogVGhlIGxpc3RlZCBhZGRyZXNzZXMgYXJlIG5vdCB2YWxpZCByZWNpcGllbnRzIG9mIHRva2Vucy4KICAgICAqCiAgICAgKiAweDAgICAgICAgICAgIC0gdGhlIHplcm8gYWRkcmVzcyBpcyBub3QgdmFsaWQKICAgICAqIHRoaXMgICAgICAgICAgLSB0aGUgY29udHJhY3QgaXRzZWxmIHNob3VsZCBub3QgcmVjZWl2ZSB0b2tlbnMKICAgICAqIG93bmVyICAgICAgICAgLSB0aGUgb3duZXIgaGFzIGFsbCB0aGUgaW5pdGlhbCB0b2tlbnMsIGJ1dCBjYW5ub3QgcmVjZWl2ZSBhbnkgYmFjawogICAgICogYWRtaW5BZGRyICAgICAtIHRoZSBhZG1pbiBoYXMgYW4gYWxsb3dhbmNlIG9mIHRva2VucyB0byB0cmFuc2ZlciwgYnV0IGRvZXMgbm90IHJlY2VpdmUgYW55CiAgICAgKiBjcm93ZFNhbGVBZGRyIC0gdGhlIGNyb3dkc2FsZSBoYXMgYW4gYWxsb3dhbmNlIG9mIHRva2VucyB0byB0cmFuc2ZlciwgYnV0IGRvZXMgbm90IHJlY2VpdmUgYW55CiAgICAgKi8KICAgIG1vZGlmaWVyIHZhbGlkRGVzdGluYXRpb24oYWRkcmVzcyBfdG8pIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDB4MCkpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IG93bmVyKTsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKGFkbWluQWRkcikpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoY3Jvd2RTYWxlQWRkcikpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDb25zdHJ1Y3RvciAtIGluc3RhbnRpYXRlcyB0b2tlbiBzdXBwbHkgYW5kIGFsbG9jYXRlcyBiYWxhbmFjZSBvZgogICAgICogdG8gdGhlIG93bmVyIChtc2cuc2VuZGVyKS4KICAgICAqLwogICAgZnVuY3Rpb24gRVRZQ1Rva2VuKGFkZHJlc3MgX2FkbWluKSBwdWJsaWMgewogICAgICAgIC8vIHRoZSBvd25lciBpcyBhIGN1c3RvZGlhbiBvZiB0b2tlbnMgdGhhdCBjYW4KICAgICAgICAvLyBnaXZlIGFuIGFsbG93YW5jZSBvZiB0b2tlbnMgZm9yIGNyb3dkc2FsZXMKICAgICAgICAvLyBvciB0byB0aGUgYWRtaW4sIGJ1dCBjYW5ub3QgaXRzZWxmIHRyYW5zZmVyCiAgICAgICAgLy8gdG9rZW5zOyBoZW5jZSwgdGhpcyByZXF1aXJlbWVudAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBfYWRtaW4pOwoKICAgICAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgICAgIGNyb3dkU2FsZUFsbG93YW5jZSA9IENST1dEU0FMRV9BTExPV0FOQ0U7CiAgICAgICAgYWRtaW5BbGxvd2FuY2UgPSBBRE1JTl9BTExPV0FOQ0U7CgogICAgICAgIC8vIG1pbnQgYWxsIHRva2VucwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHkuc3ViKGFkbWluQWxsb3dhbmNlKTsKICAgICAgICBUcmFuc2ZlcihhZGRyZXNzKDB4MCksIG1zZy5zZW5kZXIsIHRvdGFsU3VwcGx5LnN1YihhZG1pbkFsbG93YW5jZSkpOwoKICAgICAgICBiYWxhbmNlc1tfYWRtaW5dID0gYWRtaW5BbGxvd2FuY2U7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygweDApLCBfYWRtaW4sIGFkbWluQWxsb3dhbmNlKTsKCiAgICAgICAgYWRtaW5BZGRyID0gX2FkbWluOwogICAgICAgIGFwcHJvdmUoYWRtaW5BZGRyLCBhZG1pbkFsbG93YW5jZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBc3NvY2lhdGVzIHRoaXMgdG9rZW4gd2l0aCBhIGN1cnJlbnQgY3Jvd2RzYWxlLCBnaXZpbmcgdGhlIGNyb3dkc2FsZQogICAgICogYW4gYWxsb3dhbmNlIG9mIHRva2VucyBmcm9tIHRoZSBjcm93ZHNhbGUgc3VwcGx5LiBUaGlzIGdpdmVzIHRoZQogICAgICogY3Jvd2RzYWxlIHRoZSBhYmlsaXR5IHRvIGNhbGwgdHJhbnNmZXJGcm9tIHRvIHRyYW5zZmVyIHRva2VucyB0bwogICAgICogd2hvbWV2ZXIgaGFzIHB1cmNoYXNlZCB0aGVtLgogICAgICoKICAgICAqIE5vdGUgdGhhdCBpZiBfYW1vdW50Rm9yU2FsZSBpcyAwLCB0aGVuIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgZnVsbAogICAgICogcmVtYWluaW5nIGNyb3dkc2FsZSBzdXBwbHkgaXMgbWFkZSBhdmFpbGFibGUgdG8gdGhlIGNyb3dkc2FsZS4KICAgICAqCiAgICAgKiBAcGFyYW0gX2Nyb3dkU2FsZUFkZHIgVGhlIGFkZHJlc3Mgb2YgYSBjcm93ZHNhbGUgY29udHJhY3QgdGhhdCB3aWxsIHNlbGwgdGhpcyB0b2tlbgogICAgICogQHBhcmFtIF9hbW91bnRGb3JTYWxlIFRoZSBzdXBwbHkgb2YgdG9rZW5zIHByb3ZpZGVkIHRvIHRoZSBjcm93ZHNhbGUKICAgICAqLwogICAgZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlKGFkZHJlc3MgX2Nyb3dkU2FsZUFkZHIsIHVpbnQyNTYgX2Ftb3VudEZvclNhbGUpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50Rm9yU2FsZSA8PSBjcm93ZFNhbGVBbGxvd2FuY2UpOwoKICAgICAgICAvLyBpZiAwLCB0aGVuIGZ1bGwgYXZhaWxhYmxlIGNyb3dkc2FsZSBzdXBwbHkgaXMgYXNzdW1lZAogICAgICAgIHVpbnQgYW1vdW50ID0gKF9hbW91bnRGb3JTYWxlID09IDApID8gY3Jvd2RTYWxlQWxsb3dhbmNlIDogX2Ftb3VudEZvclNhbGU7CgogICAgICAgIC8vIENsZWFyIGFsbG93YW5jZSBvZiBvbGQsIGFuZCBzZXQgYWxsb3dhbmNlIG9mIG5ldwogICAgICAgIGFwcHJvdmUoY3Jvd2RTYWxlQWRkciwgMCk7CiAgICAgICAgYXBwcm92ZShfY3Jvd2RTYWxlQWRkciwgYW1vdW50KTsKCiAgICAgICAgY3Jvd2RTYWxlQWRkciA9IF9jcm93ZFNhbGVBZGRyOwogICAgfQoKICAgIC8qKgogICAgICogT3ZlcnJpZGVzIEVSQzIwIHRyYW5zZmVyIGZ1bmN0aW9uIHdpdGggbW9kaWZpZXIgdGhhdCBwcmV2ZW50cyB0aGUKICAgICAqIGFiaWxpdHkgdG8gdHJhbnNmZXIgdG9rZW5zIHVudGlsIGFmdGVyIHRyYW5zZmVycyBoYXZlIGJlZW4gZW5hYmxlZC4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgdmFsaWREZXN0aW5hdGlvbihfdG8pIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogT3ZlcnJpZGVzIEVSQzIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbiB3aXRoIG1vZGlmaWVyIHRoYXQgcHJldmVudHMgdGhlCiAgICAgKiBhYmlsaXR5IHRvIHRyYW5zZmVyIHRva2VucyB1bnRpbCBhZnRlciB0cmFuc2ZlcnMgaGF2ZSBiZWVuIGVuYWJsZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB2YWxpZERlc3RpbmF0aW9uKF90bykgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgcmVzdWx0ID0gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcm93ZFNhbGVBZGRyKQogICAgICAgICAgICAgICAgY3Jvd2RTYWxlQWxsb3dhbmNlID0gY3Jvd2RTYWxlQWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBhZG1pbkFkZHIpCiAgICAgICAgICAgICAgICBhZG1pbkFsbG93YW5jZSA9IGFkbWluQWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogT3ZlcnJpZGVzIHRoZSBidXJuIGZ1bmN0aW9uIHNvIHRoYXQgaXQgY2Fubm90IGJlIGNhbGxlZCB1bnRpbCBhZnRlcgogICAgICogdHJhbnNmZXJzIGhhdmUgYmVlbiBlbmFibGVkLgogICAgICoKICAgICAqIEBwYXJhbSBfdmFsdWUgICAgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYnVybiBpbiB3ZWktRVRZQwogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUodHJhbnNmZXJFbmFibGVkIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIHN1cGVyLmJ1cm4oX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBhZGRyZXNzKDB4MCksIF92YWx1ZSk7CiAgICB9Cn0='.
	

]
