Class {
	#name : #SRT460f5BF9f5ccfc99243AA4145E4E40C6a6fD9624,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT460f5BF9f5ccfc99243AA4145E4E40C6a6fD9624 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCmNvbnRyYWN0IFdpbk1hdHJpeAogewogICBmdW5jdGlvbiBnZXRDb2VmZih1aW50MTYgbikgZXh0ZXJuYWwgcmV0dXJucyAodWludDI1Nik7CiAgIGZ1bmN0aW9uIGdldEJldHNQcm9jZXNzZWQoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MTYpOwogfQoKY29udHJhY3QgU21hcnRSb3VsZXR0ZVRva2VuIAp7CiAgIGZ1bmN0aW9uIGVtaXNzaW9uKGFkZHJlc3MgcGxheWVyLCBhZGRyZXNzIHBhcnRuZXIsIHVpbnQyNTYgdmFsdWVfYmV0LCB1aW50MTYgY29lZl9wbGF5ZXIsIHVpbnQxNiBjb2VmX3BhcnRuZXIpIGV4dGVybmFsIHJldHVybnModWludDI1Nik7CiAgIGZ1bmN0aW9uIGlzT3BlcmF0aW9uQmxvY2tlZCgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBTbWFydEFmZmlsaWF0ZSAKewogICBmdW5jdGlvbiByZWdpc3RlcihhZGRyZXNzIHBsYXllciwgYWRkcmVzcyBhZmZpbGlhdGUpIGV4dGVybmFsOwogICBmdW5jdGlvbiBnZXRBZmZpbGlhdGVJbmZvKGFkZHJlc3MgcGxheWVyKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zKGFkZHJlc3MgYWZmaWxpYXRlLCB1aW50MTYgY29lZl9hZmZpbGlhdGUpOwp9Cgpjb250cmFjdCBTbWFydFJvdWxldHRlCnsKICBhZGRyZXNzIGRldmVsb3BlcjsKICBhZGRyZXNzIG9wZXJhdG9yOwoKICAvLyBXYWl0IEJsb2NrRGVsYXkgYmxvY2tzIGJlZm9yZSBzcGluIHRoZSB3aGVlbCAKICB1aW50OCBCbG9ja0RlbGF5OwoKICAvLyBNYXhpbXVtIGJldCB2YWx1ZSBmb3IgZ2FtZQogIHVpbnQyNTYgY3VycmVudE1heEJldDsgICAgCgogIC8vIG1heGltdW0gZ2FtZXMgY291bnQgcGVyIGJsb2NrCiAgdWludDY0IG1heEdhbWJsZXNQZXJCbG9jazsKICAgICAgICAKICAvLyBFbmFibGVcZGlzYWJsZSB0byBwbGFjZSBuZXcgYmV0cwogIGJvb2wgQ29udHJhY3RTdGF0ZTsKCiAgLy8gdGFibGUgd2l0aCB3aW5uZXIgY29lZmZpY2llbnRzCiAgV2luTWF0cml4IHdpbk1hdHJpeDsKCiAgU21hcnRSb3VsZXR0ZVRva2VuIHNtYXJ0VG9rZW47CgogIGFkZHJlc3MgcHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3Q7CgogIFNtYXJ0QWZmaWxpYXRlIHNtYXJ0QWZmaWxpYXRlQ29udHJhY3Q7CgogIHVpbnQxNiBjb25zdGFudCBtYXhUeXBlQmV0cyA9IDE1NzsKICAgCiAgIHVpbnQxNiBjb2VmX3BsYXllcjsgICAKICAgLy8gCiAgIHVpbnQ4IGRlZmF1bHRNaW5DcmVkaXRzT25CZXQ7IAogICAvLwogICBtYXBwaW5nICh1aW50OCA9PiB1aW50OCkgcHJpdmF0ZSBtaW5DcmVkaXRzT25CZXQ7CgogICBzdHJ1Y3QgR2FtZUluZm8KICAgewogICAgICAgIGFkZHJlc3MgcGxheWVyOwogICAgICAgIHVpbnQyNTYgYmxvY2tOdW1iZXI7CiAgICAgICAgdWludDggd2hlZWxSZXN1bHQ7CiAgICAgICAgdWludDI1NiBiZXRzOwogICAgICAgIGJ5dGVzMzIgdmFsdWVzOwogICAgICAgIGJ5dGVzMzIgdmFsdWVzMjsKICAgfQogICAgICAgCiAgIEdhbWVJbmZvW10gcHJpdmF0ZSBnYW1ibGVzOwoKICAgZW51bSBHYW1lU3RhdHVzIHtTdWNjZXNzLCBTa2lwcGVkLCBTdG9wfQoKICAgZW51bSBCZXRUeXBlc3tudW1iZXIwLCBudW1iZXIxLG51bWJlcjIsbnVtYmVyMyxudW1iZXI0LG51bWJlcjUsbnVtYmVyNixudW1iZXI3LG51bWJlcjgsbnVtYmVyOSwKICAgICBudW1iZXIxMCxudW1iZXIxMSxudW1iZXIxMixudW1iZXIxMyxudW1iZXIxNCxudW1iZXIxNSxudW1iZXIxNixudW1iZXIxNyxudW1iZXIxOCxudW1iZXIxOSxudW1iZXIyMCxudW1iZXIyMSwKICAgICBudW1iZXIyMixudW1iZXIyMyxudW1iZXIyNCxudW1iZXIyNSxudW1iZXIyNixudW1iZXIyNyxudW1iZXIyOCxudW1iZXIyOSxudW1iZXIzMCxudW1iZXIzMSxudW1iZXIzMixudW1iZXIzMywKICAgICBudW1iZXIzNCxudW1iZXIzNSxudW1iZXIzNiwgcmVkLCBibGFjaywgb2RkLCBldmVuLCBkb3plbjEsZG96ZW4yLGRvemVuMywgY29sdW1uMSxjb2x1bW4yLGNvbHVtbjMsIGxvdyxoaWdoLAogICAgIHBhaXJfMDEsIHBhaXJfMDIsIHBhaXJfMDMsIHBhaXJfMTIsIHBhaXJfMjMsIHBhaXJfMzYsIHBhaXJfMjUsIHBhaXJfMTQsIHBhaXJfNDUsIHBhaXJfNTYsIHBhaXJfNjksIHBhaXJfNTgsIHBhaXJfNDcsCiAgICAgcGFpcl83OCwgcGFpcl84OSwgcGFpcl85MTIsIHBhaXJfODExLCBwYWlyXzcxMCwgcGFpcl8xMDExLCBwYWlyXzExMTIsIHBhaXJfMTIxNSwgcGFpcl8xNTE4LCBwYWlyXzE2MTcsIHBhaXJfMTcxOCwgcGFpcl8xNzIwLAogICAgIHBhaXJfMTYxOSwgcGFpcl8xOTIyLCBwYWlyXzIwMjMsIHBhaXJfMjEyNCwgcGFpcl8yMjIzLCBwYWlyXzIzMjQsIHBhaXJfMjUyOCwgcGFpcl8yNjI5LCBwYWlyXzI3MzAsIHBhaXJfMjgyOSwgcGFpcl8yOTMwLCBwYWlyXzExMTQsCiAgICAgcGFpcl8xMDEzLCBwYWlyXzEzMTQsIHBhaXJfMTQxNSwgcGFpcl8xMzE2LCBwYWlyXzE0MTcsIHBhaXJfMTgyMSwgcGFpcl8xOTIwLCBwYWlyXzIwMjEsIHBhaXJfMjIyNSwgcGFpcl8yMzI2LCBwYWlyXzI0MjcsIHBhaXJfMjUyNiwKICAgICBwYWlyXzI2MjcsIHBhaXJfMjgzMSwgcGFpcl8yOTMyLCBwYWlyXzMwMzMsIHBhaXJfMzEzMiwgcGFpcl8zMjMzLCBwYWlyXzMxMzQsIHBhaXJfMzIzNSwgcGFpcl8zMzM2LCBwYWlyXzM0MzUsIHBhaXJfMzUzNiwgY29ybmVyXzBfMV8yXzMsCiAgICAgY29ybmVyXzFfMl81XzQsIGNvcm5lcl8yXzNfNl81LCBjb3JuZXJfNF81XzhfNywgY29ybmVyXzVfNl85XzgsIGNvcm5lcl83XzhfMTFfMTAsIGNvcm5lcl84XzlfMTJfMTEsIGNvcm5lcl8xMF8xMV8xNF8xMywgY29ybmVyXzExXzEyXzE1XzE0LAogICAgIGNvcm5lcl8xM18xNF8xN18xNiwgY29ybmVyXzE0XzE1XzE4XzE3LCBjb3JuZXJfMTZfMTdfMjBfMTksIGNvcm5lcl8xN18xOF8yMV8yMCwgY29ybmVyXzE5XzIwXzIzXzIyLCBjb3JuZXJfMjBfMjFfMjRfMjMsIGNvcm5lcl8yMl8yM18yNl8yNSwKICAgICBjb3JuZXJfMjNfMjRfMjdfMjYsIGNvcm5lcl8yNV8yNl8yOV8yOCwgY29ybmVyXzI2XzI3XzMwXzI5LCBjb3JuZXJfMjhfMjlfMzJfMzEsIGNvcm5lcl8yOV8zMF8zM18zMiwgY29ybmVyXzMxXzMyXzM1XzM0LCBjb3JuZXJfMzJfMzNfMzZfMzUsCiAgICAgdGhyZWVfMF8yXzMsIHRocmVlXzBfMV8yLCB0aHJlZV8xXzJfMywgdGhyZWVfNF81XzYsIHRocmVlXzdfOF85LCB0aHJlZV8xMF8xMV8xMiwgdGhyZWVfMTNfMTRfMTUsIHRocmVlXzE2XzE3XzE4LCB0aHJlZV8xOV8yMF8yMSwgdGhyZWVfMjJfMjNfMjQsCiAgICAgdGhyZWVfMjVfMjZfMjcsIHRocmVlXzI4XzI5XzMwLCB0aHJlZV8zMV8zMl8zMywgdGhyZWVfMzRfMzVfMzYsIHNpeF8xXzJfM180XzVfNiwgc2l4XzRfNV82XzdfOF85LCBzaXhfN184XzlfMTBfMTFfMTIsIHNpeF8xMF8xMV8xMl8xM18xNF8xNSwKICAgICBzaXhfMTNfMTRfMTVfMTZfMTdfMTgsIHNpeF8xNl8xN18xOF8xOV8yMF8yMSwgc2l4XzE5XzIwXzIxXzIyXzIzXzI0LCBzaXhfMjJfMjNfMjRfMjVfMjZfMjcsIHNpeF8yNV8yNl8yN18yOF8yOV8zMCwgc2l4XzI4XzI5XzMwXzMxXzMyXzMzLAogICAgIHNpeF8zMV8zMl8zM18zNF8zNV8zNn0KICAgCgogICBmdW5jdGlvbiBTbWFydFJvdWxldHRlKCkgaW50ZXJuYWwKICAgeyAgICAgICAgCiAgICAgICAgZGV2ZWxvcGVyICA9IG1zZy5zZW5kZXI7CiAgICAgICAgb3BlcmF0b3IgICA9IG1zZy5zZW5kZXI7CiAgICAgICAgCiAgICAgICAgd2luTWF0cml4ID0gV2luTWF0cml4KDB4MDczRDY2MjFFOTE1MGJGZjlkMUQ0NTBjYUFkM2M3OTBiNkYwNzFGMik7CiAgICAgICAgaWYgKHdpbk1hdHJpeC5nZXRCZXRzUHJvY2Vzc2VkKCkgIT0gbWF4VHlwZUJldHMpIHRocm93OwogICAgICAgIAogICAgICAgIHNtYXJ0VG9rZW4gPSBTbWFydFJvdWxldHRlVG9rZW4oMHgyYTY1MDM1NmJkODk0MzcwY2MxZDZhYmE3MWIzNmMwYWQ2YjNkYzE4KTsKCiAgICAgICAgY3VycmVudE1heEJldCA9IDI1NjAgZmlubmV5OyAvLyAyLjU2IGV0aGVyCiAgICAgICAgQmxvY2tEZWxheSA9IDE7ICAgICAgICAKICAgICAgICBtYXhHYW1ibGVzUGVyQmxvY2sgPSA1OwogICAgICAgIGRlZmF1bHRNaW5DcmVkaXRzT25CZXQgPSAxOyAgIAogICAgICAgIENvbnRyYWN0U3RhdGUgID0gdHJ1ZTsgIAogICAgICAgIGJhbmtyb2xMaW1pdCA9IDI3NyBldGhlcjsKICAgICAgICBwcm9maXRMaW1pdCAgPSA1MCBldGhlcjsKICAgICAgICBjb2VmX3BsYXllciA9IDMwMDsKICAgfQoKICAgZnVuY3Rpb24gY2hhbmdlTWF4QmV0KHVpbnQyNTYgbmV3TWF4QmV0KSBwdWJsaWMgb25seURldmVsb3BlciAKICAgeyAgICAgICAgICAgICAKICAgICAgLy8gcm91bmRzIHRvIDIgZGlndHMKICAgICAgbmV3TWF4QmV0ID0gbmV3TWF4QmV0IC8gMjU2MDAwMDAwMDAwMDAwMDAwMCAqIDI1NjAwMDAwMDAwMDAwMDAwMDA7ICAKICAgICAgaWYgKG5ld01heEJldCAhPSBjdXJyZW50TWF4QmV0KSAKICAgICAgewogICAgICAgIGN1cnJlbnRNYXhCZXQgPSBuZXdNYXhCZXQ7CiAgICAgICAgU2V0dGluZ3NDaGFuZ2VkKGN1cnJlbnRNYXhCZXQsIGN1cnJlbnRNYXhCZXQgLyAyNTYsICBkZWZhdWx0TWluQ3JlZGl0c09uQmV0LCBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMubG93KV0sIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5kb3plbjEpXSwgQmxvY2tEZWxheSwgQ29udHJhY3RTdGF0ZSk7CiAgICAgIH0KICAgfQoKICAgdWludDI1NiBiYW5rcm9sTGltaXQ7CiAgIHVpbnQyNTYgcHJvZml0TGltaXQ7CiAgIHVpbnQyNTYgbGFzdERpc3RyaWJ1dGVkUHJvZml0OwogICB1aW50MjU2IGxhc3REYXRlRGlzdHJpYnV0ZWRQcm9maXQ7CiAgIAogICBmdW5jdGlvbiBnZXREaXN0cmlidXRlUHJvZml0c0luZm8oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBsYXN0UHJvZml0LCB1aW50MjU2IGxhc3REYXRlKQogICB7CiAgICAgIGxhc3RQcm9maXQgPSBsYXN0RGlzdHJpYnV0ZWRQcm9maXQ7CiAgICAgIGxhc3REYXRlID0gbGFzdERhdGVEaXN0cmlidXRlZFByb2ZpdDsKICAgfQoKICAgZnVuY3Rpb24gc2V0UHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBpZiAocHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPiAwKSB0aHJvdzsKICAgICAgcHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPSBjb250cmFjdEFkZHJlc3M7CiAgIH0KCiAgIGZ1bmN0aW9uIHNldFNtYXJ0QWZmaWxpYXRlQ29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBpZiAoYWRkcmVzcyhzbWFydEFmZmlsaWF0ZUNvbnRyYWN0KSA+IDApIHRocm93OwogICAgICBzbWFydEFmZmlsaWF0ZUNvbnRyYWN0ID0gU21hcnRBZmZpbGlhdGUoY29udHJhY3RBZGRyZXNzKTsKICAgfQoKICAgZnVuY3Rpb24gZGlzdHJpYnV0ZVByb2ZpdHModWludDI1NiBnYXNWYWx1ZSkgb25seURldmVsb3Blck9yT3BlcmF0b3IKICAgewogICAgICBpZiAocHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPiAwICYmIHRoaXMuYmFsYW5jZSA+PSAoYmFua3JvbExpbWl0K3Byb2ZpdExpbWl0KSkKICAgICAgewogICAgICAgICB1aW50MjU2IGRpZmYgPSB0aGlzLmJhbGFuY2UgLSBiYW5rcm9sTGltaXQ7CiAgICAgICAgIGlmIChhZGRyZXNzKHByb2ZpdERpc3RyaWJ1dGlvbkNvbnRyYWN0KS5jYWxsLmdhcyhnYXNWYWx1ZSkudmFsdWUoZGlmZikoKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgIGxhc3REaXN0cmlidXRlZFByb2ZpdCA9IGRpZmY7CiAgICAgICAgIGxhc3REYXRlRGlzdHJpYnV0ZWRQcm9maXQgPSBibG9jay50aW1lc3RhbXA7CiAgICAgIH0gICAgICAKICAgfQoKICAgZnVuY3Rpb24gZ2V0VG9rZW5TZXR0aW5ncygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQxNiBDb2VmX3BsYXllciwgdWludDI1NiBCYW5rcm9sTGltaXQsIHVpbnQyNTYgUHJvZml0TGltaXQpCiAgIHsKICAgICAgQ29lZl9wbGF5ZXIgPSBjb2VmX3BsYXllcjsgICAgICAKICAgICAgQmFua3JvbExpbWl0ID0gYmFua3JvbExpbWl0OwogICAgICBQcm9maXRMaW1pdCA9IHByb2ZpdExpbWl0OwogICB9CgogICBmdW5jdGlvbiBjaGFuZ2VUb2tlblNldHRpbmdzKHVpbnQxNiBuZXdDb2VmX3BsYXllciwgdWludDI1NiBuZXdCYW5rcm9sTGltaXQsIHVpbnQyNTYgbmV3UHJvZml0TGltaXQpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBjb2VmX3BsYXllciAgPSBuZXdDb2VmX3BsYXllcjsgICAgICAKICAgICAgYmFua3JvbExpbWl0ID0gbmV3QmFua3JvbExpbWl0OwogICAgICBwcm9maXRMaW1pdCAgPSBuZXdQcm9maXRMaW1pdDsKICAgfQoKICAgZnVuY3Rpb24gY2hhbmdlU2V0dGluZ3ModWludDY0IE5ld01heEJldHNQZXJCbG9jaywgdWludDggTmV3QmxvY2tEZWxheSwgdWludDggTWluQ3JlZGl0c09uQmV0NTAsIHVpbnQ4IE1pbkNyZWRpdHNPbkJldDMzLCB1aW50OCBOZXdEZWZhdWx0TWluQ3JlZGl0c09uQmV0KSBvbmx5RGV2ZWxvcGVyCiAgIHsgICAgIAogICAgICBCbG9ja0RlbGF5ID0gTmV3QmxvY2tEZWxheTsgICAgIAoKICAgICAgaWYgKE5ld01heEJldHNQZXJCbG9jayAhPSAwKSBtYXhHYW1ibGVzUGVyQmxvY2sgPSBOZXdNYXhCZXRzUGVyQmxvY2s7ICAgICAKCiAgICAgIGlmIChNaW5DcmVkaXRzT25CZXQ1MCA+IDApCiAgICAgIHsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMubG93KV0gICA9IE1pbkNyZWRpdHNPbkJldDUwOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5oaWdoKV0gID0gTWluQ3JlZGl0c09uQmV0NTA7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLnJlZCldICAgPSBNaW5DcmVkaXRzT25CZXQ1MDsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMuYmxhY2spXSA9IE1pbkNyZWRpdHNPbkJldDUwOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5vZGQpXSAgID0gTWluQ3JlZGl0c09uQmV0NTA7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmV2ZW4pXSAgPSBNaW5DcmVkaXRzT25CZXQ1MDsKICAgICAgfSAgCgogICAgICBpZiAoTWluQ3JlZGl0c09uQmV0MzMgPiAwKQogICAgICB7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmRvemVuMSldID0gTWluQ3JlZGl0c09uQmV0MzM7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmRvemVuMildID0gTWluQ3JlZGl0c09uQmV0MzM7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmRvemVuMyldID0gTWluQ3JlZGl0c09uQmV0MzM7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmNvbHVtbjEpXSA9IE1pbkNyZWRpdHNPbkJldDMzOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5jb2x1bW4yKV0gPSBNaW5DcmVkaXRzT25CZXQzMzsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMuY29sdW1uMyldID0gTWluQ3JlZGl0c09uQmV0MzM7CiAgICAgIH0KCiAgICAgIGlmIChOZXdEZWZhdWx0TWluQ3JlZGl0c09uQmV0ID4gMCkgZGVmYXVsdE1pbkNyZWRpdHNPbkJldCA9IE5ld0RlZmF1bHRNaW5DcmVkaXRzT25CZXQ7ICAgCiAgIH0KICAgCiAgIGZ1bmN0aW9uIGRlbGV0ZUNvbnRyYWN0KCkgb25seURldmVsb3BlciAgCiAgIHsKICAgICAgICBzdWljaWRlKG1zZy5zZW5kZXIpOwogICB9CgogICAvLyBiaXQgZnJvbSAwIHRvIDI1NQogICBmdW5jdGlvbiBpc0JpdFNldCh1aW50MjU2IGRhdGEsIHVpbnQ4IGJpdCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChib29sIHJldCkKICAgewogICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICByZXQgOj0gaXN6ZXJvKGlzemVybyhhbmQoZGF0YSwgZXhwKDIsYml0KSkpKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV0OwogICB9CgogICAvLyB1bmlxdWUgY29tYmluYXRpb24gb2YgYmV0IGFuZCB3aGVlbFJlc3VsdCwgdXNlZCBmb3IgYWNjZXNzIHRvIFdpbk1hdHJpeAogICBmdW5jdGlvbiBnZXRJbmRleCh1aW50MTYgYmV0LCB1aW50MTYgd2hlZWxSZXN1bHQpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludDE2KQogICB7CiAgICAgIHJldHVybiAoYmV0KzEpKjI1NiArICh3aGVlbFJlc3VsdCsxKTsKICAgfQoKICAgLy8gbiBmb3JtIDEgPD0gdG8gPD0gMzIKICAgZnVuY3Rpb24gZ2V0QmV0VmFsdWUoYnl0ZXMzMiB2YWx1ZXMsIHVpbnQ4IG4pIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikKICAgewogICAgICAgIC8vIGJldCBpbiBjcmVkaXRzICgxLi4yNTYpIAogICAgICAgIHVpbnQyNTYgYmV0ID0gdWludDI1Nih2YWx1ZXNbMzItbl0pKzE7CgogICAgICAgICAvLyBjaGVjayBtaW4gYmV0CiAgICAgICAgdWludDggbWluQ3JlZGl0cyA9IG1pbkNyZWRpdHNPbkJldFtuXTsKICAgICAgICBpZiAobWluQ3JlZGl0cyA9PSAwKSBtaW5DcmVkaXRzID0gZGVmYXVsdE1pbkNyZWRpdHNPbkJldDsKICAgICAgICBpZiAoYmV0IDwgbWluQ3JlZGl0cykgdGhyb3c7CiAgICAgICAgCiAgICAgICAgLy8gYmV0IGluIHdlaQogICAgICAgIGJldCA9IGN1cnJlbnRNYXhCZXQqYmV0LzI1NjsKICAgICAgICBpZiAoYmV0ID4gY3VycmVudE1heEJldCkgdGhyb3c7ICAgICAgICAgCgogICAgICAgIHJldHVybiBiZXQ7ICAgICAgICAKICAgfQoKICAgZnVuY3Rpb24gZ2V0QmV0VmFsdWVCeUdhbWJsZShHYW1lSW5mbyBtZW1vcnkgZ2FtYmxlLCB1aW50OCBuKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIAogICB7CiAgICAgIGlmIChuPD0zMikgcmV0dXJuIGdldEJldFZhbHVlKGdhbWJsZS52YWx1ZXMsIG4pOwogICAgICBpZiAobjw9NjQpIHJldHVybiBnZXRCZXRWYWx1ZShnYW1ibGUudmFsdWVzMiwgbi0zMik7CiAgICAgIC8vIHRoZXJlIGFyZSA2NCBtYXhpbXVtIHVuaXF1ZSBiZXRzIChwb3NpdGlvbnMpIGluIG9uZSBnYW1lCiAgICAgIHRocm93OwogICB9CiAgCiAgIGZ1bmN0aW9uIHRvdGFsR2FtZXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICB7CiAgICAgICByZXR1cm4gZ2FtYmxlcy5sZW5ndGg7CiAgIH0KICAgCiAgIGZ1bmN0aW9uIGdldFNldHRpbmdzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IG1heEJldCwgdWludDI1NiBvbmVDcmVkaXQsIHVpbnQ4IE1pbkJldEluQ3JlZGl0cywgdWludDggTWluQmV0SW5DcmVkaXRzXzUwLHVpbnQ4IE1pbkJldEluQ3JlZGl0c18zMywgdWludDggYmxvY2tEZWxheUJlZm9yZVNwaW4sIGJvb2wgY29udHJhY3RTdGF0ZSkKICAgIHsKICAgICAgICBtYXhCZXQgICAgPSBjdXJyZW50TWF4QmV0OwogICAgICAgIG9uZUNyZWRpdCA9IGN1cnJlbnRNYXhCZXQgLyAyNTY7IAogICAgICAgIGJsb2NrRGVsYXlCZWZvcmVTcGluID0gQmxvY2tEZWxheTsgICAgICAgIAogICAgICAgIE1pbkJldEluQ3JlZGl0cyAgICAgID0gZGVmYXVsdE1pbkNyZWRpdHNPbkJldDsKICAgICAgICBNaW5CZXRJbkNyZWRpdHNfNTAgICA9IG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5sb3cpXTsgCiAgICAgICAgTWluQmV0SW5DcmVkaXRzXzMzICAgPSBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMuY29sdW1uMSldOyAKICAgICAgICBjb250cmFjdFN0YXRlICAgICAgICA9IENvbnRyYWN0U3RhdGU7CiAgICB9CiAgIAogICAgbW9kaWZpZXIgb25seURldmVsb3BlcigpIAogICAgewogICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyKSB0aHJvdzsKICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seURldmVsb3Blck9yT3BlcmF0b3IoKSAKICAgIHsKICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGRldmVsb3BlciAmJiBtc2cuc2VuZGVyICE9IG9wZXJhdG9yKSB0aHJvdzsKICAgICAgIF87CiAgICB9CgogICBmdW5jdGlvbiBkaXNhYmxlQmV0dGluZ19vbmx5X0RldigpCiAgICBvbmx5RGV2ZWxvcGVyT3JPcGVyYXRvcgogICAgewogICAgICAgIENvbnRyYWN0U3RhdGU9ZmFsc2U7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNoYW5nZU9wZXJhdG9yKGFkZHJlc3MgbmV3T3BlcmF0b3IpIG9ubHlEZXZlbG9wZXIKICAgIHsKICAgICAgIG9wZXJhdG9yID0gbmV3T3BlcmF0b3I7CiAgICB9CgogICAgZnVuY3Rpb24gZW5hYmxlQmV0dGluZ19vbmx5X0RldigpCiAgICBvbmx5RGV2ZWxvcGVyT3JPcGVyYXRvcgogICAgewogICAgICAgIENvbnRyYWN0U3RhdGU9dHJ1ZTsKCiAgICB9CgogICAgZXZlbnQgUGxheWVyQmV0KHVpbnQyNTYgZ2FtYmxlSWQsIHVpbnQyNTYgcGxheWVyVG9rZW5zKTsKICAgIGV2ZW50IEVuZEdhbWUoYWRkcmVzcyBwbGF5ZXIsIHVpbnQ4IHJlc3VsdCwgdWludDI1NiBnYW1ibGVJZCk7CiAgICBldmVudCBTZXR0aW5nc0NoYW5nZWQodWludDI1NiBtYXhCZXQsIHVpbnQyNTYgb25lQ3JlZGl0LCB1aW50OCBEZWZhdWx0TWluQmV0SW5DcmVkaXRzLCB1aW50OCBNaW5CZXRJbkNyZWRpdHM1MCwgdWludDggTWluQmV0SW5DcmVkaXRzMzMsIHVpbnQ4IGJsb2NrRGVsYXlCZWZvcmVTcGluLCBib29sIGNvbnRyYWN0U3RhdGUpOwogICAgZXZlbnQgRXJyb3JMb2coYWRkcmVzcyBwbGF5ZXIsIHN0cmluZyBtZXNzYWdlKTsKICAgIGV2ZW50IEdhc0xvZyhzdHJpbmcgbXNnLCB1aW50MjU2IGxldmVsLCB1aW50MjU2IGdhcyk7CgogICBmdW5jdGlvbiB0b3RhbEJldFZhbHVlKEdhbWVJbmZvIG1lbW9yeSBnKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpCiAgIHsgICAgICAgICAgICAgIAogICAgICAgdWludDI1NiB0b3RhbEJldHNWYWx1ZSA9IDA7IAogICAgICAgdWludDggblBsYXllckJldE5vID0gMDsKICAgICAgIHVpbnQ4IGJldHNDb3VudCA9IHVpbnQ4KGJ5dGVzMzIoZy5iZXRzKVswXSk7CgogICAgICAgZm9yKHVpbnQ4IGkgPSAwOyBpIDwgbWF4VHlwZUJldHM7aSsrKSAKICAgICAgICBpZiAoaXNCaXRTZXQoZy5iZXRzLCBpKSkKICAgICAgICB7CiAgICAgICAgICB0b3RhbEJldHNWYWx1ZSArPSBnZXRCZXRWYWx1ZUJ5R2FtYmxlKGcsIG5QbGF5ZXJCZXRObysxKTsKICAgICAgICAgIG5QbGF5ZXJCZXRObysrOwoKICAgICAgICAgIGlmIChiZXRzQ291bnQgPT0gMSkgYnJlYWs7CiAgICAgICAgICBiZXRzQ291bnQtLTsgICAgICAgICAgCiAgICAgICAgfQoKICAgICAgIHJldHVybiB0b3RhbEJldHNWYWx1ZTsKICAgfQoKICAgZnVuY3Rpb24gdG90YWxCZXRDb3VudChHYW1lSW5mbyBtZW1vcnkgZykgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICB7ICAgICAgICAgICAgICAKICAgICAgIHVpbnQyNTYgdG90YWxCZXRzID0gMDsgCiAgICAgICBmb3IodWludDggaT0wOyBpIDwgbWF4VHlwZUJldHM7aSsrKSAKICAgICAgICBpZiAoaXNCaXRTZXQoZy5iZXRzLCBpKSkgdG90YWxCZXRzKys7ICAgICAgICAgIAogICAgICAgcmV0dXJuIHRvdGFsQmV0czsgICAKICAgfQoKICAgZnVuY3Rpb24gcGxhY2VCZXQodWludDI1NiBiZXRzLCBieXRlczMyIHZhbHVlczEsYnl0ZXMzMiB2YWx1ZXMyKSBwdWJsaWMgcGF5YWJsZQogICB7CiAgICAgICBpZiAoQ29udHJhY3RTdGF0ZSA9PSBmYWxzZSkKICAgICAgIHsKICAgICAgICAgRXJyb3JMb2cobXNnLnNlbmRlciwgIkNvbnRyYWN0RGlzYWJsZWQiKTsKICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpID09IGZhbHNlKSB0aHJvdzsKICAgICAgICAgcmV0dXJuOwogICAgICAgfQoKICAgICAgIGlmIChzbWFydFRva2VuLmlzT3BlcmF0aW9uQmxvY2tlZCgpKQogICAgICAgewogICAgICAgICBFcnJvckxvZyhtc2cuc2VuZGVyLCAiRW1pc3Npb25CbG9ja2VkIik7CiAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgIHJldHVybjsKICAgICAgIH0KCiAgICAgICB2YXIgZ2FtYmxlc0xlbmd0aCA9IGdhbWJsZXMubGVuZ3RoOwoKICAgICAgIGlmIChnYW1ibGVzTGVuZ3RoID4gMCkKICAgICAgIHsKICAgICAgICAgIHVpbnQ4IGdhbWJsZXNDb3VudEluQ3VycmVudEJsb2NrID0gMDsKICAgICAgICAgIGZvcih2YXIgaSA9IGdhbWJsZXNMZW5ndGggLSAxO2kgPiAwOyBpLS0pCiAgICAgICAgICB7CiAgICAgICAgICAgIGlmIChnYW1ibGVzW2ldLmJsb2NrTnVtYmVyID09IGJsb2NrLm51bWJlcikgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgaWYgKGdhbWJsZXNbaV0ucGxheWVyID09IG1zZy5zZW5kZXIpCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJQbGF5IHR3aWNlIHRoZSBzYW1lIGJsb2NrIik7CiAgICAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSkgPT0gZmFsc2UpIHRocm93OwogICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICBnYW1ibGVzQ291bnRJbkN1cnJlbnRCbG9jaysrOwogICAgICAgICAgICAgICBpZiAoZ2FtYmxlc0NvdW50SW5DdXJyZW50QmxvY2sgPj0gbWF4R2FtYmxlc1BlckJsb2NrKQogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJtYXhHYW1ibGVzUGVyQmxvY2siKTsKICAgICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpID09IGZhbHNlKSB0aHJvdzsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICB9CiAgICAgICAKICAgICAgIHZhciBfY3VycmVudE1heEJldCA9IGN1cnJlbnRNYXhCZXQ7CgogICAgICAgaWYgKG1zZy52YWx1ZSA8IF9jdXJyZW50TWF4QmV0LzI1NiB8fCBiZXRzID09IDApCiAgICAgICB7CiAgICAgICAgICBFcnJvckxvZyhtc2cuc2VuZGVyLCAiV3JvbmcgYmV0IHZhbHVlIik7CiAgICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSkgPT0gZmFsc2UpIHRocm93OwogICAgICAgICAgcmV0dXJuOwogICAgICAgfQoKICAgICAgIGlmIChtc2cudmFsdWUgPiBfY3VycmVudE1heEJldCkKICAgICAgIHsKICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJMaW1pdCBmb3IgdGFibGUiKTsKICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgICByZXR1cm47CiAgICAgICB9CgogICAgICAgR2FtZUluZm8gbWVtb3J5IGcgPSBHYW1lSW5mbyhtc2cuc2VuZGVyLCBibG9jay5udW1iZXIsIDM3LCBiZXRzLCB2YWx1ZXMxLHZhbHVlczIpOwoKICAgICAgIGlmICh0b3RhbEJldFZhbHVlKGcpICE9IG1zZy52YWx1ZSkKICAgICAgIHsKICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJXcm9uZyBiZXQgdmFsdWUiKTsKICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgICByZXR1cm47CiAgICAgICB9CgogICAgICAgZ2FtYmxlcy5wdXNoKGcpOwoKICAgICAgIGFkZHJlc3MgYWZmaWxpYXRlID0gMDsKICAgICAgIHVpbnQxNiBjb2VmX2FmZmlsaWF0ZSA9IDA7CiAgICAgICBpZiAoYWRkcmVzcyhzbWFydEFmZmlsaWF0ZUNvbnRyYWN0KSA+IDApCiAgICAgICB7CiAgICAgICAgIChhZmZpbGlhdGUsIGNvZWZfYWZmaWxpYXRlKSA9IHNtYXJ0QWZmaWxpYXRlQ29udHJhY3QuZ2V0QWZmaWxpYXRlSW5mbyhtc2cuc2VuZGVyKTsgICAKICAgICAgIH0KCiAgICAgICB1aW50MjU2IHBsYXllclRva2VucyA9IHNtYXJ0VG9rZW4uZW1pc3Npb24obXNnLnNlbmRlciwgYWZmaWxpYXRlLCBtc2cudmFsdWUsIGNvZWZfcGxheWVyLCBjb2VmX2FmZmlsaWF0ZSk7ICAgICAgICAgICAgCgogICAgICAgUGxheWVyQmV0KGdhbWJsZXNMZW5ndGgsIHBsYXllclRva2Vucyk7IAogICB9CgogICAgZnVuY3Rpb24gSW52ZXN0KCkgcGF5YWJsZSBvbmx5RGV2ZWxvcGVyCiAgICB7CiAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIEdldEdhbWVJbmRleGVzVG9Qcm9jZXNzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTZbNjRdIGdhbWVJbmRleGVzKQogICAgeyAgICAgICAgICAgCiAgICAgIHVpbnQ4IGluZGV4ID0gMDsKICAgICAgZm9yKGludDI1NiBpID0gaW50MjU2KGdhbWJsZXMubGVuZ3RoKSAtIDE7aSA+PSAwO2ktLSkKICAgICAgeyAgICAgIAogICAgICAgICBHYW1lSW5mbyBtZW1vcnkgZyA9IGdhbWJsZXNbdWludDI1NihpKV07CiAgICAgICAgIGlmIChibG9jay5udW1iZXIgLSBnLmJsb2NrTnVtYmVyID49IDI1NikgYnJlYWs7CgogICAgICAgICBpZiAoZy53aGVlbFJlc3VsdCA9PSAzNyAmJiBibG9jay5udW1iZXIgPj0gZy5ibG9ja051bWJlciArIEJsb2NrRGVsYXkpCiAgICAgICAgIHsgCiAgICAgICAgICAgIGdhbWVJbmRleGVzW2luZGV4KytdID0gdWludDI1NihpICsgMSk7CiAgICAgICAgIH0KICAgICAgfSAgICAgIAogICAgfQoKICAgIHVpbnQyNTYgbGFzdEJsb2NrR2FtZXNQcm9jZXNzZWQ7CgogICAgZnVuY3Rpb24gUHJvY2Vzc0dhbWVzKHVpbnQyNTZbXSBnYW1lSW5kZXhlcywgYm9vbCBzaW11bGF0ZSkgCiAgICB7CiAgICAgIGlmICghc2ltdWxhdGUpCiAgICAgIHsKICAgICAgICAgaWYgKGxhc3RCbG9ja0dhbWVzUHJvY2Vzc2VkID09IGJsb2NrLm51bWJlcikgIHJldHVybjsKICAgICAgICAgbGFzdEJsb2NrR2FtZXNQcm9jZXNzZWQgPSBibG9jay5udW1iZXI7CiAgICAgIH0KCiAgICAgIHVpbnQ4IGRlbGF5ID0gQmxvY2tEZWxheTsKICAgICAgdWludDI1NiBsZW5ndGggPSBnYW1lSW5kZXhlcy5sZW5ndGg7CiAgICAgIGJvb2wgc3VjY2VzcyA9IGZhbHNlOwogICAgICBmb3IodWludDI1NiBpID0gMDtpIDwgbGVuZ3RoO2krKykKICAgICAgeyAgICAgIAogICAgICAgICBpZiAoUHJvY2Vzc0dhbWUoZ2FtZUluZGV4ZXNbaV0sIGRlbGF5KSA9PSBHYW1lU3RhdHVzLlN1Y2Nlc3MpIHN1Y2Nlc3MgPSB0cnVlOyAgICAgICAgIAogICAgICB9ICAgICAgCiAgICAgIGlmIChzaW11bGF0ZSAmJiAhc3VjY2VzcykgdGhyb3c7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFByb2Nlc3NHYW1lRXh0KHVpbnQyNTYgaW5kZXgpIHB1YmxpYyByZXR1cm5zIChHYW1lU3RhdHVzKQogICAgewogICAgICByZXR1cm4gUHJvY2Vzc0dhbWUoaW5kZXgsIEJsb2NrRGVsYXkpOwogICAgfQoKICAgIGZ1bmN0aW9uIFByb2Nlc3NHYW1lKHVpbnQyNTYgaW5kZXgsIHVpbnQyNTYgZGVsYXkpIHByaXZhdGUgcmV0dXJucyAoR2FtZVN0YXR1cykKICAgIHsgICAgICAgICAgICAKICAgICAgR2FtZUluZm8gbWVtb3J5IGcgPSBnYW1ibGVzW2luZGV4XTsKICAgICAgaWYgKGJsb2NrLm51bWJlciAtIGcuYmxvY2tOdW1iZXIgPj0gMjU2KSByZXR1cm4gR2FtZVN0YXR1cy5TdG9wOwoKICAgICAgaWYgKGcud2hlZWxSZXN1bHQgPT0gMzcgJiYgYmxvY2subnVtYmVyID4gZy5ibG9ja051bWJlciArIGRlbGF5KQogICAgICB7ICAgICAgICAgICAgCiAgICAgICAgIGdhbWJsZXNbaW5kZXhdLndoZWVsUmVzdWx0ID0gZ2V0UmFuZG9tTnVtYmVyKGcucGxheWVyLCBnLmJsb2NrTnVtYmVyKTsKICAgICAgICAgICAgICAgICAKICAgICAgICAgdWludDI1NiBwbGF5ZXJXaW5uaW5ncyA9IGdldEdhbWVSZXN1bHQoZ2FtYmxlc1tpbmRleF0pOwogICAgICAgICBpZiAocGxheWVyV2lubmluZ3MgPiAwKSAKICAgICAgICAgewogICAgICAgICAgICBpZiAoZy5wbGF5ZXIuc2VuZChwbGF5ZXJXaW5uaW5ncykgPT0gZmFsc2UpIHRocm93OwogICAgICAgICB9CgogICAgICAgICBFbmRHYW1lKGcucGxheWVyLCBnYW1ibGVzW2luZGV4XS53aGVlbFJlc3VsdCwgaW5kZXgpOwogICAgICAgICByZXR1cm4gR2FtZVN0YXR1cy5TdWNjZXNzOwogICAgICB9CgogICAgICByZXR1cm4gR2FtZVN0YXR1cy5Ta2lwcGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihhZGRyZXNzIHBsYXllciwgdWludDI1NiBwbGF5ZXJibG9jaykgcHJpdmF0ZSByZXR1cm5zKHVpbnQ4IHdoZWVsUmVzdWx0KQogICAgewogICAgICAgIC8vIGJsb2NrLmJsb2NraGFzaCAtIGhhc2ggb2YgdGhlIGdpdmVuIGJsb2NrIC0gb25seSB3b3JrcyBmb3IgMjU2IG1vc3QgcmVjZW50IGJsb2NrcyBleGNsdWRpbmcgY3VycmVudAogICAgICAgIGJ5dGVzMzIgYmxvY2tIYXNoID0gYmxvY2suYmxvY2toYXNoKHBsYXllcmJsb2NrK0Jsb2NrRGVsYXkpOyAKICAgICAgICAKICAgICAgICBpZiAoYmxvY2tIYXNoPT0wKSAKICAgICAgICB7CiAgICAgICAgICBFcnJvckxvZyhtc2cuc2VuZGVyLCAiQ2Fubm90IGdlbmVyYXRlIHJhbmRvbSBudW1iZXIiKTsKICAgICAgICAgIHdoZWVsUmVzdWx0ID0gMjAwOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgYnl0ZXMzMiBzaGFQbGF5ZXIgPSBzaGEzKHBsYXllciwgYmxvY2tIYXNoKTsKICAgIAogICAgICAgICAgd2hlZWxSZXN1bHQgPSB1aW50OCh1aW50MjU2KHNoYVBsYXllciklMzcpOwogICAgICAgIH0gICAgCiAgICB9CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlUmFuZG9tTnVtYmVyQnlCbG9ja2hhc2godWludDI1NiBibG9ja0hhc2gsIGFkZHJlc3MgcGxheWVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDggd2hlZWxSZXN1bHQpIAogICAgeyAKICAgICAgICAgIGJ5dGVzMzIgc2hhUGxheWVyID0gc2hhMyhwbGF5ZXIsIGJsb2NrSGFzaCk7CiAgICAKICAgICAgICAgIHdoZWVsUmVzdWx0ID0gdWludDgodWludDI1NihzaGFQbGF5ZXIpJTM3KTsKICAgIH0KCiAgICBmdW5jdGlvbiBlbWVyZ2VuY3lGaXhHYW1lUmVzdWx0KHVpbnQ2NCBnYW1ibGVJZCwgdWludDI1NiBibG9ja0hhc2gpIG9ubHlEZXZlbG9wZXJPck9wZXJhdG9yCiAgICB7CiAgICAgIC8vIFByb2JhYmx5IHRoaXMgZnVuY3Rpb24gd2lsbCBuZXZlciBiZSBjYWxsZWQsIGJ1dAogICAgICAvLyBpZiBnYW1lIHdhcyBub3Qgc3Bpbm5lZCBpbiAyNTYgYmxvY2tzIHRoZW4gYmxvY2suYmxvY2toYXNoIHdpbGwgcmV0dXJucyBhbHdheXMgMCBhbmQgCiAgICAgIC8vIHdlIHNob3VsZCBmaXggdGhpcyBtYW51YWxseSAoeW91IGNhbiBjaGVjayByZXN1bHQgd2l0aCBwdWJsaWMgZnVuY3Rpb24gY2FsY3VsYXRlUmFuZG9tTnVtYmVyQnlCbG9ja2hhc2gpCiAgICAgIEdhbWVJbmZvIG1lbW9yeSBnYW1ibGUgPSBnYW1ibGVzW2dhbWJsZUlkXTsKICAgICAgaWYgKGdhbWJsZS53aGVlbFJlc3VsdCAhPSAyMDApIHRocm93OwoKICAgICAgZ2FtYmxlc1tnYW1ibGVJZF0ud2hlZWxSZXN1bHQgPSBjYWxjdWxhdGVSYW5kb21OdW1iZXJCeUJsb2NraGFzaChibG9ja0hhc2gsIGdhbWJsZS5wbGF5ZXIpOyAgICAgIAoKICAgICAgdWludDI1NiBwbGF5ZXJXaW5uaW5ncyA9IGdldEdhbWVSZXN1bHQoZ2FtYmxlc1tnYW1ibGVJZF0pOwogICAgICBpZiAocGxheWVyV2lubmluZ3MgPiAwKQogICAgICB7CiAgICAgICAgaWYgKGdhbWJsZS5wbGF5ZXIuc2VuZChwbGF5ZXJXaW5uaW5ncykgPT0gZmFsc2UpIHRocm93OwogICAgICB9ICAgICAgCgogICAgICBFbmRHYW1lKGdhbWJsZS5wbGF5ZXIsIGdhbWJsZS53aGVlbFJlc3VsdCwgZ2FtYmxlSWQpOwogICAgfQoKCiAgICBmdW5jdGlvbiBjaGVja0dhbWVzUmVhZHlGb3JTcGlubmluZygpIGNvbnN0YW50IHJldHVybnMgKGludDI1NlsyNTZdIHJldCkgCiAgICB7IAogICAgICB1aW50MTYgaW5kZXggPSAwOyAgICAKICAgICAgZm9yKGludDI1NiBpID0gaW50MjU2KGdhbWJsZXMubGVuZ3RoKSAtIDE7aSA+PSAwO2ktLSkKICAgICAgeyAgICAgIAogICAgICAgICBHYW1lSW5mbyBtZW1vcnkgZyA9IGdhbWJsZXNbdWludDI1NihpKV07CiAgICAgICAgIGlmIChibG9jay5udW1iZXIgLSBnLmJsb2NrTnVtYmVyID49IDI1NikgcmV0dXJuIDsKCiAgICAgICAgIGlmIChnLndoZWVsUmVzdWx0ID09IDM3ICYmIGJsb2NrLm51bWJlciA+IGcuYmxvY2tOdW1iZXIgKyBCbG9ja0RlbGF5KQogICAgICAgICB7ICAgICAgICAgICAgCiAgICAgICAgICAgIHJldFtpbmRleCsrXSA9IGkrMTsgICAgICAgICAgICAKICAgICAgICAgfSAgICAgICAgICAgICAgIAogICAgICB9IAogICAgfQoKICAgIGZ1bmN0aW9uIHByZWxpbWluYXJ5R2FtZVJlc3VsdCh1aW50NjQgZ2FtYmxlSW5kZXgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCBnYW1ibGVJZCwgYWRkcmVzcyBwbGF5ZXIsIHVpbnQyNTYgYmxvY2tOdW1iZXIsIHVpbnQyNTYgdG90YWxXaW4sIHVpbnQ4IHdoZWVsUmVzdWx0LCB1aW50MjU2IGJldHMsIHVpbnQyNTYgdmFsdWVzMSwgdWludDI1NiB2YWx1ZXMyLCB1aW50MjU2IG5Ub3RhbEJldFZhbHVlLCB1aW50MjU2IG5Ub3RhbEJldENvdW50KSAKICAgIHsgCiAgICAgIEdhbWVJbmZvIG1lbW9yeSBnID0gZ2FtYmxlc1t1aW50MjU2KGdhbWJsZUluZGV4KV07CiAgICAgIAogICAgICBpZiAoZy53aGVlbFJlc3VsdCA9PSAzNyAmJiBibG9jay5udW1iZXIgPiBnLmJsb2NrTnVtYmVyICsgQmxvY2tEZWxheSkKICAgICAgewogICAgICAgICBnYW1ibGVzW2dhbWJsZUluZGV4XS53aGVlbFJlc3VsdCA9IGdldFJhbmRvbU51bWJlcihnLnBsYXllciwgZy5ibG9ja051bWJlcik7CiAgICAgICAgIHJldHVybiBnZXRHYW1lKGdhbWJsZUluZGV4KTsKICAgICAgfQogICAgICB0aHJvdzsgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0R2FtZVJlc3VsdChHYW1lSW5mbyBtZW1vcnkgZ2FtZSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsV2luKSAKICAgIHsKICAgICAgICB0b3RhbFdpbiA9IDA7CiAgICAgICAgdWludDggblBsYXllckJldE5vID0gMDsKICAgICAgICAvLyB3ZSBzZW50IGNvdW50IGJldHMgYXQgbGFzdCBieXRlIAogICAgICAgIHVpbnQ4IGJldHNDb3VudCA9IHVpbnQ4KGJ5dGVzMzIoZ2FtZS5iZXRzKVswXSk7IAogICAgICAgIGZvcih1aW50OCBpPTA7IGk8bWF4VHlwZUJldHM7IGkrKykKICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoaXNCaXRTZXQoZ2FtZS5iZXRzLCBpKSkKICAgICAgICAgICAgeyAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgdmFyIHdpbk11bCA9IHdpbk1hdHJpeC5nZXRDb2VmZihnZXRJbmRleChpLCBnYW1lLndoZWVsUmVzdWx0KSk7IC8vIGdldCB3aW4gY29lZgogICAgICAgICAgICAgIGlmICh3aW5NdWwgPiAwKSB3aW5NdWwrKzsgLy8gKyByZXR1cm4gcGxheWVyIGJldAogICAgICAgICAgICAgIHRvdGFsV2luICs9IHdpbk11bCAqIGdldEJldFZhbHVlQnlHYW1ibGUoZ2FtZSwgblBsYXllckJldE5vKzEpOwogICAgICAgICAgICAgIG5QbGF5ZXJCZXRObysrOyAKCiAgICAgICAgICAgICAgaWYgKGJldHNDb3VudCA9PSAxKSBicmVhazsKICAgICAgICAgICAgICBiZXRzQ291bnQtLTsKICAgICAgICAgICAgfQogICAgICAgIH0gICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWUodWludDY0IGluZGV4KSBjb25zdGFudCByZXR1cm5zICh1aW50NjQgZ2FtYmxlSWQsIGFkZHJlc3MgcGxheWVyLCB1aW50MjU2IGJsb2NrTnVtYmVyLCB1aW50MjU2IHRvdGFsV2luLCB1aW50OCB3aGVlbFJlc3VsdCwgdWludDI1NiBiZXRzLCB1aW50MjU2IHZhbHVlczEsIHVpbnQyNTYgdmFsdWVzMiwgdWludDI1NiBuVG90YWxCZXRWYWx1ZSwgdWludDI1NiBuVG90YWxCZXRDb3VudCkgCiAgICB7CiAgICAgICAgZ2FtYmxlSWQgPSBpbmRleDsKICAgICAgICBwbGF5ZXIgPSBnYW1ibGVzW2luZGV4XS5wbGF5ZXI7CiAgICAgICAgdG90YWxXaW4gPSBnZXRHYW1lUmVzdWx0KGdhbWJsZXNbaW5kZXhdKTsKICAgICAgICBibG9ja051bWJlciA9IGdhbWJsZXNbaW5kZXhdLmJsb2NrTnVtYmVyOyAgICAgICAgCiAgICAgICAgd2hlZWxSZXN1bHQgPSBnYW1ibGVzW2luZGV4XS53aGVlbFJlc3VsdDsKICAgICAgICBuVG90YWxCZXRWYWx1ZSA9IHRvdGFsQmV0VmFsdWUoZ2FtYmxlc1tpbmRleF0pOwogICAgICAgIG5Ub3RhbEJldENvdW50ID0gdG90YWxCZXRDb3VudChnYW1ibGVzW2luZGV4XSk7CiAgICAgICAgYmV0cyA9IGdhbWJsZXNbaW5kZXhdLmJldHM7CiAgICAgICAgdmFsdWVzMSA9IHVpbnQyNTYoZ2FtYmxlc1tpbmRleF0udmFsdWVzKTsKICAgICAgICB2YWx1ZXMyID0gdWludDI1NihnYW1ibGVzW2luZGV4XS52YWx1ZXMyKTsgICAgICAgIAogICAgfQoKICAgZnVuY3Rpb24oKSAKICAgewogICAgICB0aHJvdzsKICAgfQogICAKCn0='.
	

]
