Class {
	#name : #SRTc7df0158f29ff6725cec6a3ac71d26bd08b90ff6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc7df0158f29ff6725cec6a3ac71d26bd08b90ff6 >> base64 [
	^ ''.
	

]
