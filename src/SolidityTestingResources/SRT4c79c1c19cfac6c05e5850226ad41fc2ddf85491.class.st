Class {
	#name : #SRT4c79c1c19cfac6c05e5850226ad41fc2ddf85491,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c79c1c19cfac6c05e5850226ad41fc2ddf85491 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIHsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7Cn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmludGVyZmFjZSBUb2tlbiB7IAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwp9Cgpjb250cmFjdCBDc2xUb2tlbkRpc3RyaWJ1dGlvbiB7CiAgICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIFRva2VuIHB1YmxpYyBjc2xUb2tlbjsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxMGUxNzsgICAgICAvL3Rva2VuIGRlY2ltYWxzCiAgICB1aW50MjU2IHB1YmxpYyB2YWx1ZSA9IDUwMDAwOyAgICAgICAgIC8vNTAwMDAgdG9rZW5zIGZvciAxIEVUSAogICAgdWludDI1NiBwdWJsaWMgYm9udXMgPSA1MDAwOyAgICAgICAgICAvLzUwMDAgdG9rZW5zIGZvciAxIEVUSAogICAgdWludDI1NiBwdWJsaWMgZHJvcDsgICAgICAgICAgICAgICAgICAvL3Rva2VucyBmb3IgYWlyZHJvcAogICAgYm9vbCBwdWJsaWMgY29udHJhY3RMb2NrZWQgPSB0cnVlOyAgICAvL2Nyb3dkc2FsZSBsb2NrZWQKICAgIGJvb2wgcHVibGljIGJvbnVzVGltZSA9IHRydWU7ICAgICAgICAgLy9ib251cyB0cnVlIGZvciBlYXJseSBpbnZlc3RvcnMKICAgIAogICAgZXZlbnQgc2VuZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgTG9ja2VkKCk7CiAgICBldmVudCBVbmxvY2tlZCgpOwogICAgZXZlbnQgQm9udXN0aW1lcigpOwogICAgZXZlbnQgTm9Cb251c3RpbWVyKCk7CgogICAgZnVuY3Rpb24gQ3NsVG9rZW5EaXN0cmlidXRpb24oYWRkcmVzcyBfdG9rZW5BZGRyZXNzLCBhZGRyZXNzIF9vd25lcikgcHVibGljIHsKICAgICAgICBjc2xUb2tlbiA9IFRva2VuKF90b2tlbkFkZHJlc3MpOwogICAgICAgIG93bmVyID0gX293bmVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRBaXJkcm9wKHVpbnQyNTYgX0Ryb3ApIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGRyb3AgPSBfRHJvcDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlKHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IF9ib251cykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdmFsdWUgPSBfdmFsdWU7CiAgICAgICAgYm9udXMgPSBfYm9udXM7CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIGlzVW5sb2NrZWQoKSB7CiAgICAgICAgcmVxdWlyZSghY29udHJhY3RMb2NrZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGxvY2tDb250cmFjdCgpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGNvbnRyYWN0TG9ja2VkID0gdHJ1ZTsKICAgICAgICBMb2NrZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdW5sb2NrQ29udHJhY3QoKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBjb250cmFjdExvY2tlZCA9IGZhbHNlOwogICAgICAgIFVubG9ja2VkKCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBib251c09uKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9udXNUaW1lID0gdHJ1ZTsKICAgICAgICBCb251c3RpbWVyKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJvbnVzT2ZmKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9udXNUaW1lID0gZmFsc2U7CiAgICAgICAgTm9Cb251c3RpbWVyKCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9ob2xkZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX2hvbGRlcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFRva2VuQmFsYW5jZShhZGRyZXNzIHdobykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpewogICAgICAgIHVpbnQgYmFsID0gY3NsVG9rZW4uYmFsYW5jZU9mKHdobyk7CiAgICAgICAgcmV0dXJuIGJhbDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0RXRoQmFsYW5jZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9hZGRyLmJhbGFuY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFpcmRyb3AoYWRkcmVzc1tdIGFkZHJlc3Nlcykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShhZGRyZXNzZXMubGVuZ3RoIDw9IDI1NSk7CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHNlbmRUb2tlbnMoYWRkcmVzc2VzW2ldLCBkcm9wKTsKICAgICAgICAgICAgY3NsVG9rZW4udHJhbnNmZXIoYWRkcmVzc2VzW2ldLCBkcm9wKTsKICAgICAgICB9CgkKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZGlzdHJpYnV0aW9uKGFkZHJlc3NbXSBhZGRyZXNzZXMsIHVpbnQyNTYgYW1vdW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICAKICAgICAgICByZXF1aXJlKGFkZHJlc3Nlcy5sZW5ndGggPD0gMjU1KTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHNlbmRUb2tlbnMoYWRkcmVzc2VzW2ldLCBhbW91bnQpOwogICAgICAgICAgICBjc2xUb2tlbi50cmFuc2ZlcihhZGRyZXNzZXNbaV0sIGFtb3VudCk7CiAgICAgICAgfQoKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZUFtb3VudHMoYWRkcmVzc1tdIGFkZHJlc3NlcywgdWludDI1NltdIGFtb3VudHMpIG9ubHlPd25lciBwdWJsaWMgewoKICAgICAgICByZXF1aXJlKGFkZHJlc3Nlcy5sZW5ndGggPD0gMjU1KTsKICAgICAgICByZXF1aXJlKGFkZHJlc3Nlcy5sZW5ndGggPT0gYW1vdW50cy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIGZvciAodWludDggaSA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgc2VuZFRva2VucyhhZGRyZXNzZXNbaV0sIGFtb3VudHNbaV0pOwogICAgICAgICAgICBjc2xUb2tlbi50cmFuc2ZlcihhZGRyZXNzZXNbaV0sIGFtb3VudHNbaV0pOwogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgICAgIGdldFRva2VucygpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRUb2tlbnMoKSBwYXlhYmxlIGlzVW5sb2NrZWQgcHVibGljIHsKICAgICAgICBhZGRyZXNzIGludmVzdG9yID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwodmFsdWUpOwogICAgICAgIAogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgeyByZXR1cm47IH0KICAgICAgICBpZiAoYm9udXNUaW1lID09IHRydWUpIHsKICAgICAgICAgICAgdWludDI1NiBib251c1Rva2VucyA9IHdlaUFtb3VudC5tdWwoYm9udXMpOwogICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMuYWRkKGJvbnVzVG9rZW5zKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgc2VuZFRva2VucyhpbnZlc3RvciwgdG9rZW5zKTsKICAgICAgICBjc2xUb2tlbi50cmFuc2ZlcihpbnZlc3RvciwgdG9rZW5zKTsKICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b2tlbnNBdmFpbGFibGUoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBjc2xUb2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdWludDI1NiBldGhlckJhbGFuY2UgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgb3duZXIudHJhbnNmZXIoZXRoZXJCYWxhbmNlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gd2l0aGRyYXdTdGFuZGFyZFRva2VucyhhZGRyZXNzIF90b2tlbkNvbnRyYWN0KSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBTdGFuZGFyZFRva2VuIHRva2VuID0gU3RhbmRhcmRUb2tlbihfdG9rZW5Db250cmFjdCk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmV0dXJuIHRva2VuLnRyYW5zZmVyKG93bmVyLCBhbW91bnQpOwogICAgfQoKfQ=='.
	

]
