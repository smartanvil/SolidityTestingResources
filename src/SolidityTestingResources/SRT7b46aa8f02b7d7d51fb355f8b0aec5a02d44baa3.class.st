Class {
	#name : #SRT7b46aa8f02b7d7d51fb355f8b0aec5a02d44baa3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7b46aa8f02b7d7d51fb355f8b0aec5a02d44baa3 >> base64 [
	^ ''.
	

]
