Class {
	#name : #SRTea24a873e32eb93c13aee7526eb5e430c95f4219,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea24a873e32eb93c13aee7526eb5e430c95f4219 >> base64 [
	^ ''.
	

]
