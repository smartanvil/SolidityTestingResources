Class {
	#name : #SRTec33fB8D7c781F6FeaF2Dd46D521D4F292320200,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec33fB8D7c781F6FeaF2Dd46D521D4F292320200 >> base64 [
	^ ''.
	

]
