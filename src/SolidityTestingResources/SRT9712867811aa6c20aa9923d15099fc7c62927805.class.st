Class {
	#name : #SRT9712867811aa6c20aa9923d15099fc7c62927805,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9712867811aa6c20aa9923d15099fc7c62927805 >> base64 [
	^ ''.
	

]
