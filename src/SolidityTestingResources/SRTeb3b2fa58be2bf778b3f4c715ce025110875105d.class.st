Class {
	#name : #SRTeb3b2fa58be2bf778b3f4c715ce025110875105d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb3b2fa58be2bf778b3f4c715ce025110875105d >> base64 [
	^ ''.
	

]
