Class {
	#name : #SRTaf7aea249098f2c2f50cc11d4000ccf798194373,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf7aea249098f2c2f50cc11d4000ccf798194373 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKgotIFRoZSBaVFQgcHJlLXNhbGUgd2lsbCBsYXN0IGJldHdlZW4gU2VwdGVtYmVyIDUgdG8gMTUgd2l0aCBhIDUlIGJvbnVzIHBheWFibGUgaW4gWlRUIG9uIGFsbCBwdXJjaGFzZXMuCi0gVGhlIElDTyBpcyBleHBlY3RlZCB0byBzdGFydCBTZXB0ZW1iZXIgMTUsIDIwMTcsIGFuZCBydW4gZm9yIGV4YWN0bHkgMzAgZGF5cy4KLSBUaGUgUHJlSUNPIHByaWNlIGlzIDI5MFpUVC9FVEguIEJvbnVzIG9mIDI1IFpUVCBvbiB0aGUgZmlyc3QgZGF5LiBUaGUgZmlyc3Qgd2VlayBwcmljZSBpcyAyNTAgWlRUL0VUSC4gVGhlIHByaWNlIHRoZW4gaW5jcmVhc2VzIGFwcHJveGltYXRlbHkgMjYlL3dlZWsgYW5kIDMuNiUvcmFpc2VkIFpUVCBpbiBtdWx0aXBsZXMgb2YgbWluaW11bSBhbW91bnQgdG8gYmUgcmFpc2VkLiBJbiB0aGUgZmlyc3QgZGF5LCBwcmljZSBpcyAyNzUgLSB0aW1lcyBmdW5kcyByYWlzZWQgZGlzY291bnQgZmFjdG9yLiBJbiBmaXJzdCwgc2Vjb25kLCB0aGlyZCBhbmQgZm91cnRoIHdlZWssIHByaWNlIGlzIDI1MCwgMTk4LCAxNTcsIDEyNSByZXNwZWN0aXZlbHkgdGltZXMgZGlzY291bnQgZmFjdG9yLiBUaGUgZGlzY291bnQgZmFjdG9yIGZvciBlYWNoIHN1Y2Nlc3NpdmUgbXVsdGlwbGUgKDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgZXRjKSBvZiB0aGUgbWluaW11bSBmdW5kcyByYWlzZWQgc28gZmFyLCBvZiAxLCAuOTY2LCAuOTMzLCAuOTAxLCAuODcxLCAuODQxLCAuODEyLCAuNzg1LCAuNzU4LCAuNzMyLCAuNzA3LCBldGMuCi0gVHJhZGFibGUgd2hlbiBpc3N1ZWQgdG8gdGhlIHB1YmxpYyBmb3IgY29uc2lkZXJhdGlvbiwgYWZ0ZXIgdGhlIElDTyBjbG9zZXMuCi0gRGl2aWRlbmRzIG9mIDQlIHBlciBhbm51bSBhcmUgcGF5YWJsZSBhcyBpbmNyZWFzZWQgdGVycml0b3J5IHNpemUKLSBEZXB1dHkgTWF5b3IgY3J5cHRvLWN1cnJlbmN5IGdvdmVybmFuY2Ugcm9sZS4KLSBEZW1vY3JhdGljIGdvdmVybmFuY2UgYXBwbGllcyB0byB0cmFmZmljIGNvbmdlc3Rpb24uIEFsbCBjcm93ZCBmdW5kZXJzIHdobyBvd24gWlRUIGNvaW5zIGFyZSAiRGVwdXR5IE1heW9ycyIgb2YgdGhlaXIgZGlzdHJpY3QgYmVsb3cgYW5kIG1heSBkZW1vY3JhdGljYWxseSBhZHZpc2UgWmVyb1RyYWZmaWMgb24gY29uZ2VzdGVkIGFyZWFzIGluIHRoZWlyIGRpc3RyaWN0IG9uIGEgcmVndWxhciBiYXNpcy4gRGlzdHJpY3QgbWF5YmUgcmUtY2VudGVyZWQuCi0gQ29pbnMgYXJlIG9wdGlvbmFsbHkgcmV0cmFjdGFibGUgYW5kIHJlZGVlbWFibGUgYnkgWmVyb1RyYWZmaWMsIGluZGl2aWR1YWxseSBmcm9tIGVhY2ggb3duZXIgYW55IHRpbWUgYWZ0ZXIgNSB5ZWFycyBhZnRlciBJT0QuIE9uY2UgYW4gb3duZXIgaXMgZXhjaGFuZ2VkLCB0aGUgbWFya2V0IHByaWNlIGF2ZXJhZ2UgZm9yIHRoZSBsYXN0IDUgZGF5cyBzaGFsbCBiZSB1c2VkIHRvIGNvbXB1dGUgcGF5bWVudC4KLSBBdCBsZWFzdCAxMjUwIFpUVHMnIGFyZSByZXF1aXJlZCB0byBmaWxsIHRoZSByb2xlIG9mIERlcHV0eSBNYXlvci4KLSBQcmljZSBwZXIgZWFjaCBub24tZXhjbHVzaXZlIGNpcmNsZSBvZiByYWRpdXMgMS8yIGttLCBhcm91bmQgYW55IFpUVCBjb2luIG93bmVyIHNwZWNpZmllZCBHUFMgcG9pbnQsIGZvciBhIG1hcCBvZiB0cmFmZmljIHN0YW5kc3RpbGwgY29uZ2VzdGlvbiBtYW5hZ2VtZW50IGFkdmljZSA9ICgxMjUwIFpUVCkuIEFkZGl0aW9uYWwgc2l6ZSByZWdpb25zIGFyZSBwcmljZWQgZm9yIGEgUicga20gcmFkaXVzIGF0IChSJy9SKSoqMiAqcHJpY2UgZm9yIDEvMmttIHJhZGl1cyBpbiBaVFQgY29pbi4KLSBUbyBiZSBleGVtcHQgZnJvbSBzZWN1cml0aWVzIGxhd3MsIHRoZXJlIGlzIG5vIHNoYXJlIG93bmVyc2hpcCB0byBaVFQgY29pbiBob2xkZXJzLCByaWdodCB0byBkaXZpZGVuZHMsIHByb2NlZWRzIGZyb20gc2FsZXMuIFRoZSBwYXJ0aWVzIGFncmVlIHRoYXQgdGhlIEhvd2V5IHRlc3QgaXMgbm90IG1ldDogImludmVzdG1lbnQgb2YgbW9uZXkgZnJvbSBhbiBleHBlY3RhdGlvbiBvZiBwcm9maXRzIGFyaXNpbmcgZnJvbSBhIGNvbW1vbiBlbnRlcnByaXNlIGRlcGVuZGluZyBzb2xlbHkgb24gdGhlIGVmZm9ydHMgb2YgYSBwcm9tb3RlciBvciB0aGlyZCBwYXJ0eSIuIFByb2NlZWRzIHdpbGwgZnVuZCBpbml0aWFsIGFuZCBjb250aW51aW5nIGRldmVsb3BtZW50IGFuZCBidXNpbmVzcyBkZXZlbG9wbWVudCwgZGVwZW5kaW5nIG9uIGxldmVsIG9mIGZ1bmRzIHJhaXNlZCwgZm9yIHNldmVyYWwgeWVhcnMuCi0gRnVuZHMgcmFpc2VkIGluIElDTyBhcmUgcmVmdW5kYWJsZSBpZiBtaW5pbXVtIGlzbid0IG1ldCBkdXJpbmcgSUNPIGFuZCBwcmVzYWxlLCBob3dldmVyIGZ1bmRzIHJhaXNlZCBkdXJpbmcgdGhlIFByZUlDTyBhcmUgbm90IHN1YmplY3QgdG8gcmVmdW5kIG9uIG1pbmltdW0gcmFpc2UuCiovCgpjb250cmFjdCBUb2tlbiB7IAogICAgZnVuY3Rpb24gaXNzdWUoYWRkcmVzcyBfcmVjaXBpZW50LCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIG93bmVyKCkgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIpOwp9Cgpjb250cmFjdCBaVENyb3dkc2FsZSB7CgogICAgLy8gQ3Jvd2RzYWxlIGRldGFpbHMKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OyAvLyBDb21wYW55IGFkZHJlc3MKICAgIGFkZHJlc3MgcHVibGljIGNyZWF0b3I7IC8vIENyZWF0b3IgYWRkcmVzcwogICAgYWRkcmVzcyBwdWJsaWMgY29uZmlybWVkQnk7IC8vIEFkZHJlc3MgdGhhdCBjb25maXJtZWQgYmVuZWZpY2lhcnkKICAgIHVpbnQyNTYgcHVibGljIG1pbkFtb3VudCA9IDIwMDAwIGV0aGVyOyAKICAgIHVpbnQyNTYgcHVibGljIG1heEFtb3VudCA9IDQwMDAwMCBldGhlcjsgCiAgICB1aW50MjU2IHB1YmxpYyBtaW5BY2NlcHRlZEFtb3VudCA9IDQwIGZpbm5leTsgLy8gMS8yNSBldGhlcgoKICAgIC8vIEV0aCB0byBaVCByYXRlCiAgICB1aW50MjU2IHB1YmxpYyByYXRlUHJlSUNPID0gMjkwOwogICAgdWludDI1NiBwdWJsaWMgcmF0ZUFuZ2VsRGF5ID0gMjc1OwogICAgdWludDI1NiBwdWJsaWMgcmF0ZUZpcnN0V2VlayA9IDI1MDsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVTZWNvbmRXZWVrID0gMTk4OwogICAgdWludDI1NiBwdWJsaWMgcmF0ZVRoaXJkV2VlayA9IDE1NzsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVMYXN0V2VlayA9IDEyNTsKCiAgICB1aW50MjU2IHB1YmxpYyByYXRlUHJlSUNPRW5kID0gMTAgZGF5czsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVBbmdlbERheUVuZCA9IDExIGRheXM7CiAgICB1aW50MjU2IHB1YmxpYyByYXRlRmlyc3RXZWVrRW5kID0gMTggZGF5czsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVTZWNvbmRXZWVrRW5kID0gMjUgZGF5czsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVUaGlyZFdlZWtFbmQgPSAzMiBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgcmF0ZUxhc3RXZWVrRW5kID0gMzkgZGF5czsKCiAgICBlbnVtIFN0YWdlcyB7CiAgICAgICAgSW5Qcm9ncmVzcywKICAgICAgICBFbmRlZCwKICAgICAgICBXaXRoZHJhd24KICAgIH0KCiAgICBTdGFnZXMgcHVibGljIHN0YWdlID0gU3RhZ2VzLkluUHJvZ3Jlc3M7CgogICAgLy8gQ3Jvd2RzYWxlIHN0YXRlCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydDsKICAgIHVpbnQyNTYgcHVibGljIGVuZDsKICAgIHVpbnQyNTYgcHVibGljIHJhaXNlZDsKCiAgICAvLyBaVCB0b2tlbgogICAgVG9rZW4gcHVibGljIHp0VG9rZW47CgogICAgLy8gSW52ZXN0ZWQgYmFsYW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgoKICAgIC8qKgogICAgICogVGhyb3cgaWYgYXQgc3RhZ2Ugb3RoZXIgdGhhbiBjdXJyZW50IHN0YWdlCiAgICAgKiAKICAgICAqIEBwYXJhbSBfc3RhZ2UgZXhwZWN0ZWQgc3RhZ2UgdG8gdGVzdCBmb3IKICAgICAqLwogICAgbW9kaWZpZXIgYXRTdGFnZShTdGFnZXMgX3N0YWdlKSB7CiAgICAgICAgcmVxdWlyZShzdGFnZSA9PSBfc3RhZ2UpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogVGhyb3cgaWYgc2VuZGVyIGlzIG5vdCBiZW5lZmljaWFyeQogICAgICovCiAgICBtb2RpZmllciBvbmx5QmVuZWZpY2lhcnkoKSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKiogCiAgICAgKiBHZXQgYmFsYW5jZSBvZiBgX2ludmVzdG9yYCAKICAgICAqIAogICAgICogQHBhcmFtIF9pbnZlc3RvciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAgKiBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9pbnZlc3RvcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19pbnZlc3Rvcl07CiAgICB9CgoKICAgIC8qKgogICAgICogTW9zdCBwYXJhbXMgYXJlIGhhcmRjb2RlZCBmb3IgY2xhcml0eQogICAgICoKICAgICAqIEBwYXJhbSBfdG9rZW5BZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBaVCB0b2tlbiBjb250YWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIFpUQ3Jvd2RzYWxlKGFkZHJlc3MgX3Rva2VuQWRkcmVzcywgYWRkcmVzcyBfYmVuZWZpY2lhcnksIGFkZHJlc3MgX2NyZWF0b3IsIHVpbnQyNTYgX3N0YXJ0KSB7CiAgICAgICAgenRUb2tlbiA9IFRva2VuKF90b2tlbkFkZHJlc3MpOwogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgICAgIGNyZWF0b3IgPSBfY3JlYXRvcjsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICBlbmQgPSBzdGFydCArIHJhdGVMYXN0V2Vla0VuZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBGb3IgdGVzdGluZyBwdXJwb3NlcwogICAgICoKICAgICAqIEByZXR1cm4gVGhlIGJlbmVmaWNpYXJ5IGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gY29uZmlybUJlbmVmaWNpYXJ5KCkgb25seUJlbmVmaWNpYXJ5IHsKICAgICAgICBjb25maXJtZWRCeSA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQ29udmVydCBgX3dlaWAgdG8gYW4gYW1vdW50IGluIFpUIHVzaW5nIAogICAgICogdGhlIGN1cnJlbnQgcmF0ZQogICAgICoKICAgICAqIEBwYXJhbSBfd2VpIGFtb3VudCBvZiB3ZWkgdG8gY29udmVydAogICAgICogQHJldHVybiBUaGUgYW1vdW50IGluIFpUCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvWlQodWludDI1NiBfd2VpKSByZXR1cm5zICh1aW50MjU2IGFtb3VudCkgewogICAgICAgIHVpbnQyNTYgcmF0ZSA9IDA7CiAgICAgICAgaWYgKHN0YWdlICE9IFN0YWdlcy5FbmRlZCAmJiBub3cgPj0gc3RhcnQgJiYgbm93IDw9IGVuZCkgewoKICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHByZWljbwogICAgICAgICAgICBpZiAobm93IDw9IHN0YXJ0ICsgcmF0ZVByZUlDT0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVQcmVJQ087CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBhbmdlbGRheQogICAgICAgICAgICBlbHNlIGlmIChub3cgPD0gc3RhcnQgKyByYXRlQW5nZWxEYXlFbmQpIHsKICAgICAgICAgICAgICAgIHJhdGUgPSByYXRlQW5nZWxEYXk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIGZpcnN0IHdlZWsKICAgICAgICAgICAgZWxzZSBpZiAobm93IDw9IHN0YXJ0ICsgcmF0ZUZpcnN0V2Vla0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVGaXJzdFdlZWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIHNlY29uZCB3ZWVrCiAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA8PSBzdGFydCArIHJhdGVTZWNvbmRXZWVrRW5kKSB7CiAgICAgICAgICAgICAgICByYXRlID0gcmF0ZVNlY29uZFdlZWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIHRoaXJkIHdlZWsKICAgICAgICAgICAgZWxzZSBpZiAobm93IDw9IHN0YXJ0ICsgcmF0ZVRoaXJkV2Vla0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVUaGlyZFdlZWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIGxhc3Qgd2VlawogICAgICAgICAgICBlbHNlIGlmIChub3cgPD0gc3RhcnQgKyByYXRlTGFzdFdlZWtFbmQpIHsKICAgICAgICAgICAgICAgIHJhdGUgPSByYXRlTGFzdFdlZWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHVpbnQyNTYgenRBbW91bnQgPSBfd2VpICogcmF0ZSAqIDEwKio4IC8gMSBldGhlcjsgLy8gMTAqKjggZm9yIDggZGVjaW1hbHMKCiAgICAgICAgLy8gSW5jcmVhc2UgcHJpY2UgYWZ0ZXIgbWluIGFtb3VudCBpcyByZWFjaGVkCiAgICAgICAgaWYgKHJhaXNlZCA+IG1pbkFtb3VudCkgewogICAgICAgICAgICB1aW50MjU2IG11bHRpcGxpZXIgPSByYWlzZWQgLyBtaW5BbW91bnQ7IC8vIFJlbWFpbmRlciBkaXNjYXJkZWQKICAgICAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbXVsdGlwbGllcjsgaSsrKSB7CiAgICAgICAgICAgICAgICB6dEFtb3VudCA9IHp0QW1vdW50ICogOTY1OTM2MzI5IC8gMTAqKjk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB6dEFtb3VudDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBGdW5jdGlvbiB0byBlbmQgdGhlIGNyb3dkc2FsZSBieSBzZXR0aW5nIAogICAgICogdGhlIHN0YWdlIHRvIEVuZGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuZENyb3dkc2FsZSgpIGF0U3RhZ2UoU3RhZ2VzLkluUHJvZ3Jlc3MpIHsKCiAgICAgICAgLy8gQ3Jvd2RzYWxlIG5vdCBlbmRlZCB5ZXQKICAgICAgICByZXF1aXJlKG5vdyA+PSBlbmQpOwoKICAgICAgICBzdGFnZSA9IFN0YWdlcy5FbmRlZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciBhcHByb3ByaWF0ZSBwZXJjZW50YWdlIG9mIHJhaXNlZCBhbW91bnQgCiAgICAgKiB0byB0aGUgY29tcGFueSBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgYXRTdGFnZShTdGFnZXMuRW5kZWQpIHsKCiAgICAgICAgLy8gQ29uZmlybSB0aGF0IG1pbkFtb3VudCBpcyByYWlzZWQKICAgICAgICByZXF1aXJlKHJhaXNlZCA+PSBtaW5BbW91bnQpOwoKICAgICAgICB1aW50MjU2IGV0aEJhbGFuY2UgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgdWludDI1NiBldGhGZWVzID0gZXRoQmFsYW5jZSAqIDUgLyAxMCoqMzsgLy8gMC4wMDUKICAgICAgICBjcmVhdG9yLnRyYW5zZmVyKGV0aEZlZXMpOwogICAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKGV0aEJhbGFuY2UgLSBldGhGZWVzKTsKCiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuV2l0aGRyYXduOwogICAgfQoKCiAgICAvKioKICAgICAqIFJlZnVuZCBpbiB0aGUgY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgY3Jvd2RzYWxlLiBUaGUgCiAgICAgKiBjcm93ZHNhbGUgaXMgY29uc2lkZXJlZCB1bnN1Y2Nlc3NmdWwgaWYgbWluQW1vdW50IHdhcyAKICAgICAqIG5vdCByYWlzZWQgYmVmb3JlIGVuZAogICAgICovCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBhdFN0YWdlKFN0YWdlcy5FbmRlZCkgewoKICAgICAgICAvLyBPbmx5IGFsbG93IHJlZnVuZHMgaWYgbWluQW1vdW50IGlzIG5vdCByYWlzZWQKICAgICAgICByZXF1aXJlKHJhaXNlZCA8IG1pbkFtb3VudCk7CgogICAgICAgIHVpbnQyNTYgcmVjZWl2ZWRBbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CgogICAgICAgIGlmIChyZWNlaXZlZEFtb3VudCA+IDAgJiYgIW1zZy5zZW5kZXIuc2VuZChyZWNlaXZlZEFtb3VudCkpIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSByZWNlaXZlZEFtb3VudDsKICAgICAgICB9CiAgICB9CgogICAgCiAgICAvKioKICAgICAqIFJlY2VpdmVzIEV0aCBhbmQgaXNzdWUgWlQgdG9rZW5zIHRvIHRoZSBzZW5kZXIKICAgICAqLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBhdFN0YWdlKFN0YWdlcy5JblByb2dyZXNzKSB7CgogICAgICAgIC8vIFJlcXVpcmUgQ3Jvd2RzYWxlIHN0YXJ0ZWQKICAgICAgICByZXF1aXJlKG5vdyA+IHN0YXJ0KTsKCiAgICAgICAgLy8gUmVxdWlyZSBDcm93ZHNhbGUgbm90IGV4cGlyZWQKICAgICAgICByZXF1aXJlKG5vdyA8IGVuZCk7CgogICAgICAgIC8vIEVuZm9yY2UgbWluIGFtb3VudAogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IG1pbkFjY2VwdGVkQW1vdW50KTsKICAgICAgICAKICAgICAgICBhZGRyZXNzIHNlbmRlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludDI1NiByZWNlaXZlZCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IHZhbHVlSW5aVCA9IHRvWlQobXNnLnZhbHVlKTsKICAgICAgICBpZiAoIXp0VG9rZW4uaXNzdWUoc2VuZGVyLCB2YWx1ZUluWlQpKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5vdyA8PSBzdGFydCArIHJhdGVQcmVJQ09FbmQpIHsKCiAgICAgICAgICAgIC8vIEZlZXMKICAgICAgICAgICAgdWludDI1NiBldGhGZWVzID0gcmVjZWl2ZWQgKiA1IC8gMTAqKjM7IC8vIDAuMDA1CgogICAgICAgICAgICAvLyAwLjUlIGV0aAogICAgICAgICAgICBpZiAoIWNyZWF0b3Iuc2VuZChldGhGZWVzKSkgewogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIER1cmluZyBwcmUtaWNvIC0gTm9uLVJlZnVuZGFibGUKICAgICAgICAgICAgaWYgKCFiZW5lZmljaWFyeS5zZW5kKHJlY2VpdmVkIC0gZXRoRmVlcykpIHsKICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAvLyBEdXJpbmcgdGhlIElDTwogICAgICAgICAgICBiYWxhbmNlc1tzZW5kZXJdICs9IHJlY2VpdmVkOyAvLyAxMDAlIHJlZnVuZGFibGUKICAgICAgICB9CgogICAgICAgIHJhaXNlZCArPSByZWNlaXZlZDsKCiAgICAgICAgLy8gQ2hlY2sgbWF4QW1vdW50IHJhaXNlZAogICAgICAgIGlmIChyYWlzZWQgPj0gbWF4QW1vdW50KSB7CiAgICAgICAgICAgIHN0YWdlID0gU3RhZ2VzLkVuZGVkOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
