Class {
	#name : #SRT46b9ad944d1059450da1163511069c718f699d31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT46b9ad944d1059450da1163511069c718f699d31 >> base64 [
	^ ''.
	

]
