Class {
	#name : #SRT3e2a90ed252c282afbcea5489990cd1f21d2dbd0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3e2a90ed252c282afbcea5489990cd1f21d2dbd0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKgpQcm9qZWN0OiBYUEEgRXhjaGFuZ2UgLSBodHRwczovL3hwYS5leGNoYW5nZQpBdXRob3IgOiBMdXBoaWEgQ2hhbmcgLSA8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjI3NGI1MjU3NGY0ZTQ2MDk0NDRmNDY0OTQwNjc0ZTU0NTI0OTQ0NGI0ODUyNDMwOTQ0NDg0YSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KICovCgppbnRlcmZhY2UgVG9rZW4gewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2IHRzKTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7Cn0KCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCB4LCB1aW50IHkpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICByZXR1cm5zKHVpbnQpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIHJlcXVpcmUoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgeCwgdWludCB5KQogICAgICAgIGludGVybmFsCiAgICAgICAgcHVyZQogICAgcmV0dXJucyh1aW50KSB7CiAgICAgIHJlcXVpcmUoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludCB4LCB1aW50IHkpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICByZXR1cm5zKHVpbnQpIHsKICAgICAgdWludCB6ID0geCAqIHk7CiAgICAgIHJlcXVpcmUoKHggPT0gMCkgfHwgKHogLyB4ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludCB4LCB1aW50IHkpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXF1aXJlKHkgPiAwKTsKICAgICAgICByZXR1cm4geCAvIHk7CiAgICB9CgogICAgZnVuY3Rpb24gcmFuZG9tKHVpbnQgTiwgdWludCBzYWx0KQogICAgICAgIGludGVybmFsCiAgICAgICAgdmlldwogICAgcmV0dXJucyh1aW50KSB7CiAgICAgIGJ5dGVzMzIgaGFzaCA9IGtlY2NhazI1NihibG9jay5udW1iZXIsIG1zZy5zZW5kZXIsIHNhbHQpOwogICAgICByZXR1cm4gdWludChoYXNoKSAlIE47CiAgICB9Cn0KCmNvbnRyYWN0IEF1dGhvcml6YXRpb24gewogICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3MpIHB1YmxpYyBhZ2VudEJvb2tzOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBvcGVyYXRvcjsKICAgIGFkZHJlc3MgcHVibGljIGJhbms7CiAgICBib29sIHB1YmxpYyBwb3dlclN0YXR1cyA9IHRydWU7CgogICAgZnVuY3Rpb24gQXV0aG9yaXphdGlvbigpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG9wZXJhdG9yID0gbXNnLnNlbmRlcjsKICAgICAgICBiYW5rID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRvcgogICAgewogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IG9wZXJhdG9yIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBvbmx5QWN0aXZlCiAgICB7CiAgICAgICAgYXNzZXJ0KHBvd2VyU3RhdHVzKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHBvd2VyU3dpdGNoKAogICAgICAgIGJvb2wgb25PZmZfCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU9wZXJhdG9yCiAgICB7CiAgICAgICAgcG93ZXJTdGF0dXMgPSBvbk9mZl87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcl8pCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcl87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFzc2lnbk9wZXJhdG9yKGFkZHJlc3MgdXNlcl8pCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgb3BlcmF0b3IgPSB1c2VyXzsKICAgICAgICBhZ2VudEJvb2tzW2JhbmtdID0gdXNlcl87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFzc2lnbkJhbmsoYWRkcmVzcyBiYW5rXykKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBiYW5rID0gYmFua187CiAgICB9CgogICAgZnVuY3Rpb24gYXNzaWduQWdlbnQoCiAgICAgICAgYWRkcmVzcyBhZ2VudF8KICAgICkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBhZ2VudEJvb2tzW21zZy5zZW5kZXJdID0gYWdlbnRfOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmVwcmVzZW50b3IoCiAgICAgICAgYWRkcmVzcyByZXByZXNlbnRvcl8KICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gYWdlbnRCb29rc1tyZXByZXNlbnRvcl9dID09IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VXNlcigKICAgICAgICBhZGRyZXNzIHJlcHJlc2VudG9yXwogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgdmlldwogICAgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGlzUmVwcmVzZW50b3IocmVwcmVzZW50b3JfKSA/IHJlcHJlc2VudG9yXyA6IG1zZy5zZW5kZXI7CiAgICB9Cn0KCi8qICBFcnJvciBDb2RlCiAgICAwOiBpbnN1ZmZpY2llbnQgZnVuZHMgKHVzZXIpCiAgICAxOiBpbnN1ZmZpY2llbnQgZnVuZHMgKGNvbnRyYWN0KQogICAgMjogaW52YWxpZCBhbW91bnQKICAgIDM6IGludmFsaWQgcHJpY2UKICovCgovKgogICAgMS4g5qqi6amX5piv5ZCm5oyH5a6a5Luj55CG55So5oi277yM6Iul5piv5LiU54K65ZCI5rOV5Luj55CG5Lq65YmH5bCH5pON5L2c6KeS6Imy6L2J5o+b54K66KKr5Luj55CG5Lq677yM5ZCm5YmH5pON5L2c6KeS6Imy5LiN6K6KCiAgICAyLiDmqqLpqZfmraTmk43kvZzmmK/lkKbmnInlrZjlhaUgRVRI77yM5pyJ5YmH5pqr5pmC57SA6YyE5a2Y5YWl6aGN5bqmIEHvvIzoi6Xmjpvllq7mjIflrpogZnJvbVRva2VuIOS4jeaYryBFVEgg5YmH55u05o6l5pu05paw55So5oi2IEVUSCDluLPmiLbppJjpoY0KICAgIDMuIOaqoumpl+atpOaTjeS9nOaYr+WQpuacieWtmOWFpSBmcm9tVG9rZW7vvIzmnInliYfmmqvmmYLntIDpjITlrZjlhaXpoY3luqYgQQogICAgNC4g5qqi6amX55So5oi2IGZyb21Ub2tlbiDluLPmiLbppJjpoY0gKyDlrZjlhaXpoY3luqYgQSDmmK/lkKYgPj0gQW1vdW5077yM6Iul5piv6YCB5Ye6IG1ha2VPcmRlciDmjpvllq7kuovku7bvvIzlkKbliYfntZDmnZ/mk43kvZwKICAgIDUuIOS+neeFpyBmcm9tVG9rZW7jgIF0b1Rva2VuIOWwi+aJvuWPr+WMuemFjeeahOS6pOaYk+WwjSBQCiAgICA2LiDmib7lh7ogUCDnmoTmnIDkvY7lg7nmoLzllq7pgLLooYzljLnphY3vvIzoqJjpjITljLnphY3mlbjph4/vvIzpgIHlh7ogZmlsbE9yZGVyIOaIkOS6pOS6i+S7tu+8jOS4pue1kOeulyBtYWtlciDkuqTmmJPntZDmnpzvvIzoi6XmiJDkuqTlrozpgoTmnInmjpvllq7mlbjph4/mnInliankuJTmnKrpgZTov7TlnIjmrKHmlbjkuIrpmZDliYfph43opIfmraTmraXpqZ8KICAgIDcuIOe1seioiOatpempnyA2IOe4veaIkOS6pOmHj+OAgeS6pOaYk+WDueW3ruWIqea9pOOAgeS6pOaYk+aJi+e6jOiyuwogICAgOC4g6Iul5omj6Zmk57i95oiQ5Lqk6YeP5b6MIFRha2VyIOaOm+WWruWwmuacquaSruWQiOWujO+8jOWJh+Wwh+WJqemkmOmhjeW6pui9ieaPm+eCuiBNYWtlciDllq4KICAgIDkuIOe1kOeul+S6pOaYk+aJgOaJi+e6jOiyuwogICAgMTAuIOe1kOeulyBUYWtlciDkuqTmmJPntZDmnpwKICovCgpjb250cmFjdCBCYWxpdiBpcyBTYWZlTWF0aCwgQXV0aG9yaXphdGlvbiB7CiAgICAvKiBzdHJ1Y3QgZm9yIGV4Y2hhbmdlIGRhdGEgKi8KICAgIHN0cnVjdCBsaW5rZWRCb29rIHsKICAgICAgICB1aW50MjU2IGFtb3VudDsKICAgICAgICBhZGRyZXNzIG5leHRVc2VyOwogICAgfQoKICAgIC8qIGJ1c2luZXNzIG9wdGlvbnMgKi8KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgbWluQW1vdW50OwogICAgdWludDI1NlszXSBwdWJsaWMgZmVlcmF0ZSA9IFswLCAxICogKDEwICoqIDE1KSwgMSAqICgxMCAqKiAxNSldOwogICAgdWludDI1NiBwdWJsaWMgYXV0b01hdGNoID0gMTA7CiAgICB1aW50MjU2IHB1YmxpYyBtYXhBbW91bnQgPSAxMCAqKiAyNzsKICAgIHVpbnQyNTYgcHVibGljIG1heFByaWNlID0gMTAgKiogMzY7CiAgICBhZGRyZXNzIHB1YmxpYyBYUEFUb2tlbiA9IDB4MDA5MDUyOGFlYjNhMmI3MzZiNzgwZmQxYjZjNDc4YmI3ZTFkNjQzMTcwOwoKICAgIC8qIGV4Y2hhbmdlIGRhdGEgKi8KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyh1aW50MjU2ID0+IG1hcHBpbmcoYWRkcmVzcyA9PiBsaW5rZWRCb29rKSkpKSBwdWJsaWMgb3JkZXJCb29rczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpKSkgcHVibGljIG5leHRPcmRlclByaWNlOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIHByaWNlQm9va3M7CiAgICAKICAgIC8qIHVzZXIgZGF0YSAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGludGVybmFsIG1hbnVhbFdpdGhkcmF3OwoKICAgIC8qIGV2ZW50ICovCiAgICBldmVudCBlRGVwb3NpdChhZGRyZXNzIHVzZXIsYWRkcmVzcyB0b2tlbiwgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgZVdpdGhkcmF3KGFkZHJlc3MgdXNlcixhZGRyZXNzIHRva2VuLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBlTWFrZU9yZGVyKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIGFkZHJlc3MgdXNlciwgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgZUZpbGxPcmRlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIsIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IGVDYW5jZWxPcmRlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIsIHVpbnQyNTYgYW1vdW50KTsKCiAgICBldmVudCBFcnJvcih1aW50MjU2IGNvZGUpOwoKICAgIC8qIGNvbnN0cnVjdG9yICovCiAgICBmdW5jdGlvbiBCYWxpdigpIHB1YmxpYyB7CiAgICAgICAgbWluQW1vdW50WzBdID0gMTAgKiogMTY7CiAgICB9CgogICAgLyogT3BlcmF0b3IgRnVuY3Rpb24KICAgICAgICBmdW5jdGlvbiBzZXR1cCh1aW50MjU2IGF1dG9NYXRjaCwgdWludDI1NiBtYXhBbW91bnQsIHVpbnQyNTYgbWF4UHJpY2UpIGV4dGVybmFsOwogICAgICAgIGZ1bmN0aW9uIHNldE1pbkFtb3VudChhZGRyZXNzIHRva2VuLCB1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWw7CiAgICAgICAgZnVuY3Rpb24gc2V0RmVlcmF0ZSh1aW50MjU2WzNdIFttYWtlciwgdGFrZXIsIGF1dG9XaXRoZHJhd10pIGV4dGVybmFsOwogICAgKi8KCiAgICAvKiBFeHRlcm5hbCBGdW5jdGlvbgogICAgICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlOwogICAgICAgIGZ1bmN0aW9uIGRlcG9zaXQoYWRkcmVzcyB0b2tlbiwgYWRkcmVzcyByZXByZXNlbnRvcikgZXh0ZXJuYWwgcGF5YWJsZTsKICAgICAgICBmdW5jdGlvbiB3aXRoZHJhdyhhZGRyZXNzIHRva2VuLCB1aW50MjU2IGFtb3VudCwgYWRkcmVzcyByZXByZXNlbnRvcikgZXh0ZXJuYWwgcmV0dXJucyhib29sKTsKICAgICAgICBmdW5jdGlvbiB1c2VyVGFrZU9yZGVyKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgYW1vdW50LCBhZGRyZXNzIHJlcHJlc2VudG9yKSBleHRlcm5hbCBwYXlhYmxlIHJldHVybnMoYm9vbCk7CiAgICAgICAgZnVuY3Rpb24gdXNlckNhbmNlbE9yZGVyKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgYW1vdW50LCBhZGRyZXNzIHJlcHJlc2VudG9yKSBleHRlcm5hbCByZXR1cm5zKGJvb2wpOwogICAgICAgIGZ1bmN0aW9uIGNhY3VsYXRlRmVlKGFkZHJlc3MgdXNlciwgdWludDI1NiBhbW91bnQsIHVpbnQ4IHJvbGUpIGV4dGVybmFsIHJldHVybnModWludDI1NiByZW1haW5pbmcsIHVpbnQyNTYgZmVlKTsKICAgICAgICBmdW5jdGlvbiB0cmFkZShhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuKSBleHRlcm5hbDsKICAgICAgICBmdW5jdGlvbiBzZXRNYW51YWxXaXRoZHJhdyhib29sKSBleHRlcm5hbDsKICAgICAgICBmdW5jdGlvbiBnZXRNaW5BbW91bnQoYWRkcmVzcykgZXh0ZXJuYWwgcmV0dXJucyh1aW50MjU2KTsKICAgICAgICBmdW5jdGlvbiBnZXRQcmljZShhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuKSBleHRlcm5hbCByZXR1cm5zKHVpbnQyNTYpOwogICAgKi8KCiAgICAvKiBJbnRlcm5hbCBGdW5jdGlvbgogICAgICAgIGZ1bmN0aW9uIGRlcG9zaXRBbmRGcmVlemUoYWRkcmVzcyB0b2tlbiwgYWRkcmVzcyB1c2VyKSBpbnRlcm5hbCBwYXlhYmxlIHJldHVybnModWludDI1NiBhbW91bnQpOwogICAgICAgIGZ1bmN0aW9uIGNoZWNrQmFsYW5jZShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgdG9rZW4sIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IGRlcG9zaXRBbW91bnQpIGludGVybmFsIHJldHVybnMoYm9vbCk7CiAgICAgICAgZnVuY3Rpb24gY2hlY2tBbW91bnQoYWRkcmVzcyB0b2tlbiwgdWludDI1NiBhbW91bnQpIGludGVybmFsIHJldHVybnMoYm9vbCk7CiAgICAgICAgZnVuY3Rpb24gY2hlY2tQcmljZUFtb3VudCh1aW50MjU2IHByaWNlKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpOwogICAgICAgIGZ1bmN0aW9uIG1ha2VPcmRlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IGFtb3VudCwgYWRkcmVzcyB1c2VyLCB1aW50MjU2IGRlcG9zaXRBbW91bnQpIGludGVybmFsIHJldHVybnModWludDI1NiBhbW91bnQpOwogICAgICAgIGZ1bmN0aW9uIGZpbmRBbmRUcmFkZShhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IGFtb3VudCkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2WzJdIHRvdGFsTWF0Y2hBbW91bnRbZnJvbVRva2VuLCB0b1Rva2VuXSwgdWludDI1NlsyXSBwcm9maXRbZnJvbVRva2VuLCB0b1Rva2VuXSk7CiAgICAgICAgZnVuY3Rpb24gbWFrZVRyYWRlKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgYmVzdFByaWNlLCB1aW50MjU2IHJlbWFpbmluZ0Ftb3VudCkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2WzNdIFtmaWxsVGFrZXIsIGZpbGxNYWtlciwgbWFrZXJGZWVdKTsKICAgICAgICBmdW5jdGlvbiBtYWtlVHJhZGVEZXRhaWwoYWRkcmVzcyBmcm9tVG9rZW4sIGFkZHJlc3MgdG9Ub2tlbiwgdWludDI1NiBwcmljZSwgdWludDI1NiBiZXN0UHJpY2UsIGFkZHJlc3MgbWFrZXIsIHVpbnQyNTYgcmVtYWluaW5nQW1vdW50KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTZbM10gW2ZpbGxUYWtlciwgZmlsbE1ha2VyLCBtYWtlckZlZV0sIGJvb2wgbWFrZXJGdWxsZmlsbCk7CiAgICAgICAgZnVuY3Rpb24gY2FjdWxhdGVGaWxsKHVpbnQyNTYgcHJvdmlkZSwgdWludDI1NiByZXF1aXJlLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IHBhaXJQcm92aWRlKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludDI1NiBmaWxsQW1vdW50KTsKICAgICAgICBmdW5jdGlvbiBjaGVja1ByaWNlUGFpcih1aW50MjU2IHByaWNlLCB1aW50MjU2IGJlc3RQcmljZSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zKGJvb2wgbWF0Y2hlZCk7CiAgICAgICAgZnVuY3Rpb24gZmlsbE9yZGVyKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYgZmVlKTsKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuKGFkZHJlc3MgdXNlciwgYWRkcmVzcyB0b2tlbiwgdWludDI1NiBhbW91bnQpIGludGVybmFsIHJldHVybnMoYm9vbCk7CiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQmFsYW5jZShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgdG9rZW4sIHVpbnQyNTYgYW1vdW50LCBib29sIGFkZE9yU3ViKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpOwogICAgICAgIGZ1bmN0aW9uIGNvbm5lY3RPcmRlclByaWNlKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgcHJldlByaWNlKSBpbnRlcm5hbDsKICAgICAgICBmdW5jdGlvbiBjb25uZWN0T3JkZXJVc2VyKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIGFkZHJlc3MgdXNlcikgaW50ZXJuYWw7CiAgICAgICAgZnVuY3Rpb24gZGlzY29ubmVjdE9yZGVyUHJpY2UoYWRkcmVzcyBmcm9tVG9rZW4sIGFkZHJlc3MgdG9Ub2tlbiwgdWludDI1NiBwcmljZSkgaW50ZXJuYWw7CiAgICAgICAgZnVuY3Rpb24gZGlzY29ubmVjdE9yZGVyVXNlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIpIGludGVybmFsOwogICAgICAgIGZ1bmN0aW9uIGdldE5leHRPcmRlclByaWNlKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UpIGludGVybmFsIHZpZXcgcmV0dXJucyh1aW50MjU2IHByaWNlKTsKICAgICAgICBmdW5jdGlvbiB1cGRhdGVOZXh0T3JkZXJQcmljZShhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IG5leHRQcmljZSkgaW50ZXJuYWw7CiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4T3JkZXJ0VXNlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIpIGludGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzIG5leHRVc2VyKTsKICAgICAgICBmdW5jdGlvbiBnZXRPcmRlckFtb3VudChhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIpIGludGVybmFsIHZpZXcgcmV0dXJucyh1aW50MjU2IGFtb3VudCk7CiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTmV4dE9yZGVyVXNlcihhZGRyZXNzIGZyb21Ub2tlbiwgYWRkcmVzcyB0b1Rva2VuLCB1aW50MjU2IHByaWNlLCBhZGRyZXNzIHVzZXIsIGFkZHJlc3MgbmV4dFVzZXIpIGludGVybmFsOwogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyQW1vdW50KGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UsIGFkZHJlc3MgdXNlciwgdWludDI1NiBhbW91bnQsIGJvb2wgYWRkT3JTdWIpIGludGVybmFsOwogICAgICAgIGZ1bmN0aW9uIGxvZ1ByaWNlKGFkZHJlc3MgZnJvbVRva2VuLCBhZGRyZXNzIHRvVG9rZW4sIHVpbnQyNTYgcHJpY2UpIGludGVybmFsOwogICAgKi8KCiAgICAvKiBPcGVyYXRvciBmdW5jdGlvbiAqLwogICAgZnVuY3Rpb24gc2V0dXAoCiAgICAgICAgdWludDI1NiBhdXRvTWF0Y2hfLAogICAgICAgIHVpbnQyNTYgbWF4QW1vdW50XywKICAgICAgICB1aW50MjU2IG1heFByaWNlXwogICAgKQogICAgICAgIG9ubHlPcGVyYXRvcgogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGF1dG9NYXRjaCA9IGF1dG9NYXRjaF87CiAgICAgICAgbWF4QW1vdW50ID0gbWF4QW1vdW50XzsKICAgICAgICBtYXhQcmljZSA9IG1heFByaWNlXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0TWluQW1vdW50KAogICAgICAgIGFkZHJlc3MgdG9rZW5fLAogICAgICAgIHVpbnQyNTYgYW1vdW50XwogICAgKQogICAgICAgIG9ubHlPcGVyYXRvcgogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIG1pbkFtb3VudFt0b2tlbl9dID0gYW1vdW50XzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0TWluQW1vdW50KAogICAgICAgIGFkZHJlc3MgdG9rZW5fCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIG1pbkFtb3VudFt0b2tlbl9dID4gMAogICAgICAgICAgICA/IG1pbkFtb3VudFt0b2tlbl9dCiAgICAgICAgICAgIDogbWluQW1vdW50WzBdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRGZWVyYXRlKAogICAgICAgIHVpbnQyNTZbM10gZmVlcmF0ZV8KICAgICkKICAgICAgICBvbmx5T3BlcmF0b3IKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKGZlZXJhdGVfWzBdIDwgMC4wNSBldGhlciAmJiBmZWVyYXRlX1sxXSA8IDAuMDUgZXRoZXIgJiYgZmVlcmF0ZV9bMl0gPCAwLjA1IGV0aGVyKTsKICAgICAgICBmZWVyYXRlID0gZmVlcmF0ZV87CiAgICB9CgogICAgLyogRXh0ZXJuYWwgZnVuY3Rpb24gKi8KICAgIC8vIGZhbGxiYWNrCiAgICBmdW5jdGlvbiAoKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBkZXBvc2l0KDAsIDApOwogICAgfQoKICAgIC8vIGRlcG9zaXQgYWxsIGFsbG93YW5jZQogICAgZnVuY3Rpb24gZGVwb3NpdCgKICAgICAgICBhZGRyZXNzIHRva2VuXywKICAgICAgICBhZGRyZXNzIHJlcHJlc2VudG9yXwogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICBvbmx5QWN0aXZlCiAgICB7CiAgICAgICAgYWRkcmVzcyB1c2VyID0gZ2V0VXNlcihyZXByZXNlbnRvcl8pOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gZGVwb3NpdEFuZEZyZWV6ZSh0b2tlbl8sIHVzZXIpOwogICAgICAgIGlmKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgdXBkYXRlQmFsYW5jZShtc2cuc2VuZGVyLCB0b2tlbl8sIGFtb3VudCwgdHJ1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KAogICAgICAgIGFkZHJlc3MgdG9rZW5fLAogICAgICAgIHVpbnQyNTYgYW1vdW50XywKICAgICAgICBhZGRyZXNzIHJlcHJlc2VudG9yXwogICAgKQogICAgICAgIHB1YmxpYwogICAgcmV0dXJucyhib29sKSB7CiAgICAgICAgYWRkcmVzcyB1c2VyID0gZ2V0VXNlcihyZXByZXNlbnRvcl8pOwogICAgICAgIGlmKHVwZGF0ZUJhbGFuY2UodXNlciwgdG9rZW5fLCBhbW91bnRfLCBmYWxzZSkpIHsKICAgICAgICAgICAgcmVxdWlyZSh0cmFuc2ZlclRva2VuKHVzZXIsIHRva2VuXywgYW1vdW50XykpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9Ci8qCiAgICBmdW5jdGlvbiB1c2VyTWFrZU9yZGVyKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIHVpbnQyNTYgYW1vdW50XywKICAgICAgICBhZGRyZXNzIHJlcHJlc2VudG9yXwogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIC8vIGRlcG9zaXRUb2tlbiA9PiBtYWtlT3JkZXIgPT4gdXBkYXRlQmFsYW5jZQogICAgICAgIHVpbnQyNTYgZGVwb3NpdEFtb3VudCA9IGRlcG9zaXRBbmRGcmVlemUoZnJvbVRva2VuXywgcmVwcmVzZW50b3JfKTsKICAgICAgICBpZigKICAgICAgICAgICAgY2hlY2tBbW91bnQoZnJvbVRva2VuXywgYW1vdW50XykgJiYKICAgICAgICAgICAgY2hlY2tQcmljZUFtb3VudChwcmljZV8pCiAgICAgICAgKSB7CiAgICAgICAgICAgIGFkZHJlc3MgdXNlciA9IGdldFVzZXIocmVwcmVzZW50b3JfKTsKICAgICAgICAgICAgdWludDI1NiBjb3N0QW1vdW50ID0gbWFrZU9yZGVyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIGFtb3VudF8sIHVzZXIsIGRlcG9zaXRBbW91bnQpOwoKICAgICAgICAgICAgLy8gbG9nIGV2ZW50OiBNYWtlT3JkZXIKICAgICAgICAgICAgZU1ha2VPcmRlcihmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCB1c2VyLCBhbW91bnRfKTsKCiAgICAgICAgICAgIGlmKGNvc3RBbW91bnQgPCBkZXBvc2l0QW1vdW50KSB7CiAgICAgICAgICAgICAgICB1cGRhdGVCYWxhbmNlKHVzZXIsIGZyb21Ub2tlbl8sIHNhZmVTdWIoZGVwb3NpdEFtb3VudCwgY29zdEFtb3VudCksIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgaWYoY29zdEFtb3VudCA+IGRlcG9zaXRBbW91bnQpIHsKICAgICAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2UodXNlciwgZnJvbVRva2VuXywgc2FmZVN1Yihjb3N0QW1vdW50LCBkZXBvc2l0QW1vdW50KSwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KKi8KICAgIGZ1bmN0aW9uIHVzZXJUYWtlT3JkZXIoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgdWludDI1NiBhbW91bnRfLAogICAgICAgIGFkZHJlc3MgcmVwcmVzZW50b3JfCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgICAgIG9ubHlBY3RpdmUKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIC8vIGNoZWNrQmFsYW5jZSA9PiBmaW5kQW5kVHJhZGUgPT4gdXNlck1ha2VPcmRlciA9PiB1cGRhdGVCYWxhbmNlCiAgICAgICAgYWRkcmVzcyB1c2VyID0gZ2V0VXNlcihyZXByZXNlbnRvcl8pOwogICAgICAgIHVpbnQyNTYgZGVwb3NpdEFtb3VudCA9IGRlcG9zaXRBbmRGcmVlemUoZnJvbVRva2VuXywgdXNlcik7CiAgICAgICAgaWYoCiAgICAgICAgICAgIGNoZWNrQW1vdW50KGZyb21Ub2tlbl8sIGFtb3VudF8pICYmCiAgICAgICAgICAgIGNoZWNrUHJpY2VBbW91bnQocHJpY2VfKSAmJgogICAgICAgICAgICBjaGVja0JhbGFuY2UodXNlciwgZnJvbVRva2VuXywgYW1vdW50XywgZGVwb3NpdEFtb3VudCkKICAgICAgICApIHsKICAgICAgICAgICAgLy8gbG9nIGV2ZW50OiBNYWtlT3JkZXIKICAgICAgICAgICAgZW1pdCBlTWFrZU9yZGVyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXIsIGFtb3VudF8pOwoKICAgICAgICAgICAgdWludDI1NlsyXSBtZW1vcnkgZmlsbEFtb3VudDsKICAgICAgICAgICAgdWludDI1NlsyXSBtZW1vcnkgcHJvZml0OwogICAgICAgICAgICAoZmlsbEFtb3VudCwgcHJvZml0KSA9IGZpbmRBbmRUcmFkZShmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCBhbW91bnRfKTsKICAgICAgICAgICAgdWludDI1NiBmZWU7CiAgICAgICAgICAgIHVpbnQyNTYgdG9BbW91bnQ7CiAgICAgICAgICAgIHVpbnQyNTYgb3JkZXJBbW91bnQ7CgogICAgICAgICAgICBpZihmaWxsQW1vdW50WzBdID4gMCkgewogICAgICAgICAgICAgICAgLy8gbG9nIGV2ZW50OiBtYWtlVHJhZGUKICAgICAgICAgICAgICAgIGVtaXQgZUZpbGxPcmRlcihmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCB1c2VyLCBmaWxsQW1vdW50WzBdKTsKCiAgICAgICAgICAgICAgICB0b0Ftb3VudCA9IHNhZmVEaXYoc2FmZU11bChmaWxsQW1vdW50WzBdLCBwcmljZV8pLCAxIGV0aGVyKTsKICAgICAgICAgICAgICAgIGlmKGFtb3VudF8gPiBmaWxsQW1vdW50WzBdKSB7CiAgICAgICAgICAgICAgICAgICAgb3JkZXJBbW91bnQgPSBzYWZlU3ViKGFtb3VudF8sIGZpbGxBbW91bnRbMF0pOwogICAgICAgICAgICAgICAgICAgIG1ha2VPcmRlcihmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCBhbW91bnRfLCB1c2VyLCBkZXBvc2l0QW1vdW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKHRvQW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgICAgICh0b0Ftb3VudCwgZmVlKSA9IGNhY3VsYXRlRmVlKHVzZXIsIHRvQW1vdW50LCAxKTsKICAgICAgICAgICAgICAgICAgICBwcm9maXRbMV0gPSBwcm9maXRbMV0gKyBmZWU7CgogICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgcHJvZml0CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmFsYW5jZShiYW5rLCBmcm9tVG9rZW5fLCBwcm9maXRbMF0sIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2UoYmFuaywgdG9Ub2tlbl8sIHByb2ZpdFsxXSwgdHJ1ZSk7CgogICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRvIFRha2VyCiAgICAgICAgICAgICAgICAgICAgaWYobWFudWFsV2l0aGRyYXdbdXNlcl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmFsYW5jZSh1c2VyLCB0b1Rva2VuXywgdG9BbW91bnQsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyVG9rZW4odXNlciwgdG9Ub2tlbl8sIHRvQW1vdW50KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBvcmRlckFtb3VudCA9IGFtb3VudF87CiAgICAgICAgICAgICAgICBtYWtlT3JkZXIoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgb3JkZXJBbW91bnQsIHVzZXIsIGRlcG9zaXRBbW91bnQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyB1cGRhdGUgYmFsYW5jZQogICAgICAgICAgICBpZihhbW91bnRfID4gZGVwb3NpdEFtb3VudCkgewogICAgICAgICAgICAgICAgdXBkYXRlQmFsYW5jZSh1c2VyLCBmcm9tVG9rZW5fLCBzYWZlU3ViKGFtb3VudF8sIGRlcG9zaXRBbW91bnQpLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZihhbW91bnRfIDwgZGVwb3NpdEFtb3VudCkgewogICAgICAgICAgICAgICAgdXBkYXRlQmFsYW5jZSh1c2VyLCBmcm9tVG9rZW5fLCBzYWZlU3ViKGRlcG9zaXRBbW91bnQsIGFtb3VudF8pLCB0cnVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHVzZXJDYW5jZWxPcmRlcigKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXywKICAgICAgICB1aW50MjU2IHByaWNlXywKICAgICAgICB1aW50MjU2IGFtb3VudF8sCiAgICAgICAgYWRkcmVzcyByZXByZXNlbnRvcl8KICAgICkKICAgICAgICBwdWJsaWMKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIC8vIHVwZGF0ZU9yZGVyQW1vdW50ID0+IGRpc2Nvbm5lY3RPcmRlclVzZXIgPT4gd2l0aGRyYXcKICAgICAgICBhZGRyZXNzIHVzZXIgPSBnZXRVc2VyKHJlcHJlc2VudG9yXyk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBnZXRPcmRlckFtb3VudChmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCB1c2VyKTsKICAgICAgICBhbW91bnQgPSBhbW91bnQgPiBhbW91bnRfID8gYW1vdW50XyA6IGFtb3VudDsKICAgICAgICBpZihhbW91bnQgPiAwKSB7CiAgICAgICAgICAgIC8vIGxvZyBldmVudDogQ2FuY2VsT3JkZXIKICAgICAgICAgICAgZW1pdCBlQ2FuY2VsT3JkZXIoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgdXNlciwgYW1vdW50KTsKCiAgICAgICAgICAgIHVwZGF0ZU9yZGVyQW1vdW50KGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXIsIGFtb3VudCwgZmFsc2UpOwogICAgICAgICAgICBpZihnZXRPcmRlckFtb3VudChmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCB1c2VyKSA9PSAwKSB7CiAgICAgICAgICAgICAgICBkaXNjb25uZWN0T3JkZXJVc2VyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKG1hbnVhbFdpdGhkcmF3W3VzZXJdKSB7CiAgICAgICAgICAgICAgICB1cGRhdGVCYWxhbmNlKHVzZXIsIGZyb21Ub2tlbl8sIGFtb3VudCwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0cmFuc2ZlclRva2VuKHVzZXIsIGZyb21Ub2tlbl8sIGFtb3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qIHJvbGUgLSAwOiBtYWtlciAxOiB0YWtlciAqLwogICAgZnVuY3Rpb24gY2FjdWxhdGVGZWUoCiAgICAgICAgYWRkcmVzcyB1c2VyXywKICAgICAgICB1aW50MjU2IGFtb3VudF8sCiAgICAgICAgdWludDggcm9sZV8KICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICByZXR1cm5zKHVpbnQyNTYsIHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IG15WFBBQmFsYW5jZSA9IFRva2VuKFhQQVRva2VuKS5iYWxhbmNlT2YodXNlcl8pOwogICAgICAgIHVpbnQyNTYgbXlGZWVyYXRlID0gbWFudWFsV2l0aGRyYXdbdXNlcl9dCiAgICAgICAgICAgID8gZmVlcmF0ZVtyb2xlX10KICAgICAgICAgICAgOiBmZWVyYXRlW3JvbGVfXSArIGZlZXJhdGVbMl07CiAgICAgICAgbXlGZWVyYXRlID0KICAgICAgICAgICAgbXlYUEFCYWxhbmNlID4gMTAwMDAwMCBldGhlciA/IG15RmVlcmF0ZSAqIDAuNSBldGhlciAvIDEgZXRoZXIgOgogICAgICAgICAgICBteVhQQUJhbGFuY2UgPiAxMDAwMDAgZXRoZXIgPyBteUZlZXJhdGUgKiAwLjYgZXRoZXIgLyAxIGV0aGVyIDoKICAgICAgICAgICAgbXlYUEFCYWxhbmNlID4gMTAwMDAgZXRoZXIgPyBteUZlZXJhdGUgKiAwLjggZXRoZXIgLyAxIGV0aGVyIDoKICAgICAgICAgICAgbXlGZWVyYXRlOwogICAgICAgIHVpbnQyNTYgZmVlID0gc2FmZURpdihzYWZlTXVsKGFtb3VudF8sIG15RmVlcmF0ZSksIDEgZXRoZXIpOwogICAgICAgIHVpbnQyNTYgdG9BbW91bnQgPSBzYWZlU3ViKGFtb3VudF8sIGZlZSk7CiAgICAgICAgcmV0dXJuKHRvQW1vdW50LCBmZWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYWRlKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUFjdGl2ZQogICAgewogICAgICAgIC8vIERvbid0IHdvcnJ5LCB0aGlzIHRha2VzIG1ha2VyIGZlZXJhdGUKICAgICAgICB1aW50MjU2IHRha2VyUHJpY2UgPSBnZXROZXh0T3JkZXJQcmljZShmcm9tVG9rZW5fLCB0b1Rva2VuXywgMCk7CiAgICAgICAgYWRkcmVzcyB0YWtlciA9IGdldE5leHRPcmRlclVzZXIoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHRha2VyUHJpY2UsIDApOwogICAgICAgIHVpbnQyNTYgdGFrZXJBbW91bnQgPSBnZXRPcmRlckFtb3VudChmcm9tVG9rZW5fLCB0b1Rva2VuXywgdGFrZXJQcmljZSwgdGFrZXIpOwogICAgICAgIC8qCiAgICAgICAgICAgIGZpbGxBbW91bnRbMF0gPSBUYWtlckZpbGwKICAgICAgICAgICAgZmlsbEFtb3VudFsxXSA9IE1ha2VyRmlsbAogICAgICAgICAgICBwcm9maXRbMF0gPSBmcm9tVG9rZW5Qcm9maXQKICAgICAgICAgICAgcHJvZml0WzFdID0gdG9Ub2tlblByb2ZpdAogICAgICAgICAqLwogICAgICAgIHVpbnQyNTZbMl0gbWVtb3J5IGZpbGxBbW91bnQ7CiAgICAgICAgdWludDI1NlsyXSBtZW1vcnkgcHJvZml0OwogICAgICAgIChmaWxsQW1vdW50LCBwcm9maXQpID0gZmluZEFuZFRyYWRlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCB0YWtlclByaWNlLCB0YWtlckFtb3VudCk7CiAgICAgICAgaWYoZmlsbEFtb3VudFswXSA+IDApIHsKICAgICAgICAgICAgcHJvZml0WzFdID0gcHJvZml0WzFdICsgZmlsbE9yZGVyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCB0YWtlclByaWNlLCB0YWtlciwgZmlsbEFtb3VudFswXSk7CgogICAgICAgICAgICAvLyBzYXZlIHByb2ZpdCB0byBvcGVyYXRvcgogICAgICAgICAgICB1cGRhdGVCYWxhbmNlKG1zZy5zZW5kZXIsIGZyb21Ub2tlbl8sIHByb2ZpdFswXSwgdHJ1ZSk7CiAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2UobXNnLnNlbmRlciwgdG9Ub2tlbl8sIHByb2ZpdFsxXSwgdHJ1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1hbnVhbFdpdGhkcmF3KAogICAgICAgIGJvb2wgbWFudWFsXwogICAgKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIG1hbnVhbFdpdGhkcmF3W21zZy5zZW5kZXJdID0gbWFudWFsXzsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcmljZSgKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXwogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgIHJldHVybnModWludDI1NikgewogICAgICAgIGlmKHVpbnQyNTYoZnJvbVRva2VuXykgPj0gdWludDI1Nih0b1Rva2VuXykpIHsKICAgICAgICAgICAgcmV0dXJuIHByaWNlQm9va3NbZnJvbVRva2VuX11bdG9Ub2tlbl9dOyAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBwcmljZUJvb2tzW3RvVG9rZW5fXVtmcm9tVG9rZW5fXSA+IDAgPyBzYWZlRGl2KDEwICoqIDM2LCBwcmljZUJvb2tzW3RvVG9rZW5fXVtmcm9tVG9rZW5fXSkgOiAwOwogICAgICAgIH0KICAgIH0KCiAgICAvKiBJbnRlcm5hbCBGdW5jdGlvbiAqLwogICAgLy8gZGVwb3NpdCBhbGwgYWxsb3dhbmNlCiAgICBmdW5jdGlvbiBkZXBvc2l0QW5kRnJlZXplKAogICAgICAgIGFkZHJlc3MgdG9rZW5fLAogICAgICAgIGFkZHJlc3MgdXNlcgogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGFtb3VudDsKICAgICAgICBpZih0b2tlbl8gPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICAvLyBsb2cgZXZlbnQ6IERlcG9zaXQKICAgICAgICAgICAgZW1pdCBlRGVwb3NpdCh1c2VyLCBhZGRyZXNzKDApLCBtc2cudmFsdWUpOwoKICAgICAgICAgICAgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgICAgICByZXR1cm4gYW1vdW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgICAgIC8vIGxvZyBldmVudDogRGVwb3NpdAogICAgICAgICAgICAgICAgZW1pdCBlRGVwb3NpdCh1c2VyLCBhZGRyZXNzKDApLCBtc2cudmFsdWUpOwoKICAgICAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2UodXNlciwgYWRkcmVzcygwKSwgbXNnLnZhbHVlLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhbW91bnQgPSBUb2tlbih0b2tlbl8pLmFsbG93YW5jZShtc2cuc2VuZGVyLCB0aGlzKTsKICAgICAgICAgICAgaWYoCiAgICAgICAgICAgICAgICBhbW91bnQgPiAwICYmCiAgICAgICAgICAgICAgICBUb2tlbih0b2tlbl8pLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpCiAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgLy8gbG9nIGV2ZW50OiBEZXBvc2l0CiAgICAgICAgICAgICAgICBlbWl0IGVEZXBvc2l0KHVzZXIsIHRva2VuXywgYW1vdW50KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gYW1vdW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrQmFsYW5jZSgKICAgICAgICBhZGRyZXNzIHVzZXJfLAogICAgICAgIGFkZHJlc3MgdG9rZW5fLAogICAgICAgIHVpbnQyNTYgYW1vdW50XywKICAgICAgICB1aW50MjU2IGRlcG9zaXRBbW91bnRfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKHNhZmVBZGQoYmFsYW5jZXNbdXNlcl9dW3Rva2VuX10sIGRlcG9zaXRBbW91bnRfKSA+PSBhbW91bnRfKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVtaXQgRXJyb3IoMCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tBbW91bnQoCiAgICAgICAgYWRkcmVzcyB0b2tlbl8sCiAgICAgICAgdWludDI1NiBhbW91bnRfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQyNTYgbWluID0gZ2V0TWluQW1vdW50KHRva2VuXyk7CiAgICAgICAgaWYoYW1vdW50XyA+IG1heEFtb3VudCB8fCBhbW91bnRfIDwgbWluKSB7CiAgICAgICAgICAgIGVtaXQgRXJyb3IoMik7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tQcmljZUFtb3VudCgKICAgICAgICB1aW50MjU2IHByaWNlXwogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZihwcmljZV8gPT0gMCB8fCBwcmljZV8gPiBtYXhQcmljZSkgewogICAgICAgICAgICBlbWl0IEVycm9yKDMpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VPcmRlcigKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXywKICAgICAgICB1aW50MjU2IHByaWNlXywKICAgICAgICB1aW50MjU2IGFtb3VudF8sCiAgICAgICAgYWRkcmVzcyB1c2VyXywKICAgICAgICB1aW50MjU2IGRlcG9zaXRBbW91bnRfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHJldHVybnModWludDI1NikgewogICAgICAgIGlmKGNoZWNrQmFsYW5jZSh1c2VyXywgZnJvbVRva2VuXywgYW1vdW50XywgZGVwb3NpdEFtb3VudF8pKSB7CiAgICAgICAgICAgIHVwZGF0ZU9yZGVyQW1vdW50KGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXJfLCBhbW91bnRfLCB0cnVlKTsKICAgICAgICAgICAgY29ubmVjdE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgMCk7CiAgICAgICAgICAgIGNvbm5lY3RPcmRlclVzZXIoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgdXNlcl8pOwogICAgICAgICAgICByZXR1cm4gYW1vdW50XzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZmluZEFuZFRyYWRlKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIHVpbnQyNTYgYW1vdW50XwogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKHVpbnQyNTZbMl0sIHVpbnQyNTZbMl0pIHsKICAgICAgICAvKgogICAgICAgICAgICB0b3RhbE1hdGNoQW1vdW50WzBdOiBUYWtlciB0b3RhbCBtYXRjaCBhbW91bnQKICAgICAgICAgICAgdG90YWxNYXRjaEFtb3VudFsxXTogTWFrZXIgdG90YWwgbWF0Y2ggYW1vdW50CiAgICAgICAgICAgIHByb2ZpdFswXTogZnJvbVRva2VuIHByb2ZpdAogICAgICAgICAgICBwcm9maXRbMV06IHRvVG9rZW4gcHJvZml0CiAgICAgICAgICAgIG1hdGNoQW1vdW50WzBdOiBUYWtlciBtYXRjaCBhbW91bnQKICAgICAgICAgICAgbWF0Y2hBbW91bnRbMV06IE1ha2VyIG1hdGNoIGFtb3VudAogICAgICAgICAqLwogICAgICAgIHVpbnQyNTZbMl0gbWVtb3J5IHRvdGFsTWF0Y2hBbW91bnQ7CiAgICAgICAgdWludDI1NlsyXSBtZW1vcnkgcHJvZml0OwogICAgICAgIHVpbnQyNTZbM10gbWVtb3J5IG1hdGNoQW1vdW50OwogICAgICAgIHVpbnQyNTYgdG9BbW91bnQ7CiAgICAgICAgdWludDI1NiByZW1haW5pbmcgPSBhbW91bnRfOwogICAgICAgIHVpbnQyNTYgbWF0Y2hlcyA9IDA7CiAgICAgICAgdWludDI1NiBwcmV2QmVzdFByaWNlID0gMDsKICAgICAgICB1aW50MjU2IGJlc3RQcmljZSA9IGdldE5leHRPcmRlclByaWNlKHRvVG9rZW5fLCBmcm9tVG9rZW5fLCBwcmV2QmVzdFByaWNlKTsKICAgICAgICBmb3IoOyBtYXRjaGVzIDwgYXV0b01hdGNoICYmIHJlbWFpbmluZyA+IDA7KSB7CiAgICAgICAgICAgIG1hdGNoQW1vdW50ID0gbWFrZVRyYWRlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIGJlc3RQcmljZSwgcmVtYWluaW5nKTsKICAgICAgICAgICAgaWYobWF0Y2hBbW91bnRbMF0gPiAwKSB7CiAgICAgICAgICAgICAgICByZW1haW5pbmcgPSBzYWZlU3ViKHJlbWFpbmluZywgbWF0Y2hBbW91bnRbMF0pOwogICAgICAgICAgICAgICAgdG90YWxNYXRjaEFtb3VudFswXSA9IHNhZmVBZGQodG90YWxNYXRjaEFtb3VudFswXSwgbWF0Y2hBbW91bnRbMF0pOwogICAgICAgICAgICAgICAgdG90YWxNYXRjaEFtb3VudFsxXSA9IHNhZmVBZGQodG90YWxNYXRjaEFtb3VudFsxXSwgbWF0Y2hBbW91bnRbMV0pOwogICAgICAgICAgICAgICAgcHJvZml0WzBdID0gc2FmZUFkZChwcm9maXRbMF0sIG1hdGNoQW1vdW50WzJdKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gZm9yIG5leHQgbG9vcAogICAgICAgICAgICAgICAgbWF0Y2hlcysrOwogICAgICAgICAgICAgICAgcHJldkJlc3RQcmljZSA9IGJlc3RQcmljZTsKICAgICAgICAgICAgICAgIGJlc3RQcmljZSA9IGdldE5leHRPcmRlclByaWNlKHRvVG9rZW5fLCBmcm9tVG9rZW5fLCBwcmV2QmVzdFByaWNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZih0b3RhbE1hdGNoQW1vdW50WzBdID4gMCkgewogICAgICAgICAgICAvLyBsb2cgcHJpY2UKICAgICAgICAgICAgbG9nUHJpY2UodG9Ub2tlbl8sIGZyb21Ub2tlbl8sIHByZXZCZXN0UHJpY2UpOwoKICAgICAgICAgICAgLy8gY2FsY3VsYXRpbmcgc3ByZWFkIHByb2ZpdAogICAgICAgICAgICB0b0Ftb3VudCA9IHNhZmVEaXYoc2FmZU11bCh0b3RhbE1hdGNoQW1vdW50WzBdLCBwcmljZV8pLCAxIGV0aGVyKTsKICAgICAgICAgICAgcHJvZml0WzFdID0gc2FmZVN1Yih0b3RhbE1hdGNoQW1vdW50WzFdLCB0b0Ftb3VudCk7CiAgICAgICAgICAgIGlmKHRvdGFsTWF0Y2hBbW91bnRbMV0gPj0gc2FmZURpdihzYWZlTXVsKGFtb3VudF8sIHByaWNlXyksIDEgZXRoZXIpKSB7CiAgICAgICAgICAgICAgICAvLyBmcm9tUHJvZml0ICs9IGFtb3VudF8gLSB0YWtlckZpbGw7CiAgICAgICAgICAgICAgICBwcm9maXRbMF0gPSBwcm9maXRbMF0gKyBhbW91bnRfIC0gdG90YWxNYXRjaEFtb3VudFswXTsKICAgICAgICAgICAgICAgIC8vIGZ1bGxmaWxsIFRha2VyIG9yZGVyCiAgICAgICAgICAgICAgICB0b3RhbE1hdGNoQW1vdW50WzBdID0gYW1vdW50XzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRvQW1vdW50ID0gdG90YWxNYXRjaEFtb3VudFsxXTsKICAgICAgICAgICAgICAgIC8vIGZyb21Qcm9maXQgKz0gdGFrZXJGaWxsIC0gKHRvQW1vdW50IC8gcHJpY2VfICogMSBldGhlcikKICAgICAgICAgICAgICAgIHByb2ZpdFswXSA9IHByb2ZpdFswXSArIHRvdGFsTWF0Y2hBbW91bnRbMF0gLSAodG9BbW91bnQgKiAxIGV0aGVyIC9wcmljZV8pOwogICAgICAgICAgICAgICAgLy8gKHJlYWwpIHRha2VyRmlsbCA9IHRvQW1vdW50IC8gcHJpY2VfICogMSBldGhlcgogICAgICAgICAgICAgICAgdG90YWxNYXRjaEFtb3VudFswXSA9IHNhZmVEaXYoc2FmZU11bCh0b0Ftb3VudCwgMSBldGhlciksIHByaWNlXyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAodG90YWxNYXRjaEFtb3VudCwgcHJvZml0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlVHJhZGUoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgdWludDI1NiBiZXN0UHJpY2VfLAogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nXwogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKHVpbnQyNTZbM10pIHsKICAgICAgICBpZihjaGVja1ByaWNlUGFpcihwcmljZV8sIGJlc3RQcmljZV8pKSB7CiAgICAgICAgICAgIGFkZHJlc3MgcHJldk1ha2VyID0gYWRkcmVzcygwKTsKICAgICAgICAgICAgYWRkcmVzcyBtYWtlciA9IGdldE5leHRPcmRlclVzZXIodG9Ub2tlbl8sIGZyb21Ub2tlbl8sIGJlc3RQcmljZV8sIDApOwogICAgICAgICAgICB1aW50MjU2IHJlbWFpbmluZyA9IHJlbWFpbmluZ187CgogICAgICAgICAgICAvKgogICAgICAgICAgICAgICAgdG90YWxGaWxsWzBdOiBUb3RhbCBUYWtlciBmaWxsQW1vdW50CiAgICAgICAgICAgICAgICB0b3RhbEZpbGxbMV06IFRvdGFsIE1ha2VyIGZpbGxBbW91bnQKICAgICAgICAgICAgICAgIHRvdGFsRmlsbFsyXTogVG90YWwgTWFrZXIgZmVlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB1aW50MjU2WzNdIG1lbW9yeSB0b3RhbEZpbGw7CiAgICAgICAgICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgYXV0b01hdGNoICYmIHJlbWFpbmluZyA+IDAgJiYgbWFrZXIgIT0gYWRkcmVzcygwKTsgaSsrKSB7CiAgICAgICAgICAgICAgICB1aW50MjU2WzNdIG1lbW9yeSBmaWxsOwogICAgICAgICAgICAgICAgYm9vbCBmdWxsZmlsbDsKICAgICAgICAgICAgICAgIChmaWxsLCBmdWxsZmlsbCkgPSBtYWtlVHJhZGVEZXRhaWwoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgYmVzdFByaWNlXywgbWFrZXIsIHJlbWFpbmluZyk7CiAgICAgICAgICAgICAgICBpZihmaWxsWzBdID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmKGZ1bGxmaWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3RPcmRlclVzZXIodG9Ub2tlbl8sIGZyb21Ub2tlbl8sIGJlc3RQcmljZV8sIG1ha2VyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nID0gc2FmZVN1YihyZW1haW5pbmcsIGZpbGxbMF0pOwogICAgICAgICAgICAgICAgICAgIHRvdGFsRmlsbFswXSA9IHNhZmVBZGQodG90YWxGaWxsWzBdLCBmaWxsWzBdKTsKICAgICAgICAgICAgICAgICAgICB0b3RhbEZpbGxbMV0gPSBzYWZlQWRkKHRvdGFsRmlsbFsxXSwgZmlsbFsxXSk7CiAgICAgICAgICAgICAgICAgICAgdG90YWxGaWxsWzJdID0gc2FmZUFkZCh0b3RhbEZpbGxbMl0sIGZpbGxbMl0pOwogICAgICAgICAgICAgICAgICAgIHByZXZNYWtlciA9IG1ha2VyOwogICAgICAgICAgICAgICAgICAgIG1ha2VyID0gZ2V0TmV4dE9yZGVyVXNlcih0b1Rva2VuXywgZnJvbVRva2VuXywgYmVzdFByaWNlXywgcHJldk1ha2VyKTsKICAgICAgICAgICAgICAgICAgICBpZihtYWtlciA9PSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRvdGFsRmlsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlVHJhZGVEZXRhaWwoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgdWludDI1NiBiZXN0UHJpY2VfLAogICAgICAgIGFkZHJlc3MgbWFrZXJfLAogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nXwogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKHVpbnQyNTZbM10sIGJvb2wpIHsKICAgICAgICAvKgogICAgICAgICAgICBmaWxsQW1vdW50WzBdOiBUYWtlciBmaWxsQW1vdW50CiAgICAgICAgICAgIGZpbGxBbW91bnRbMV06IE1ha2VyIGZpbGxBbW91bnQKICAgICAgICAgICAgZmlsbEFtb3VudFsyXTogTWFrZXIgZmVlCiAgICAgICAgICovCiAgICAgICAgdWludDI1NlszXSBtZW1vcnkgZmlsbEFtb3VudDsKICAgICAgICB1aW50MjU2IHRha2VyUHJvdmlkZSA9IHJlbWFpbmluZ187CiAgICAgICAgdWludDI1NiB0YWtlclJlcXVpcmUgPSBzYWZlRGl2KHNhZmVNdWwodGFrZXJQcm92aWRlLCBwcmljZV8pLCAxIGV0aGVyKTsKICAgICAgICB1aW50MjU2IG1ha2VyUHJvdmlkZSA9IGdldE9yZGVyQW1vdW50KHRvVG9rZW5fLCBmcm9tVG9rZW5fLCBiZXN0UHJpY2VfLCBtYWtlcl8pOwogICAgICAgIHVpbnQyNTYgbWFrZXJSZXF1aXJlID0gc2FmZURpdihzYWZlTXVsKG1ha2VyUHJvdmlkZSwgYmVzdFByaWNlXyksIDEgZXRoZXIpOwogICAgICAgIGZpbGxBbW91bnRbMF0gPSBjYWN1bGF0ZUZpbGwodGFrZXJQcm92aWRlLCB0YWtlclJlcXVpcmUsIHByaWNlXywgbWFrZXJQcm92aWRlKTsKICAgICAgICBmaWxsQW1vdW50WzFdID0gY2FjdWxhdGVGaWxsKG1ha2VyUHJvdmlkZSwgbWFrZXJSZXF1aXJlLCBiZXN0UHJpY2VfLCB0YWtlclByb3ZpZGUpOwogICAgICAgIGZpbGxBbW91bnRbMl0gPSBmaWxsT3JkZXIodG9Ub2tlbl8sIGZyb21Ub2tlbl8sIGJlc3RQcmljZV8sIG1ha2VyXywgZmlsbEFtb3VudFsxXSk7CiAgICAgICAgcmV0dXJuIChmaWxsQW1vdW50LCAobWFrZXJSZXF1aXJlIDw9IHRha2VyUHJvdmlkZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhY3VsYXRlRmlsbCgKICAgICAgICB1aW50MjU2IHByb3ZpZGVfLAogICAgICAgIHVpbnQyNTYgcmVxdWlyZV8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgdWludDI1NiBwYWlyUHJvdmlkZV8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHB1cmUKICAgIHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiByZXF1aXJlXyA+IHBhaXJQcm92aWRlXyA/IHNhZmVEaXYoc2FmZU11bChwYWlyUHJvdmlkZV8sIDEgZXRoZXIpLCBwcmljZV8pIDogcHJvdmlkZV87CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tQcmljZVBhaXIoCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgdWludDI1NiBiZXN0UHJpY2VfCiAgICApCiAgICAgICAgaW50ZXJuYWwgcHVyZSAKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKGJlc3RQcmljZV8gPCBwcmljZV8pIHsKICAgICAgICAgICAgcmV0dXJuIGNoZWNrUHJpY2VQYWlyKGJlc3RQcmljZV8sIHByaWNlXyk7CiAgICAgICAgfSBlbHNlIGlmKGJlc3RQcmljZV8gPCAxIGV0aGVyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZihwcmljZV8gPiAxIGV0aGVyKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcHJpY2VfICogYmVzdFByaWNlXyA8PSAxIGV0aGVyICogMSBldGhlcjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZmlsbE9yZGVyKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIGFkZHJlc3MgdXNlcl8sCiAgICAgICAgdWludDI1NiBhbW91bnRfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHJldHVybnModWludDI1NikgewogICAgICAgIC8vIGxvZyBldmVudDogZmlsbE9yZGVyCiAgICAgICAgZW1pdCBlRmlsbE9yZGVyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXJfLCBhbW91bnRfKTsKCiAgICAgICAgdWludDI1NiB0b0Ftb3VudCA9IHNhZmVEaXYoc2FmZU11bChhbW91bnRfLCBwcmljZV8pLCAxIGV0aGVyKTsKICAgICAgICB1aW50MjU2IGZlZTsKICAgICAgICB1cGRhdGVPcmRlckFtb3VudChmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCB1c2VyXywgYW1vdW50XywgZmFsc2UpOwogICAgICAgICh0b0Ftb3VudCwgZmVlKSA9IGNhY3VsYXRlRmVlKHVzZXJfLCB0b0Ftb3VudCwgMCk7CiAgICAgICAgaWYobWFudWFsV2l0aGRyYXdbdXNlcl9dKSB7CiAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2UodXNlcl8sIHRvVG9rZW5fLCB0b0Ftb3VudCwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdHJhbnNmZXJUb2tlbih1c2VyXywgdG9Ub2tlbl8sIHRvQW1vdW50KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZlZTsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW4oCiAgICAgICAgYWRkcmVzcyB1c2VyXywKICAgICAgICBhZGRyZXNzIHRva2VuXywKICAgICAgICB1aW50MjU2IGFtb3VudF8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgcmV0dXJucyhib29sKSB7CiAgICAgICAgaWYodG9rZW5fID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgaWYoYWRkcmVzcyh0aGlzKS5iYWxhbmNlIDwgYW1vdW50XykgewogICAgICAgICAgICAgICAgZW1pdCBFcnJvcigxKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxvZyBldmVudDogV2l0aGRyYXcKICAgICAgICAgICAgICAgIGVtaXQgZVdpdGhkcmF3KHVzZXJfLCB0b2tlbl8sIGFtb3VudF8pOwoKICAgICAgICAgICAgICAgIHVzZXJfLnRyYW5zZmVyKGFtb3VudF8pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYoVG9rZW4odG9rZW5fKS50cmFuc2Zlcih1c2VyXywgYW1vdW50XykpIHsKICAgICAgICAgICAgLy8gbG9nIGV2ZW50OiBXaXRoZHJhdwogICAgICAgICAgICBlbWl0IGVXaXRoZHJhdyh1c2VyXywgdG9rZW5fLCBhbW91bnRfKTsKCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVtaXQgRXJyb3IoMSk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlQmFsYW5jZSgKICAgICAgICBhZGRyZXNzIHVzZXJfLAogICAgICAgIGFkZHJlc3MgdG9rZW5fLAogICAgICAgIHVpbnQyNTYgYW1vdW50XywKICAgICAgICBib29sIGFkZE9yU3ViXwogICAgKQogICAgICAgIGludGVybmFsCiAgICByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZihhZGRPclN1Yl8pIHsKICAgICAgICAgICAgYmFsYW5jZXNbdXNlcl9dW3Rva2VuX10gPSBzYWZlQWRkKGJhbGFuY2VzW3VzZXJfXVt0b2tlbl9dLCBhbW91bnRfKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZihjaGVja0JhbGFuY2UodXNlcl8sIHRva2VuXywgYW1vdW50XywgMCkpewogICAgICAgICAgICAgICAgYmFsYW5jZXNbdXNlcl9dW3Rva2VuX10gPSBzYWZlU3ViKGJhbGFuY2VzW3VzZXJfXVt0b2tlbl9dLCBhbW91bnRfKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbm5lY3RPcmRlclByaWNlKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIHVpbnQyNTYgcHJldl8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIGlmKGNoZWNrUHJpY2VBbW91bnQocHJpY2VfKSkgewogICAgICAgICAgICB1aW50MjU2IHByZXZQcmljZSA9IGdldE5leHRPcmRlclByaWNlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmV2Xyk7CiAgICAgICAgICAgIHVpbnQyNTYgbmV4dFByaWNlID0gZ2V0TmV4dE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByZXZQcmljZSk7CiAgICAgICAgICAgIGlmKHByZXZfICE9IHByaWNlXyAmJiBwcmV2UHJpY2UgIT0gcHJpY2VfICYmIG5leHRQcmljZSAhPSBwcmljZV8pIHsKICAgICAgICAgICAgICAgIGlmKHByaWNlXyA8IHByZXZQcmljZSkgewogICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5leHRPcmRlclByaWNlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmV2XywgcHJpY2VfKTsKICAgICAgICAgICAgICAgICAgICB1cGRhdGVOZXh0T3JkZXJQcmljZShmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCBwcmV2UHJpY2UpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKG5leHRQcmljZSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTmV4dE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByZXZQcmljZSwgcHJpY2VfKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29ubmVjdE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgcHJldlByaWNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb25uZWN0T3JkZXJVc2VyKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIGFkZHJlc3MgdXNlcl8KICAgICkKICAgICAgICBpbnRlcm5hbCAKICAgIHsKICAgICAgICBhZGRyZXNzIGZpcnN0VXNlciA9IGdldE5leHRPcmRlclVzZXIoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXywgMCk7CiAgICAgICAgaWYodXNlcl8gIT0gYWRkcmVzcygwKSAmJiB1c2VyXyAhPSBmaXJzdFVzZXIpIHsKICAgICAgICAgICAgdXBkYXRlTmV4dE9yZGVyVXNlcihmcm9tVG9rZW5fLCB0b1Rva2VuXywgcHJpY2VfLCAwLCB1c2VyXyk7CiAgICAgICAgICAgIGlmKGZpcnN0VXNlciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgICAgICB1cGRhdGVOZXh0T3JkZXJVc2VyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIHVzZXJfLCBmaXJzdFVzZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRpc2Nvbm5lY3RPcmRlclByaWNlKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHsKICAgICAgICB1aW50MjU2IGN1cnJQcmljZSA9IGdldE5leHRPcmRlclByaWNlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCAwKTsKICAgICAgICB1aW50MjU2IG5leHRQcmljZSA9IGdldE5leHRPcmRlclByaWNlKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBjdXJyUHJpY2UpOwogICAgICAgIGlmKHByaWNlXyA9PSBjdXJyUHJpY2UpIHsKICAgICAgICAgICAgdXBkYXRlTmV4dE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIDAsIG5leHRQcmljZSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRpc2Nvbm5lY3RPcmRlclVzZXIoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgYWRkcmVzcyB1c2VyXwogICAgKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgaWYodXNlcl8gPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGFkZHJlc3MgY3VyclVzZXIgPSBnZXROZXh0T3JkZXJVc2VyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIGFkZHJlc3MoMCkpOwogICAgICAgIGFkZHJlc3MgbmV4dFVzZXIgPSBnZXROZXh0T3JkZXJVc2VyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIGN1cnJVc2VyKTsKICAgICAgICBpZihjdXJyVXNlciA9PSB1c2VyXykgewogICAgICAgICAgICB1cGRhdGVOZXh0T3JkZXJVc2VyKGZyb21Ub2tlbl8sIHRvVG9rZW5fLCBwcmljZV8sIGFkZHJlc3MoMCksIG5leHRVc2VyKTsKICAgICAgICAgICAgaWYobmV4dFVzZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICAgICAgZGlzY29ubmVjdE9yZGVyUHJpY2UoZnJvbVRva2VuXywgdG9Ub2tlbl8sIHByaWNlXyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TmV4dE9yZGVyUHJpY2UoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgIHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBuZXh0T3JkZXJQcmljZVtmcm9tVG9rZW5fXVt0b1Rva2VuX11bcHJpY2VfXTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVOZXh0T3JkZXJQcmljZSgKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXywKICAgICAgICB1aW50MjU2IHByaWNlXywKICAgICAgICB1aW50MjU2IG5leHRQcmljZV8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIG5leHRPcmRlclByaWNlW2Zyb21Ub2tlbl9dW3RvVG9rZW5fXVtwcmljZV9dID0gbmV4dFByaWNlXzsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXROZXh0T3JkZXJVc2VyKAogICAgICAgIGFkZHJlc3MgZnJvbVRva2VuXywKICAgICAgICBhZGRyZXNzIHRvVG9rZW5fLAogICAgICAgIHVpbnQyNTYgcHJpY2VfLAogICAgICAgIGFkZHJlc3MgdXNlcl8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgIHJldHVybnMoYWRkcmVzcykgewogICAgICAgIHJldHVybiBvcmRlckJvb2tzW2Zyb21Ub2tlbl9dW3RvVG9rZW5fXVtwcmljZV9dW3VzZXJfXS5uZXh0VXNlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRPcmRlckFtb3VudCgKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXywKICAgICAgICB1aW50MjU2IHByaWNlXywKICAgICAgICBhZGRyZXNzIHVzZXJfCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICB2aWV3CiAgICByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gb3JkZXJCb29rc1tmcm9tVG9rZW5fXVt0b1Rva2VuX11bcHJpY2VfXVt1c2VyX10uYW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZU5leHRPcmRlclVzZXIoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgYWRkcmVzcyB1c2VyXywKICAgICAgICBhZGRyZXNzIG5leHRVc2VyXwogICAgKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgb3JkZXJCb29rc1tmcm9tVG9rZW5fXVt0b1Rva2VuX11bcHJpY2VfXVt1c2VyX10ubmV4dFVzZXIgPSBuZXh0VXNlcl87CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlT3JkZXJBbW91bnQoCiAgICAgICAgYWRkcmVzcyBmcm9tVG9rZW5fLAogICAgICAgIGFkZHJlc3MgdG9Ub2tlbl8sCiAgICAgICAgdWludDI1NiBwcmljZV8sCiAgICAgICAgYWRkcmVzcyB1c2VyXywKICAgICAgICB1aW50MjU2IGFtb3VudF8sCiAgICAgICAgYm9vbCBhZGRPclN1Yl8KICAgICkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIGlmKGFkZE9yU3ViXykgewogICAgICAgICAgICBvcmRlckJvb2tzW2Zyb21Ub2tlbl9dW3RvVG9rZW5fXVtwcmljZV9dW3VzZXJfXS5hbW91bnQgPSBzYWZlQWRkKG9yZGVyQm9va3NbZnJvbVRva2VuX11bdG9Ub2tlbl9dW3ByaWNlX11bdXNlcl9dLmFtb3VudCwgYW1vdW50Xyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3JkZXJCb29rc1tmcm9tVG9rZW5fXVt0b1Rva2VuX11bcHJpY2VfXVt1c2VyX10uYW1vdW50ID0gc2FmZVN1YihvcmRlckJvb2tzW2Zyb21Ub2tlbl9dW3RvVG9rZW5fXVtwcmljZV9dW3VzZXJfXS5hbW91bnQsIGFtb3VudF8pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBsb2dQcmljZSgKICAgICAgICBhZGRyZXNzIGZyb21Ub2tlbl8sCiAgICAgICAgYWRkcmVzcyB0b1Rva2VuXywKICAgICAgICB1aW50MjU2IHByaWNlXwogICAgKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgaWYocHJpY2VfID4gMCkgewogICAgICAgICAgICBpZih1aW50MjU2KGZyb21Ub2tlbl8pID49IHVpbnQyNTYodG9Ub2tlbl8pKSB7CiAgICAgICAgICAgICAgICBwcmljZUJvb2tzW2Zyb21Ub2tlbl9dW3RvVG9rZW5fXSA9IHByaWNlXzsKICAgICAgICAgICAgfSBlbHNlICB7CiAgICAgICAgICAgICAgICBwcmljZUJvb2tzW3RvVG9rZW5fXVtmcm9tVG9rZW5fXSA9IHNhZmVEaXYoMTAgKiogMzYsIHByaWNlXyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0='.
	

]
