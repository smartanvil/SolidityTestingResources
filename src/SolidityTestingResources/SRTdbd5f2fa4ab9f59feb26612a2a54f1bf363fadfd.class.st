Class {
	#name : #SRTdbd5f2fa4ab9f59feb26612a2a54f1bf363fadfd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdbd5f2fa4ab9f59feb26612a2a54f1bf363fadfd >> base64 [
	^ ''.
	

]
