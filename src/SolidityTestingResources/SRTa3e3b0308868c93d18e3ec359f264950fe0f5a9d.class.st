Class {
	#name : #SRTa3e3b0308868c93d18e3ec359f264950fe0f5a9d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa3e3b0308868c93d18e3ec359f264950fe0f5a9d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCB7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIEVSQzIwIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBFUkMyMFRva2VuIGlzIEVSQzIwIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIC8qKgogICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICB1aW50MjU2IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKQogICAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpCiAgICBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzW10gcHVibGljIG93bmVyczsKCiAgZXZlbnQgT3duZXJBZGRlZChhZGRyZXNzIGluZGV4ZWQgYXV0aG9yaXplciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyLCB1aW50MjU2IGluZGV4KTsKCiAgZXZlbnQgT3duZXJSZW1vdmVkKGFkZHJlc3MgaW5kZXhlZCBhdXRob3JpemVyLCBhZGRyZXNzIGluZGV4ZWQgb2xkT3duZXIpOwoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXJzLnB1c2gobXNnLnNlbmRlcik7CiAgICBPd25lckFkZGVkKDB4MCwgbXNnLnNlbmRlciwgMCk7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiBvbmUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgYm9vbCBpc093bmVyID0gZmFsc2U7CgogICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgb3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyc1tpXSkgewogICAgICAgIGlzT3duZXIgPSB0cnVlOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgcmVxdWlyZShpc093bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyBvbmUgb2YgdGhlIGN1cnJlbnQgb3duZXJzIHRvIGFkZCBhIG5ldyBvd25lcgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyBnaXZlIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiBhZGRPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICB1aW50MjU2IGkgPSBvd25lcnMucHVzaChuZXdPd25lcikgLSAxOwogICAgT3duZXJBZGRlZChtc2cuc2VuZGVyLCBuZXdPd25lciwgaSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyBvbmUgb2YgdGhlIG93bmVycyB0byByZW1vdmUgb3RoZXIgb3duZXIKICAgKi8KICBmdW5jdGlvbiByZW1vdmVPd25lcih1aW50MjU2IGluZGV4KSBvbmx5T3duZXIgcHVibGljIHsKICAgIGFkZHJlc3Mgb3duZXIgPSBvd25lcnNbaW5kZXhdOwogICAgb3duZXJzW2luZGV4XSA9IG93bmVyc1tvd25lcnMubGVuZ3RoIC0gMV07CiAgICBkZWxldGUgb3duZXJzW293bmVycy5sZW5ndGggLSAxXTsKICAgIE93bmVyUmVtb3ZlZChtc2cuc2VuZGVyLCBvd25lcik7CiAgfQoKICBmdW5jdGlvbiBvd25lcnNDb3VudCgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gb3duZXJzLmxlbmd0aDsKICB9Cn0KCgpjb250cmFjdCBVcGdyYWRhYmxlU3RvcmFnZSBpcyBPd25hYmxlIHsKCiAgLy8gQWRkcmVzcyBvZiB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbgogIGFkZHJlc3MgaW50ZXJuYWwgX2ltcGxlbWVudGF0aW9uOwoKICBldmVudCBOZXdJbXBsZW1lbnRhdGlvbihhZGRyZXNzIGltcGxlbWVudGF0aW9uKTsKCiAgLyoqCiAgKiBAZGV2IFRlbGxzIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uCiAgKiBAcmV0dXJuIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24KICAqLwogIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9uKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcykgewogICAgcmV0dXJuIF9pbXBsZW1lbnRhdGlvbjsKICB9Cn0KCgovKioKICogQHRpdGxlIFVwZ3JhZGFibGUKICogQGRldiBUaGlzIGNvbnRyYWN0IHJlcHJlc2VudHMgYW4gdXBncmFkYWJsZSBjb250cmFjdAogKi8KY29udHJhY3QgVXBncmFkYWJsZSBpcyBVcGdyYWRhYmxlU3RvcmFnZSB7CiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHB1YmxpYyBwYXlhYmxlIHsgfQp9CgoKLyoqCiAqIEJhc2UgQ29udHJhY3QgKEtOVykKICogVXBncmFkYWJsZSBTdGFuZGFyZCBFQ1IyMCBUb2tlbgogKi8KY29udHJhY3QgQmFzZSBpcyBVcGdyYWRhYmxlLCBFUkMyMFRva2VuIHsKICBmdW5jdGlvbiBuYW1lKCkgcHVyZSBwdWJsaWMgcmV0dXJucyAoc3RyaW5nKSB7CiAgICByZXR1cm4gJ0tub3dsZWRnZS5pbyc7CiAgfQoKICBmdW5jdGlvbiBzeW1ib2woKSBwdXJlIHB1YmxpYyByZXR1cm5zIChzdHJpbmcpIHsKICAgIHJldHVybiAnS05XJzsKICB9CgogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVyZSBwdWJsaWMgcmV0dXJucyAodWludDgpIHsKICAgIHJldHVybiA4OwogIH0KCiAgZnVuY3Rpb24gSU5JVElBTF9TVVBQTFkoKSBwdXJlIHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICAvKiogMTUwLDAwMCwwMDAuMDAwMDAwMDAgS05XIHRva2VucyAqLwogICAgcmV0dXJuIDE1MDAwMDAwMDAwMDAwMDAwOwogIH0KCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gSU5JVElBTF9TVVBQTFkoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEEgdG9rZW4gdXBncmFkZSBtZWNoYW5pc20gd2hlcmUgdXNlcnMgY2FuIHVwZ3JhZGUgdG9rZW5zCiAqIHRvIHRoZSBuZXh0IHNtYXJ0IGNvbnRyYWN0IHJldmlzaW9uLgogKgogKiBGaXJzdCBlbnZpc2lvbmVkIGJ5IEdvbGVtIGFuZCBMdW55ciBwcm9qZWN0cy4KICovCmNvbnRyYWN0IExlZ2FjeSBpcyBCYXNlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLyoqIFRoZSBjb250cmFjdCBmcm9tIHdoaWNoIHdlIHVwZ3JhZGUgKi8KICBMZWdhY3kgcHVibGljIHByZXZDb250cmFjdDsKCiAgLyoqCiAgICogU29tZWJvZHkgaGFzIHVwZ3JhZGVkIHNvbWUgb2YgdGhlaXIgdG9rZW5zLgogICAqLwogIGV2ZW50IFVwZ3JhZGVGcm9tKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAvKioKICAgKiBQcmV2aW91cyBjb250cmFjdCBhdmFpbGFibGUuCiAgICovCiAgZXZlbnQgUHJldkNvbnRyYWN0U2V0KGFkZHJlc3MgY29udHJhY3RBZGRyZXNzKTsKCiAgbW9kaWZpZXIgZnJvbVByZXZDb250cmFjdCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHByZXZDb250cmFjdCkpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHVwZ3JhZGVGcm9tKGFkZHJlc3MgaG9sZGVyLCB1aW50MjU2IHZhbHVlKSBmcm9tUHJldkNvbnRyYWN0IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBiYWxhbmNlc1tob2xkZXJdID0gdmFsdWU7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBob2xkZXIsIHZhbHVlKTsKICAgIFVwZ3JhZGVGcm9tKGFkZHJlc3MocHJldkNvbnRyYWN0KSwgaG9sZGVyLCB2YWx1ZSk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBzZXRQcmV2Q29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShjb250cmFjdEFkZHJlc3MgIT0gMHgwKTsKICAgIHByZXZDb250cmFjdCA9IExlZ2FjeShjb250cmFjdEFkZHJlc3MpOwogICAgUHJldkNvbnRyYWN0U2V0KGNvbnRyYWN0QWRkcmVzcyk7CgogICAgcmV0dXJuIHRydWU7CiAgfQp9CgoKLyoqCiAqIFBheWFibGUgaXMgbWVhbnQgdG8gZXhlY3V0ZSB0aGUgYHRyYW5zZmVyYCBtZXRob2Qgb2YgdGhlIEVSQzIwIFRva2VuCiAqIGFuZCBsb2cgYSBQYXkgbWVzc2FnZSB3aXRoIGEgcmVmZXJlbmNlIG1lc3NhZ2UgdG8gYmluZCB0aGUgcGF5bWVudCB0byBhbgogKiBvcmRlciBpZCBvciBzb21lIG90aGVyIGlkZW50aWZpZXIKICovCmNvbnRyYWN0IFBheWFibGUgaXMgTGVnYWN5IHsKICBzdHJ1Y3QgUGF5bWVudFJlcXVlc3QgewogICAgdWludDI1NiBmZWU7CiAgICB1aW50MjU2IHZhbHVlOwogICAgYWRkcmVzcyBzZWxsZXI7CiAgfQoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcoc3RyaW5nID0+IFBheW1lbnRSZXF1ZXN0KSkgcHJpdmF0ZSBwZW5kaW5nUGF5bWVudHM7CgogIGV2ZW50IFBheSgKICAgIGFkZHJlc3MgaW5kZXhlZCBmcm9tLAogICAgYWRkcmVzcyBpbmRleGVkIHNlbGxlciwKICAgIGFkZHJlc3MgaW5kZXhlZCBzdG9yZSwKICAgIHVpbnQyNTYgdmFsdWUsCiAgICB1aW50MjU2IGZlZSwKICAgIHN0cmluZyByZWYKICApOwoKICBmdW5jdGlvbiByZXF1ZXN0UGF5bWVudCh1aW50MjU2IHZhbHVlLCB1aW50MjU2IGZlZSwgc3RyaW5nIHJlZiwgYWRkcmVzcyB0bykgcHVibGljIHsKICAgIHBlbmRpbmdQYXltZW50c1ttc2cuc2VuZGVyXVtyZWZdID0gUGF5bWVudFJlcXVlc3QoZmVlLCB2YWx1ZSwgdG8pOwogIH0KCiAgZnVuY3Rpb24gY2FuY2VsUGF5bWVudChzdHJpbmcgcmVmKSBwdWJsaWMgewogICAgZGVsZXRlIHBlbmRpbmdQYXltZW50c1ttc2cuc2VuZGVyXVtyZWZdOwogIH0KCiAgZnVuY3Rpb24gcGF5bWVudEluZm8oYWRkcmVzcyBzdG9yZSwgc3RyaW5nIHJlZikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB2YWx1ZSwgdWludDI1NiBmZWUsIGFkZHJlc3Mgc2VsbGVyKSB7CiAgICBQYXltZW50UmVxdWVzdCBtZW1vcnkgcGF5bWVudFJlcXVlc3QgPSBwZW5kaW5nUGF5bWVudHNbc3RvcmVdW3JlZl07CiAgICB2YWx1ZSA9IHBheW1lbnRSZXF1ZXN0LnZhbHVlOwogICAgZmVlID0gcGF5bWVudFJlcXVlc3QuZmVlOwogICAgc2VsbGVyID0gcGF5bWVudFJlcXVlc3Quc2VsbGVyOwogIH0KCiAgZnVuY3Rpb24gcGF5KGFkZHJlc3Mgc3RvcmUsIHN0cmluZyByZWYpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBQYXltZW50UmVxdWVzdCBtZW1vcnkgcGF5bWVudFJlcXVlc3QgPSBwZW5kaW5nUGF5bWVudHNbc3RvcmVdW3JlZl07CgogICAgaWYgKHBheW1lbnRSZXF1ZXN0LmZlZSA+IDApIHsKICAgICAgYXNzZXJ0KHRyYW5zZmVyKHN0b3JlLCBwYXltZW50UmVxdWVzdC5mZWUpKTsKICAgIH0KCiAgICBhc3NlcnQodHJhbnNmZXIocGF5bWVudFJlcXVlc3Quc2VsbGVyLCBwYXltZW50UmVxdWVzdC52YWx1ZSkpOwoKICAgIFBheShtc2cuc2VuZGVyLCBwYXltZW50UmVxdWVzdC5zZWxsZXIsIHN0b3JlLCBwYXltZW50UmVxdWVzdC52YWx1ZSwgcGF5bWVudFJlcXVlc3QuZmVlLCByZWYpOwogICAgZGVsZXRlIHBlbmRpbmdQYXltZW50c1tzdG9yZV1bcmVmXTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0='.
	

]
