Class {
	#name : #SRTc52f9eb08ea08a7172bc9ca17ed6e5043120d1bb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc52f9eb08ea08a7172bc9ca17ed6e5043120d1bb >> base64 [
	^ ''.
	

]
