Class {
	#name : #SRT3a773baa30d09f04da0bd869b142ea5503a31022,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3a773baa30d09f04da0bd869b142ea5503a31022 >> base64 [
	^ ''.
	

]
