Class {
	#name : #SRT0835ecd15DdF08d4786304d71b4672dC5C40F011,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0835ecd15DdF08d4786304d71b4672dC5C40F011 >> base64 [
	^ ''.
	

]
