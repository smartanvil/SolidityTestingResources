Class {
	#name : #SRT46492473755e8df960f8034877f61732d718ce96,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT46492473755e8df960f8034877f61732d718ce96 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQXV0aG9yczogSnVzdGluIEpvbmVzLCBNYXJzaGFsbCBTdG9rZXMKICogUHVibGlzaGVkOiAyMDE3IGJ5IFNwcnV4IExMQwogKi8KCgovKiBDb250cmFjdCBwcm92aWRlcyBmdW5jdGlvbnMgc28gb25seSBjb250cmFjdCBvd25lciBjYW4gZXhlY3V0ZSBhIGZ1bmN0aW9uICovCmNvbnRyYWN0IG93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlIGNvbnRyYWN0IG93bmVyCgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnN0cnVjdG9yIGluaXRpYWxpemVzIHRoZSBjcmVhdG9yIGFzIHRoZSBvd25lciBvbiBpbml0aWFsaXphdGlvbgogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbnMgd2l0aCBvbmx5T3duZXIgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgbm90IHRoZSBjb250cmFjdCBvd25lcgogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsgLy8gdHJhbnNmZXIgY29udHJhY3Qgb3duZXIgdG8gbmV3IG93bmVyCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKCi8qKgogKiBDZW50cmFsbHkgaXNzdWVkIEV0aGVyZXVtIHRva2VuLgogKiAKICoKICogVG9rZW4gc3VwcGx5IGlzIGNyZWF0ZWQgb24gZGVwbG95bWVudCBhbmQgYWxsb2NhdGVkIHRvIGNvbnRyYWN0IG93bmVyIGFuZCB0d28gCiAqIHRpbWUtbG9ja2VkIGFjY2NvdW50cy4gVGhlIGFjY291bnQgZGVhZGxpbmVzIChsb2NrIHRpbWUpIGFyZSBpbiBtaW51dGVzIGZyb20gbm93LgogKiBUaGUgb3duZXIgY2FuIHRoZW4gdHJhbnNmZXIgZnJvbSBpdHMgc3VwcGx5IHRvIGNyb3dkZnVuZCBwYXJ0aWNpcGFudHMuCiAqIFRoZSBvd25lciBjYW4gYnVybiBhbnkgZXhjZXNzaXZlIHRva2Vucy4KICogVGhlIG93bmVyIGNhbiBmcmVlemUgYW5kIHVuZnJlZXplIGFjY291bnRzCiAqCiAqLwoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBvd25lZHsgCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdUb2tlbiAwLjEnOwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0b2tlbiBuYW1lIAogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7ICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0aWNrZXIgc3ltYm9sCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgICAgICAgLy8gYW1vdW50IG9mIGRlY2ltYWwgcGxhY2VzIGluIHRoZSB0b2tlbgogICAgYWRkcmVzcyBwdWJsaWMgdGhlMTIwYWRkcmVzczsgICAgICAgICAgIC8vIHRoZSAxMjAtZGF5LWxvY2tlZCBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyB0aGUzNjVhZGRyZXNzOyAgICAgICAgICAgLy8gdGhlIDM2NS1kYXktbG9ja2VkIGFkZHJlc3MKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lMTIwOyAgICAgICAgICAgICAgICAvLyBkYXlzIGZyb20gY29udHJhY3QgY3JlYXRpb24gaW4gbWludXRlcyB0byBsb2NrIHRoZTEyMGFkZHJlc3MgKDE3MjgwMCBtaW51dGVzID09IDEyMCBkYXlzKQogICAgdWludCBwdWJsaWMgZGVhZGxpbmUzNjU7ICAgICAgICAgICAgICAgIC8vIGRheXMgZnJvbSBjb250cmFjdCBjcmVhdGlvbiBpbiBtaW51dGVzIHRvIGxvY2sgdGhlMzY1YWRkcmVzcyAoNTI1NjAwIG1pbnV0ZXMgPT0gMzY1IGRheXMpCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsgICAgICAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIHRva2VucyB0aGF0IGV4aXN0IChlLmcuIG5vdCBidXJuZWQpCiAgICAKICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwogICAgCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZnJvemVuIGFjY291bnRzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwoKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICAKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggZW50aXJlIHN1cHBseSBvZiB0b2tlbnMgYXNzaWduZWQgdG8gb3VyIGRpc3RybyBhY2NvdW50cyAqLwogICAgZnVuY3Rpb24gU3RhbmRhcmRUb2tlbigKCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwgICAKICAgICAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sLAogICAgICAgIAogICAgICAgIHVpbnQyNTYgZGlzdHJvMSwgICAgICAgICAgICAvLyB0aGUgaW5pdGlhbCBjcm93ZGZ1bmQgZGlzdHJvIGFtb3VudAogICAgICAgIHVpbnQyNTYgZGlzdHJvMTIwLCAgICAgICAgICAvLyB0aGUgMTIwIGRheSBkaXN0cm8gYW1vdW50CiAgICAgICAgdWludDI1NiBkaXN0cm8zNjUsICAgICAgICAgIC8vIHRoZSAzNjUgZGF5IGRpc3RybyBhbW91bnQKICAgICAgICBhZGRyZXNzIGFkZHJlc3MxMjAsICAgICAgICAgLy8gdGhlIDEyMCBkYXkgYWRkcmVzcyAKICAgICAgICBhZGRyZXNzIGFkZHJlc3MzNjUsICAgICAgICAgLy8gdGhlIDM2NSBkYXkgYWRkcmVzcwogICAgICAgIHVpbnQgZHVyYXRpb25Jbk1pbnV0ZXMxMjAsICAvLyBhbW91bnQgb2YgbWludXRlcyB0byBsb2NrIGFkZHJlc3MxMjAKICAgICAgICB1aW50IGR1cmF0aW9uSW5NaW51dGVzMzY1ICAgLy8gYW1vdW50IG9mIG1pbnV0ZXMgdG8gbG9jayBhZGRyZXNzMzY1CiAgICAgICAgCiAgICAgICAgKSB7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gZGlzdHJvMTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgb3duZXIgdG9rZW5zIGZvciBpbml0aWFsIGNyb3dkZnVuZCBkaXN0cm8KICAgICAgICBiYWxhbmNlT2ZbYWRkcmVzczEyMF0gPSBkaXN0cm8xMjA7ICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgMTIwIGRheSBhZGRyZXNzIGJhbGFuY2UgKHRvIGJlIGxvY2tlZCkKICAgICAgICBiYWxhbmNlT2ZbYWRkcmVzczM2NV0gPSBkaXN0cm8zNjU7ICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgMzY1IGRheSBhZGRyZXNzIGJhbGFuY2UgKHRvIGJlIGxvY2tlZCkKICAgICAgICBmcmVlemVBY2NvdW50KGFkZHJlc3MxMjAsIHRydWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGcmVlemUgdGhlIDEyMCBkYXkgYWRkcmVzcyBvbiBjcmVhdGlvbgogICAgICAgIGZyZWV6ZUFjY291bnQoYWRkcmVzczM2NSwgdHJ1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZyZWV6ZSB0aGUgMTIwIGRheSBhZGRyZXNzIG9uIGNyZWF0aW9uCiAgICAgICAgdG90YWxTdXBwbHkgPSBkaXN0cm8xK2Rpc3RybzEyMCtkaXN0cm8zNjU7ICAgICAgICAgICAgICAgLy8gVG90YWwgc3VwcGx5IGlzIHN1bSBvZiB0b2tlbnMgYXNzaWduZWQgdG8gZGlzdHJvIGFjY291bnRzCiAgICAgICAgZGVhZGxpbmUxMjAgPSBub3cgKyBkdXJhdGlvbkluTWludXRlczEyMCAqIDEgbWludXRlczsgICAgLy8gU2V0IHRoZSAxMjAgZGF5IGRlYWRsaW5lCiAgICAgICAgZGVhZGxpbmUzNjUgPSBub3cgKyBkdXJhdGlvbkluTWludXRlczM2NSAqIDEgbWludXRlczsgICAgLy8gU2V0IHRoZSAzNjUgZGF5IGRlYWRsaW5lCiAgICAgICAgdGhlMTIwYWRkcmVzcyA9IGFkZHJlc3MxMjA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIDEyMCBhY2Nlc3MKICAgICAgICB0aGUzNjVhZGRyZXNzID0gYWRkcmVzczM2NTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHB1YmxpY2x5IGFjY2Vzc2libGUgMzY1IGFjY2VzcwogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgLyogU2VuZCB0b2tlbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICBpZiAoX3ZhbHVlID09IDApIHJldHVybiBmYWxzZTsgCQkJCSAgICAgICAgICAgICAvLyBEb24ndCB3YXN0ZSBnYXMgb24gemVyby12YWx1ZSB0cmFuc2FjdGlvbgogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHJldHVybiBmYWxzZTsgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSB0aHJvdzsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2VuZGVyIGlzIGZyb3plbgogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W190b10pIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGZyb3plbiAgICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgb24geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9ICAgICAgICAKCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W19mcm9tXSkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2VuZGVyIGZyb3plbiAgICAgICAKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFtfdG9dKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRhcmdldCBmcm96ZW4gICAgICAgICAgICAgICAgIAogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAgICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHRocm93OyAgICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgIC8vIEFsbG93YW5jZSBjaGFuZ2VzCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb2tlbnMgYXJlIHNlbmQKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyogQSBmdW5jdGlvbiB0byBmcmVlemUgb3IgdW4tZnJlZXplIGFuIGFjY291bnQsIHRvIGFuZCBmcm9tICovCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSApIG9ubHlPd25lciB7ICAgIAogICAgICAgIGlmICgodGFyZ2V0ID09IHRoZTEyMGFkZHJlc3MpICYmIChub3cgPCBkZWFkbGluZTEyMCkpIHRocm93OyAgICAvLyBFbnN1cmUgeW91IGNhbiBub3QgY2hhbmdlIDEyMGFkZHJlc3MgZnJvemVuIHN0YXR1cyB1bnRpbCBkZWFkbGluZQogICAgICAgIGlmICgodGFyZ2V0ID09IHRoZTM2NWFkZHJlc3MpICYmIChub3cgPCBkZWFkbGluZTM2NSkpIHRocm93OyAgICAvLyBFbnN1cmUgeW91IGNhbiBub3QgY2hhbmdlIDM2NWFkZHJlc3MgZnJvemVuIHN0YXR1cyB1bnRpbCBkZWFkbGluZQogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGFycmF5IG9iamVjdCB0byB0aGUgdmFsdWUgb2YgYm9vbCBmcmVlemUKICAgICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGV2ZW50CiAgICB9CiAgICAKICAgIC8qIEEgZnVuY3Rpb24gdG8gYnVybiB0b2tlbnMgYW5kIHJlbW92ZSBmcm9tIHN1cHBseSAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewoJCWlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSB0aHJvdzsgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBzZW5kZXIgZnJvemVuICAgICAgIAogICAgICAgIGlmIChfdmFsdWUgPT0gMCkgcmV0dXJuIGZhbHNlOwkJCSAgICAgICAgICAgICAgIC8vIERvbid0IHdhc3RlIGdhcyBvbiB6ZXJvLXZhbHVlIHRyYW5zYWN0aW9uCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOyAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVkdWNlIHRvdGFsU3VwcGx5IGFjY29yZGluZ2x5CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwwLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ1cm4gYmFieSBidXJuCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICAgICAgaWYgKGZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pIHRocm93OyAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHNlbmRlciBmcm96ZW4gICAgICAgCiAgICAgICAgaWYgKGZyb3plbkFjY291bnRbX2Zyb21dKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHJlY2lwaWVudCBmcm96ZW4gCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSByZXR1cm4gZmFsc2U7CQkJICAgICAgICAgICAgICAgLy8gRG9uJ3Qgd2FzdGUgZ2FzIG9uIHplcm8tdmFsdWUgdHJhbnNhY3Rpb24KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHRocm93OyAgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgLy8gQWxsb3dhbmNlIGlzIHVwZGF0ZWQKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlcyB0b3RhbFN1cHBseQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCAwLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQ=='.
	

]
