Class {
	#name : #SRT2f22c502a8029d5e64aeafb6e0a214c0323f43c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f22c502a8029d5e64aeafb6e0a214c0323f43c7 >> base64 [
	^ ''.
	

]
