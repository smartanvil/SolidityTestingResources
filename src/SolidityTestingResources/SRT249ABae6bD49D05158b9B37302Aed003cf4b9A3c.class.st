Class {
	#name : #SRT249ABae6bD49D05158b9B37302Aed003cf4b9A3c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT249ABae6bD49D05158b9B37302Aed003cf4b9A3c >> base64 [
	^ ''.
	

]
