Class {
	#name : #SRT2c3cc0f8dede2eccae43380ecf29b61fa6d10dca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c3cc0f8dede2eccae43380ecf29b61fa6d10dca >> base64 [
	^ ''.
	

]
