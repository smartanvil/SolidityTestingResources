Class {
	#name : #SRTdbabbcb1e314facb908c3e06b1f483124a627ce0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdbabbcb1e314facb908c3e06b1f483124a627ce0 >> base64 [
	^ 'Ly8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBUb2tlbiB7CiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgkKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoJCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QJCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgkKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QJCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoJCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAkKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgkKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgkKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IElNaWdyYXRpb25Db250cmFjdCB7CiAgICBmdW5jdGlvbiBtaWdyYXRlKGFkZHJlc3MgYWRkciwgdWludDI1NiB1aXApIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0KCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50MjU2IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9CgovKiAgRVJDIDIwIHRva2VuICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKY29udHJhY3QgU1RBTlRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsKCiAgICAvLyBtZXRhZGF0YQogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJTVEFOVG9rZW4iOwogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlNUQU4iOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHN0cmluZyAgcHVibGljIHZlcnNpb24gPSAiMS4wIjsKCiAgICAvLyBjb250cmFjdHMKICAgIGFkZHJlc3MgcHVibGljIGV0aEZ1bmREZXBvc2l0OyAgICAgICAgICAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIEVUSCBmb3IgVW5saW1pdGVkSVAgVGVhbS4KICAgIGFkZHJlc3MgcHVibGljIG5ld0NvbnRyYWN0QWRkcjsgICAgICAgICAvLyB0aGUgbmV3IGNvbnRyYWN0IGZvciBVbmxpbWl0ZWRJUCB0b2tlbiB1cGRhdGVzOwoKICAgIC8vIGNyb3dkc2FsZSBwYXJhbWV0ZXJzCiAgICBib29sICAgIHB1YmxpYyBpc0Z1bmRpbmc7ICAgICAgICAgICAgICAgIC8vIHN3aXRjaGVkIHRvIHRydWUgaW4gb3BlcmF0aW9uYWwgc3RhdGUKICAgIHVpbnQyNTYgcHVibGljIGZ1bmRpbmdTdGFydEJsb2NrOwogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0b3BCbG9jazsKCiAgICB1aW50MjU2IHB1YmxpYyBjdXJyZW50U3VwcGx5OyAgICAgICAgICAgLy8gY3VycmVudCBzdXBwbHkgdG9rZW5zIGZvciBzZWxsCiAgICB1aW50MjU2IHB1YmxpYyB0b2tlblJhaXNlZCA9IDA7ICAgICAgICAgLy8gdGhlIG51bWJlciBvZiB0b3RhbCBzb2xkIHRva2VuCiAgICB1aW50MjU2IHB1YmxpYyB0b2tlbk1pZ3JhdGVkID0gMDsgICAgIC8vIHRoZSBudW1iZXIgb2YgdG90YWwgdHJhbnNmZXJ0ZWQgdG9rZW4KICAgIHVpbnQyNTYgcHVibGljIHRva2VuRXhjaGFuZ2VSYXRlID0gMTAwMDsgICAgICAgICAgICAgLy8gMTAwMCBVSVAgdG9rZW5zIHBlciAxIEVUSAoKICAgIC8vIGV2ZW50cwogICAgZXZlbnQgQWxsb2NhdGVUb2tlbihhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7ICAgLy8gYWxsb2NhdGUgdG9rZW4gZm9yIHByaXZhdGUgc2FsZTsKICAgIGV2ZW50IElzc3VlVG9rZW4oYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOyAgICAgIC8vIGlzc3VlIHRva2VuIGZvciBwdWJsaWMgc2FsZTsKICAgIGV2ZW50IEluY3JlYXNlU3VwcGx5KHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IERlY3JlYXNlU3VwcGx5KHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IE1pZ3JhdGUoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiBfdmFsdWUpOwogICAgLy8gZm9ybWF0IGRlY2ltYWxzLgogICAgZnVuY3Rpb24gZm9ybWF0RGVjaW1hbHModWludDI1NiBfdmFsdWUpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgKSB7CiAgICAgICAgcmV0dXJuIF92YWx1ZSAqIDEwICoqIGRlY2ltYWxzOwogICAgfQoKICAgIC8vIGNvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBTVEFOVG9rZW4oKQogICAgewogICAgICAgIGV0aEZ1bmREZXBvc2l0ID0gMHhhMWU1N2UzOGYzNDdmNENDQ2I0NDEzNjZBMzVkOTQ5MTQyZkFkN2IwOwoKICAgICAgICBpc0Z1bmRpbmcgPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnRyb2xzIHByZSB0aHJvdWdoIGNyb3dkc2FsZSBzdGF0ZQogICAgICAgIGZ1bmRpbmdTdGFydEJsb2NrID0gMDsKICAgICAgICBmdW5kaW5nU3RvcEJsb2NrID0gMDsKCiAgICAgICAgY3VycmVudFN1cHBseSA9IGZvcm1hdERlY2ltYWxzKDApOwogICAgICAgIHRvdGFsU3VwcGx5ID0gZm9ybWF0RGVjaW1hbHMoMTAwMDAwMDAwKTsKICAgICAgICByZXF1aXJlKGN1cnJlbnRTdXBwbHkgPD0gdG90YWxTdXBwbHkpOwogICAgICAgIGJhbGFuY2VzW2V0aEZ1bmREZXBvc2l0XSA9IHRvdGFsU3VwcGx5LWN1cnJlbnRTdXBwbHk7CiAgICB9CgogICAgbW9kaWZpZXIgaXNPd25lcigpICB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBldGhGdW5kRGVwb3NpdCk7IF87IH0KCiAgICAvLy8gQGRldiBzZXQgdGhlIHRva2VuJ3MgdG9rZW5FeGNoYW5nZVJhdGUsCiAgICBmdW5jdGlvbiBzZXRUb2tlbkV4Y2hhbmdlUmF0ZSh1aW50MjU2IF90b2tlbkV4Y2hhbmdlUmF0ZSkgaXNPd25lciBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG9rZW5FeGNoYW5nZVJhdGUgPiAwKTsKICAgICAgICByZXF1aXJlKF90b2tlbkV4Y2hhbmdlUmF0ZSAhPSB0b2tlbkV4Y2hhbmdlUmF0ZSk7CiAgICAgICAgdG9rZW5FeGNoYW5nZVJhdGUgPSBfdG9rZW5FeGNoYW5nZVJhdGU7CiAgICB9CgogICAgLy8vIEBkZXYgaW5jcmVhc2UgdGhlIHRva2VuJ3Mgc3VwcGx5CiAgICBmdW5jdGlvbiBpbmNyZWFzZVN1cHBseSAodWludDI1NiBfdmFsdWUpIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHVpbnQyNTYgdmFsdWUgPSBmb3JtYXREZWNpbWFscyhfdmFsdWUpOwogICAgICAgIHJlcXVpcmUgKHZhbHVlICsgY3VycmVudFN1cHBseSA8PSB0b3RhbFN1cHBseSk7CiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgdmFsdWU+MCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICAgICAgY3VycmVudFN1cHBseSA9IHNhZmVBZGQoY3VycmVudFN1cHBseSwgdmFsdWUpOwogICAgICAgIEluY3JlYXNlU3VwcGx5KHZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBkZWNyZWFzZSB0aGUgdG9rZW4ncyBzdXBwbHkKICAgIGZ1bmN0aW9uIGRlY3JlYXNlU3VwcGx5ICh1aW50MjU2IF92YWx1ZSkgaXNPd25lciBleHRlcm5hbCB7CiAgICAgICAgdWludDI1NiB2YWx1ZSA9IGZvcm1hdERlY2ltYWxzKF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZSAodmFsdWUgKyB0b2tlblJhaXNlZCA8IGN1cnJlbnRTdXBwbHkpOwogICAgICAgIHJlcXVpcmUgKHZhbHVlIDw9IGN1cnJlbnRTdXBwbHkgLSB0b2tlblJhaXNlZCk7CiAgICAgICAgY3VycmVudFN1cHBseSA9IHNhZmVTdWJ0cmFjdChjdXJyZW50U3VwcGx5LCB2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdmFsdWU7CiAgICAgICAgRGVjcmVhc2VTdXBwbHkodmFsdWUpOwogICAgfQoKICAgIC8vLyBAZGV2IHR1cm4gb24gdGhlIGZ1bmRpbmcgc3RhdGUKICAgIGZ1bmN0aW9uIHN0YXJ0RnVuZGluZyAodWludDI1NiBfZnVuZGluZ1N0YXJ0QmxvY2ssIHVpbnQyNTYgX2Z1bmRpbmdTdG9wQmxvY2spIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoIWlzRnVuZGluZyk7CiAgICAgICAgcmVxdWlyZShfZnVuZGluZ1N0YXJ0QmxvY2sgPCBfZnVuZGluZ1N0b3BCbG9jayk7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPCBfZnVuZGluZ1N0YXJ0QmxvY2spIDsKICAgICAgICBmdW5kaW5nU3RhcnRCbG9jayA9IF9mdW5kaW5nU3RhcnRCbG9jazsKICAgICAgICBmdW5kaW5nU3RvcEJsb2NrID0gX2Z1bmRpbmdTdG9wQmxvY2s7CiAgICAgICAgaXNGdW5kaW5nID0gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiB0dXJuIG9mZiB0aGUgZnVuZGluZyBzdGF0ZQogICAgZnVuY3Rpb24gc3RvcEZ1bmRpbmcoKSBpc093bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKGlzRnVuZGluZyk7CiAgICAgICAgaXNGdW5kaW5nID0gZmFsc2U7CiAgICB9CgogICAgLy8vIEBkZXYgc2V0IGEgbmV3IGNvbnRyYWN0IGZvciByZWNpZXZlIHRoZSB0b2tlbnMgKGZvciB1cGRhdGUgY29udHJhY3QpCiAgICBmdW5jdGlvbiBzZXRNaWdyYXRlQ29udHJhY3QoYWRkcmVzcyBfbmV3Q29udHJhY3RBZGRyKSBpc093bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKF9uZXdDb250cmFjdEFkZHIgIT0gbmV3Q29udHJhY3RBZGRyKTsKICAgICAgICBuZXdDb250cmFjdEFkZHIgPSBfbmV3Q29udHJhY3RBZGRyOwogICAgfQoKICAgIC8vLyBAZGV2IHNldCBhIG5ldyBvd25lci4KICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX25ld0Z1bmREZXBvc2l0KSBpc093bmVyKCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX25ld0Z1bmREZXBvc2l0ICE9IGFkZHJlc3MoMHgwKSk7CiAgICAgICAgZXRoRnVuZERlcG9zaXQgPSBfbmV3RnVuZERlcG9zaXQ7CiAgICB9CgogICAgLy8vIHNlbmRzIHRoZSB0b2tlbnMgdG8gbmV3IGNvbnRyYWN0CiAgICBmdW5jdGlvbiBtaWdyYXRlKCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoIWlzRnVuZGluZyk7CiAgICAgICAgcmVxdWlyZShuZXdDb250cmFjdEFkZHIgIT0gYWRkcmVzcygweDApKTsKCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICByZXF1aXJlICh0b2tlbnMgPiAwKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIHRva2VuTWlncmF0ZWQgPSBzYWZlQWRkKHRva2VuTWlncmF0ZWQsIHRva2Vucyk7CgogICAgICAgIElNaWdyYXRpb25Db250cmFjdCBuZXdDb250cmFjdCA9IElNaWdyYXRpb25Db250cmFjdChuZXdDb250cmFjdEFkZHIpOwogICAgICAgIHJlcXVpcmUobmV3Q29udHJhY3QubWlncmF0ZShtc2cuc2VuZGVyLCB0b2tlbnMpKTsKCiAgICAgICAgTWlncmF0ZShtc2cuc2VuZGVyLCB0b2tlbnMpOyAgICAgICAgICAgICAgIC8vIGxvZyBpdAogICAgfQoKICAgIC8vLyBAZGV2IHdpdGhkcmF3IEVUSCBmcm9tIGNvbnRyYWN0IHRvIFVubGltaXRlZElQIHRlYW0gYWRkcmVzcwogICAgZnVuY3Rpb24gdHJhbnNmZXJFVEgoKSBpc093bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+IDApOwogICAgICAgIHJlcXVpcmUoZXRoRnVuZERlcG9zaXQuc2VuZCh0aGlzLmJhbGFuY2UpKTsKICAgIH0KCiAgICAvLy8gQGRldiBhbGxvY2F0ZXMgVUlQIHRva2VucyB0byBwcmUtc2VsbCBhZGRyZXNzLgogICAgZnVuY3Rpb24gYWxsb2NhdGVUb2tlbiAoYWRkcmVzcyBfYWRkciwgdWludDI1NiBfZXRoKSBpc093bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKF9ldGggIT0gMCk7CiAgICAgICAgcmVxdWlyZShfYWRkciAhPSBhZGRyZXNzKDB4MCkpOwoKICAgICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KGZvcm1hdERlY2ltYWxzKF9ldGgpLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnMgKyB0b2tlblJhaXNlZCA8PSBjdXJyZW50U3VwcGx5KTsKCiAgICAgICAgdG9rZW5SYWlzZWQgPSBzYWZlQWRkKHRva2VuUmFpc2VkLCB0b2tlbnMpOwogICAgICAgIGJhbGFuY2VzW19hZGRyXSArPSB0b2tlbnM7CgogICAgICAgIEFsbG9jYXRlVG9rZW4oX2FkZHIsIHRva2Vucyk7ICAvLyBsb2dzIHRva2VuIGlzc3VlZAogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIGlzT3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICB1aW50MjU2IHZhbHVlID0gZm9ybWF0RGVjaW1hbHMoX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgICAgICB0b3RhbFN1cHBseSAtPSB2YWx1ZTsKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBidXlzIHRoZSB0b2tlbnMKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUgKGlzRnVuZGluZyk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKCiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gZnVuZGluZ1N0YXJ0QmxvY2spOwogICAgICAgIHJlcXVpcmUoYmxvY2subnVtYmVyIDw9IGZ1bmRpbmdTdG9wQmxvY2spOwoKICAgICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KG1zZy52YWx1ZSwgdG9rZW5FeGNoYW5nZVJhdGUpOwogICAgICAgIHJlcXVpcmUodG9rZW5zICsgdG9rZW5SYWlzZWQgPD0gY3VycmVudFN1cHBseSk7CgogICAgICAgIHRva2VuUmFpc2VkID0gc2FmZUFkZCh0b2tlblJhaXNlZCwgdG9rZW5zKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnM7CgogICAgICAgIElzc3VlVG9rZW4obXNnLnNlbmRlciwgdG9rZW5zKTsgIC8vIGxvZ3MgdG9rZW4gaXNzdWVkCiAgICB9Cn0='.
	

]
