Class {
	#name : #SRT9787482593f9daa7dad76f2d8c089a8d92580fa8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9787482593f9daa7dad76f2d8c089a8d92580fa8 >> base64 [
	^ ''.
	

]
