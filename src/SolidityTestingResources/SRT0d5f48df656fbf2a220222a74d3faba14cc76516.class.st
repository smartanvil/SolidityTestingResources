Class {
	#name : #SRT0d5f48df656fbf2a220222a74d3faba14cc76516,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d5f48df656fbf2a220222a74d3faba14cc76516 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogVGhpcyBjb250cmFjdCBpcyB1c2VkIHRvIHByb3RlY3QgdGhlIHVzZXJzIG9mIFN0b3JtNDoKICogaHR0cHM6Ly93d3cuc3Rvcm00LmNsb3VkCiAqIAogKiBUaGF0IGlzLCB0byBlbnN1cmUgdGhlIHB1YmxpYyBrZXlzIG9mIHVzZXJzIGFyZSB2ZXJpZmlhYmxlLCBhdWRpdGFibGUgJiB0YW1wZXItcHJvb2YuCiAqIAogKiBIZXJlJ3MgdGhlIGdlbmVyYWwgaWRlYToKICogLSBXZSBiYXRjaCB0aGUgcHVibGljIGtleXMgb2YgbXVsdGlwbGUgdXNlcnMgaW50byBhIG1lcmtsZSB0cmVlLgogKiAtIFdlIHB1Ymxpc2ggdGhlIG1lcmtsZSB0cmVlIHJvb3QgdG8gdGhpcyBjb250cmFjdC4KICogLSBUaGUgbWVya2xlIHRyZWUgcm9vdCBmb3IgYW55IGdpdmVuIHVzZXIgY2FuIG9ubHkgYmUgYXNzaWduZWQgb25jZSAocGVyIGhhc2ggYWxnb3JpdGhtKS4KICogCiAqIEluIG9yZGVyIHRvIHZlcmlmeSBhIHVzZXI6CiAqIC0gVXNlIHRoaXMgY29udHJhY3QgdG8gZmV0Y2ggdGhlIG1lcmtsZSB0cmVlIHJvb3QgdmFsdWUgZm9yIHRoZSB1c2VySUQuCiAqIC0gVGhlbiB1c2UgSFRUUFMgdG8gZmV0Y2ggdGhlIGNvcnJlc3BvbmRpbmcgbWVya2xlIGZpbGUgZnJvbSBvdXIgc2VydmVyIGF0CiAqICAgaHR0cHM6Ly9ibG9ja2NoYWluLnN0b3JtNC5jbG91ZC9tZXJrbGVUcmVlUm9vdFZhbHVlR29lc0hlcmUuanNvbgogKiAtIFRoZSBKU09OIGZpbGUgYWxsb3dzIHlvdSB0byBpbmRlcGVuZGVudGx5IHZlcmlmeSB0aGUgcHVibGljIGtleSBpbmZvcm1hdGlvbgogKiAgIGJ5IGNhbGN1bGF0aW5nIHRoZSBtZXJrbGUgdHJlZSByb290IGZvciB5b3Vyc2VsZi4KKiovCmNvbnRyYWN0IFB1YktleVRydXN0IHsKCWFkZHJlc3MgcHVibGljIG93bmVyOwoKCS8qKgoJICogUmF0aGVyIHRoYW4gaGFyZC1jb2RpbmcgYSBzcGVjaWZpYyBoYXNoIGFsZ29yaXRobSwgd2UgYWxsb3cgZm9yIHVwZ3JhZGVhYmlsaXR5LAoJICogc2hvdWxkIGl0IGJlY29tZSBpbXBvcnRhbnQgdG8gZG8gc28gaW4gdGhlIGZ1dHVyZSBmb3Igc2VjdXJpdHkgcmVhc29ucy4KCSAqIAoJICogSW4gb3JkZXIgdG8gc3VwcG9ydCB0aGlzLCB3ZSBrZWVwIGEgInJlZ2lzdGVyIiBvZiBzdXBwb3J0ZWQgaGFzaCBhbGdvcml0aG1zLgoJICogRXZlcnkgaGFzaCBhbGdvcml0aG0gaW4gdGhlIHN5c3RlbSBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBJRCAoYSB1aW50OCksCgkgKiBhbG9uZyB3aXRoIGEgY29ycmVzcG9uZGluZyBzaG9ydCBpZGVudGlmaWVyLgoJICogCgkgKiBGb3IgZXhhbXBsZTogMCA9PiAic2hhMjU2IgoJICogCgkgKiBOb3RlOiBTaW5jZSB3ZSBhcmUgZXhwZWN0aW5nIHRoZXJlIHRvIGJlIHZlcnkgZmV3IGhhc2ggYWxnb3JpdGhtcyB1c2VkCgkgKiBpbiBwcmFjdGljZSAocHJvYmFibHkganVzdCAxIG9yIDIpLCB3ZSBhcnRpZmljaWFsbHkgbGltaXQgdGhlIHNpemUgb2YKCSAqIHRoZSBoYXNoVHlwZXMgYXJyYXkgdG8gMjU2IGVudHJpZXMuIFRoaXMgYWxsb3dzIHVzIHRvIHVzZSB1aW50OCB0aHJvdWdob3V0CgkgKiB0aGUgcmVzdCBvZiB0aGUgY29udHJhY3QsIHdoaWNoIGhlbHBzIGxpbWl0IHN0b3JhZ2UgcmVxdWlyZW1lbnRzLgoJKiovCglzdHJpbmdbXSBwdWJsaWMgaGFzaFR5cGVzOwoKCS8qKgoJICogV2UgYmF0Y2ggdGhlIHB1YmxpYyBrZXlzIG9mIG11bHRpcGxlIHVzZXJzIGludG8gYSBzaW5nbGUgbWVya2xlIHRyZWUsCgkgKiBhbmQgdGhlbiBwdWJsaXNoIHRoZSBtZXJrbGUgdHJlZSByb290IHRvIHRoZSBibG9ja2NoYWluLgoJICogCgkgKiBOb3RlOiBtZXJrbGVUcmVlUm9vdHNbMF0gaXMgaW5pdGlhbGl6ZWQgaW4gdGhlIGNvbnN0cnVjdG9yIHRvIHN0b3JlCgkgKiB0aGUgYmxvY2sgbnVtYmVyIG9mIHdoZW4gdGhlIGNvbnRyYWN0IHdhcyBwdWJsaXNoZWQuCgkqKi8KCXN0cnVjdCBNZXJrbGVJbmZvIHsKCQlieXRlcyBtZXJrbGVUcmVlUm9vdDsKCQl1aW50IGJsb2NrTnVtYmVyOwoJfQoJTWVya2xlSW5mb1tdIHB1YmxpYyBtZXJrbGVUcmVlUm9vdHM7CgoJLyoqCgkgKiB1c2Vyc1t1c2VySURdW2hhc2hUeXBlSURdID0+IG1lcmtsZVRyZWVSb290c0luZGV4CgkgKiAKCSAqIEEgdmFsdWUgb2YgemVybyBpbmRpY2F0ZXMgdGhhdCBhIG1lcmtsZVRyZWVSb290IGhhcyBub3QgYmVlbgoJICogcHVibGlzaGVkIGZvciB0aGUgPHVzZXJJRCwgaGFzaFR5cGVJRD4gdHVwbGUuCgkgKiBBIG5vbnplcm8gdmFsdWUgY2FuIGJlIHVzZWQgYXMgdGhlIGluZGV4IGZvciB0aGUgbWVya2xlVHJlZVJvb3RzIGFycmF5LgoJICogCgkgKiBOb3RlOiBtZXJrbGVUcmVlUm9vdHNbMF0gaXMgaW5pdGlhbGl6ZWQgaW4gdGhlIGNvbnN0cnVjdG9yIHRvIHN0b3JlCgkgKiB0aGUgYmxvY2sgbnVtYmVyIG9mIHdoZW4gdGhlIGNvbnRyYWN0IHdhcyBwdWJsaXNoZWQuCgkgKiBUaHVzOiBtZXJrbGVUcmVlUm9vdHNbMF0ubWVya2xlVHJlZVJvb3QubGVuZ3RoID09IDAKCSoqLwoJbWFwcGluZyhieXRlczIwID0+IG1hcHBpbmcodWludDggPT4gdWludCkpIHB1YmxpYyB1c2VyczsKCglldmVudCBIYXNoVHlwZUFkZGVkKHVpbnQ4IGhhc2hUeXBlSUQpOwoJZXZlbnQgTWVya2xlVHJlZVJvb3RBZGRlZCh1aW50OCBoYXNoVHlwZUlELCBieXRlcyBtZXJrbGVUcmVlUm9vdCk7CgoJZnVuY3Rpb24gUHViS2V5VHJ1c3QoKSBwdWJsaWMgewoJCW93bmVyID0gbXNnLnNlbmRlcjsKCQltZXJrbGVUcmVlUm9vdHMucHVzaChNZXJrbGVJbmZvKG5ldyBieXRlcygwKSwgYmxvY2subnVtYmVyKSk7Cgl9CgoJbW9kaWZpZXIgb25seUJ5T3duZXIoKQoJewoJCWlmIChtc2cuc2VuZGVyICE9IG93bmVyKQoJCQlyZXF1aXJlKGZhbHNlKTsKCQllbHNlCgkJCV87Cgl9CgoJZnVuY3Rpb24gbnVtSGFzaFR5cGVzKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewoKCQlyZXR1cm4gaGFzaFR5cGVzLmxlbmd0aDsKCX0KCglmdW5jdGlvbiBhZGRIYXNoVHlwZShzdHJpbmcgZGVzY3JpcHRpb24pIHB1YmxpYyBvbmx5QnlPd25lciByZXR1cm5zKGJvb2wsIHVpbnQ4KSB7CgoJCXVpbnQgaGFzaFR5cGVJRCA9IGhhc2hUeXBlcy5sZW5ndGg7CgoJCS8vIFJlc3RyaWN0aW9uczoKCQkvLyAtIHRoZXJlIGNhbm5vdCBiZSBtb3JlIHRoYW4gMjU2IGRpZmZlcmVudCBoYXNoIHR5cGVzCgkJLy8gLSB0aGUgZGVzY3JpcHRpb24gY2Fubm90IGJlIHRoZSBlbXB0eSBzdHJpbmcKCQkvLyAtIHRoZSBkZXNjcmlwdGlvbiBjYW5ub3QgYmUgb3ZlciA2NCBieXRlcyBsb25nCgkJaWYgKGhhc2hUeXBlSUQgPj0gMjU2KSByZXF1aXJlKGZhbHNlKTsKCQlpZiAoYnl0ZXMoZGVzY3JpcHRpb24pLmxlbmd0aCA9PSAwKSByZXF1aXJlKGZhbHNlKTsKCQlpZiAoYnl0ZXMoZGVzY3JpcHRpb24pLmxlbmd0aCA+IDY0KSByZXF1aXJlKGZhbHNlKTsKCgkJLy8gRW5zdXJlIHRoZSBnaXZlbiBkZXNjcmlwdGlvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QKCQlmb3IgKHVpbnQgaSA9IDA7IGkgPCBoYXNoVHlwZUlEOyBpKyspCgkJewoJCQlpZiAoc3RyaW5nc0VxdWFsKGhhc2hUeXBlc1tpXSwgZGVzY3JpcHRpb24pKSB7CgkJCQlyZXR1cm4gKGZhbHNlLCB1aW50OCgwKSk7CgkJCX0KCQl9CgoJCS8vIEdvIGFoZWFkIGFuZCBhZGQgdGhlIG5ldyBoYXNoIHR5cGUKCQloYXNoVHlwZXMucHVzaChkZXNjcmlwdGlvbik7CgkJSGFzaFR5cGVBZGRlZCh1aW50OChoYXNoVHlwZUlEKSk7CgoJCXJldHVybiAodHJ1ZSwgdWludDgoaGFzaFR5cGVJRCkpOwoJfQoKCS8qKgoJICogV2Ugb3JpZ2luYWxseSBwYXNzZWQgdGhlIHVzZXJJRHMgYXM6IGJ5dGVzMjBbXSB1c2VySURzCgkgKiBCdXQgaXQgd2FzIGRpc2NvdmVyZWQgdGhhdCB0aGlzIHdhcyBpbmVmZmljaWVudGx5IHBhY2tlZCwKCSAqIGFuZCBlbmRlZCB1cCBzZW5kaW5nIDEyIGJ5dGVzIG9mIHplcm8ncyBwZXIgdXNlcklELgoJICogU2luY2UgZ3R4ZGF0YXplcm8gaXMgc2V0IHRvIDQgZ2FzL2J5dGVzLCB0aGlzIHRyYW5zbGF0ZWQgaW50bwoJICogNDggZ2FzIHdhc3RlZCBwZXIgdXNlciBkdWUgdG8gaW5lZmZpY2llbnQgcGFja2luZy4KCSoqLwoJZnVuY3Rpb24gYWRkTWVya2xlVHJlZVJvb3QodWludDggaGFzaFR5cGVJRCwgYnl0ZXMgbWVya2xlVHJlZVJvb3QsIGJ5dGVzIHVzZXJJRHNQYWNrZWQpIHB1YmxpYyBvbmx5QnlPd25lciB7CgoJCWlmIChoYXNoVHlwZUlEID49IGhhc2hUeXBlcy5sZW5ndGgpIHJlcXVpcmUoZmFsc2UpOwoJCWlmIChtZXJrbGVUcmVlUm9vdC5sZW5ndGggPT0gMCkgcmVxdWlyZShmYWxzZSk7CgoJCXVpbnQgaW5kZXggPSBtZXJrbGVUcmVlUm9vdHMubGVuZ3RoOwoJCWJvb2wgYWRkZWRJbmRleEZvclVzZXIgPSBmYWxzZTsKCgkJdWludCBudW1Vc2VySURzID0gdXNlcklEc1BhY2tlZC5sZW5ndGggLyAyMDsKCQlmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1Vc2VySURzOyBpKyspCgkJewoJCQlieXRlczIwIHVzZXJJRDsKCQkJYXNzZW1ibHkgewoJCQkJdXNlcklEIDo9IG1sb2FkKGFkZCh1c2VySURzUGFja2VkLCBhZGQoMzIsIG11bCgyMCwgaSkpKSkKCQkJfQoKCQkJdWludCBleGlzdGluZ0luZGV4ID0gdXNlcnNbdXNlcklEXVtoYXNoVHlwZUlEXTsKCQkJaWYgKGV4aXN0aW5nSW5kZXggPT0gMCkKCQkJewoJCQkJdXNlcnNbdXNlcklEXVtoYXNoVHlwZUlEXSA9IGluZGV4OwoJCQkJYWRkZWRJbmRleEZvclVzZXIgPSB0cnVlOwoJCQl9CgkJfQoKCQlpZiAoYWRkZWRJbmRleEZvclVzZXIpCgkJewoJCQltZXJrbGVUcmVlUm9vdHMucHVzaChNZXJrbGVJbmZvKG1lcmtsZVRyZWVSb290LCBibG9jay5udW1iZXIpKTsKCQkJTWVya2xlVHJlZVJvb3RBZGRlZChoYXNoVHlwZUlELCBtZXJrbGVUcmVlUm9vdCk7CgkJfQoJfQoKCWZ1bmN0aW9uIGdldE1lcmtsZVRyZWVSb290KGJ5dGVzMjAgdXNlcklELCB1aW50OCBoYXNoVHlwZUlEKSBwdWJsaWMgdmlldyByZXR1cm5zIChieXRlcykgewoKCQl1aW50IG1lcmtsZVRyZWVSb290c0luZGV4ID0gdXNlcnNbdXNlcklEXVtoYXNoVHlwZUlEXTsKCQlpZiAobWVya2xlVHJlZVJvb3RzSW5kZXggPT0gMCkgewoJCQlyZXR1cm4gbmV3IGJ5dGVzKDApOwoJCX0KCQllbHNlIHsKCQkJTWVya2xlSW5mbyBzdG9yYWdlIG1lcmtsZUluZm8gPSBtZXJrbGVUcmVlUm9vdHNbbWVya2xlVHJlZVJvb3RzSW5kZXhdOwoJCQlyZXR1cm4gbWVya2xlSW5mby5tZXJrbGVUcmVlUm9vdDsKCQl9Cgl9CgoJZnVuY3Rpb24gZ2V0QmxvY2tOdW1iZXIoYnl0ZXMyMCB1c2VySUQsIHVpbnQ4IGhhc2hUeXBlSUQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKCgkJdWludCBtZXJrbGVUcmVlUm9vdHNJbmRleCA9IHVzZXJzW3VzZXJJRF1baGFzaFR5cGVJRF07CgkJaWYgKG1lcmtsZVRyZWVSb290c0luZGV4ID09IDApIHsKCQkJcmV0dXJuIDA7CgkJfQoJCWVsc2UgewoJCQlNZXJrbGVJbmZvIHN0b3JhZ2UgbWVya2xlSW5mbyA9IG1lcmtsZVRyZWVSb290c1ttZXJrbGVUcmVlUm9vdHNJbmRleF07CgkJCXJldHVybiBtZXJrbGVJbmZvLmJsb2NrTnVtYmVyOwoJCX0KCX0KCgkvLyBVdGlsaXR5IGZ1bmN0aW9uIChiZWNhdXNlIHN0cmluZyBjb21wYXJpc29uIGRvZXNuJ3QgZXhpc3QgbmF0aXZlbHkgaW4gU29saWRpdHkgeWV0KQoJZnVuY3Rpb24gc3RyaW5nc0VxdWFsKHN0cmluZyBzdG9yYWdlIF9hLCBzdHJpbmcgbWVtb3J5IF9iKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKCgkJYnl0ZXMgc3RvcmFnZSBhID0gYnl0ZXMoX2EpOwoJCWJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwoJCWlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCWZvciAodWludCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKCQkJaWYgKGFbaV0gIT0gYltpXSkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoJCXJldHVybiB0cnVlOwoJfQp9'.
	

]
