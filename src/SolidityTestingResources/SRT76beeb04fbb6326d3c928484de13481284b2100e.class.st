Class {
	#name : #SRT76beeb04fbb6326d3c928484de13481284b2100e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76beeb04fbb6326d3c928484de13481284b2100e >> base64 [
	^ ''.
	

]
