Class {
	#name : #SRTd2606c9bc5efe092a8925e7d6ae2f63a84c5fdea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd2606c9bc5efe092a8925e7d6ae2f63a84c5fdea >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBDcnlwdG9WaWRlb0dhbWVJdGVtIHsKCiAgICBhZGRyZXNzIGNvbnRyYWN0Q3JlYXRvciA9IDB4QzE1ZDlmOTdhQzkyNmE2QTI5QTY4MWY1YzE5ZTJiNTZmZDIwOGYwMDsgCiAgICBhZGRyZXNzIGRldkZlZUFkZHJlc3MgPSAweEMxNWQ5Zjk3YUM5MjZhNkEyOUE2ODFmNWMxOWUyYjU2ZmQyMDhmMDA7CgogICAgYWRkcmVzcyBjcnlwdG9WaWRlb0dhbWVzID0gMHhkRWMxNEQ4ZjREQTI1MTA4RmQwZDMyQmYyRGVDRDk1Mzg1NjREMDY5OyAKCiAgICBzdHJ1Y3QgVmlkZW9HYW1lSXRlbSB7CiAgICAgICAgc3RyaW5nIHZpZGVvR2FtZUl0ZW1OYW1lOwogICAgICAgIGFkZHJlc3Mgb3duZXJBZGRyZXNzOwogICAgICAgIHVpbnQyNTYgY3VycmVudFByaWNlOwogICAgICAgIHVpbnQgcGFyZW50VmlkZW9HYW1lOwogICAgfQogICAgVmlkZW9HYW1lSXRlbVtdIHZpZGVvR2FtZUl0ZW1zOwoKICAgIG1vZGlmaWVyIG9ubHlDb250cmFjdENyZWF0b3IoKSB7CiAgICAgICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBjb250cmFjdENyZWF0b3IpOwogICAgICAgIF87CiAgICB9CgogICAgYm9vbCBpc1BhdXNlZDsKICAgIAogICAgCiAgICAvKgogICAgV2UgdXNlIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIHRvIHBhdXNlIGFuZCB1bnBhdXNlIHRoZSBnYW1lLgogICAgKi8KICAgIGZ1bmN0aW9uIHBhdXNlR2FtZSgpIHB1YmxpYyBvbmx5Q29udHJhY3RDcmVhdG9yIHsKICAgICAgICBpc1BhdXNlZCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiB1blBhdXNlR2FtZSgpIHB1YmxpYyBvbmx5Q29udHJhY3RDcmVhdG9yIHsKICAgICAgICBpc1BhdXNlZCA9IGZhbHNlOwogICAgfQogICAgZnVuY3Rpb24gR2V0R2FtZXN0YXR1cygpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgcmV0dXJuKGlzUGF1c2VkKTsKICAgIH0KCiAgICAvKgogICAgVGhpcyBmdW5jdGlvbiBhbGxvd3MgdXNlcnMgdG8gcHVyY2hhc2UgVmlkZW8gR2FtZSBJdGVtLiAKICAgIFRoZSBwcmljZSBpcyBhdXRvbWF0aWNhbGx5IG11bHRpcGxpZWQgYnkgMiBhZnRlciBlYWNoIHB1cmNoYXNlLgogICAgVXNlcnMgY2FuIHB1cmNoYXNlIG11bHRpcGxlIHZpZGVvIGdhbWUgSXRlbXMuCiAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VWaWRlb0dhbWVJdGVtKHVpbnQgX3ZpZGVvR2FtZUl0ZW1JZCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHZpZGVvR2FtZUl0ZW1zW192aWRlb0dhbWVJdGVtSWRdLmN1cnJlbnRQcmljZSk7CiAgICAgICAgcmVxdWlyZShpc1BhdXNlZCA9PSBmYWxzZSk7CgogICAgICAgIENyeXB0b1ZpZGVvR2FtZXMgcGFyZW50Q29udHJhY3QgPSBDcnlwdG9WaWRlb0dhbWVzKGNyeXB0b1ZpZGVvR2FtZXMpOwogICAgICAgIHVpbnQyNTYgY3VycmVudFByaWNlID0gdmlkZW9HYW1lSXRlbXNbX3ZpZGVvR2FtZUl0ZW1JZF0uY3VycmVudFByaWNlOwogICAgICAgIHVpbnQyNTYgZXhjZXNzID0gbXNnLnZhbHVlIC0gY3VycmVudFByaWNlOwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgMTAlIHZhbHVlCiAgICAgICAgdWludDI1NiBkZXZGZWUgPSAoY3VycmVudFByaWNlIC8gMTApOwogICAgICAgIHVpbnQyNTYgcGFyZW50T3duZXJGZWUgPSAoY3VycmVudFByaWNlIC8gMTApOwoKICAgICAgICBhZGRyZXNzIHBhcmVudE93bmVyID0gcGFyZW50Q29udHJhY3QuZ2V0VmlkZW9HYW1lT3duZXIodmlkZW9HYW1lSXRlbXNbX3ZpZGVvR2FtZUl0ZW1JZF0ucGFyZW50VmlkZW9HYW1lKTsKICAgICAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHZpZGVvIGdhbWUgb3duZXIgY29tbWlzc2lvbiBvbiB0aGlzIHNhbGUgJiB0cmFuc2ZlciB0aGUgY29tbWlzc2lvbiB0byB0aGUgb3duZXIuICAgICAKICAgICAgICB1aW50MjU2IGNvbW1pc3Npb25Pd25lciA9IGN1cnJlbnRQcmljZSAtIGRldkZlZSAtIHBhcmVudE93bmVyRmVlOyAvLyA9PiA4MCUKICAgICAgICB2aWRlb0dhbWVJdGVtc1tfdmlkZW9HYW1lSXRlbUlkXS5vd25lckFkZHJlc3MudHJhbnNmZXIoY29tbWlzc2lvbk93bmVyKTsKCiAgICAgICAgLy8gVHJhbnNmZXIgdGhlIDEwJSBjb21taXNzaW9uIHRvIHRoZSBkZXZlbG9wZXIKICAgICAgICBkZXZGZWVBZGRyZXNzLnRyYW5zZmVyKGRldkZlZSk7IC8vID0+IDEwJSAKICAgICAgICBwYXJlbnRPd25lci50cmFuc2ZlcihwYXJlbnRPd25lckZlZSk7IC8vID0+IDEwJSAgIAogICAgICAgIG5ld093bmVyLnRyYW5zZmVyKGV4Y2Vzcyk7ICAgICAgICAgICAgICAKCiAgICAgICAgLy8gVXBkYXRlIHRoZSB2aWRlbyBnYW1lIG93bmVyIGFuZCBzZXQgdGhlIG5ldyBwcmljZQogICAgICAgIHZpZGVvR2FtZUl0ZW1zW192aWRlb0dhbWVJdGVtSWRdLm93bmVyQWRkcmVzcyA9IG5ld093bmVyOwogICAgICAgIHZpZGVvR2FtZUl0ZW1zW192aWRlb0dhbWVJdGVtSWRdLmN1cnJlbnRQcmljZSA9IG11bCh2aWRlb0dhbWVJdGVtc1tfdmlkZW9HYW1lSXRlbUlkXS5jdXJyZW50UHJpY2UsIDIpOwogICAgfQogICAgCiAgICAvKgogICAgVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCBieSB0aGUgb3duZXIgb2YgYSB2aWRlbyBnYW1lIGl0ZW0gdG8gbW9kaWZ5IHRoZSBwcmljZSBvZiBpdHMgdmlkZW8gZ2FtZSBpdGVtLgogICAgSGUgY2FuIG1ha2UgdGhlIHByaWNlIGxlc3NlciB0aGFuIHRoZSBjdXJyZW50IHByaWNlIG9ubHkuCiAgICAqLwogICAgZnVuY3Rpb24gbW9kaWZ5Q3VycmVudFZpZGVvR2FtZUl0ZW1QcmljZSh1aW50IF92aWRlb0dhbWVJdGVtSWQsIHVpbnQyNTYgX25ld1ByaWNlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX25ld1ByaWNlID4gMCk7CiAgICAgICAgcmVxdWlyZSh2aWRlb0dhbWVJdGVtc1tfdmlkZW9HYW1lSXRlbUlkXS5vd25lckFkZHJlc3MgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShfbmV3UHJpY2UgPCB2aWRlb0dhbWVJdGVtc1tfdmlkZW9HYW1lSXRlbUlkXS5jdXJyZW50UHJpY2UpOwogICAgICAgIHZpZGVvR2FtZUl0ZW1zW192aWRlb0dhbWVJdGVtSWRdLmN1cnJlbnRQcmljZSA9IF9uZXdQcmljZTsKICAgIH0KICAgIAogICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhbGwgb2YgdGhlIGRldGFpbHMgb2YgdGhlIFZpZGVvIEdhbWUgSXRlbQogICAgZnVuY3Rpb24gZ2V0VmlkZW9HYW1lSXRlbURldGFpbHModWludCBfdmlkZW9HYW1lSXRlbUlkKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAgICAgICBzdHJpbmcgdmlkZW9HYW1lSXRlbU5hbWUsCiAgICAgICAgYWRkcmVzcyBvd25lckFkZHJlc3MsCiAgICAgICAgdWludDI1NiBjdXJyZW50UHJpY2UsCiAgICAgICAgdWludCBwYXJlbnRWaWRlb0dhbWUKICAgICkgewogICAgICAgIFZpZGVvR2FtZUl0ZW0gbWVtb3J5IF92aWRlb0dhbWVJdGVtID0gdmlkZW9HYW1lSXRlbXNbX3ZpZGVvR2FtZUl0ZW1JZF07CgogICAgICAgIHZpZGVvR2FtZUl0ZW1OYW1lID0gX3ZpZGVvR2FtZUl0ZW0udmlkZW9HYW1lSXRlbU5hbWU7CiAgICAgICAgb3duZXJBZGRyZXNzID0gX3ZpZGVvR2FtZUl0ZW0ub3duZXJBZGRyZXNzOwogICAgICAgIGN1cnJlbnRQcmljZSA9IF92aWRlb0dhbWVJdGVtLmN1cnJlbnRQcmljZTsKICAgICAgICBwYXJlbnRWaWRlb0dhbWUgPSBfdmlkZW9HYW1lSXRlbS5wYXJlbnRWaWRlb0dhbWU7CiAgICB9CiAgICAKICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gb25seSB0aGUgcHJpY2Ugb2YgYSBzcGVjaWZpYyBWaWRlbyBHYW1lIEl0ZW0KICAgIGZ1bmN0aW9uIGdldFZpZGVvR2FtZUl0ZW1DdXJyZW50UHJpY2UodWludCBfdmlkZW9HYW1lSXRlbUlkKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4odmlkZW9HYW1lSXRlbXNbX3ZpZGVvR2FtZUl0ZW1JZF0uY3VycmVudFByaWNlKTsKICAgIH0KICAgIAogICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBvbmx5IHRoZSBvd25lciBhZGRyZXNzIG9mIGEgc3BlY2lmaWMgVmlkZW8gR2FtZQogICAgZnVuY3Rpb24gZ2V0VmlkZW9HYW1lSXRlbU93bmVyKHVpbnQgX3ZpZGVvR2FtZUl0ZW1JZCkgcHVibGljIHZpZXcgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuKHZpZGVvR2FtZUl0ZW1zW192aWRlb0dhbWVJdGVtSWRdLm93bmVyQWRkcmVzcyk7CiAgICB9CiAgICAKICAgIAogICAgLyoqCiAgICBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4gPT4gRnJvbSB0aGUgU2FmZU1hdGggbGlicmFyeQogICAgKi8KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuID0+IEZyb20gdGhlIFNhZmVNYXRoIGxpYnJhcnkKICAgICovCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICAKICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIHRvIGFkZCBhIG5ldyB2aWRlbyBnYW1lIGJ5IHRoZSBjb250cmFjdCBjcmVhdG9yCiAgICBmdW5jdGlvbiBhZGRWaWRlb0dhbWVJdGVtKHN0cmluZyB2aWRlb0dhbWVJdGVtTmFtZSwgYWRkcmVzcyBvd25lckFkZHJlc3MsIHVpbnQyNTYgY3VycmVudFByaWNlLCB1aW50IHBhcmVudFZpZGVvR2FtZSkgcHVibGljIG9ubHlDb250cmFjdENyZWF0b3IgewogICAgICAgIHZpZGVvR2FtZUl0ZW1zLnB1c2goVmlkZW9HYW1lSXRlbSh2aWRlb0dhbWVJdGVtTmFtZSxvd25lckFkZHJlc3MsY3VycmVudFByaWNlLCBwYXJlbnRWaWRlb0dhbWUpKTsKICAgIH0KICAgIAp9CgoKCmNvbnRyYWN0IENyeXB0b1ZpZGVvR2FtZXMgewogICAgCiAgICAKICAgIAogICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBvbmx5IHRoZSBvd25lciBhZGRyZXNzIG9mIGEgc3BlY2lmaWMgVmlkZW8gR2FtZQogICAgZnVuY3Rpb24gZ2V0VmlkZW9HYW1lT3duZXIodWludCBfdmlkZW9HYW1lSWQpIHB1YmxpYyB2aWV3IHJldHVybnMoYWRkcmVzcykgewogICAgfQogICAgCn0='.
	

]
