Class {
	#name : #SRTCCadc21564e5c44032B7f44494dE425C1066219C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTCCadc21564e5c44032B7f44494dE425C1066219C >> base64 [
	^ ''.
	

]
