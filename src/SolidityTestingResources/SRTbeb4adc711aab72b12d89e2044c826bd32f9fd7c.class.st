Class {
	#name : #SRTbeb4adc711aab72b12d89e2044c826bd32f9fd7c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbeb4adc711aab72b12d89e2044c826bd32f9fd7c >> base64 [
	^ ''.
	

]
