Class {
	#name : #SRT595832f8fc6bf59c85c527fec3740a1b7a361269,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT595832f8fc6bf59c85c527fec3740a1b7a361269 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBFUkMyMFRva2VuSW50ZXJmYWNlIHsKCiAgICAvLy8gQHJldHVybiBUaGUgdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IFBvd2VyTGVkZ2VyIGlzIEVSQzIwVG9rZW5JbnRlcmZhY2UgewoKICAvLy8vIENvbnN0YW50cyAvLy8vCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ1Bvd2VyTGVkZ2VyJzsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDY7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAnUE9XUic7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCB2ZXJzaW9uID0gJzEuMCc7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBub3RlID0gJ0RlbW9jcmF0aXphdGlvbiBvZiBQb3dlcic7CgogIC8vIE9uZSBiaWxsaW9uIGNvaW5zLCBlYWNoIGRpdmlkZWQgdG8gdXAgdG8gMTBeZGVjaW1hbHMgdW5pdHMuCiAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IHRvdGFsVG9rZW5zID0gMTAwMDAwMDAwMCAqICgxMCAqKiBkZWNpbWFscyk7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VzOyAvLyAoRVJDMjApCiAgLy8gQSBtYXBwaW5nIGZyb20gYW4gYWNjb3VudCBvd25lciB0byBhIG1hcCBmcm9tIGFwcHJvdmVkIHNwZW5kZXIgdG8gdGhlaXIgYWxsb3dhbmNlcy4KICAvLyAoc2VlIEVSQzIwIGZvciBkZXRhaWxzIGFib3V0IGFsbG93YW5jZXMpLgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWQ7IC8vIChFUkMyMCkKCiAgLy8vLyBFdmVudHMgLy8vLwogIGV2ZW50IE1pZ3JhdGlvbkluZm9TZXQoc3RyaW5nIG5ld01pZ3JhdGlvbkluZm8pOwoKICAvLyBUaGlzIGlzIHRvIGJlIHVzZWQgd2hlbiBtaWdyYXRpb24gdG8gYSBuZXcgY29udHJhY3Qgc3RhcnRzLgogIC8vIFRoaXMgc3RyaW5nIGNhbiBiZSB1c2VkIGZvciBhbnkgYXV0aG9yYXRpdmUgaW5mb3JtYXRpb24gcmUgdGhlIG1pZ3JhdGlvbgogIC8vIChlLmcuIGFkZHJlc3MgdG8gdXNlIGZvciBtaWdyYXRpb24sIG9yIFVSTCB0byBleHBsYWluIHdoZXJlIHRvIGZpbmQgbW9yZSBpbmZvKQogIHN0cmluZyBwdWJsaWMgbWlncmF0aW9uSW5mbyA9ICIiOwoKICAvLyBUaGUgb25seSBhZGRyZXNzIHRoYXQgY2FuIHNldCBtaWdyYXRpb25Db250cmFjdEFkZHJlc3MsIGEgc2VjdXJlIG11bHRpc2lnLgogIGFkZHJlc3MgcHVibGljIG1pZ3JhdGlvbkluZm9TZXR0ZXI7CgogIC8vLy8gTW9kaWZpZXJzIC8vLy8KICBtb2RpZmllciBvbmx5RnJvbU1pZ3JhdGlvbkluZm9TZXR0ZXIgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gbWlncmF0aW9uSW5mb1NldHRlcikgewogICAgICB0aHJvdzsKICAgIH0KICAgIF87CiAgfQoKICAvLy8vIFB1YmxpYyBmdW5jdGlvbnMgLy8vLwogIGZ1bmN0aW9uIFBvd2VyTGVkZ2VyKGFkZHJlc3MgX21pZ3JhdGlvbkluZm9TZXR0ZXIpIHsKICAgIGlmIChfbWlncmF0aW9uSW5mb1NldHRlciA9PSAwKSB0aHJvdzsKICAgIG1pZ3JhdGlvbkluZm9TZXR0ZXIgPSBfbWlncmF0aW9uSW5mb1NldHRlcjsKICAgIC8vIFVwb24gY3JlYXRpb24sIGFsbCB0b2tlbnMgYmVsb25nIHRvIHRoZSBkZXBsb3llci4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxUb2tlbnM7CiAgfQoKICAvLyBTZWUgRVJDMjAKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFRva2VuczsKICB9CgogIC8vIFNlZSBFUkMyMAogIC8vIFdBUk5JTkc6IElmIHlvdSBjYWxsIHRoaXMgd2l0aCB0aGUgYWRkcmVzcyBvZiBhIGNvbnRyYWN0LCB0aGUgY29udHJhY3Qgd2lsbCByZWNlaXZlIHRoZQogIC8vIGZ1bmRzLCBidXQgd2lsbCBoYXZlIG5vIGlkZWEgd2hlcmUgdGhleSBjYW1lIGZyb20uIEZ1cnRoZXJtb3JlLCBpZiB0aGUgY29udHJhY3QgaXMKICAvLyBub3QgYXdhcmUgb2YgUE9XUiwgdGhlIHRva2VucyB3aWxsIHJlbWFpbiBsb2NrZWQgYXdheSBpbiB0aGUgY29udHJhY3QgZm9yZXZlci4KICAvLyBJdCBpcyBhbHdheXMgcmVjb21tZW5kZWQgdG8gY2FsbCBpbnN0ZWFkIGNvbXBhcmVBbmRBcHByb3ZlKCkgKG9yIGFwcHJvdmUoKSkgYW5kIGhhdmUgdGhlCiAgLy8gcmVjZWl2aW5nIGNvbnRyYWN0IHdpdGhkcmF3IHRoZSBtb25leSB1c2luZyB0cmFuc2ZlckZyb20oKS4KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKSB7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBTZWUgRVJDMjAKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKSB7CiAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLy8gU2VlIEVSQzIwCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICAvLyBTZWUgRVJDMjAKICAvLyBOT1RFOiB0aGlzIG1ldGhvZCBpcyB2dWxuZXJhYmxlIGFuZCBpcyBwbGFjZWQgaGVyZSBvbmx5IHRvIGZvbGxvdyB0aGUgRVJDMjAgc3RhbmRhcmQuCiAgLy8gQmVmb3JlIHVzaW5nLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgdGhlIGJldHRlciBjb21wYXJlQW5kQXBwcm92ZSBiZWxvdy4KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gQSB2dWxlcm5hYmlsaXR5IG9mIHRoZSBhcHByb3ZlIG1ldGhvZCBpbiB0aGUgRVJDMjAgc3RhbmRhcmQgd2FzIGlkZW50aWZpZWQgYnkKICAvLyBNaWtoYWlsIFZsYWRpbWlyb3YgYW5kIERtaXRyeSBLaG92cmF0b3ZpY2ggaGVyZToKICAvLyBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFZTFB0UXhadTFVQXZPOWNaMU8yUlBYQmJUMG1vb2g0RFlLakFfanAtUkxNCiAgLy8gSXQncyBiZXR0ZXIgdG8gdXNlIHRoaXMgbWV0aG9kIHdoaWNoIGlzIG5vdCBzdXNjZXB0aWJsZSB0byBvdmVyLXdpdGhkcmF3aW5nIGJ5IHRoZSBhcHByb3ZlZS4KICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHRvIGFwcHJvdmUKICAvLy8gQHBhcmFtIF9jdXJyZW50VmFsdWUgVGhlIHByZXZpb3VzIHZhbHVlIGFwcHJvdmVkLCB3aGljaCBjYW4gYmUgcmV0cmlldmVkIHdpdGggYWxsb3dhbmNlKG1zZy5zZW5kZXIsIF9zcGVuZGVyKQogIC8vLyBAcGFyYW0gX25ld1ZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gYXBwcm92ZSwgdGhpcyB3aWxsIHJlcGxhY2UgdGhlIF9jdXJyZW50VmFsdWUKICAvLy8gQHJldHVybiBib29sIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBhIHN1Y2Nlc3MgKHNlZSBFUkMyMCdzIGBhcHByb3ZlYCkKICBmdW5jdGlvbiBjb21wYXJlQW5kQXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9jdXJyZW50VmFsdWUsIHVpbnQyNTYgX25ld1ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICBpZiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gX2N1cnJlbnRWYWx1ZSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gYXBwcm92ZShfc3BlbmRlciwgX25ld1ZhbHVlKTsKICB9CgogIC8vIFNlZSBFUkMyMAogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8vIEFsbG93cyBzZXR0aW5nIGEgZGVzY3JpcHRpdmUgc3RyaW5nLCB3aGljaCB3aWxsIGFpZCBhbnkgdXNlcnMgaW4gbWlncmF0aW5nIHRoZWlyIHRva2VuCiAgLy8gdG8gYSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBjb250cmFjdC4gVGhpcyBmaWVsZCBwcm92aWRlcyBhIGtpbmQgb2YgJ2RvdWJsZS1sYXllcicgb2YKICAvLyBhdXRoZW50aWNhdGlvbiBmb3IgYW55IG1pZ3JhdGlvbiBhbm5vdW5jZW1lbnQsIGFzIGl0IGNhbiBvbmx5IGJlIHNldCBieSBQb3dlckxlZGdlci4KICAvLy8gQHBhcmFtIF9taWdyYXRpb25JbmZvIFRoZSBpbmZvcm1hdGlvbiBzdHJpbmcgdG8gYmUgc3RvcmVkIG9uIHRoZSBjb250cmFjdAogIGZ1bmN0aW9uIHNldE1pZ3JhdGlvbkluZm8oc3RyaW5nIF9taWdyYXRpb25JbmZvKSBvbmx5RnJvbU1pZ3JhdGlvbkluZm9TZXR0ZXIgcHVibGljIHsKICAgIG1pZ3JhdGlvbkluZm8gPSBfbWlncmF0aW9uSW5mbzsKICAgIE1pZ3JhdGlvbkluZm9TZXQoX21pZ3JhdGlvbkluZm8pOwogIH0KCiAgLy8gVG8gYmUgdXNlZCBpZiB0aGUgbWlncmF0aW9uSW5mb1NldHRlciB3aXNoZXMgdG8gdHJhbnNmZXIgdGhlIG1pZ3JhdGlvbkluZm9TZXR0ZXIKICAvLyBwZXJtaXNzaW9uIHRvIGEgbmV3IGFjY291bnQsIGUuZy4gYmVjYXVzZSBvZiBjaGFuZ2UgaW4gcGVyc29ubmVsLCBhIGNvbmNlcm4gdGhhdCBhY2NvdW50CiAgLy8gbWF5IGhhdmUgYmVlbiBjb21wcm9taXNlZCBldGMuCiAgLy8vIEBwYXJhbSBfbmV3TWlncmF0aW9uSW5mb1NldHRlciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IE1pZ3JhdGlvbiBJbmZvIFNldHRlcgogIGZ1bmN0aW9uIGNoYW5nZU1pZ3JhdGlvbkluZm9TZXR0ZXIoYWRkcmVzcyBfbmV3TWlncmF0aW9uSW5mb1NldHRlcikgb25seUZyb21NaWdyYXRpb25JbmZvU2V0dGVyIHB1YmxpYyB7CiAgICBtaWdyYXRpb25JbmZvU2V0dGVyID0gX25ld01pZ3JhdGlvbkluZm9TZXR0ZXI7CiAgfQp9'.
	

]
