Class {
	#name : #SRTe531642e9bb5d027e9c20e03284287b97919a9a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe531642e9bb5d027e9c20e03284287b97919a9a5 >> base64 [
	^ ''.
	

]
