Class {
	#name : #SRT4c8c52d8cc106b71cee9a3417711a5b93a3fbef6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c8c52d8cc106b71cee9a3417711a5b93a3fbef6 >> base64 [
	^ ''.
	

]
