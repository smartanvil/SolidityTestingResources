Class {
	#name : #SRT10f135ce102eee47dca8fe8e19dca6324dfbd684,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT10f135ce102eee47dca8fe8e19dca6324dfbd684 >> base64 [
	^ ''.
	

]
