Class {
	#name : #SRTbed908dc39c34125314f2141079b5ffadb270300,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbed908dc39c34125314f2141079b5ffadb270300 >> base64 [
	^ ''.
	

]
