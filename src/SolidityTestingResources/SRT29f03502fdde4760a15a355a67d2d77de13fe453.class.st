Class {
	#name : #SRT29f03502fdde4760a15a355a67d2d77de13fe453,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29f03502fdde4760a15a355a67d2d77de13fe453 >> base64 [
	^ ''.
	

]
