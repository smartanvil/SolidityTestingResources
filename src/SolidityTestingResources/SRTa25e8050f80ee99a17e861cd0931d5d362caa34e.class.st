Class {
	#name : #SRTa25e8050f80ee99a17e861cd0931d5d362caa34e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa25e8050f80ee99a17e861cd0931d5d362caa34e >> base64 [
	^ ''.
	

]
