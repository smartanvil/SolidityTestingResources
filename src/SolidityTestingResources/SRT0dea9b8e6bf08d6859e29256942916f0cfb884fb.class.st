Class {
	#name : #SRT0dea9b8e6bf08d6859e29256942916f0cfb884fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0dea9b8e6bf08d6859e29256942916f0cfb884fb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7IC8vIHNvbGhpbnQtZGlzYWJsZS1saW5lCgoKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBOb24tRnVuZ2libGUgVG9rZW5zCi8vLyBAYXV0aG9yIERpZXRlciBTaGlybGV5IDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNmIwZjBlMWYwZTJiMGExMzAyMDQwNjExMGUwNTQ1MDgwNCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+IChodHRwczovL2dpdGh1Yi5jb20vZGV0ZSkKY29udHJhY3QgRVJDNzIxIHsKICAvLyBSZXF1aXJlZCBtZXRob2RzCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIGFkZHIpOwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB0b2tlbklkKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBhcHByb3ZlZCwgdWludDI1NiB0b2tlbklkKTsKCn0KCmNvbnRyYWN0IENyeXB0b0FsbFN0YXJzIGlzIEVSQzcyMSB7CgogIC8qKiogRVZFTlRTICoqKi8KCiAgLy8vIEBkZXYgVGhlIEJpcnRoIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgbmV3IHBlcnNvbiBjb21lcyBpbnRvIGV4aXN0ZW5jZS4KICBldmVudCBCaXJ0aCh1aW50MjU2IHRva2VuSWQsIHN0cmluZyBuYW1lLCBhZGRyZXNzIG93bmVyKTsKCiAgLy8vIEBkZXYgVGhlIFRva2VuU29sZCBldmVudCBpcyBmaXJlZCB3aGVuZXZlciBhIHRva2VuIGlzIHNvbGQuCiAgZXZlbnQgVG9rZW5Tb2xkKHVpbnQyNTYgdG9rZW5JZCwgdWludDI1NiBvbGRQcmljZSwgdWludDI1NiBuZXdQcmljZSwgYWRkcmVzcyBwcmV2T3duZXIsIGFkZHJlc3Mgd2lubmVyLCBzdHJpbmcgbmFtZSk7CgogIC8vLyBAZGV2IFRyYW5zZmVyIGV2ZW50IGFzIGRlZmluZWQgaW4gY3VycmVudCBkcmFmdCBvZiBFUkM3MjEuIAogIC8vLyAgb3duZXJzaGlwIGlzIGFzc2lnbmVkLCBpbmNsdWRpbmcgYmlydGhzLgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB0b2tlbklkKTsKCiAgLyoqKiBDT05TVEFOVFMgKioqLwoKICAvLy8gQG5vdGljZSBOYW1lIGFuZCBzeW1ib2wgb2YgdGhlIG5vbiBmdW5naWJsZSB0b2tlbiwgYXMgZGVmaW5lZCBpbiBFUkM3MjEuCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBOQU1FID0gIkNyeXB0b0FsbFN0YXJzIjsgLy8gc29saGludC1kaXNhYmxlLWxpbmUKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFNZTUJPTCA9ICJBbGxTdGFyVG9rZW4iOyAvLyBzb2xoaW50LWRpc2FibGUtbGluZQoKICB1aW50MjU2IHByaXZhdGUgc3RhcnRpbmdQcmljZSA9IDAuMDAxIGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBQUk9NT19DUkVBVElPTl9MSU1JVCA9IDUwMDA7CiAgdWludDI1NiBwcml2YXRlIGZpcnN0U3RlcExpbWl0ID0gIDAuMDUzNjEzIGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBzZWNvbmRTdGVwTGltaXQgPSAwLjU2NDk1NyBldGhlcjsKCiAgLyoqKiBTVE9SQUdFICoqKi8KCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gcGVyc29uIElEcyB0byB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlbS4gQWxsIHBlcnNvbnMgaGF2ZQogIC8vLyAgc29tZSB2YWxpZCBvd25lciBhZGRyZXNzLgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHBlcnNvbkluZGV4VG9Pd25lcjsKCiAgLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBvd25lciBhZGRyZXNzIHRvIGNvdW50IG9mIHRva2VucyB0aGF0IGFkZHJlc3Mgb3ducy4KICAvLyAgVXNlZCBpbnRlcm5hbGx5IGluc2lkZSBiYWxhbmNlT2YoKSB0byByZXNvbHZlIG93bmVyc2hpcCBjb3VudC4KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZXJzaGlwVG9rZW5Db3VudDsKCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gUGVyc29uSURzIHRvIGFuIGFkZHJlc3MgdGhhdCBoYXMgYmVlbiBhcHByb3ZlZCB0byBjYWxsCiAgLy8vICB0cmFuc2ZlckZyb20oKS4gRWFjaCBQZXJzb24gY2FuIG9ubHkgaGF2ZSBvbmUgYXBwcm92ZWQgYWRkcmVzcyBmb3IgdHJhbnNmZXIKICAvLy8gIGF0IGFueSB0aW1lLiBBIHplcm8gdmFsdWUgbWVhbnMgbm8gYXBwcm92YWwgaXMgb3V0c3RhbmRpbmcuCiAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgcGVyc29uSW5kZXhUb0FwcHJvdmVkOwoKICAvLyBAZGV2IEEgbWFwcGluZyBmcm9tIFBlcnNvbklEcyB0byB0aGUgcHJpY2Ugb2YgdGhlIHRva2VuLgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBwZXJzb25JbmRleFRvUHJpY2U7CgogIC8vIFRoZSBhZGRyZXNzZXMgb2YgdGhlIGFjY291bnRzIChvciBjb250cmFjdHMpIHRoYXQgY2FuIGV4ZWN1dGUgYWN0aW9ucyB3aXRoaW4gZWFjaCByb2xlcy4KICBhZGRyZXNzIHB1YmxpYyBjZW8gPSAweDA0N0Y2MDZmRDViMkJhQTVmNUM2YzRhQjg5NThFNDVDQjZCMDU0Qjc7CgogIHVpbnQyNTYgcHVibGljIHByb21vQ3JlYXRlZENvdW50OwoKICAvKioqIERBVEFUWVBFUyAqKiovCiAgc3RydWN0IFBlcnNvbiB7CiAgICBzdHJpbmcgbmFtZTsKICB9CgogIFBlcnNvbltdIHByaXZhdGUgcGVyc29uczsKCiAgLyoqKiBBQ0NFU1MgTU9ESUZJRVJTICoqKi8KICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIG93bmVyIG9ubHkgZnVuY3Rpb25hbGl0eQogIG1vZGlmaWVyIG9ubHlDZW8oKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2VvKTsKICAgIF87CiAgfQoKIAogIC8qKiogQ09OU1RSVUNUT1IgKioqLwogIC8vIGZ1bmN0aW9uIENyeXB0b0FsbFN0YXJzKCkgcHVibGljIHsKICAvLyAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAvLyB9CgogIC8qKiogUFVCTElDIEZVTkNUSU9OUyAqKiovCiAgLy8vIEBub3RpY2UgR3JhbnQgYW5vdGhlciBhZGRyZXNzIHRoZSByaWdodCB0byB0cmFuc2ZlciB0b2tlbiB2aWEgdGFrZU93bmVyc2hpcCgpIGFuZCB0cmFuc2ZlckZyb20oKS4KICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byBiZSBncmFudGVkIHRyYW5zZmVyIGFwcHJvdmFsLiBQYXNzIGFkZHJlc3MoMCkgdG8KICAvLy8gIGNsZWFyIGFsbCBhcHByb3ZhbHMuCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIGFwcHJvdmUoCiAgICBhZGRyZXNzIF90bywKICAgIHVpbnQyNTYgX3Rva2VuSWQKICApIHB1YmxpYyB7CiAgICAvLyBDYWxsZXIgbXVzdCBvd24gdG9rZW4uCiAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgcGVyc29uSW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9IF90bzsKCiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8vLyBGb3IgcXVlcnlpbmcgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudAogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZvciBiYWxhbmNlIHF1ZXJ5CiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIG93bmVyc2hpcFRva2VuQ291bnRbX293bmVyXTsKICB9CgogIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgcHJvbW8gUGVyc29uIHdpdGggdGhlIGdpdmVuIG5hbWUsIHdpdGggZ2l2ZW4gX3ByaWNlIGFuZCBhc3NpZ25lcyBpdCB0byBhbiBhZGRyZXNzLgogIGZ1bmN0aW9uIGNyZWF0ZVByb21vUGVyc29uKGFkZHJlc3MgX293bmVyLCBzdHJpbmcgX25hbWUsIHVpbnQyNTYgX3ByaWNlKSBwdWJsaWMgb25seUNlbyB7CiAgICByZXF1aXJlKHByb21vQ3JlYXRlZENvdW50IDwgUFJPTU9fQ1JFQVRJT05fTElNSVQpOwoKICAgIGFkZHJlc3MgcGVyc29uT3duZXIgPSBfb3duZXI7CiAgICBpZiAocGVyc29uT3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICBwZXJzb25Pd25lciA9IGNlbzsKICAgIH0KCiAgICBpZiAoX3ByaWNlIDw9IDApIHsKICAgICAgX3ByaWNlID0gc3RhcnRpbmdQcmljZTsKICAgIH0KCiAgICBwcm9tb0NyZWF0ZWRDb3VudCsrOwogICAgX2NyZWF0ZVBlcnNvbihfbmFtZSwgcGVyc29uT3duZXIsIF9wcmljZSk7CiAgfQoKICAvLy8gQGRldiBDcmVhdGVzIGEgbmV3IFBlcnNvbiB3aXRoIHRoZSBnaXZlbiBuYW1lLgogIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyYWN0UGVyc29uKHN0cmluZyBfbmFtZSkgcHVibGljIG9ubHlDZW8gewogICAgX2NyZWF0ZVBlcnNvbihfbmFtZSwgbXNnLnNlbmRlciwgc3RhcnRpbmdQcmljZSk7CiAgfQoKICAvLy8gQG5vdGljZSBSZXR1cm5zIGFsbCB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBwZXJzb24uCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgdG9rZW5JZCBvZiB0aGUgcGVyc29uIG9mIGludGVyZXN0LgogIGZ1bmN0aW9uIGdldFBlcnNvbih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAgIHN0cmluZyBwZXJzb25OYW1lLAogICAgdWludDI1NiBzZWxsaW5nUHJpY2UsCiAgICBhZGRyZXNzIG93bmVyCiAgKSB7CiAgICBQZXJzb24gc3RvcmFnZSBwZXJzb24gPSBwZXJzb25zW190b2tlbklkXTsKICAgIHBlcnNvbk5hbWUgPSBwZXJzb24ubmFtZTsKICAgIHNlbGxpbmdQcmljZSA9IHBlcnNvbkluZGV4VG9QcmljZVtfdG9rZW5JZF07CiAgICBvd25lciA9IHBlcnNvbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgfQoKICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgIHJldHVybiBOQU1FOwogIH0KCiAgLy8vIEZvciBxdWVyeWluZyBvd25lciBvZiB0b2tlbgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIHRva2VuSUQgZm9yIG93bmVyIGlucXVpcnkKICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkKICAgIHB1YmxpYwogICAgdmlldwogICAgcmV0dXJucyAoYWRkcmVzcyBvd25lcikKICB7CiAgICBvd25lciA9IHBlcnNvbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogIH0KCiAgZnVuY3Rpb24gcGF5b3V0KGFkZHJlc3MgX3RvKSBwdWJsaWMgb25seUNlbyB7CiAgICBfcGF5b3V0KF90byk7CiAgfQoKICAvLyBBbGxvd3Mgc29tZW9uZSB0byBzZW5kIGV0aGVyIGFuZCBvYnRhaW4gdGhlIHRva2VuCiAgZnVuY3Rpb24gcHVyY2hhc2UodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHBheWFibGUgewogICAgYWRkcmVzcyBvbGRPd25lciA9IHBlcnNvbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKCiAgICB1aW50MjU2IHNlbGxpbmdQcmljZSA9IHBlcnNvbkluZGV4VG9QcmljZVtfdG9rZW5JZF07CgogICAgLy8gTWFraW5nIHN1cmUgdG9rZW4gb3duZXIgaXMgbm90IHNlbmRpbmcgdG8gc2VsZgogICAgcmVxdWlyZShvbGRPd25lciAhPSBuZXdPd25lcik7CgogICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAvLyBNYWtpbmcgc3VyZSBzZW50IGFtb3VudCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbGxpbmdQcmljZQogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gc2VsbGluZ1ByaWNlKTsKCiAgICB1aW50MjU2IHBheW1lbnQgPSB1aW50MjU2KFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCA5NCksIDEwMCkpOwogICAgdWludDI1NiBwdXJjaGFzZUV4Y2VzcyA9IFNhZmVNYXRoLnN1Yihtc2cudmFsdWUsIHNlbGxpbmdQcmljZSk7CgogICAgLy8gVXBkYXRlIHByaWNlcwogICAgaWYgKHNlbGxpbmdQcmljZSA8IGZpcnN0U3RlcExpbWl0KSB7CiAgICAgIC8vIGZpcnN0IHN0YWdlCiAgICAgIHBlcnNvbkluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgMjAwKSwgOTQpOwogICAgfSBlbHNlIGlmIChzZWxsaW5nUHJpY2UgPCBzZWNvbmRTdGVwTGltaXQpIHsKICAgICAgLy8gc2Vjb25kIHN0YWdlCiAgICAgIHBlcnNvbkluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgMTIwKSwgOTQpOwogICAgfSBlbHNlIHsKICAgICAgLy8gdGhpcmQgc3RhZ2UKICAgICAgcGVyc29uSW5kZXhUb1ByaWNlW190b2tlbklkXSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCAxMTUpLCA5NCk7CiAgICB9CgogICAgX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwoKICAgIC8vIFBheSBwcmV2aW91cyB0b2tlbk93bmVyIGlmIG93bmVyIGlzIG5vdCBjb250cmFjdAogICAgaWYgKG9sZE93bmVyICE9IGFkZHJlc3ModGhpcykpIHsKICAgICAgb2xkT3duZXIudHJhbnNmZXIocGF5bWVudCk7IC8vKDEtMC4wNikKICAgIH0KCiAgICBUb2tlblNvbGQoX3Rva2VuSWQsIHNlbGxpbmdQcmljZSwgcGVyc29uSW5kZXhUb1ByaWNlW190b2tlbklkXSwgb2xkT3duZXIsIG5ld093bmVyLCBwZXJzb25zW190b2tlbklkXS5uYW1lKTsKCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHB1cmNoYXNlRXhjZXNzKTsKICB9CgogIGZ1bmN0aW9uIHByaWNlT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBwcmljZSkgewogICAgcmV0dXJuIHBlcnNvbkluZGV4VG9QcmljZVtfdG9rZW5JZF07CiAgfQoKICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBvd25lci4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgb3duZXIuCiAgLy8vIEBwYXJhbSBfbmV3T3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBvd25lcgogIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seUNlbyB7CiAgICByZXF1aXJlKF9uZXdPd25lciAhPSBhZGRyZXNzKDApKTsKCiAgICBjZW8gPSBfbmV3T3duZXI7CiAgfQoKCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgIHJldHVybiBTWU1CT0w7CiAgfQoKICAvLy8gQG5vdGljZSBBbGxvdyBwcmUtYXBwcm92ZWQgdXNlciB0byB0YWtlIG93bmVyc2hpcCBvZiBhIHRva2VuCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIGFkZHJlc3MgbmV3T3duZXIgPSBtc2cuc2VuZGVyOwogICAgYWRkcmVzcyBvbGRPd25lciA9IHBlcnNvbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CgogICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAvLyBNYWtpbmcgc3VyZSB0cmFuc2ZlciBpcyBhcHByb3ZlZAogICAgcmVxdWlyZShfYXBwcm92ZWQobmV3T3duZXIsIF90b2tlbklkKSk7CgogICAgX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwogIH0KCgogIGZ1bmN0aW9uIHRva2Vuc09mT3duZXIoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NltdIG93bmVyVG9rZW5zKSB7CiAgICB1aW50MjU2IHRva2VuQ291bnQgPSBiYWxhbmNlT2YoX293bmVyKTsKICAgIGlmICh0b2tlbkNvdW50ID09IDApIHsKICAgICAgICAvLyBSZXR1cm4gYW4gZW1wdHkgYXJyYXkKICAgICAgcmV0dXJuIG5ldyB1aW50MjU2W10oMCk7CiAgICB9IGVsc2UgewogICAgICB1aW50MjU2W10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50MjU2W10odG9rZW5Db3VudCk7CiAgICAgIHVpbnQyNTYgdG90YWxQZXJzb25zID0gdG90YWxTdXBwbHkoKTsKICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICB1aW50MjU2IHBlcnNvbklkOwogICAgICBmb3IgKHBlcnNvbklkID0gMDsgcGVyc29uSWQgPD0gdG90YWxQZXJzb25zOyBwZXJzb25JZCsrKSB7CiAgICAgICAgaWYgKHBlcnNvbkluZGV4VG9Pd25lcltwZXJzb25JZF0gPT0gX293bmVyKSB7CiAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gcGVyc29uSWQ7CiAgICAgICAgICByZXN1bHRJbmRleCsrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0KCiAgLy8vIEZvciBxdWVyeWluZyB0b3RhbFN1cHBseSBvZiB0b2tlbgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKSB7CiAgICByZXR1cm4gcGVyc29ucy5sZW5ndGg7CiAgfQoKICAvLy8gT3duZXIgaW5pdGF0ZXMgdGhlIHRyYW5zZmVyIG9mIHRoZSB0b2tlbiB0byBhbm90aGVyIGFjY291bnQKICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIHRvLgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiB0cmFuc2ZlcigKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdG9rZW5JZAogICkgcHVibGljIHsKICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKF90bykpOwoKICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8vLyBUaGlyZC1wYXJ0eSBpbml0aWF0ZXMgdHJhbnNmZXIgb2YgdG9rZW4gZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIGZyb20uCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZCB0by4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgYWRkcmVzcyBfZnJvbSwKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdG9rZW5JZAogICkgcHVibGljIHsKICAgIHJlcXVpcmUoX293bnMoX2Zyb20sIF90b2tlbklkKSk7CiAgICByZXF1aXJlKF9hcHByb3ZlZChfdG8sIF90b2tlbklkKSk7CiAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKCiAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIH0KCiAgLyoqKiBQUklWQVRFIEZVTkNUSU9OUyAqKiovCiAgLy8vIFNhZmV0eSBjaGVjayBvbiBfdG8gYWRkcmVzcyB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICBmdW5jdGlvbiBfYWRkcmVzc05vdE51bGwoYWRkcmVzcyBfdG8pIHByaXZhdGUgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gX3RvICE9IGFkZHJlc3MoMCk7CiAgfQoKICAvLy8gRm9yIGNoZWNraW5nIGFwcHJvdmFsIG9mIHRyYW5zZmVyIGZvciBhZGRyZXNzIF90bwogIGZ1bmN0aW9uIF9hcHByb3ZlZChhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBwZXJzb25JbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdID09IF90bzsKICB9CgogIC8vLyBGb3IgY3JlYXRpbmcgUGVyc29uCiAgZnVuY3Rpb24gX2NyZWF0ZVBlcnNvbihzdHJpbmcgX25hbWUsIGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9wcmljZSkgcHJpdmF0ZSB7CiAgICBQZXJzb24gbWVtb3J5IF9wZXJzb24gPSBQZXJzb24oewogICAgICBuYW1lOiBfbmFtZQogICAgfSk7CiAgICB1aW50MjU2IG5ld1BlcnNvbklkID0gcGVyc29ucy5wdXNoKF9wZXJzb24pIC0gMTsKCiAgICAvLyBJdCdzIHByb2JhYmx5IG5ldmVyIGdvaW5nIHRvIGhhcHBlbiwgNCBiaWxsaW9uIHRva2VucyBhcmUgQSBMT1QsIGJ1dAogICAgLy8gbGV0J3MganVzdCBiZSAxMDAlIHN1cmUgd2UgbmV2ZXIgbGV0IHRoaXMgaGFwcGVuLgogICAgcmVxdWlyZShuZXdQZXJzb25JZCA9PSB1aW50MjU2KHVpbnQzMihuZXdQZXJzb25JZCkpKTsKCiAgICBCaXJ0aChuZXdQZXJzb25JZCwgX25hbWUsIF9vd25lcik7CgogICAgcGVyc29uSW5kZXhUb1ByaWNlW25ld1BlcnNvbklkXSA9IF9wcmljZTsKCiAgICAvLyBUaGlzIHdpbGwgYXNzaWduIG93bmVyc2hpcCwgYW5kIGFsc28gZW1pdCB0aGUgVHJhbnNmZXIgZXZlbnQgYXMKICAgIC8vIHBlciBFUkM3MjEgZHJhZnQKICAgIF90cmFuc2ZlcihhZGRyZXNzKDApLCBfb3duZXIsIG5ld1BlcnNvbklkKTsKICB9CgogIC8vLyBDaGVjayBmb3IgdG9rZW4gb3duZXJzaGlwCiAgZnVuY3Rpb24gX293bnMoYWRkcmVzcyBjbGFpbWFudCwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBjbGFpbWFudCA9PSBwZXJzb25JbmRleFRvT3duZXJbX3Rva2VuSWRdOwogIH0KCiAgLy8vIEZvciBwYXlpbmcgb3V0IGJhbGFuY2Ugb24gY29udHJhY3QKICBmdW5jdGlvbiBfcGF5b3V0KGFkZHJlc3MgX3RvKSBwcml2YXRlIHsKICAgIGlmIChfdG8gPT0gYWRkcmVzcygwKSkgewogICAgICBjZW8udHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0gZWxzZSB7CiAgICAgIF90by50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQogIH0KCiAgLy8vIEBkZXYgQXNzaWducyBvd25lcnNoaXAgb2YgYSBzcGVjaWZpYyBQZXJzb24gdG8gYW4gYWRkcmVzcy4KICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgewogICAgLy8gU2luY2UgdGhlIG51bWJlciBvZiBwZXJzb25zIGlzIGNhcHBlZCB0byAyXjMyIHdlIGNhbid0IG92ZXJmbG93IHRoaXMKICAgIG93bmVyc2hpcFRva2VuQ291bnRbX3RvXSsrOwogICAgLy90cmFuc2ZlciBvd25lcnNoaXAKICAgIHBlcnNvbkluZGV4VG9Pd25lcltfdG9rZW5JZF0gPSBfdG87CgogICAgLy8gV2hlbiBjcmVhdGluZyBuZXcgcGVyc29ucyBfZnJvbSBpcyAweDAsIGJ1dCB3ZSBjYW4ndCBhY2NvdW50IHRoYXQgYWRkcmVzcy4KICAgIGlmIChfZnJvbSAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyc2hpcFRva2VuQ291bnRbX2Zyb21dLS07CiAgICAgIC8vIGNsZWFyIGFueSBwcmV2aW91c2x5IGFwcHJvdmVkIG93bmVyc2hpcCBleGNoYW5nZQogICAgICBkZWxldGUgcGVyc29uSW5kZXhUb0FwcHJvdmVkW190b2tlbklkXTsKICAgIH0KCiAgICAvLyBFbWl0IHRoZSB0cmFuc2ZlciBldmVudC4KICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICB9Cn0KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0='.
	

]
