Class {
	#name : #SRT80c6ffb6f7a23fb6af173ce13a8278c1426b8cbc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80c6ffb6f7a23fb6af173ce13a8278c1426b8cbc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgpwcmFnbWEgc29saWRpdHkgXjAuNC4xOTsKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgLy8gcHJlY2lzaW9uIG9mIGRpdmlzaW9uCiAgICB1aW50IGNvbnN0YW50IHByaXZhdGUgRElWX1BSRUNJU0lPTiA9IDM7CgogICAgLyoqCiAgICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAgICovCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBwZXJjZW50KHVpbnQgbnVtZXJhdG9yLCB1aW50IGRlbm9taW5hdG9yLCB1aW50IHByZWNpc2lvbikKICAgIGludGVybmFsCiAgICBwdXJlCiAgICByZXR1cm5zICh1aW50IHF1b3RpZW50KSB7CiAgICAgICAgLy8gY2F1dGlvbiwgY2hlY2sgc2FmZS10by1tdWx0aXBseSBoZXJlCiAgICAgICAgdWludCBfbnVtZXJhdG9yID0gbXVsKG51bWVyYXRvciwgMTAgKiogKHByZWNpc2lvbiArIDEpKTsKCiAgICAgICAgLy8gd2l0aCByb3VuZGluZyBvZiBsYXN0IGRpZ2l0CiAgICAgICAgdWludCBfcXVvdGllbnQgPSBhZGQoKF9udW1lcmF0b3IgLyBkZW5vbWluYXRvciksIDUpIC8gMTA7CiAgICAgICAgcmV0dXJuIChfcXVvdGllbnQpOwogICAgfQp9Cgpjb250cmFjdCBIb3RQb3RhdG8gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgZXZlbnQgR2FtZVN0YXJ0ZWQodWludCBpbmRleGVkIGdhbWVJZCwgYWRkcmVzcyBob3RQb3RhdG9Pd25lciwgdWludCBnYW1lU3RhcnQpOwogICAgZXZlbnQgR2FtZUVuZGVkKHVpbnQgaW5kZXhlZCBnYW1lSWQpOwogICAgZXZlbnQgSG90UG90YXRvUGFzc2VkKHVpbnQgaW5kZXhlZCBnYW1lSWQsIGFkZHJlc3MgcmVjZWl2ZXIpOwogICAgZXZlbnQgUGxheWVySm9pbmVkKHVpbnQgaW5kZXhlZCBnYW1lSWQsIGFkZHJlc3MgcGxheWVyLCB1aW50IHN0YWtlLCB1aW50IHRvdGFsU3Rha2UsIHVpbnQgcGxheWVycyk7CiAgICBldmVudCBQbGF5ZXJXaXRoZHJldyhhZGRyZXNzIGluZGV4ZWQgcGxheWVyKTsKICAgIGV2ZW50IE5ld01heFRpbWVIb2xkZXIodWludCBpbmRleGVkIGdhbWVJZCwgYWRkcmVzcyBtYXhUaW1lSG9sZGVyKTsKICAgIGV2ZW50IEFkZHJlc3NIZWxkRm9yKHVpbnQgaW5kZXhlZCBnYW1lSWQsIGFkZHJlc3MgcGxheWVyLCB1aW50IHRpbWVIZWxkKTsKCiAgICBzdHJ1Y3QgR2FtZSB7CiAgICAgICAgLy8gd2hldGhlciB0aGUgZ2FtZSBpcyBydW5uaW5nIGFuZCB0aGUgdGltZXIgaGFzIHN0YXJ0ZWQKICAgICAgICBib29sIHJ1bm5pbmc7CgogICAgICAgIC8vIGdhbWUgaGFzIGNvbXBsZXRlZCBpdCdzIHdob2xlIHJ1bgogICAgICAgIGJvb2wgZmluaXNoZWQ7CgogICAgICAgIC8vIHdobyBvd25zIHRoZSBob3QgcG90YXRvIGluIHRoZSBnYW1lCiAgICAgICAgYWRkcmVzcyBob3RQb3RhdG9Pd25lcjsKCiAgICAgICAgLy8gdGhlIHVuaXggdGltZXN0YW1wIG9mIHdoZW4gdGhlIGdhbWUgd2hlbiBzdGFydGVkCiAgICAgICAgdWludCBnYW1lU3RhcnQ7CgogICAgICAgIC8vIHBsYXllcnMgdG8gdGhlaXIgc3Rha2VzIChhIHN0YWtlID4wIGluZGljYXRlcyB0aGUgYWRkcmVzcyBpcyBwbGF5aW5nKQogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBzdGFrZXM7CgogICAgICAgIC8vIHRoZSB0b3RhbCBhbW91bnQgb2YgRXRoZXIgc3Rha2VkIG9uIHRoZSBnYW1lCiAgICAgICAgdWludCB0b3RhbFN0YWtlOwoKICAgICAgICAvLyBwbGF5ZXJzIGluIHRoZSBnYW1lCiAgICAgICAgdWludCBwbGF5ZXJzOwoKICAgICAgICAvLyB3aGV0aGVyIGFuIGFkZHJlc3MgaGFzIHdpdGhkcmF3ZWQgdGhlcmUgc3Rha2Ugb3Igbm90CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHdpdGhkcmF3YWxzOwoKICAgICAgICAvLyB0aGUgdGltZSB0aGUgYWRkcmVzc2VzIGhlbGQgdGhlIHBvdGF0byBmb3IgaW4gc2Vjb25kcwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBob2xkVGltZXM7CgogICAgICAgIC8vIHRoZSBibG9jayB0aGUgZ2FtZSB3YXMgY3JlYXRlZCBvbiAoaS5lLiB3aGVuIHBsYXllcnMgY291bGQgam9pbiBpdCkKICAgICAgICB1aW50IGJsb2NrQ3JlYXRlZDsKCiAgICAgICAgLy8gdGhlIHRpbWUgdGhlIGhvdCBwb3RhdG8gd2FzIHJlY2VpdmVkIGxhc3QKICAgICAgICB1aW50IGhvdFBvdGF0b1JlY2VpdmVUaW1lOwoKICAgICAgICAvLyB0aGUgYWRkcmVzcyB3aGljaCBoYXMgaGVsZCB0aGUgaG90IHBvdGF0byB0aGUgbG9uZ2VzdCBzbyBmYXIKICAgICAgICBhZGRyZXNzIG1heFRpbWVIb2xkZXI7CiAgICB9CgogICAgLy8gZmVlcyB0YWtlbiBwZXIgc3Rha2UgYXMgYSBwZXJjZW50IG9mIDEgZXRoZXIKICAgIHVpbnQgY29uc3RhbnQgcHJpdmF0ZSBGRUVfVEFLRSA9IDAuMDIgZXRoZXI7CgogICAgLy8gdGhlIGRlZ3JlZSBvZiBwcmVjaXNpb24gZm9yIGRpdmlzaW9uCiAgICB1aW50IGNvbnN0YW50IHByaXZhdGUgRElWX0RFR1JFRV9QUkVDSVNJT04gPSAzOwoKICAgIC8vIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBldGhlciB0byBlbnRlciB0aGUgZ2FtZQogICAgdWludCBjb25zdGFudCBwdWJsaWMgTUlOX1NUQUtFID0gMC4wMSBldGhlcjsKCiAgICAvLyB0aGUgbWluaW11bSBhbW91bnQgb2YgcGxheWVycyB0byBzdGFydCBhIGdhbWUKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIE1JTl9QTEFZRVJTID0gMzsKCiAgICAvLyBkdXJhdGlvbiBvZiBhIGdhbWUgaW4gc2Vjb25kcyAoMTAgbWlucykKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIEdBTUVfRFVSQVRJT04gPSA2MDA7CgogICAgLy8gd2hvIG93bnMvcHVibGlzaGVzIHRoZSBjb250cmFjdAogICAgYWRkcmVzcyBwcml2YXRlIGNvbnRyYWN0T3duZXI7CgogICAgLy8gdGhlIGFtb3VudCBvZiBmZWVzIGNvbGxlY3RlZAogICAgdWludCBwdWJsaWMgZmVlc1Rha2VuOwoKICAgIC8vIHRoZSBjdXJyZW50IGdhbWUgaWQKICAgIHVpbnQgcHVibGljIGN1cnJlbnRHYW1lSWQ7CgogICAgLy8gZ2FtZSBpZHMgdG8gZ2FtZXMKICAgIG1hcHBpbmcodWludCA9PiBHYW1lKSBwdWJsaWMgZ2FtZXM7CgogICAgbW9kaWZpZXIgZ2FtZVJ1bm5pbmcodWludCBnYW1lSWQpIHsKICAgICAgICByZXF1aXJlKGdhbWVzW2dhbWVJZF0ucnVubmluZyk7CgogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgZ2FtZVN0b3BwZWQodWludCBnYW1lSWQpIHsKICAgICAgICByZXF1aXJlKCFnYW1lc1tnYW1lSWRdLnJ1bm5pbmcpOwoKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGdhbWVGaW5pc2hlZCh1aW50IGdhbWVJZCkgewogICAgICAgIHJlcXVpcmUoZ2FtZXNbZ2FtZUlkXS5maW5pc2hlZCk7CgogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzVmFsdWUodWludCBhbW91bnQpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBhbW91bnQpOwoKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdEluR2FtZSh1aW50IGdhbWVJZCwgYWRkcmVzcyBwbGF5ZXIpIHsKICAgICAgICByZXF1aXJlKGdhbWVzW2dhbWVJZF0uc3Rha2VzW3BsYXllcl0gPT0gMCk7CgogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaW5HYW1lKHVpbnQgZ2FtZUlkLCBhZGRyZXNzIHBsYXllcikgewogICAgICAgIHJlcXVpcmUoZ2FtZXNbZ2FtZUlkXS5zdGFrZXNbcGxheWVyXSA+IDApOwoKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGVub3VnaFBsYXllcnModWludCBnYW1lSWQpIHsKICAgICAgICByZXF1aXJlKGdhbWVzW2dhbWVJZF0ucGxheWVycyA+PSBNSU5fUExBWUVSUyk7CgogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzSG90UG90YXRvKHVpbnQgZ2FtZUlkLCBhZGRyZXNzIHBsYXllcikgewogICAgICAgIHJlcXVpcmUoZ2FtZXNbZ2FtZUlkXS5ob3RQb3RhdG9Pd25lciA9PSBwbGF5ZXIpOwoKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdExvc3QodWludCBnYW1lSWQsIGFkZHJlc3MgcGxheWVyKSB7CiAgICAgICAgcmVxdWlyZShnYW1lc1tnYW1lSWRdLmhvdFBvdGF0b093bmVyICE9IHBsYXllciAmJiBnYW1lc1tnYW1lSWRdLm1heFRpbWVIb2xkZXIgIT0gcGxheWVyKTsKCiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBnYW1lVGVybWluYWJsZSh1aW50IGdhbWVJZCkgewogICAgICAgIHJlcXVpcmUoYmxvY2sudGltZXN0YW1wLnN1YihnYW1lc1tnYW1lSWRdLmdhbWVTdGFydCkgPj0gR0FNRV9EVVJBVElPTik7CgogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90V2l0aGRyZXcodWludCBnYW1lSWQpIHsKICAgICAgICByZXF1aXJlKCFnYW1lc1tnYW1lSWRdLndpdGhkcmF3YWxzW21zZy5zZW5kZXJdKTsKCiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5Q29udHJhY3RPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29udHJhY3RPd25lcik7CgogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gSG90UG90YXRvKCkKICAgIHB1YmxpYwogICAgcGF5YWJsZSB7CiAgICAgICAgY29udHJhY3RPd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgZ2FtZXNbMF0uYmxvY2tDcmVhdGVkID0gYmxvY2subnVtYmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGVudGVyR2FtZSgpCiAgICBwdWJsaWMKICAgIHBheWFibGUKICAgIGdhbWVTdG9wcGVkKGN1cnJlbnRHYW1lSWQpCiAgICBoYXNWYWx1ZShNSU5fU1RBS0UpCiAgICBub3RJbkdhbWUoY3VycmVudEdhbWVJZCwgbXNnLnNlbmRlcikgewogICAgICAgIEdhbWUgc3RvcmFnZSBnYW1lID0gZ2FtZXNbY3VycmVudEdhbWVJZF07CgogICAgICAgIHVpbnQgZmVlVGFrZSA9IG1zZy52YWx1ZS5tdWwoRkVFX1RBS0UpIC8gKDEgZXRoZXIpOwoKICAgICAgICBmZWVzVGFrZW4gPSBmZWVzVGFrZW4uYWRkKGZlZVRha2UpOwoKICAgICAgICBnYW1lLnN0YWtlc1ttc2cuc2VuZGVyXSA9IG1zZy52YWx1ZS5zdWIoZmVlVGFrZSk7CiAgICAgICAgZ2FtZS50b3RhbFN0YWtlID0gZ2FtZS50b3RhbFN0YWtlLmFkZChtc2cudmFsdWUuc3ViKGZlZVRha2UpKTsKICAgICAgICBnYW1lLnBsYXllcnMgPSBnYW1lLnBsYXllcnMuYWRkKDEpOwoKICAgICAgICBQbGF5ZXJKb2luZWQoY3VycmVudEdhbWVJZCwgbXNnLnNlbmRlciwgbXNnLnZhbHVlLnN1YihmZWVUYWtlKSwKICAgICAgICAgICAgZ2FtZS50b3RhbFN0YWtlLCBnYW1lLnBsYXllcnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0YXJ0R2FtZShhZGRyZXNzIHJlY2VpdmVyKQogICAgcHVibGljCiAgICBwYXlhYmxlCiAgICBnYW1lU3RvcHBlZChjdXJyZW50R2FtZUlkKQogICAgaW5HYW1lKGN1cnJlbnRHYW1lSWQsIG1zZy5zZW5kZXIpCiAgICBpbkdhbWUoY3VycmVudEdhbWVJZCwgcmVjZWl2ZXIpCiAgICBlbm91Z2hQbGF5ZXJzKGN1cnJlbnRHYW1lSWQpIHsKICAgICAgICBHYW1lIHN0b3JhZ2UgZ2FtZSA9IGdhbWVzW2N1cnJlbnRHYW1lSWRdOwoKICAgICAgICBnYW1lLnJ1bm5pbmcgPSB0cnVlOwogICAgICAgIGdhbWUuaG90UG90YXRvT3duZXIgPSByZWNlaXZlcjsKICAgICAgICBnYW1lLmhvdFBvdGF0b1JlY2VpdmVUaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGdhbWUuZ2FtZVN0YXJ0ID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGdhbWUubWF4VGltZUhvbGRlciA9IHJlY2VpdmVyOwoKICAgICAgICBHYW1lU3RhcnRlZChjdXJyZW50R2FtZUlkLCBnYW1lLmhvdFBvdGF0b093bmVyLCBnYW1lLmdhbWVTdGFydCk7CiAgICB9CgogICAgZnVuY3Rpb24gcGFzc0hvdFBvdGF0byhhZGRyZXNzIHJlY2VpdmVyKQogICAgcHVibGljCiAgICBwYXlhYmxlCiAgICBnYW1lUnVubmluZyhjdXJyZW50R2FtZUlkKQogICAgaGFzSG90UG90YXRvKGN1cnJlbnRHYW1lSWQsIG1zZy5zZW5kZXIpCiAgICBpbkdhbWUoY3VycmVudEdhbWVJZCwgcmVjZWl2ZXIpIHsKICAgICAgICBHYW1lIHN0b3JhZ2UgZ2FtZSA9IGdhbWVzW2N1cnJlbnRHYW1lSWRdOwoKICAgICAgICBnYW1lLmhvdFBvdGF0b093bmVyID0gcmVjZWl2ZXI7CgogICAgICAgIHVpbnQgdGltZUhlbGQgPSBibG9jay50aW1lc3RhbXAuc3ViKGdhbWUuaG90UG90YXRvUmVjZWl2ZVRpbWUpOwogICAgICAgIGdhbWUuaG9sZFRpbWVzW21zZy5zZW5kZXJdID0gZ2FtZS5ob2xkVGltZXNbbXNnLnNlbmRlcl0uYWRkKHRpbWVIZWxkKTsKICAgICAgICBBZGRyZXNzSGVsZEZvcihjdXJyZW50R2FtZUlkLCBtc2cuc2VuZGVyLCBnYW1lLmhvbGRUaW1lc1ttc2cuc2VuZGVyXSk7CgogICAgICAgIGlmIChnYW1lLmhvbGRUaW1lc1ttc2cuc2VuZGVyXSA+IGdhbWUuaG9sZFRpbWVzW2dhbWUubWF4VGltZUhvbGRlcl0pIHsKICAgICAgICAgICAgZ2FtZS5tYXhUaW1lSG9sZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgTmV3TWF4VGltZUhvbGRlcihjdXJyZW50R2FtZUlkLCBnYW1lLm1heFRpbWVIb2xkZXIpOwogICAgICAgIH0KCiAgICAgICAgZ2FtZS5ob3RQb3RhdG9SZWNlaXZlVGltZSA9IGJsb2NrLnRpbWVzdGFtcDsKCiAgICAgICAgSG90UG90YXRvUGFzc2VkKGN1cnJlbnRHYW1lSWQsIHJlY2VpdmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBlbmRHYW1lKCkKICAgIHB1YmxpYwogICAgcGF5YWJsZQogICAgZ2FtZVJ1bm5pbmcoY3VycmVudEdhbWVJZCkKICAgIGluR2FtZShjdXJyZW50R2FtZUlkLCBtc2cuc2VuZGVyKQogICAgZ2FtZVRlcm1pbmFibGUoY3VycmVudEdhbWVJZCkgewogICAgICAgIEdhbWUgc3RvcmFnZSBnYW1lID0gZ2FtZXNbY3VycmVudEdhbWVJZF07CgogICAgICAgIGdhbWUucnVubmluZyA9IGZhbHNlOwogICAgICAgIGdhbWUuZmluaXNoZWQgPSB0cnVlOwoKICAgICAgICB1aW50IHRpbWVIZWxkID0gYmxvY2sudGltZXN0YW1wLnN1YihnYW1lLmhvdFBvdGF0b1JlY2VpdmVUaW1lKTsKICAgICAgICBnYW1lLmhvbGRUaW1lc1tnYW1lLmhvdFBvdGF0b093bmVyXSA9IGdhbWUuaG9sZFRpbWVzW2dhbWUuaG90UG90YXRvT3duZXJdLmFkZCh0aW1lSGVsZCk7CiAgICAgICAgQWRkcmVzc0hlbGRGb3IoY3VycmVudEdhbWVJZCwgZ2FtZS5ob3RQb3RhdG9Pd25lciwgZ2FtZS5ob2xkVGltZXNbbXNnLnNlbmRlcl0pOwoKICAgICAgICBpZiAoZ2FtZS5ob2xkVGltZXNbZ2FtZS5ob3RQb3RhdG9Pd25lcl0gPiBnYW1lLmhvbGRUaW1lc1tnYW1lLm1heFRpbWVIb2xkZXJdKSB7CiAgICAgICAgICAgIGdhbWUubWF4VGltZUhvbGRlciA9IGdhbWUuaG90UG90YXRvT3duZXI7CiAgICAgICAgICAgIE5ld01heFRpbWVIb2xkZXIoY3VycmVudEdhbWVJZCwgZ2FtZS5tYXhUaW1lSG9sZGVyKTsKICAgICAgICB9CgogICAgICAgIEdhbWVFbmRlZChjdXJyZW50R2FtZUlkKTsKCiAgICAgICAgY3VycmVudEdhbWVJZCA9IGN1cnJlbnRHYW1lSWQuYWRkKDEpOwogICAgICAgIGdhbWVzW2N1cnJlbnRHYW1lSWRdLmJsb2NrQ3JlYXRlZCA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IGdhbWVJZCkKICAgIHB1YmxpYwogICAgcGF5YWJsZQogICAgZ2FtZUZpbmlzaGVkKGdhbWVJZCkKICAgIGluR2FtZShnYW1lSWQsIG1zZy5zZW5kZXIpCiAgICBub3RMb3N0KGdhbWVJZCwgbXNnLnNlbmRlcikKICAgIG5vdFdpdGhkcmV3KGdhbWVJZCkgewogICAgICAgIEdhbWUgc3RvcmFnZSBnYW1lID0gZ2FtZXNbZ2FtZUlkXTsKCiAgICAgICAgdWludCBiYW5pc2hlZFN0YWtlID0gMDsKCiAgICAgICAgaWYgKGdhbWUuaG90UG90YXRvT3duZXIgPT0gZ2FtZS5tYXhUaW1lSG9sZGVyKSB7CiAgICAgICAgICAgIGJhbmlzaGVkU3Rha2UgPSBnYW1lLnN0YWtlc1tnYW1lLmhvdFBvdGF0b093bmVyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBiYW5pc2hlZFN0YWtlID0gZ2FtZS5zdGFrZXNbZ2FtZS5ob3RQb3RhdG9Pd25lcl0uYWRkKGdhbWUuc3Rha2VzW2dhbWUubWF4VGltZUhvbGRlcl0pOwogICAgICAgIH0KCiAgICAgICAgdWludCBjb2xsZWN0aXZlU3Rha2UgPSBnYW1lLnRvdGFsU3Rha2Uuc3ViKGJhbmlzaGVkU3Rha2UpOwoKICAgICAgICB1aW50IHN0YWtlID0gZ2FtZS5zdGFrZXNbbXNnLnNlbmRlcl07CgogICAgICAgIHVpbnQgcGVyY2VudGFnZUNsYWltID0gU2FmZU1hdGgucGVyY2VudChzdGFrZSwgY29sbGVjdGl2ZVN0YWtlLCBESVZfREVHUkVFX1BSRUNJU0lPTik7CgogICAgICAgIHVpbnQgY2xhaW0gPSBzdGFrZS5hZGQoYmFuaXNoZWRTdGFrZS5tdWwocGVyY2VudGFnZUNsYWltKSAvICgxMCAqKiBESVZfREVHUkVFX1BSRUNJU0lPTikpOwoKICAgICAgICBnYW1lLndpdGhkcmF3YWxzW21zZy5zZW5kZXJdID0gdHJ1ZTsKCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihjbGFpbSk7CgogICAgICAgIFBsYXllcldpdGhkcmV3KG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RmVlcygpCiAgICBwdWJsaWMKICAgIHBheWFibGUKICAgIG9ubHlDb250cmFjdE93bmVyIHsKICAgICAgICB1aW50IGZlZXNUb1Rha2UgPSBmZWVzVGFrZW47CiAgICAgICAgZmVlc1Rha2VuID0gMDsKICAgICAgICBjb250cmFjdE93bmVyLnRyYW5zZmVyKGZlZXNUb1Rha2UpOwogICAgfQoKICAgIC8vIEdFVFRFUlMKICAgIGZ1bmN0aW9uIGdldEdhbWUodWludCBnYW1lSWQpCiAgICBwdWJsaWMKICAgIGNvbnN0YW50CiAgICByZXR1cm5zIChib29sLCBib29sLCBhZGRyZXNzLCB1aW50LCB1aW50LCB1aW50LCB1aW50LCBhZGRyZXNzLCB1aW50KSB7CiAgICAgICAgR2FtZSBzdG9yYWdlIGdhbWUgPSBnYW1lc1tnYW1lSWRdOwogICAgICAgIHJldHVybiAoCiAgICAgICAgZ2FtZS5ydW5uaW5nLAogICAgICAgIGdhbWUuZmluaXNoZWQsCiAgICAgICAgZ2FtZS5ob3RQb3RhdG9Pd25lciwKICAgICAgICBnYW1lLmdhbWVTdGFydCwKICAgICAgICBnYW1lLnRvdGFsU3Rha2UsCiAgICAgICAgZ2FtZS5wbGF5ZXJzLAogICAgICAgIGdhbWUuYmxvY2tDcmVhdGVkLAogICAgICAgIGdhbWUubWF4VGltZUhvbGRlciwKICAgICAgICBjdXJyZW50R2FtZUlkKTsKICAgIH0KfQ=='.
	

]
