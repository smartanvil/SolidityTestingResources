Class {
	#name : #SRT1e77b10ead7ae84bc54394bd33821e5c7b74fbb8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e77b10ead7ae84bc54394bd33821e5c7b74fbb8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CiAKY29udHJhY3QgVGVzdGljbyBpcyBFUkMyMEludGVyZmFjZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJUTUIiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlRlc3QgSUNPIjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7CiAgICB1aW50MjU2IGluaXRpYWxTdXBwbHkgPSAyNTAwMDAwMDAwMDAwMDAwOwogICAgCiAgICB1aW50MjU2IHB1YmxpYyBzaGFyZWhvbGRlcnNCYWxhbmNlOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTaGFyZWhvbGRlcnM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHJlZ2lzdGVyZWRTaGFyZWhvbGRlcnM7CiAgICBtYXBwaW5nICh1aW50ID0+IGFkZHJlc3MpIHB1YmxpYyBzaGFyZWhvbGRlcnM7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2VkOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGlzVG9rZW4oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCB3ZUFyZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICAgICAgcmVxdWlyZShtc2cuZGF0YS5sZW5ndGggPj0gc2l6ZSArIDQpOwogICAgICAgIF87CiAgICB9CiAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwogICAgCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBmdW5jdGlvbiBUZXN0aWNvKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBpbml0aWFsU3VwcGx5OwogICAgICAgIHRvdGFsU3VwcGx5PWluaXRpYWxTdXBwbHk7CiAgICAgICAgdG90YWxTaGFyZWhvbGRlcnMgPSAwOwoJCXNoYXJlaG9sZGVyc0JhbGFuY2UgPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICAKICAgIC8vLyBAbm90aWNlIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20geW91ciBhY2NvdW50CiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYoX3RvICE9IDB4MCAmJiBfdmFsdWUgPiAwICYmIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkKICAgICAgICB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lciAmJiBfdG8gIT0gb3duZXIpIHsKICAgICAgICAgICAgICAgIHNoYXJlaG9sZGVyc0JhbGFuY2UgKz0gX3ZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyICYmIF90byA9PSBvd25lcikgewogICAgICAgICAgICAgICAgc2hhcmVob2xkZXJzQmFsYW5jZSAtPSBfdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG93bmVyICE9IF90bykgewogICAgICAgICAgICAgICAgaW5zZXJ0U2hhcmVob2xkZXIoX3RvKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgaW4gYmVoYWxmIG9mIGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKF9mcm9tID09IG93bmVyICYmIF90byAhPSBvd25lcikgewogICAgICAgICAgICAgICAgc2hhcmVob2xkZXJzQmFsYW5jZSArPSBfdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKF9mcm9tICE9IG93bmVyICYmIF90byA9PSBvd25lcikgewogICAgICAgICAgICAgICAgc2hhcmVob2xkZXJzQmFsYW5jZSAtPSBfdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG93bmVyICE9IF90bykgewogICAgICAgICAgICAgICAgaW5zZXJ0U2hhcmVob2xkZXIoX3RvKTsgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSAKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZW1vdmUgYF92YWx1ZWAgdG9rZW5zIGZyb20gdGhlIHN5c3RlbSBpcnJldmVyc2libHkKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUgKGJhbGFuY2VzW21zZy5zZW5kZXJdID4gX3ZhbHVlKTsgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZXMgdG90YWxTdXBwbHkKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGluc2VydFNoYXJlaG9sZGVyKGFkZHJlc3MgX3NoYXJlaG9sZGVyKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHJlZ2lzdGVyZWRTaGFyZWhvbGRlcnNbX3NoYXJlaG9sZGVyXSA9PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b3RhbFNoYXJlaG9sZGVycyArPSAxOwogICAgICAgICAgICBzaGFyZWhvbGRlcnNbdG90YWxTaGFyZWhvbGRlcnNdID0gX3NoYXJlaG9sZGVyOwogICAgICAgICAgICByZWdpc3RlcmVkU2hhcmVob2xkZXJzW19zaGFyZWhvbGRlcl0gPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzaGFyZWhvbGRlcnNCYWxhbmNlKCkgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2hhcmVob2xkZXJzQmFsYW5jZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG90YWxTaGFyZWhvbGRlcnMoKSBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b3RhbFNoYXJlaG9sZGVyczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0U2hhcmVob2xkZXIodWludDI1NiBfaW5kZXgpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHNoYXJlaG9sZGVyc1tfaW5kZXhdOwogICAgfQp9'.
	

]
