Class {
	#name : #SRT2d4c0a94ecc29513972b302ea143aa6e0412fcde,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2d4c0a94ecc29513972b302ea143aa6e0412fcde >> base64 [
	^ ''.
	

]
